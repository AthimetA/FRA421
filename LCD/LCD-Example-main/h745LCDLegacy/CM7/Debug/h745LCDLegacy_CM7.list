
h745LCDLegacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bab8  0800bab8  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800bab8  0800bab8  0001bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bac0  0800bac0  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac0  0800bac0  0001bac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800bac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800bb4c  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800bbac  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000ca08  24000144  0800bc0c  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400cb4c  0800bc0c  0002cb4c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001edaf  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003454  00000000  00000000  0003ef21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001388  00000000  00000000  00042378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001240  00000000  00000000  00043700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bea4  00000000  00000000  00044940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bed4  00000000  00000000  000807e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00185505  00000000  00000000  0009c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00221bbd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000542c  00000000  00000000  00221c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000144 	.word	0x24000144
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ba60 	.word	0x0800ba60

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000148 	.word	0x24000148
 80002d4:	0800ba60 	.word	0x0800ba60

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <SystemInit+0x104>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <SystemInit+0x104>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <SystemInit+0x104>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <SystemInit+0x104>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <SystemInit+0x108>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <SystemInit+0x108>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <SystemInit+0x10c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <SystemInit+0x10c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <SystemInit+0x10c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <SystemInit+0x10c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492e      	ldr	r1, [pc, #184]	; (80006e8 <SystemInit+0x10c>)
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemInit+0x110>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemInit+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <SystemInit+0x108>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x10c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemInit+0x10c>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemInit+0x114>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemInit+0x10c>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x118>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x10c>)
 8000672:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemInit+0x11c>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x10c>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <SystemInit+0x11c>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x10c>)
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <SystemInit+0x11c>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <SystemInit+0x10c>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x10c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <SystemInit+0x10c>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <SystemInit+0x10c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <SystemInit+0x120>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <SystemInit+0x120>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x124>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x128>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x12c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x130>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SystemInit+0x104>)
 80006d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <BMPDecoder>:
} Convert8_32;

#define IMG_W 128
#define IMG_H 128
static stateBMP State = 0;
void BMPDecoder(uint8_t dataIn, uint8_t *array) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]

	static Convert8_32 size, StartPoint, HeaderSize, PW, PH, BPS;
	static uint32_t Substate, offset, imageSize;

	switch (State) {
 800071c:	4b98      	ldr	r3, [pc, #608]	; (8000980 <BMPDecoder+0x270>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0c      	cmp	r3, #12
 8000722:	f200 81ac 	bhi.w	8000a7e <BMPDecoder+0x36e>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <BMPDecoder+0x1c>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000761 	.word	0x08000761
 8000730:	0800077b 	.word	0x0800077b
 8000734:	08000797 	.word	0x08000797
 8000738:	080007c3 	.word	0x080007c3
 800073c:	080007e5 	.word	0x080007e5
 8000740:	08000811 	.word	0x08000811
 8000744:	0800084d 	.word	0x0800084d
 8000748:	08000879 	.word	0x08000879
 800074c:	080008a5 	.word	0x080008a5
 8000750:	080008c7 	.word	0x080008c7
 8000754:	080008f3 	.word	0x080008f3
 8000758:	08000915 	.word	0x08000915
 800075c:	08000a3f 	.word	0x08000a3f
	case BMP_idle:

		if (dataIn == 0x42) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b42      	cmp	r3, #66	; 0x42
 8000764:	d102      	bne.n	800076c <BMPDecoder+0x5c>
			State = BMP_Header_2;
 8000766:	4b86      	ldr	r3, [pc, #536]	; (8000980 <BMPDecoder+0x270>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]

		}
		Substate = 0;
 800076c:	4b85      	ldr	r3, [pc, #532]	; (8000984 <BMPDecoder+0x274>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
		offset = 0;
 8000772:	4b85      	ldr	r3, [pc, #532]	; (8000988 <BMPDecoder+0x278>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
		break;
 8000778:	e181      	b.n	8000a7e <BMPDecoder+0x36e>

	case BMP_Header_2:
		if (dataIn == 0x4D) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b4d      	cmp	r3, #77	; 0x4d
 800077e:	d106      	bne.n	800078e <BMPDecoder+0x7e>
			State = BMP_Size_4;
 8000780:	4b7f      	ldr	r3, [pc, #508]	; (8000980 <BMPDecoder+0x270>)
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000786:	4b7f      	ldr	r3, [pc, #508]	; (8000984 <BMPDecoder+0x274>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
		} else {
			State = BMP_idle;
		}
		break;
 800078c:	e177      	b.n	8000a7e <BMPDecoder+0x36e>
			State = BMP_idle;
 800078e:	4b7c      	ldr	r3, [pc, #496]	; (8000980 <BMPDecoder+0x270>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		break;
 8000794:	e173      	b.n	8000a7e <BMPDecoder+0x36e>
	case BMP_Size_4:
		size.U8[Substate] = dataIn;
 8000796:	4b7b      	ldr	r3, [pc, #492]	; (8000984 <BMPDecoder+0x274>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	497c      	ldr	r1, [pc, #496]	; (800098c <BMPDecoder+0x27c>)
 800079c:	79fa      	ldrb	r2, [r7, #7]
 800079e:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007a0:	4b78      	ldr	r3, [pc, #480]	; (8000984 <BMPDecoder+0x274>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a77      	ldr	r2, [pc, #476]	; (8000984 <BMPDecoder+0x274>)
 80007a8:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007aa:	4b76      	ldr	r3, [pc, #472]	; (8000984 <BMPDecoder+0x274>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	f040 8150 	bne.w	8000a54 <BMPDecoder+0x344>
			State = BMP_Reserved0_4;
 80007b4:	4b72      	ldr	r3, [pc, #456]	; (8000980 <BMPDecoder+0x270>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007ba:	4b72      	ldr	r3, [pc, #456]	; (8000984 <BMPDecoder+0x274>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
		}
		break;
 80007c0:	e148      	b.n	8000a54 <BMPDecoder+0x344>
	case BMP_Reserved0_4:
		Substate++;
 80007c2:	4b70      	ldr	r3, [pc, #448]	; (8000984 <BMPDecoder+0x274>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a6e      	ldr	r2, [pc, #440]	; (8000984 <BMPDecoder+0x274>)
 80007ca:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007cc:	4b6d      	ldr	r3, [pc, #436]	; (8000984 <BMPDecoder+0x274>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	f040 8141 	bne.w	8000a58 <BMPDecoder+0x348>
			State = BMP_Imagestartpoint_4;
 80007d6:	4b6a      	ldr	r3, [pc, #424]	; (8000980 <BMPDecoder+0x270>)
 80007d8:	2204      	movs	r2, #4
 80007da:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80007dc:	4b69      	ldr	r3, [pc, #420]	; (8000984 <BMPDecoder+0x274>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
		}
		break;
 80007e2:	e139      	b.n	8000a58 <BMPDecoder+0x348>

	case BMP_Imagestartpoint_4:
		StartPoint.U8[Substate] = dataIn;
 80007e4:	4b67      	ldr	r3, [pc, #412]	; (8000984 <BMPDecoder+0x274>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4969      	ldr	r1, [pc, #420]	; (8000990 <BMPDecoder+0x280>)
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80007ee:	4b65      	ldr	r3, [pc, #404]	; (8000984 <BMPDecoder+0x274>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a63      	ldr	r2, [pc, #396]	; (8000984 <BMPDecoder+0x274>)
 80007f6:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80007f8:	4b62      	ldr	r3, [pc, #392]	; (8000984 <BMPDecoder+0x274>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	f040 812d 	bne.w	8000a5c <BMPDecoder+0x34c>
			State = BMP_SizeHeader_4;
 8000802:	4b5f      	ldr	r3, [pc, #380]	; (8000980 <BMPDecoder+0x270>)
 8000804:	2205      	movs	r2, #5
 8000806:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000808:	4b5e      	ldr	r3, [pc, #376]	; (8000984 <BMPDecoder+0x274>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
		}
		break;
 800080e:	e125      	b.n	8000a5c <BMPDecoder+0x34c>

	case BMP_SizeHeader_4:
		HeaderSize.U8[Substate] = dataIn;
 8000810:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <BMPDecoder+0x274>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	495f      	ldr	r1, [pc, #380]	; (8000994 <BMPDecoder+0x284>)
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	54ca      	strb	r2, [r1, r3]
		Substate++;
 800081a:	4b5a      	ldr	r3, [pc, #360]	; (8000984 <BMPDecoder+0x274>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a58      	ldr	r2, [pc, #352]	; (8000984 <BMPDecoder+0x274>)
 8000822:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000824:	4b57      	ldr	r3, [pc, #348]	; (8000984 <BMPDecoder+0x274>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b04      	cmp	r3, #4
 800082a:	f040 8119 	bne.w	8000a60 <BMPDecoder+0x350>
			if (HeaderSize.U32 == 40) {
 800082e:	4b59      	ldr	r3, [pc, #356]	; (8000994 <BMPDecoder+0x284>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b28      	cmp	r3, #40	; 0x28
 8000834:	d106      	bne.n	8000844 <BMPDecoder+0x134>
				State = BMP_PicWidth_4;
 8000836:	4b52      	ldr	r3, [pc, #328]	; (8000980 <BMPDecoder+0x270>)
 8000838:	2206      	movs	r2, #6
 800083a:	701a      	strb	r2, [r3, #0]
				Substate = 0;
 800083c:	4b51      	ldr	r3, [pc, #324]	; (8000984 <BMPDecoder+0x274>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
			} else {
				State = BMP_idle;
			}
		}
		break;
 8000842:	e10d      	b.n	8000a60 <BMPDecoder+0x350>
				State = BMP_idle;
 8000844:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <BMPDecoder+0x270>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		break;
 800084a:	e109      	b.n	8000a60 <BMPDecoder+0x350>
	case BMP_PicWidth_4:
		PW.U8[Substate] = dataIn;
 800084c:	4b4d      	ldr	r3, [pc, #308]	; (8000984 <BMPDecoder+0x274>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4951      	ldr	r1, [pc, #324]	; (8000998 <BMPDecoder+0x288>)
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <BMPDecoder+0x274>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a49      	ldr	r2, [pc, #292]	; (8000984 <BMPDecoder+0x274>)
 800085e:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 8000860:	4b48      	ldr	r3, [pc, #288]	; (8000984 <BMPDecoder+0x274>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b04      	cmp	r3, #4
 8000866:	f040 80fd 	bne.w	8000a64 <BMPDecoder+0x354>
			State = BMP_PicHeight_4;
 800086a:	4b45      	ldr	r3, [pc, #276]	; (8000980 <BMPDecoder+0x270>)
 800086c:	2207      	movs	r2, #7
 800086e:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 8000870:	4b44      	ldr	r3, [pc, #272]	; (8000984 <BMPDecoder+0x274>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
		}
		break;
 8000876:	e0f5      	b.n	8000a64 <BMPDecoder+0x354>
	case BMP_PicHeight_4:
		PH.U8[Substate] = dataIn;
 8000878:	4b42      	ldr	r3, [pc, #264]	; (8000984 <BMPDecoder+0x274>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4947      	ldr	r1, [pc, #284]	; (800099c <BMPDecoder+0x28c>)
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	54ca      	strb	r2, [r1, r3]
		Substate++;
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <BMPDecoder+0x274>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a3e      	ldr	r2, [pc, #248]	; (8000984 <BMPDecoder+0x274>)
 800088a:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 800088c:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <BMPDecoder+0x274>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b04      	cmp	r3, #4
 8000892:	f040 80e9 	bne.w	8000a68 <BMPDecoder+0x358>
			State = BMP_ColorPlanes_2;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <BMPDecoder+0x270>)
 8000898:	2208      	movs	r2, #8
 800089a:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <BMPDecoder+0x274>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		}
		break;
 80008a2:	e0e1      	b.n	8000a68 <BMPDecoder+0x358>
	case BMP_ColorPlanes_2:

		Substate++;
 80008a4:	4b37      	ldr	r3, [pc, #220]	; (8000984 <BMPDecoder+0x274>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a36      	ldr	r2, [pc, #216]	; (8000984 <BMPDecoder+0x274>)
 80008ac:	6013      	str	r3, [r2, #0]
		if (Substate == 2) {
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <BMPDecoder+0x274>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f040 80da 	bne.w	8000a6c <BMPDecoder+0x35c>
			State = BMP_BitPerPixel_2;
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <BMPDecoder+0x270>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008be:	4b31      	ldr	r3, [pc, #196]	; (8000984 <BMPDecoder+0x274>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
		}
		break;
 80008c4:	e0d2      	b.n	8000a6c <BMPDecoder+0x35c>
	case BMP_BitPerPixel_2:
		BPS.U8[Substate] = dataIn;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <BMPDecoder+0x274>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4935      	ldr	r1, [pc, #212]	; (80009a0 <BMPDecoder+0x290>)
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	54ca      	strb	r2, [r1, r3]
		Substate++;
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <BMPDecoder+0x274>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <BMPDecoder+0x274>)
 80008d8:	6013      	str	r3, [r2, #0]
		if (Substate == 4) {
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <BMPDecoder+0x274>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	f040 80c6 	bne.w	8000a70 <BMPDecoder+0x360>
			State = BMP_Notused1_n;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <BMPDecoder+0x270>)
 80008e6:	220a      	movs	r2, #10
 80008e8:	701a      	strb	r2, [r3, #0]
			Substate = 0;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <BMPDecoder+0x274>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
		}
		break;
 80008f0:	e0be      	b.n	8000a70 <BMPDecoder+0x360>
	case BMP_Notused1_n:
		if (offset == StartPoint.U32) {
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <BMPDecoder+0x280>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <BMPDecoder+0x278>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	f040 80ba 	bne.w	8000a74 <BMPDecoder+0x364>
			State = BMP_Pixeldata_n;
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <BMPDecoder+0x270>)
 8000902:	220b      	movs	r2, #11
 8000904:	701a      	strb	r2, [r3, #0]
			array[0] = dataIn;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	701a      	strb	r2, [r3, #0]
			Substate = 1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <BMPDecoder+0x274>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
		}
		break;
 8000912:	e0af      	b.n	8000a74 <BMPDecoder+0x364>
	case BMP_Pixeldata_n:
		if ((Substate / (IMG_W * 3)) < PH.U32) {
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <BMPDecoder+0x274>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <BMPDecoder+0x294>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0a1a      	lsrs	r2, r3, #8
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <BMPDecoder+0x28c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d268      	bcs.n	80009fa <BMPDecoder+0x2ea>

			if ((Substate % (IMG_W * 3)) < (PW.U32 * 3)) {
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <BMPDecoder+0x274>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <BMPDecoder+0x294>)
 800092e:	fba3 2301 	umull	r2, r3, r3, r1
 8000932:	0a1a      	lsrs	r2, r3, #8
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	1aca      	subs	r2, r1, r3
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <BMPDecoder+0x288>)
 8000940:	6819      	ldr	r1, [r3, #0]
 8000942:	460b      	mov	r3, r1
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	440b      	add	r3, r1
 8000948:	429a      	cmp	r2, r3
 800094a:	d209      	bcs.n	8000960 <BMPDecoder+0x250>
				array[Substate++] = dataIn;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <BMPDecoder+0x274>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <BMPDecoder+0x274>)
 8000954:	600a      	str	r2, [r1, #0]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e054      	b.n	8000a0a <BMPDecoder+0x2fa>
			}
			else if(((Substate) % 4))
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <BMPDecoder+0x274>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d026      	beq.n	80009ba <BMPDecoder+0x2aa>
			{
				array[Substate++] = dataIn;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <BMPDecoder+0x274>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	4904      	ldr	r1, [pc, #16]	; (8000984 <BMPDecoder+0x274>)
 8000974:	600a      	str	r2, [r1, #0]
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	4413      	add	r3, r2
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e044      	b.n	8000a0a <BMPDecoder+0x2fa>
 8000980:	24000160 	.word	0x24000160
 8000984:	24000164 	.word	0x24000164
 8000988:	24000168 	.word	0x24000168
 800098c:	2400016c 	.word	0x2400016c
 8000990:	24000170 	.word	0x24000170
 8000994:	24000174 	.word	0x24000174
 8000998:	24000178 	.word	0x24000178
 800099c:	2400017c 	.word	0x2400017c
 80009a0:	24000180 	.word	0x24000180
 80009a4:	aaaaaaab 	.word	0xaaaaaaab
			}
			else
			{
				while ((Substate % (IMG_W * 3)) != 0) {
					array[Substate++] = 0; 	//fill blankdata with black
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <BMPDecoder+0x384>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	4939      	ldr	r1, [pc, #228]	; (8000a94 <BMPDecoder+0x384>)
 80009b0:	600a      	str	r2, [r1, #0]
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
				while ((Substate % (IMG_W * 3)) != 0) {
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <BMPDecoder+0x384>)
 80009bc:	6819      	ldr	r1, [r3, #0]
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <BMPDecoder+0x388>)
 80009c0:	fba3 2301 	umull	r2, r3, r3, r1
 80009c4:	0a1a      	lsrs	r2, r3, #8
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	01db      	lsls	r3, r3, #7
 80009ce:	1aca      	subs	r2, r1, r3
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1e9      	bne.n	80009a8 <BMPDecoder+0x298>
				}
				array[Substate++] = dataIn;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <BMPDecoder+0x384>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	492e      	ldr	r1, [pc, #184]	; (8000a94 <BMPDecoder+0x384>)
 80009dc:	600a      	str	r2, [r1, #0]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	4413      	add	r3, r2
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e010      	b.n	8000a0a <BMPDecoder+0x2fa>
			}
		} else {
			while (Substate / (IMG_W * 3) < IMG_H) {
				array[Substate++] = 0; 	//fill blankdata with black
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <BMPDecoder+0x384>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	4929      	ldr	r1, [pc, #164]	; (8000a94 <BMPDecoder+0x384>)
 80009f0:	600a      	str	r2, [r1, #0]
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
			while (Substate / (IMG_W * 3) < IMG_H) {
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <BMPDecoder+0x384>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a02:	d3f1      	bcc.n	80009e8 <BMPDecoder+0x2d8>
			}

			State = BMP_Notused2_n;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <BMPDecoder+0x38c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	701a      	strb	r2, [r3, #0]

		}
		if (offset >= size.U32-1) {
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <BMPDecoder+0x390>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <BMPDecoder+0x394>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d82f      	bhi.n	8000a78 <BMPDecoder+0x368>
							State = BMP_idle;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <BMPDecoder+0x38c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a1e:	e008      	b.n	8000a32 <BMPDecoder+0x322>
										array[Substate++] = 0; 	//fill blankdata with black
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <BMPDecoder+0x384>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	491b      	ldr	r1, [pc, #108]	; (8000a94 <BMPDecoder+0x384>)
 8000a28:	600a      	str	r2, [r1, #0]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
							while (Substate / (IMG_W * 3) < IMG_H) {
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <BMPDecoder+0x384>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000a3a:	d3f1      	bcc.n	8000a20 <BMPDecoder+0x310>
									}
						}
		break;
 8000a3c:	e01c      	b.n	8000a78 <BMPDecoder+0x368>
	case BMP_Notused2_n:
		if (offset >= size.U32-1) {
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <BMPDecoder+0x390>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <BMPDecoder+0x394>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d817      	bhi.n	8000a7c <BMPDecoder+0x36c>
			State = BMP_idle;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <BMPDecoder+0x38c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000a52:	e013      	b.n	8000a7c <BMPDecoder+0x36c>
		break;
 8000a54:	bf00      	nop
 8000a56:	e012      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a58:	bf00      	nop
 8000a5a:	e010      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a5c:	bf00      	nop
 8000a5e:	e00e      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a60:	bf00      	nop
 8000a62:	e00c      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a64:	bf00      	nop
 8000a66:	e00a      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e008      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e006      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a70:	bf00      	nop
 8000a72:	e004      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a74:	bf00      	nop
 8000a76:	e002      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a78:	bf00      	nop
 8000a7a:	e000      	b.n	8000a7e <BMPDecoder+0x36e>
		break;
 8000a7c:	bf00      	nop

	}
	offset++;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <BMPDecoder+0x394>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <BMPDecoder+0x394>)
 8000a86:	6013      	str	r3, [r2, #0]

}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	24000164 	.word	0x24000164
 8000a98:	aaaaaaab 	.word	0xaaaaaaab
 8000a9c:	24000160 	.word	0x24000160
 8000aa0:	2400016c 	.word	0x2400016c
 8000aa4:	24000168 	.word	0x24000168

08000aa8 <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6858      	ldr	r0, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	f004 ffd9 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f001 fa66 	bl	8001f94 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6858      	ldr	r0, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f004 ffcd 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6898      	ldr	r0, [r3, #8]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f004 ffc4 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f001 fa51 	bl	8001f94 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6898      	ldr	r0, [r3, #8]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	f004 ffb8 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68d8      	ldr	r0, [r3, #12]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	f004 ffaf 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4938      	ldr	r1, [pc, #224]	; (8000c00 <LCD_init+0x158>)
 8000b20:	f007 fdca 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68d8      	ldr	r0, [r3, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4619      	mov	r1, r3
 8000b32:	f004 ff9f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4931      	ldr	r1, [pc, #196]	; (8000c04 <LCD_init+0x15c>)
 8000b40:	f007 fdba 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68d8      	ldr	r0, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	f004 ff8f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	492a      	ldr	r1, [pc, #168]	; (8000c08 <LCD_init+0x160>)
 8000b60:	f007 fdaa 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68d8      	ldr	r0, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4619      	mov	r1, r3
 8000b72:	f004 ff7f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	4923      	ldr	r1, [pc, #140]	; (8000c0c <LCD_init+0x164>)
 8000b80:	f007 fd9a 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68d8      	ldr	r0, [r3, #12]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4619      	mov	r1, r3
 8000b92:	f004 ff6f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	491c      	ldr	r1, [pc, #112]	; (8000c10 <LCD_init+0x168>)
 8000ba0:	f007 fd8a 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68d8      	ldr	r0, [r3, #12]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f004 ff5f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	4915      	ldr	r1, [pc, #84]	; (8000c14 <LCD_init+0x16c>)
 8000bc0:	f007 fd7a 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68d8      	ldr	r0, [r3, #12]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f004 ff4f 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	2201      	movs	r2, #1
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LCD_init+0x170>)
 8000be0:	f007 fd6a 	bl	80086b8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68d8      	ldr	r0, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f004 ff3f 	bl	8005a74 <HAL_GPIO_WritePin>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000008 	.word	0x24000008
 8000c04:	2400000c 	.word	0x2400000c
 8000c08:	2400000d 	.word	0x2400000d
 8000c0c:	2400000e 	.word	0x2400000e
 8000c10:	24000012 	.word	0x24000012
 8000c14:	24000013 	.word	0x24000013
 8000c18:	24000017 	.word	0x24000017

08000c1c <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000c2c:	4903      	ldr	r1, [pc, #12]	; (8000c3c <LCD_flush+0x20>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f007 ff34 	bl	8008a9c <HAL_SPI_Transmit_DMA>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24000184 	.word	0x24000184

08000c40 <LCDBufferAddr>:

uint8_t* LCDBufferAddr()
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	return Framememory;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <LCDBufferAddr+0x10>)
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	24000184 	.word	0x24000184

08000c54 <UARTInit>:
#include <string.h>
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	88db      	ldrh	r3, [r3, #6]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	f00a fdfa 	bl	800b85c <calloc>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	889b      	ldrh	r3, [r3, #4]
 8000c74:	4619      	mov	r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	f00a fdf0 	bl	800b85c <calloc>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	81da      	strh	r2, [r3, #14]

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6919      	ldr	r1, [r3, #16]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	88db      	ldrh	r3, [r3, #6]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f008 fbe2 	bl	800947c <HAL_UART_Receive_DMA>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	88db      	ldrh	r3, [r3, #6]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <UARTGetRxHead+0x114>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d068      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	; (8000dd8 <UARTGetRxHead+0x118>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d061      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <UARTGetRxHead+0x11c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05a      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <UARTGetRxHead+0x120>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d053      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <UARTGetRxHead+0x124>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d04c      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <UARTGetRxHead+0x128>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d045      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <UARTGetRxHead+0x12c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d03e      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a2d      	ldr	r2, [pc, #180]	; (8000df0 <UARTGetRxHead+0x130>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d037      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a2b      	ldr	r2, [pc, #172]	; (8000df4 <UARTGetRxHead+0x134>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d030      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <UARTGetRxHead+0x138>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d029      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a26      	ldr	r2, [pc, #152]	; (8000dfc <UARTGetRxHead+0x13c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d022      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <UARTGetRxHead+0x140>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01b      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <UARTGetRxHead+0x144>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d014      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <UARTGetRxHead+0x148>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <UARTGetRxHead+0x14c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d006      	beq.n	8000dae <UARTGetRxHead+0xee>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <UARTGetRxHead+0x150>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d105      	bne.n	8000dba <UARTGetRxHead+0xfa>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	e004      	b.n	8000dc4 <UARTGetRxHead+0x104>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	1acb      	subs	r3, r1, r3
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40020010 	.word	0x40020010
 8000dd8:	40020028 	.word	0x40020028
 8000ddc:	40020040 	.word	0x40020040
 8000de0:	40020058 	.word	0x40020058
 8000de4:	40020070 	.word	0x40020070
 8000de8:	40020088 	.word	0x40020088
 8000dec:	400200a0 	.word	0x400200a0
 8000df0:	400200b8 	.word	0x400200b8
 8000df4:	40020410 	.word	0x40020410
 8000df8:	40020428 	.word	0x40020428
 8000dfc:	40020440 	.word	0x40020440
 8000e00:	40020458 	.word	0x40020458
 8000e04:	40020470 	.word	0x40020470
 8000e08:	40020488 	.word	0x40020488
 8000e0c:	400204a0 	.word	0x400204a0
 8000e10:	400204b8 	.word	0x400204b8

08000e14 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e20:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	8a9b      	ldrh	r3, [r3, #20]
 8000e26:	461c      	mov	r4, r3
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff49 	bl	8000cc0 <UARTGetRxHead>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	429c      	cmp	r4, r3
 8000e32:	d013      	beq.n	8000e5c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	8a92      	ldrh	r2, [r2, #20]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	8a9b      	ldrh	r3, [r3, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	88d2      	ldrh	r2, [r2, #6]
 8000e4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e50:	fb01 f202 	mul.w	r2, r1, r2
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000e5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000e74:	bf00      	nop
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <main+0x128>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <main+0x24>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	60fa      	str	r2, [r7, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dcf4      	bgt.n	8000e76 <main+0xe>
		;
	if (timeout < 0) {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da01      	bge.n	8000e96 <main+0x2e>
		Error_Handler();
 8000e92:	f000 fb61 	bl	8001558 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e96:	f000 ffeb 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9a:	f000 f887 	bl	8000fac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <main+0x128>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a3a      	ldr	r2, [pc, #232]	; (8000f90 <main+0x128>)
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <main+0x128>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f004 fdf3 	bl	8005aa8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f004 fe09 	bl	8005adc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	60fb      	str	r3, [r7, #12]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000ed0:	bf00      	nop
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <main+0x128>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <main+0x80>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	60fa      	str	r2, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dcf4      	bgt.n	8000ed2 <main+0x6a>
		;
	if (timeout < 0) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da01      	bge.n	8000ef2 <main+0x8a>
		Error_Handler();
 8000eee:	f000 fb33 	bl	8001558 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fa91 	bl	8001418 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ef6:	f000 f8dd 	bl	80010b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000efa:	f000 f9d7 	bl	80012ac <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000efe:	f000 fa53 	bl	80013a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f02:	f000 f923 	bl	800114c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f06:	f000 fa1d 	bl	8001344 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000f0a:	f000 f977 	bl	80011fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	ST7735.hspi = &hspi1;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <main+0x12c>)
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <main+0x130>)
 8000f12:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOD;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <main+0x12c>)
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <main+0x134>)
 8000f18:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_14;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <main+0x12c>)
 8000f1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f20:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOD;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <main+0x12c>)
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <main+0x134>)
 8000f26:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_15;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <main+0x12c>)
 8000f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f2e:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOG;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <main+0x12c>)
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <main+0x138>)
 8000f34:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_9;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <main+0x12c>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <main+0x12c>)
 8000f40:	f7ff fdb2 	bl	8000aa8 <LCD_init>
	LCD_flush(&ST7735);
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <main+0x12c>)
 8000f46:	f7ff fe69 	bl	8000c1c <LCD_flush>
	UART2.huart = &huart3;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <main+0x13c>)
 8000f4c:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <main+0x140>)
 8000f4e:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <main+0x13c>)
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <main+0x13c>)
 8000f58:	22ff      	movs	r2, #255	; 0xff
 8000f5a:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <main+0x13c>)
 8000f5e:	f7ff fe79 	bl	8000c54 <UARTInit>
	UARTResetStart(&UART2);
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <main+0x13c>)
 8000f64:	f7ff fe9b 	bl	8000c9e <UARTResetStart>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		int16_t read = UARTReadChar(&UART2) ;
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <main+0x13c>)
 8000f6a:	f7ff ff53 	bl	8000e14 <UARTReadChar>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	817b      	strh	r3, [r7, #10]
		if(read != -1)
 8000f72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7a:	d0f5      	beq.n	8000f68 <main+0x100>
			{
				BMPDecoder(read, LCDBufferAddr());
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	b2dc      	uxtb	r4, r3
 8000f80:	f7ff fe5e 	bl	8000c40 <LCDBufferAddr>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4619      	mov	r1, r3
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff fbc1 	bl	8000710 <BMPDecoder>
	while (1) {
 8000f8e:	e7eb      	b.n	8000f68 <main+0x100>
 8000f90:	58024400 	.word	0x58024400
 8000f94:	2400caf8 	.word	0x2400caf8
 8000f98:	2400c26c 	.word	0x2400c26c
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58021800 	.word	0x58021800
 8000fa4:	2400cb14 	.word	0x2400cb14
 8000fa8:	2400c46c 	.word	0x2400c46c

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09c      	sub	sp, #112	; 0x70
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	224c      	movs	r2, #76	; 0x4c
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00a fc80 	bl	800b8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a fc7a 	bl	800b8c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f004 fee1 	bl	8005d94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <SystemClock_Config+0xfc>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <SystemClock_Config+0xfc>)
 8000fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <SystemClock_Config+0xfc>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <SystemClock_Config+0x100>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	4a2e      	ldr	r2, [pc, #184]	; (80010ac <SystemClock_Config+0x100>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <SystemClock_Config+0x100>)
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001004:	bf00      	nop
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0xfc>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001012:	d1f8      	bne.n	8001006 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <SystemClock_Config+0x104>)
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	f023 0303 	bic.w	r3, r3, #3
 800101c:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <SystemClock_Config+0x104>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001028:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	2302      	movs	r3, #2
 8001034:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800103a:	2378      	movs	r3, #120	; 0x78
 800103c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800103e:	2302      	movs	r3, #2
 8001040:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001042:	2306      	movs	r3, #6
 8001044:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001046:	2302      	movs	r3, #2
 8001048:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800104a:	230c      	movs	r3, #12
 800104c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800104e:	2300      	movs	r3, #0
 8001050:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4618      	mov	r0, r3
 800105c:	f004 ff04 	bl	8005e68 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001066:	f000 fa77 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	233f      	movs	r3, #63	; 0x3f
 800106c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001076:	2308      	movs	r3, #8
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800107a:	2340      	movs	r3, #64	; 0x40
 800107c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800107e:	2340      	movs	r3, #64	; 0x40
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2104      	movs	r1, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fb17 	bl	80066c4 <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800109c:	f000 fa5c 	bl	8001558 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3770      	adds	r7, #112	; 0x70
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58024800 	.word	0x58024800
 80010ac:	58000400 	.word	0x58000400
 80010b0:	58024400 	.word	0x58024400

080010b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_ETH_Init+0x80>)
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <MX_ETH_Init+0x84>)
 80010bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_ETH_Init+0x88>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_ETH_Init+0x88>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_ETH_Init+0x88>)
 80010cc:	22e1      	movs	r2, #225	; 0xe1
 80010ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_ETH_Init+0x88>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_ETH_Init+0x88>)
 80010d8:	2200      	movs	r2, #0
 80010da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_ETH_Init+0x88>)
 80010de:	2200      	movs	r2, #0
 80010e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_ETH_Init+0x80>)
 80010e4:	4a15      	ldr	r2, [pc, #84]	; (800113c <MX_ETH_Init+0x88>)
 80010e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_ETH_Init+0x80>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_ETH_Init+0x80>)
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_ETH_Init+0x8c>)
 80010f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_ETH_Init+0x80>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <MX_ETH_Init+0x90>)
 80010f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_ETH_Init+0x80>)
 80010fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001100:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_ETH_Init+0x80>)
 8001104:	f003 fee2 	bl	8004ecc <HAL_ETH_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800110e:	f000 fa23 	bl	8001558 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001112:	2238      	movs	r2, #56	; 0x38
 8001114:	2100      	movs	r1, #0
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_ETH_Init+0x94>)
 8001118:	f00a fbd2 	bl	800b8c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_ETH_Init+0x94>)
 800111e:	2221      	movs	r2, #33	; 0x21
 8001120:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_ETH_Init+0x94>)
 8001124:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001128:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_ETH_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2400c1bc 	.word	0x2400c1bc
 8001138:	40028000 	.word	0x40028000
 800113c:	2400cb2c 	.word	0x2400cb2c
 8001140:	240000e4 	.word	0x240000e4
 8001144:	24000084 	.word	0x24000084
 8001148:	2400c184 	.word	0x2400c184

0800114c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <MX_SPI1_Init+0xac>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001158:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800115c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001160:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001164:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001168:	2207      	movs	r2, #7
 800116a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_SPI1_Init+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_SPI1_Init+0xa8>)
 800117a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800117e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001182:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001186:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_SPI1_Init+0xa8>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_SPI1_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_SPI1_Init+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_SPI1_Init+0xa8>)
 80011e2:	f007 f963 	bl	80084ac <HAL_SPI_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80011ec:	f000 f9b4 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2400c26c 	.word	0x2400c26c
 80011f8:	40013000 	.word	0x40013000

080011fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001202:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <MX_SPI2_Init+0xac>)
 8001204:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001208:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800120c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001210:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001214:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001218:	2207      	movs	r2, #7
 800121a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800122a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800122e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001232:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001236:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001260:	2200      	movs	r2, #0
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800126c:	2200      	movs	r2, #0
 800126e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800127e:	2200      	movs	r2, #0
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001284:	2200      	movs	r2, #0
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_SPI2_Init+0xa8>)
 800128a:	2200      	movs	r2, #0
 800128c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_SPI2_Init+0xa8>)
 8001290:	f007 f90c 	bl	80084ac <HAL_SPI_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800129a:	f000 f95d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2400c2f4 	.word	0x2400c2f4
 80012a8:	40003800 	.word	0x40003800

080012ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012b2:	4a23      	ldr	r2, [pc, #140]	; (8001340 <MX_USART3_UART_Init+0x94>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012f6:	f008 f870 	bl	80093da <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001300:	f000 f92a 	bl	8001558 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_USART3_UART_Init+0x90>)
 8001308:	f009 fed3 	bl	800b0b2 <HAL_UARTEx_SetTxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001312:	f000 f921 	bl	8001558 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <MX_USART3_UART_Init+0x90>)
 800131a:	f009 ff08 	bl	800b12e <HAL_UARTEx_SetRxFifoThreshold>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001324:	f000 f918 	bl	8001558 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_USART3_UART_Init+0x90>)
 800132a:	f009 fe89 	bl	800b040 <HAL_UARTEx_DisableFifoMode>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001334:	f000 f910 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2400c46c 	.word	0x2400c46c
 8001340:	40004800 	.word	0x40004800

08001344 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800134c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001350:	2209      	movs	r2, #9
 8001352:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001356:	2202      	movs	r2, #2
 8001358:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001362:	2202      	movs	r2, #2
 8001364:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2201      	movs	r2, #1
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	2201      	movs	r2, #1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138c:	f004 fbba 	bl	8005b04 <HAL_PCD_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001396:	f000 f8df 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2400c5ec 	.word	0x2400c5ec
 80013a4:	40080000 	.word	0x40080000

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_DMA_Init+0x6c>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_DMA_Init+0x6c>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_DMA_Init+0x6c>)
 80013c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	200b      	movs	r0, #11
 80013d2:	f000 fefe 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013d6:	200b      	movs	r0, #11
 80013d8:	f000 ff15 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	200c      	movs	r0, #12
 80013e2:	f000 fef6 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013e6:	200c      	movs	r0, #12
 80013e8:	f000 ff0d 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	200d      	movs	r0, #13
 80013f2:	f000 feee 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013f6:	200d      	movs	r0, #13
 80013f8:	f000 ff05 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	200e      	movs	r0, #14
 8001402:	f000 fee6 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001406:	200e      	movs	r0, #14
 8001408:	f000 fefd 	bl	8002206 <HAL_NVIC_EnableIRQ>

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	58024400 	.word	0x58024400

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <MX_GPIO_Init+0x134>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <MX_GPIO_Init+0x134>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <MX_GPIO_Init+0x134>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <MX_GPIO_Init+0x134>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	4a3e      	ldr	r2, [pc, #248]	; (800154c <MX_GPIO_Init+0x134>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <MX_GPIO_Init+0x134>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <MX_GPIO_Init+0x134>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <MX_GPIO_Init+0x134>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_GPIO_Init+0x134>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <MX_GPIO_Init+0x134>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <MX_GPIO_Init+0x134>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <MX_GPIO_Init+0x134>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_GPIO_Init+0x134>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <MX_GPIO_Init+0x134>)
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_GPIO_Init+0x134>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_GPIO_Init+0x134>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a20      	ldr	r2, [pc, #128]	; (800154c <MX_GPIO_Init+0x134>)
 80014cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_GPIO_Init+0x134>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <MX_GPIO_Init+0x138>)
 80014ea:	f004 fac3 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f4:	4816      	ldr	r0, [pc, #88]	; (8001550 <MX_GPIO_Init+0x138>)
 80014f6:	f004 fabd 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	4814      	ldr	r0, [pc, #80]	; (8001554 <MX_GPIO_Init+0x13c>)
 8001502:	f004 fab7 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin;
 8001506:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x138>)
 8001520:	f004 f8f8 	bl	8005714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_GPIO_Init+0x13c>)
 800153e:	f004 f8e9 	bl	8005714 <HAL_GPIO_Init>

}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	; 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	58024400 	.word	0x58024400
 8001550:	58020c00 	.word	0x58020c00
 8001554:	58021800 	.word	0x58021800

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_MspInit+0x30>)
 800156c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001570:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x30>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x30>)
 800157c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	58024400 	.word	0x58024400

08001598 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	; 0x38
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a59      	ldr	r2, [pc, #356]	; (800171c <HAL_ETH_MspInit+0x184>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	f040 80ab 	bne.w	8001712 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015bc:	4b58      	ldr	r3, [pc, #352]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c2:	4a57      	ldr	r2, [pc, #348]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015cc:	4b54      	ldr	r3, [pc, #336]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e0:	4a4f      	ldr	r2, [pc, #316]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_ETH_MspInit+0x188>)
 80015fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015fe:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <HAL_ETH_MspInit+0x188>)
 800160a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b42      	ldr	r3, [pc, #264]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	4a40      	ldr	r2, [pc, #256]	; (8001720 <HAL_ETH_MspInit+0x188>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <HAL_ETH_MspInit+0x188>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a31      	ldr	r2, [pc, #196]	; (8001720 <HAL_ETH_MspInit+0x188>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_ETH_MspInit+0x188>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800168e:	2332      	movs	r3, #50	; 0x32
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800169e:	230b      	movs	r3, #11
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	; (8001724 <HAL_ETH_MspInit+0x18c>)
 80016aa:	f004 f833 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80016ae:	2386      	movs	r3, #134	; 0x86
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016be:	230b      	movs	r3, #11
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <HAL_ETH_MspInit+0x190>)
 80016ca:	f004 f823 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e0:	230b      	movs	r3, #11
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4810      	ldr	r0, [pc, #64]	; (800172c <HAL_ETH_MspInit+0x194>)
 80016ec:	f004 f812 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001702:	230b      	movs	r3, #11
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <HAL_ETH_MspInit+0x198>)
 800170e:	f004 f801 	bl	8005714 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40028000 	.word	0x40028000
 8001720:	58024400 	.word	0x58024400
 8001724:	58020800 	.word	0x58020800
 8001728:	58020000 	.word	0x58020000
 800172c:	58020400 	.word	0x58020400
 8001730:	58021800 	.word	0x58021800

08001734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0bc      	sub	sp, #240	; 0xf0
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	22bc      	movs	r2, #188	; 0xbc
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f00a f8b3 	bl	800b8c0 <memset>
  if(hspi->Instance==SPI1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4aa4      	ldr	r2, [pc, #656]	; (80019f0 <HAL_SPI_MspInit+0x2bc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f040 809d 	bne.w	80018a0 <HAL_SPI_MspInit+0x16c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800176c:	2300      	movs	r3, #0
 800176e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f005 fb31 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001780:	f7ff feea 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001784:	4b9b      	ldr	r3, [pc, #620]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 8001786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800178a:	4a9a      	ldr	r2, [pc, #616]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 800178c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001794:	4b97      	ldr	r3, [pc, #604]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 8001796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	4a92      	ldr	r2, [pc, #584]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b2:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	4a8b      	ldr	r2, [pc, #556]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017de:	2320      	movs	r3, #32
 80017e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f6:	2305      	movs	r3, #5
 80017f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001800:	4619      	mov	r1, r3
 8001802:	487d      	ldr	r0, [pc, #500]	; (80019f8 <HAL_SPI_MspInit+0x2c4>)
 8001804:	f003 ff86 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001808:	2320      	movs	r3, #32
 800180a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001820:	2305      	movs	r3, #5
 8001822:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800182a:	4619      	mov	r1, r3
 800182c:	4873      	ldr	r0, [pc, #460]	; (80019fc <HAL_SPI_MspInit+0x2c8>)
 800182e:	f003 ff71 	bl	8005714 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001834:	4a73      	ldr	r2, [pc, #460]	; (8001a04 <HAL_SPI_MspInit+0x2d0>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001838:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 800183a:	2226      	movs	r2, #38	; 0x26
 800183c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183e:	4b70      	ldr	r3, [pc, #448]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001840:	2240      	movs	r2, #64	; 0x40
 8001842:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b6e      	ldr	r3, [pc, #440]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 800184c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001850:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001852:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001858:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800185e:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001864:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001872:	4863      	ldr	r0, [pc, #396]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001874:	f000 fce2 	bl	800223c <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 800187e:	f7ff fe6b 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a5e      	ldr	r2, [pc, #376]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 8001886:	679a      	str	r2, [r3, #120]	; 0x78
 8001888:	4a5d      	ldr	r2, [pc, #372]	; (8001a00 <HAL_SPI_MspInit+0x2cc>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2023      	movs	r0, #35	; 0x23
 8001894:	f000 fc9d 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001898:	2023      	movs	r0, #35	; 0x23
 800189a:	f000 fcb4 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800189e:	e0a2      	b.n	80019e6 <HAL_SPI_MspInit+0x2b2>
  else if(hspi->Instance==SPI2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_SPI_MspInit+0x2d4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	f040 809d 	bne.w	80019e6 <HAL_SPI_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fa8e 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_SPI_MspInit+0x196>
      Error_Handler();
 80018c6:	f7ff fe47 	bl	8001558 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ca:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d0:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_SPI_MspInit+0x2c0>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001924:	2308      	movs	r3, #8
 8001926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800193c:	2305      	movs	r3, #5
 800193e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001946:	4619      	mov	r1, r3
 8001948:	4830      	ldr	r0, [pc, #192]	; (8001a0c <HAL_SPI_MspInit+0x2d8>)
 800194a:	f003 fee3 	bl	8005714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001968:	2305      	movs	r3, #5
 800196a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001972:	4619      	mov	r1, r3
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <HAL_SPI_MspInit+0x2c8>)
 8001976:	f003 fecd 	bl	8005714 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream3;
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_SPI_MspInit+0x2e0>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 8001982:	2228      	movs	r2, #40	; 0x28
 8001984:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 8001994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001998:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ac:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019bc:	f000 fc3e 	bl	800223c <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_SPI_MspInit+0x296>
      Error_Handler();
 80019c6:	f7ff fdc7 	bl	8001558 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019ce:	679a      	str	r2, [r3, #120]	; 0x78
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_SPI_MspInit+0x2dc>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2024      	movs	r0, #36	; 0x24
 80019dc:	f000 fbf9 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019e0:	2024      	movs	r0, #36	; 0x24
 80019e2:	f000 fc10 	bl	8002206 <HAL_NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	37f0      	adds	r7, #240	; 0xf0
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40013000 	.word	0x40013000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58020000 	.word	0x58020000
 80019fc:	58020400 	.word	0x58020400
 8001a00:	2400c37c 	.word	0x2400c37c
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40003800 	.word	0x40003800
 8001a0c:	58020800 	.word	0x58020800
 8001a10:	2400c3f4 	.word	0x2400c3f4
 8001a14:	40020058 	.word	0x40020058

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0b8      	sub	sp, #224	; 0xe0
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	22bc      	movs	r2, #188	; 0xbc
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f009 ff41 	bl	800b8c0 <memset>
  if(huart->Instance==USART3)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a57      	ldr	r2, [pc, #348]	; (8001ba0 <HAL_UART_MspInit+0x188>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f040 80a6 	bne.w	8001b96 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 f9bf 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a64:	f7ff fd78 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a68:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a6e:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8c:	4a45      	ldr	r2, [pc, #276]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_UART_MspInit+0x18c>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4837      	ldr	r0, [pc, #220]	; (8001ba8 <HAL_UART_MspInit+0x190>)
 8001acc:	f003 fe22 	bl	8005714 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_UART_MspInit+0x198>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ad6:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001ad8:	222d      	movs	r2, #45	; 0x2d
 8001ada:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae8:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b10:	4826      	ldr	r0, [pc, #152]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001b12:	f000 fb93 	bl	800223c <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001b1c:	f7ff fd1c 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001b24:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_UART_MspInit+0x194>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <HAL_UART_MspInit+0x1a0>)
 8001b30:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b34:	222e      	movs	r2, #46	; 0x2e
 8001b36:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b6a:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b6c:	f000 fb66 	bl	800223c <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001b76:	f7ff fcef 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b7e:	679a      	str	r2, [r3, #120]	; 0x78
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_UART_MspInit+0x19c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2027      	movs	r0, #39	; 0x27
 8001b8c:	f000 fb21 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b90:	2027      	movs	r0, #39	; 0x27
 8001b92:	f000 fb38 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	37e0      	adds	r7, #224	; 0xe0
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40004800 	.word	0x40004800
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58020c00 	.word	0x58020c00
 8001bac:	2400c4fc 	.word	0x2400c4fc
 8001bb0:	40020028 	.word	0x40020028
 8001bb4:	2400c574 	.word	0x2400c574
 8001bb8:	40020040 	.word	0x40020040

08001bbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0b8      	sub	sp, #224	; 0xe0
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	22bc      	movs	r2, #188	; 0xbc
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f009 fe6f 	bl	800b8c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <HAL_PCD_MspInit+0x108>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d166      	bne.n	8001cba <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001bec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001bf6:	2312      	movs	r3, #18
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001c0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001c12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 f8dc 	bl	8006ddc <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001c2a:	f7ff fc95 	bl	8001558 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c2e:	f004 f90b 	bl	8005e48 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c50:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c74:	4619      	mov	r1, r3
 8001c76:	4815      	ldr	r0, [pc, #84]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c78:	f003 fd4c 	bl	8005714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c94:	4619      	mov	r1, r3
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <HAL_PCD_MspInit+0x110>)
 8001c98:	f003 fd3c 	bl	8005714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001ca4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ca8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_PCD_MspInit+0x10c>)
 8001cae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	37e0      	adds	r7, #224	; 0xe0
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40080000 	.word	0x40080000
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58020000 	.word	0x58020000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f91a 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA1_Stream0_IRQHandler+0x10>)
 8001d2a:	f001 fdb1 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2400c37c 	.word	0x2400c37c

08001d38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA1_Stream1_IRQHandler+0x10>)
 8001d3e:	f001 fda7 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2400c4fc 	.word	0x2400c4fc

08001d4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA1_Stream2_IRQHandler+0x10>)
 8001d52:	f001 fd9d 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2400c574 	.word	0x2400c574

08001d60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA1_Stream3_IRQHandler+0x10>)
 8001d66:	f001 fd93 	bl	8003890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2400c3f4 	.word	0x2400c3f4

08001d74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <SPI1_IRQHandler+0x10>)
 8001d7a:	f006 ffd9 	bl	8008d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2400c26c 	.word	0x2400c26c

08001d88 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <SPI2_IRQHandler+0x10>)
 8001d8e:	f006 ffcf 	bl	8008d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2400c2f4 	.word	0x2400c2f4

08001d9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USART3_IRQHandler+0x10>)
 8001da2:	f007 fbc1 	bl	8009528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2400c46c 	.word	0x2400c46c

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f009 fd44 	bl	800b86c <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	24080000 	.word	0x24080000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	2400cb34 	.word	0x2400cb34
 8001e18:	2400cb50 	.word	0x2400cb50

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e20:	f7fe fbdc 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f009 fd15 	bl	800b878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff f80b 	bl	8000e68 <main>
  bx  lr
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e5c:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001e60:	0800bac8 	.word	0x0800bac8
  ldr r2, =_sbss
 8001e64:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8001e68:	2400cb4c 	.word	0x2400cb4c

08001e6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC3_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f000 f9a0 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e7c:	f004 fdd8 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_Init+0x68>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	4913      	ldr	r1, [pc, #76]	; (8001edc <HAL_Init+0x6c>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_Init+0x68>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_Init+0x6c>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_Init+0x70>)
 8001eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_Init+0x74>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 f814 	bl	8001ee8 <HAL_InitTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e002      	b.n	8001ed0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eca:	f7ff fb4b 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	0800ba78 	.word	0x0800ba78
 8001ee0:	24000004 	.word	0x24000004
 8001ee4:	24000000 	.word	0x24000000

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_InitTick+0x60>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e021      	b.n	8001f40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_InitTick+0x64>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_InitTick+0x60>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f985 	bl	8002222 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f94f 	bl	80021d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x68>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2400001c 	.word	0x2400001c
 8001f4c:	24000000 	.word	0x24000000
 8001f50:	24000018 	.word	0x24000018

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2400001c 	.word	0x2400001c
 8001f78:	2400cb38 	.word	0x2400cb38

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2400cb38 	.word	0x2400cb38

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2400001c 	.word	0x2400001c

08001fdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetREVID+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	5c001000 	.word	0x5c001000

08001ff4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	58000400 	.word	0x58000400

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <__NVIC_SetPriorityGrouping+0x40>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	4313      	orrs	r3, r2
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <__NVIC_SetPriorityGrouping+0x40>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00
 8002060:	05fa0000 	.word	0x05fa0000

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <__NVIC_EnableIRQ+0x38>)
 800209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff8e 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff29 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff40 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff90 	bl	8002110 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5f 	bl	80020bc <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff33 	bl	8002080 <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa4 	bl	8002178 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fe9a 	bl	8001f7c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e316      	b.n	8002882 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a66      	ldr	r2, [pc, #408]	; (80023f4 <HAL_DMA_Init+0x1b8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d04a      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_DMA_Init+0x1bc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d045      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a63      	ldr	r2, [pc, #396]	; (80023fc <HAL_DMA_Init+0x1c0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d040      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a62      	ldr	r2, [pc, #392]	; (8002400 <HAL_DMA_Init+0x1c4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d03b      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a60      	ldr	r2, [pc, #384]	; (8002404 <HAL_DMA_Init+0x1c8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5f      	ldr	r2, [pc, #380]	; (8002408 <HAL_DMA_Init+0x1cc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d031      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a5d      	ldr	r2, [pc, #372]	; (800240c <HAL_DMA_Init+0x1d0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02c      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_DMA_Init+0x1d4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d027      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HAL_DMA_Init+0x1d8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a59      	ldr	r2, [pc, #356]	; (8002418 <HAL_DMA_Init+0x1dc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d01d      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a57      	ldr	r2, [pc, #348]	; (800241c <HAL_DMA_Init+0x1e0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_DMA_Init+0x1e4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a54      	ldr	r2, [pc, #336]	; (8002424 <HAL_DMA_Init+0x1e8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00e      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a53      	ldr	r2, [pc, #332]	; (8002428 <HAL_DMA_Init+0x1ec>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d009      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_DMA_Init+0x1f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_DMA_Init+0x1f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_DMA_Init+0xbc>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_DMA_Init+0xbe>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 813b 	beq.w	8002576 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <HAL_DMA_Init+0x1b8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d04a      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a36      	ldr	r2, [pc, #216]	; (80023f8 <HAL_DMA_Init+0x1bc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d045      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a34      	ldr	r2, [pc, #208]	; (80023fc <HAL_DMA_Init+0x1c0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d040      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a33      	ldr	r2, [pc, #204]	; (8002400 <HAL_DMA_Init+0x1c4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d03b      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a31      	ldr	r2, [pc, #196]	; (8002404 <HAL_DMA_Init+0x1c8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d036      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a30      	ldr	r2, [pc, #192]	; (8002408 <HAL_DMA_Init+0x1cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d031      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_DMA_Init+0x1d0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02c      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <HAL_DMA_Init+0x1d4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d027      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_DMA_Init+0x1d8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d022      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <HAL_DMA_Init+0x1dc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d01d      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a28      	ldr	r2, [pc, #160]	; (800241c <HAL_DMA_Init+0x1e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d018      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_DMA_Init+0x1e4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a25      	ldr	r2, [pc, #148]	; (8002424 <HAL_DMA_Init+0x1e8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00e      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_DMA_Init+0x1ec>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_DMA_Init+0x1f0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_DMA_Init+0x1f4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <HAL_DMA_Init+0x186>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_DMA_Init+0x196>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023d2:	e02f      	b.n	8002434 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d4:	f7ff fdd2 	bl	8001f7c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d928      	bls.n	8002434 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e246      	b.n	8002882 <HAL_DMA_Init+0x646>
 80023f4:	40020010 	.word	0x40020010
 80023f8:	40020028 	.word	0x40020028
 80023fc:	40020040 	.word	0x40020040
 8002400:	40020058 	.word	0x40020058
 8002404:	40020070 	.word	0x40020070
 8002408:	40020088 	.word	0x40020088
 800240c:	400200a0 	.word	0x400200a0
 8002410:	400200b8 	.word	0x400200b8
 8002414:	40020410 	.word	0x40020410
 8002418:	40020428 	.word	0x40020428
 800241c:	40020440 	.word	0x40020440
 8002420:	40020458 	.word	0x40020458
 8002424:	40020470 	.word	0x40020470
 8002428:	40020488 	.word	0x40020488
 800242c:	400204a0 	.word	0x400204a0
 8002430:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1c8      	bne.n	80023d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4b83      	ldr	r3, [pc, #524]	; (800265c <HAL_DMA_Init+0x420>)
 800244e:	4013      	ands	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800245a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002466:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002472:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b04      	cmp	r3, #4
 8002486:	d107      	bne.n	8002498 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002498:	4b71      	ldr	r3, [pc, #452]	; (8002660 <HAL_DMA_Init+0x424>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b71      	ldr	r3, [pc, #452]	; (8002664 <HAL_DMA_Init+0x428>)
 800249e:	4013      	ands	r3, r2
 80024a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a4:	d328      	bcc.n	80024f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b28      	cmp	r3, #40	; 0x28
 80024ac:	d903      	bls.n	80024b6 <HAL_DMA_Init+0x27a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b2e      	cmp	r3, #46	; 0x2e
 80024b4:	d917      	bls.n	80024e6 <HAL_DMA_Init+0x2aa>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b3e      	cmp	r3, #62	; 0x3e
 80024bc:	d903      	bls.n	80024c6 <HAL_DMA_Init+0x28a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b42      	cmp	r3, #66	; 0x42
 80024c4:	d90f      	bls.n	80024e6 <HAL_DMA_Init+0x2aa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b46      	cmp	r3, #70	; 0x46
 80024cc:	d903      	bls.n	80024d6 <HAL_DMA_Init+0x29a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b48      	cmp	r3, #72	; 0x48
 80024d4:	d907      	bls.n	80024e6 <HAL_DMA_Init+0x2aa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b4e      	cmp	r3, #78	; 0x4e
 80024dc:	d905      	bls.n	80024ea <HAL_DMA_Init+0x2ae>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b52      	cmp	r3, #82	; 0x52
 80024e4:	d801      	bhi.n	80024ea <HAL_DMA_Init+0x2ae>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_DMA_Init+0x2b0>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b04      	cmp	r3, #4
 8002520:	d117      	bne.n	8002552 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f002 fb3f 	bl	8004bb8 <DMA_CheckFifoParam>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e197      	b.n	8002882 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f002 fa7a 	bl	8004a54 <DMA_CalcBaseAndBitshift>
 8002560:	4603      	mov	r3, r0
 8002562:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	223f      	movs	r2, #63	; 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e0cd      	b.n	8002712 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_DMA_Init+0x42c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_DMA_Init+0x430>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01d      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_DMA_Init+0x434>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a36      	ldr	r2, [pc, #216]	; (8002674 <HAL_DMA_Init+0x438>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a35      	ldr	r2, [pc, #212]	; (8002678 <HAL_DMA_Init+0x43c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_DMA_Init+0x440>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a32      	ldr	r2, [pc, #200]	; (8002680 <HAL_DMA_Init+0x444>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_DMA_Init+0x38a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a30      	ldr	r2, [pc, #192]	; (8002684 <HAL_DMA_Init+0x448>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Init+0x38e>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_DMA_Init+0x390>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8097 	beq.w	8002700 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_DMA_Init+0x42c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d021      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <HAL_DMA_Init+0x430>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01c      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a21      	ldr	r2, [pc, #132]	; (8002670 <HAL_DMA_Init+0x434>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d017      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_DMA_Init+0x438>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d012      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <HAL_DMA_Init+0x43c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_DMA_Init+0x440>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d008      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_DMA_Init+0x444>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <HAL_DMA_Init+0x3e4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_DMA_Init+0x448>)
 800261e:	4293      	cmp	r3, r2
 8002620:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_DMA_Init+0x44c>)
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d020      	beq.n	800268c <HAL_DMA_Init+0x450>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d102      	bne.n	8002658 <HAL_DMA_Init+0x41c>
 8002652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002656:	e01a      	b.n	800268e <HAL_DMA_Init+0x452>
 8002658:	2300      	movs	r3, #0
 800265a:	e018      	b.n	800268e <HAL_DMA_Init+0x452>
 800265c:	fe10803f 	.word	0xfe10803f
 8002660:	5c001000 	.word	0x5c001000
 8002664:	ffff0000 	.word	0xffff0000
 8002668:	58025408 	.word	0x58025408
 800266c:	5802541c 	.word	0x5802541c
 8002670:	58025430 	.word	0x58025430
 8002674:	58025444 	.word	0x58025444
 8002678:	58025458 	.word	0x58025458
 800267c:	5802546c 	.word	0x5802546c
 8002680:	58025480 	.word	0x58025480
 8002684:	58025494 	.word	0x58025494
 8002688:	fffe000f 	.word	0xfffe000f
 800268c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800269c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_DMA_Init+0x650>)
 80026d4:	4413      	add	r3, r2
 80026d6:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_DMA_Init+0x654>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	009a      	lsls	r2, r3, #2
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f002 f9b5 	bl	8004a54 <DMA_CalcBaseAndBitshift>
 80026ea:	4603      	mov	r3, r0
 80026ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2201      	movs	r2, #1
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e008      	b.n	8002712 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	; 0x40
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0b7      	b.n	8002882 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <HAL_DMA_Init+0x658>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d072      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_DMA_Init+0x65c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d06d      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_DMA_Init+0x660>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d068      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_DMA_Init+0x664>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a59      	ldr	r2, [pc, #356]	; (80028a4 <HAL_DMA_Init+0x668>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_DMA_Init+0x66c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d059      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_DMA_Init+0x670>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d054      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_DMA_Init+0x674>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04f      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_DMA_Init+0x678>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a51      	ldr	r2, [pc, #324]	; (80028b8 <HAL_DMA_Init+0x67c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_DMA_Init+0x680>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4e      	ldr	r2, [pc, #312]	; (80028c0 <HAL_DMA_Init+0x684>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_DMA_Init+0x688>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_DMA_Init+0x68c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_DMA_Init+0x690>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_DMA_Init+0x694>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_DMA_Init+0x698>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_DMA_Init+0x69c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <HAL_DMA_Init+0x6a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a42      	ldr	r2, [pc, #264]	; (80028e0 <HAL_DMA_Init+0x6a4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <HAL_DMA_Init+0x6a8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_DMA_Init+0x6ac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3e      	ldr	r2, [pc, #248]	; (80028ec <HAL_DMA_Init+0x6b0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Init+0x5c6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3c      	ldr	r2, [pc, #240]	; (80028f0 <HAL_DMA_Init+0x6b4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Init+0x5ca>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_DMA_Init+0x5cc>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d032      	beq.n	8002872 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f002 fa4f 	bl	8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d102      	bne.n	8002820 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002834:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_DMA_Init+0x624>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d80c      	bhi.n	8002860 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f002 facc 	bl	8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e008      	b.n	8002872 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	a7fdabf8 	.word	0xa7fdabf8
 8002890:	cccccccd 	.word	0xcccccccd
 8002894:	40020010 	.word	0x40020010
 8002898:	40020028 	.word	0x40020028
 800289c:	40020040 	.word	0x40020040
 80028a0:	40020058 	.word	0x40020058
 80028a4:	40020070 	.word	0x40020070
 80028a8:	40020088 	.word	0x40020088
 80028ac:	400200a0 	.word	0x400200a0
 80028b0:	400200b8 	.word	0x400200b8
 80028b4:	40020410 	.word	0x40020410
 80028b8:	40020428 	.word	0x40020428
 80028bc:	40020440 	.word	0x40020440
 80028c0:	40020458 	.word	0x40020458
 80028c4:	40020470 	.word	0x40020470
 80028c8:	40020488 	.word	0x40020488
 80028cc:	400204a0 	.word	0x400204a0
 80028d0:	400204b8 	.word	0x400204b8
 80028d4:	58025408 	.word	0x58025408
 80028d8:	5802541c 	.word	0x5802541c
 80028dc:	58025430 	.word	0x58025430
 80028e0:	58025444 	.word	0x58025444
 80028e4:	58025458 	.word	0x58025458
 80028e8:	5802546c 	.word	0x5802546c
 80028ec:	58025480 	.word	0x58025480
 80028f0:	58025494 	.word	0x58025494

080028f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e226      	b.n	8002d5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x2a>
 800291a:	2302      	movs	r3, #2
 800291c:	e21f      	b.n	8002d5e <HAL_DMA_Start_IT+0x46a>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 820a 	bne.w	8002d48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_DMA_Start_IT+0x1f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d04a      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_DMA_Start_IT+0x1f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d045      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a65      	ldr	r2, [pc, #404]	; (8002af0 <HAL_DMA_Start_IT+0x1fc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d040      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_DMA_Start_IT+0x200>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d03b      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a62      	ldr	r2, [pc, #392]	; (8002af8 <HAL_DMA_Start_IT+0x204>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d036      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a60      	ldr	r2, [pc, #384]	; (8002afc <HAL_DMA_Start_IT+0x208>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_DMA_Start_IT+0x20c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d02c      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_Start_IT+0x210>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d027      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_DMA_Start_IT+0x214>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_DMA_Start_IT+0x218>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a59      	ldr	r2, [pc, #356]	; (8002b10 <HAL_DMA_Start_IT+0x21c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_DMA_Start_IT+0x220>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a56      	ldr	r2, [pc, #344]	; (8002b18 <HAL_DMA_Start_IT+0x224>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_DMA_Start_IT+0x228>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a53      	ldr	r2, [pc, #332]	; (8002b20 <HAL_DMA_Start_IT+0x22c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_DMA_Start_IT+0xee>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a51      	ldr	r2, [pc, #324]	; (8002b24 <HAL_DMA_Start_IT+0x230>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d108      	bne.n	80029f4 <HAL_DMA_Start_IT+0x100>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e007      	b.n	8002a04 <HAL_DMA_Start_IT+0x110>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f001 fe76 	bl	80046fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a34      	ldr	r2, [pc, #208]	; (8002ae8 <HAL_DMA_Start_IT+0x1f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d04a      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a33      	ldr	r2, [pc, #204]	; (8002aec <HAL_DMA_Start_IT+0x1f8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d045      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <HAL_DMA_Start_IT+0x1fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d040      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <HAL_DMA_Start_IT+0x200>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d03b      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <HAL_DMA_Start_IT+0x204>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d036      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <HAL_DMA_Start_IT+0x208>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d031      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <HAL_DMA_Start_IT+0x20c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02c      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <HAL_DMA_Start_IT+0x210>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d027      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <HAL_DMA_Start_IT+0x214>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a27      	ldr	r2, [pc, #156]	; (8002b0c <HAL_DMA_Start_IT+0x218>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d01d      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <HAL_DMA_Start_IT+0x21c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d018      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_DMA_Start_IT+0x220>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_DMA_Start_IT+0x224>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_DMA_Start_IT+0x228>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <HAL_DMA_Start_IT+0x22c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <HAL_DMA_Start_IT+0x230>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Start_IT+0x1c0>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_DMA_Start_IT+0x1c2>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d036      	beq.n	8002b28 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 021e 	bic.w	r2, r3, #30
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0216 	orr.w	r2, r2, #22
 8002acc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03e      	beq.n	8002b54 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0208 	orr.w	r2, r2, #8
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e035      	b.n	8002b54 <HAL_DMA_Start_IT+0x260>
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 020e 	bic.w	r2, r3, #14
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 020a 	orr.w	r2, r2, #10
 8002b3a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0204 	orr.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <HAL_DMA_Start_IT+0x474>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d072      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a82      	ldr	r2, [pc, #520]	; (8002d6c <HAL_DMA_Start_IT+0x478>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d06d      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a80      	ldr	r2, [pc, #512]	; (8002d70 <HAL_DMA_Start_IT+0x47c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d068      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7f      	ldr	r2, [pc, #508]	; (8002d74 <HAL_DMA_Start_IT+0x480>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d063      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a7d      	ldr	r2, [pc, #500]	; (8002d78 <HAL_DMA_Start_IT+0x484>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d05e      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7c      	ldr	r2, [pc, #496]	; (8002d7c <HAL_DMA_Start_IT+0x488>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d059      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a7a      	ldr	r2, [pc, #488]	; (8002d80 <HAL_DMA_Start_IT+0x48c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d054      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a79      	ldr	r2, [pc, #484]	; (8002d84 <HAL_DMA_Start_IT+0x490>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d04f      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a77      	ldr	r2, [pc, #476]	; (8002d88 <HAL_DMA_Start_IT+0x494>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d04a      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a76      	ldr	r2, [pc, #472]	; (8002d8c <HAL_DMA_Start_IT+0x498>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d045      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <HAL_DMA_Start_IT+0x49c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d040      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a73      	ldr	r2, [pc, #460]	; (8002d94 <HAL_DMA_Start_IT+0x4a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d03b      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a71      	ldr	r2, [pc, #452]	; (8002d98 <HAL_DMA_Start_IT+0x4a4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d036      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a70      	ldr	r2, [pc, #448]	; (8002d9c <HAL_DMA_Start_IT+0x4a8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d031      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_DMA_Start_IT+0x4ac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02c      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6d      	ldr	r2, [pc, #436]	; (8002da4 <HAL_DMA_Start_IT+0x4b0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d027      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6b      	ldr	r2, [pc, #428]	; (8002da8 <HAL_DMA_Start_IT+0x4b4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_DMA_Start_IT+0x4b8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01d      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <HAL_DMA_Start_IT+0x4bc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <HAL_DMA_Start_IT+0x4c0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <HAL_DMA_Start_IT+0x4c4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a64      	ldr	r2, [pc, #400]	; (8002dbc <HAL_DMA_Start_IT+0x4c8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a62      	ldr	r2, [pc, #392]	; (8002dc0 <HAL_DMA_Start_IT+0x4cc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_DMA_Start_IT+0x350>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a61      	ldr	r2, [pc, #388]	; (8002dc4 <HAL_DMA_Start_IT+0x4d0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_DMA_Start_IT+0x354>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_DMA_Start_IT+0x356>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01a      	beq.n	8002c84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <HAL_DMA_Start_IT+0x474>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04a      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a36      	ldr	r2, [pc, #216]	; (8002d6c <HAL_DMA_Start_IT+0x478>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d045      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a34      	ldr	r2, [pc, #208]	; (8002d70 <HAL_DMA_Start_IT+0x47c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d040      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a33      	ldr	r2, [pc, #204]	; (8002d74 <HAL_DMA_Start_IT+0x480>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d03b      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a31      	ldr	r2, [pc, #196]	; (8002d78 <HAL_DMA_Start_IT+0x484>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d036      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <HAL_DMA_Start_IT+0x488>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2e      	ldr	r2, [pc, #184]	; (8002d80 <HAL_DMA_Start_IT+0x48c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02c      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2d      	ldr	r2, [pc, #180]	; (8002d84 <HAL_DMA_Start_IT+0x490>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d027      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <HAL_DMA_Start_IT+0x494>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_DMA_Start_IT+0x498>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d01d      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a28      	ldr	r2, [pc, #160]	; (8002d90 <HAL_DMA_Start_IT+0x49c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d018      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <HAL_DMA_Start_IT+0x4a0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a25      	ldr	r2, [pc, #148]	; (8002d98 <HAL_DMA_Start_IT+0x4a4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00e      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_DMA_Start_IT+0x4a8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_DMA_Start_IT+0x4ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_DMA_Start_IT+0x430>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <HAL_DMA_Start_IT+0x4b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <HAL_DMA_Start_IT+0x442>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e012      	b.n	8002d5c <HAL_DMA_Start_IT+0x468>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e009      	b.n	8002d5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40020010 	.word	0x40020010
 8002d6c:	40020028 	.word	0x40020028
 8002d70:	40020040 	.word	0x40020040
 8002d74:	40020058 	.word	0x40020058
 8002d78:	40020070 	.word	0x40020070
 8002d7c:	40020088 	.word	0x40020088
 8002d80:	400200a0 	.word	0x400200a0
 8002d84:	400200b8 	.word	0x400200b8
 8002d88:	40020410 	.word	0x40020410
 8002d8c:	40020428 	.word	0x40020428
 8002d90:	40020440 	.word	0x40020440
 8002d94:	40020458 	.word	0x40020458
 8002d98:	40020470 	.word	0x40020470
 8002d9c:	40020488 	.word	0x40020488
 8002da0:	400204a0 	.word	0x400204a0
 8002da4:	400204b8 	.word	0x400204b8
 8002da8:	58025408 	.word	0x58025408
 8002dac:	5802541c 	.word	0x5802541c
 8002db0:	58025430 	.word	0x58025430
 8002db4:	58025444 	.word	0x58025444
 8002db8:	58025458 	.word	0x58025458
 8002dbc:	5802546c 	.word	0x5802546c
 8002dc0:	58025480 	.word	0x58025480
 8002dc4:	58025494 	.word	0x58025494

08002dc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff f8d4 	bl	8001f7c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e2dc      	b.n	800339a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e2cd      	b.n	800339a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a76      	ldr	r2, [pc, #472]	; (8002fdc <HAL_DMA_Abort+0x214>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a74      	ldr	r2, [pc, #464]	; (8002fe0 <HAL_DMA_Abort+0x218>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <HAL_DMA_Abort+0x21c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a71      	ldr	r2, [pc, #452]	; (8002fe8 <HAL_DMA_Abort+0x220>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a70      	ldr	r2, [pc, #448]	; (8002fec <HAL_DMA_Abort+0x224>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_DMA_Abort+0x228>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6d      	ldr	r2, [pc, #436]	; (8002ff4 <HAL_DMA_Abort+0x22c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6b      	ldr	r2, [pc, #428]	; (8002ff8 <HAL_DMA_Abort+0x230>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_DMA_Abort+0x234>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a68      	ldr	r2, [pc, #416]	; (8003000 <HAL_DMA_Abort+0x238>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_DMA_Abort+0x23c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_DMA_Abort+0x240>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a64      	ldr	r2, [pc, #400]	; (800300c <HAL_DMA_Abort+0x244>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a62      	ldr	r2, [pc, #392]	; (8003010 <HAL_DMA_Abort+0x248>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a61      	ldr	r2, [pc, #388]	; (8003014 <HAL_DMA_Abort+0x24c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort+0xd6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <HAL_DMA_Abort+0x250>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Abort+0xda>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_DMA_Abort+0xdc>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 021e 	bic.w	r2, r2, #30
 8002eb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e00a      	b.n	8002ee6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020e 	bic.w	r2, r2, #14
 8002ede:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a3c      	ldr	r2, [pc, #240]	; (8002fdc <HAL_DMA_Abort+0x214>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d072      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <HAL_DMA_Abort+0x218>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d06d      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a39      	ldr	r2, [pc, #228]	; (8002fe4 <HAL_DMA_Abort+0x21c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d068      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <HAL_DMA_Abort+0x220>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d063      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a36      	ldr	r2, [pc, #216]	; (8002fec <HAL_DMA_Abort+0x224>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d05e      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <HAL_DMA_Abort+0x228>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d059      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <HAL_DMA_Abort+0x22c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d054      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a31      	ldr	r2, [pc, #196]	; (8002ff8 <HAL_DMA_Abort+0x230>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04f      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <HAL_DMA_Abort+0x234>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d04a      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <HAL_DMA_Abort+0x238>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d045      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2d      	ldr	r2, [pc, #180]	; (8003004 <HAL_DMA_Abort+0x23c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d040      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <HAL_DMA_Abort+0x240>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2a      	ldr	r2, [pc, #168]	; (800300c <HAL_DMA_Abort+0x244>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d036      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a28      	ldr	r2, [pc, #160]	; (8003010 <HAL_DMA_Abort+0x248>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a27      	ldr	r2, [pc, #156]	; (8003014 <HAL_DMA_Abort+0x24c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d02c      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_DMA_Abort+0x250>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d027      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a24      	ldr	r2, [pc, #144]	; (800301c <HAL_DMA_Abort+0x254>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_DMA_Abort+0x258>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_DMA_Abort+0x25c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_DMA_Abort+0x260>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_DMA_Abort+0x264>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_DMA_Abort+0x268>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_DMA_Abort+0x26c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort+0x20e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_DMA_Abort+0x270>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d132      	bne.n	800303c <HAL_DMA_Abort+0x274>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e031      	b.n	800303e <HAL_DMA_Abort+0x276>
 8002fda:	bf00      	nop
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	40020070 	.word	0x40020070
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	400200a0 	.word	0x400200a0
 8002ff8:	400200b8 	.word	0x400200b8
 8002ffc:	40020410 	.word	0x40020410
 8003000:	40020428 	.word	0x40020428
 8003004:	40020440 	.word	0x40020440
 8003008:	40020458 	.word	0x40020458
 800300c:	40020470 	.word	0x40020470
 8003010:	40020488 	.word	0x40020488
 8003014:	400204a0 	.word	0x400204a0
 8003018:	400204b8 	.word	0x400204b8
 800301c:	58025408 	.word	0x58025408
 8003020:	5802541c 	.word	0x5802541c
 8003024:	58025430 	.word	0x58025430
 8003028:	58025444 	.word	0x58025444
 800302c:	58025458 	.word	0x58025458
 8003030:	5802546c 	.word	0x5802546c
 8003034:	58025480 	.word	0x58025480
 8003038:	58025494 	.word	0x58025494
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6d      	ldr	r2, [pc, #436]	; (800320c <HAL_DMA_Abort+0x444>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04a      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_DMA_Abort+0x448>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d045      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_DMA_Abort+0x44c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d040      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a68      	ldr	r2, [pc, #416]	; (8003218 <HAL_DMA_Abort+0x450>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d03b      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a67      	ldr	r2, [pc, #412]	; (800321c <HAL_DMA_Abort+0x454>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d036      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_DMA_Abort+0x458>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d031      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a64      	ldr	r2, [pc, #400]	; (8003224 <HAL_DMA_Abort+0x45c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d02c      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a62      	ldr	r2, [pc, #392]	; (8003228 <HAL_DMA_Abort+0x460>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d027      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a61      	ldr	r2, [pc, #388]	; (800322c <HAL_DMA_Abort+0x464>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5f      	ldr	r2, [pc, #380]	; (8003230 <HAL_DMA_Abort+0x468>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <HAL_DMA_Abort+0x46c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_DMA_Abort+0x470>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <HAL_DMA_Abort+0x474>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a59      	ldr	r2, [pc, #356]	; (8003240 <HAL_DMA_Abort+0x478>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_DMA_Abort+0x47c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_DMA_Abort+0x32a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_DMA_Abort+0x480>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <HAL_DMA_Abort+0x33c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e007      	b.n	8003114 <HAL_DMA_Abort+0x34c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003114:	e013      	b.n	800313e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003116:	f7fe ff31 	bl	8001f7c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b05      	cmp	r3, #5
 8003122:	d90c      	bls.n	800313e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e12d      	b.n	800339a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2f      	ldr	r2, [pc, #188]	; (800320c <HAL_DMA_Abort+0x444>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04a      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2d      	ldr	r2, [pc, #180]	; (8003210 <HAL_DMA_Abort+0x448>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d045      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2c      	ldr	r2, [pc, #176]	; (8003214 <HAL_DMA_Abort+0x44c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <HAL_DMA_Abort+0x450>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d03b      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_DMA_Abort+0x454>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a27      	ldr	r2, [pc, #156]	; (8003220 <HAL_DMA_Abort+0x458>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_DMA_Abort+0x45c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_DMA_Abort+0x460>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_DMA_Abort+0x464>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <HAL_DMA_Abort+0x468>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a20      	ldr	r2, [pc, #128]	; (8003234 <HAL_DMA_Abort+0x46c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_DMA_Abort+0x470>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_DMA_Abort+0x474>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_DMA_Abort+0x478>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1a      	ldr	r2, [pc, #104]	; (8003244 <HAL_DMA_Abort+0x47c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_DMA_Abort+0x422>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_DMA_Abort+0x480>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_Abort+0x426>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_Abort+0x428>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02b      	beq.n	800324c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	223f      	movs	r2, #63	; 0x3f
 8003204:	409a      	lsls	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	e02a      	b.n	8003262 <HAL_DMA_Abort+0x49a>
 800320c:	40020010 	.word	0x40020010
 8003210:	40020028 	.word	0x40020028
 8003214:	40020040 	.word	0x40020040
 8003218:	40020058 	.word	0x40020058
 800321c:	40020070 	.word	0x40020070
 8003220:	40020088 	.word	0x40020088
 8003224:	400200a0 	.word	0x400200a0
 8003228:	400200b8 	.word	0x400200b8
 800322c:	40020410 	.word	0x40020410
 8003230:	40020428 	.word	0x40020428
 8003234:	40020440 	.word	0x40020440
 8003238:	40020458 	.word	0x40020458
 800323c:	40020470 	.word	0x40020470
 8003240:	40020488 	.word	0x40020488
 8003244:	400204a0 	.word	0x400204a0
 8003248:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a4f      	ldr	r2, [pc, #316]	; (80033a4 <HAL_DMA_Abort+0x5dc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d072      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4d      	ldr	r2, [pc, #308]	; (80033a8 <HAL_DMA_Abort+0x5e0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d06d      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <HAL_DMA_Abort+0x5e4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d068      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a4a      	ldr	r2, [pc, #296]	; (80033b0 <HAL_DMA_Abort+0x5e8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d063      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a49      	ldr	r2, [pc, #292]	; (80033b4 <HAL_DMA_Abort+0x5ec>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d05e      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a47      	ldr	r2, [pc, #284]	; (80033b8 <HAL_DMA_Abort+0x5f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d059      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a46      	ldr	r2, [pc, #280]	; (80033bc <HAL_DMA_Abort+0x5f4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d054      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a44      	ldr	r2, [pc, #272]	; (80033c0 <HAL_DMA_Abort+0x5f8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d04f      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a43      	ldr	r2, [pc, #268]	; (80033c4 <HAL_DMA_Abort+0x5fc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d04a      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_DMA_Abort+0x600>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d045      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a40      	ldr	r2, [pc, #256]	; (80033cc <HAL_DMA_Abort+0x604>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d040      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <HAL_DMA_Abort+0x608>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d03b      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3d      	ldr	r2, [pc, #244]	; (80033d4 <HAL_DMA_Abort+0x60c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d036      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <HAL_DMA_Abort+0x610>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d031      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <HAL_DMA_Abort+0x614>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d02c      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_DMA_Abort+0x618>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d027      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_DMA_Abort+0x61c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d022      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_DMA_Abort+0x620>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01d      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_DMA_Abort+0x624>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d018      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_DMA_Abort+0x628>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_DMA_Abort+0x62c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_DMA_Abort+0x630>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_DMA_Abort+0x634>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Abort+0x58a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <HAL_DMA_Abort+0x638>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_DMA_Abort+0x58e>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_DMA_Abort+0x590>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d015      	beq.n	8003388 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003364:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003386:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	58025408 	.word	0x58025408
 80033e8:	5802541c 	.word	0x5802541c
 80033ec:	58025430 	.word	0x58025430
 80033f0:	58025444 	.word	0x58025444
 80033f4:	58025458 	.word	0x58025458
 80033f8:	5802546c 	.word	0x5802546c
 80033fc:	58025480 	.word	0x58025480
 8003400:	58025494 	.word	0x58025494

08003404 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e237      	b.n	8003886 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d004      	beq.n	800342c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e22c      	b.n	8003886 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5c      	ldr	r2, [pc, #368]	; (80035a4 <HAL_DMA_Abort_IT+0x1a0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d04a      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_DMA_Abort_IT+0x1a4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d045      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a59      	ldr	r2, [pc, #356]	; (80035ac <HAL_DMA_Abort_IT+0x1a8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d040      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_DMA_Abort_IT+0x1ac>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d03b      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a56      	ldr	r2, [pc, #344]	; (80035b4 <HAL_DMA_Abort_IT+0x1b0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d036      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <HAL_DMA_Abort_IT+0x1b4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d031      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_DMA_Abort_IT+0x1b8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02c      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_DMA_Abort_IT+0x1bc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d027      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a50      	ldr	r2, [pc, #320]	; (80035c4 <HAL_DMA_Abort_IT+0x1c0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4f      	ldr	r2, [pc, #316]	; (80035c8 <HAL_DMA_Abort_IT+0x1c4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_DMA_Abort_IT+0x1c8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_DMA_Abort_IT+0x1cc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_DMA_Abort_IT+0x1d0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a49      	ldr	r2, [pc, #292]	; (80035d8 <HAL_DMA_Abort_IT+0x1d4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a47      	ldr	r2, [pc, #284]	; (80035dc <HAL_DMA_Abort_IT+0x1d8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_Abort_IT+0xc8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_DMA_Abort_IT+0x1dc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_Abort_IT+0xcc>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_DMA_Abort_IT+0xce>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8086 	beq.w	80035e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <HAL_DMA_Abort_IT+0x1a0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04a      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_DMA_Abort_IT+0x1a4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d045      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_DMA_Abort_IT+0x1a8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d040      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_DMA_Abort_IT+0x1ac>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d03b      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_DMA_Abort_IT+0x1b0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d036      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_DMA_Abort_IT+0x1b4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d031      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a26      	ldr	r2, [pc, #152]	; (80035bc <HAL_DMA_Abort_IT+0x1b8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02c      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_DMA_Abort_IT+0x1bc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d027      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <HAL_DMA_Abort_IT+0x1c0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_DMA_Abort_IT+0x1c4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d01d      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <HAL_DMA_Abort_IT+0x1c8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_DMA_Abort_IT+0x1cc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_DMA_Abort_IT+0x1d0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_DMA_Abort_IT+0x1d4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_DMA_Abort_IT+0x1d8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_DMA_Abort_IT+0x17c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_DMA_Abort_IT+0x1dc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d108      	bne.n	8003592 <HAL_DMA_Abort_IT+0x18e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e178      	b.n	8003884 <HAL_DMA_Abort_IT+0x480>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e16f      	b.n	8003884 <HAL_DMA_Abort_IT+0x480>
 80035a4:	40020010 	.word	0x40020010
 80035a8:	40020028 	.word	0x40020028
 80035ac:	40020040 	.word	0x40020040
 80035b0:	40020058 	.word	0x40020058
 80035b4:	40020070 	.word	0x40020070
 80035b8:	40020088 	.word	0x40020088
 80035bc:	400200a0 	.word	0x400200a0
 80035c0:	400200b8 	.word	0x400200b8
 80035c4:	40020410 	.word	0x40020410
 80035c8:	40020428 	.word	0x40020428
 80035cc:	40020440 	.word	0x40020440
 80035d0:	40020458 	.word	0x40020458
 80035d4:	40020470 	.word	0x40020470
 80035d8:	40020488 	.word	0x40020488
 80035dc:	400204a0 	.word	0x400204a0
 80035e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 020e 	bic.w	r2, r2, #14
 80035f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6c      	ldr	r2, [pc, #432]	; (80037ac <HAL_DMA_Abort_IT+0x3a8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6b      	ldr	r2, [pc, #428]	; (80037b0 <HAL_DMA_Abort_IT+0x3ac>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <HAL_DMA_Abort_IT+0x3b0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a68      	ldr	r2, [pc, #416]	; (80037b8 <HAL_DMA_Abort_IT+0x3b4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a66      	ldr	r2, [pc, #408]	; (80037bc <HAL_DMA_Abort_IT+0x3b8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_DMA_Abort_IT+0x3bc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a63      	ldr	r2, [pc, #396]	; (80037c4 <HAL_DMA_Abort_IT+0x3c0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a62      	ldr	r2, [pc, #392]	; (80037c8 <HAL_DMA_Abort_IT+0x3c4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a60      	ldr	r2, [pc, #384]	; (80037cc <HAL_DMA_Abort_IT+0x3c8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5f      	ldr	r2, [pc, #380]	; (80037d0 <HAL_DMA_Abort_IT+0x3cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <HAL_DMA_Abort_IT+0x3d0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5c      	ldr	r2, [pc, #368]	; (80037d8 <HAL_DMA_Abort_IT+0x3d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5a      	ldr	r2, [pc, #360]	; (80037dc <HAL_DMA_Abort_IT+0x3d8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a59      	ldr	r2, [pc, #356]	; (80037e0 <HAL_DMA_Abort_IT+0x3dc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_DMA_Abort_IT+0x3e0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x290>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a56      	ldr	r2, [pc, #344]	; (80037e8 <HAL_DMA_Abort_IT+0x3e4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_Abort_IT+0x2a2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <HAL_DMA_Abort_IT+0x2b2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <HAL_DMA_Abort_IT+0x3a8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d072      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <HAL_DMA_Abort_IT+0x3ac>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d06d      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a39      	ldr	r2, [pc, #228]	; (80037b4 <HAL_DMA_Abort_IT+0x3b0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d068      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <HAL_DMA_Abort_IT+0x3b4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d063      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a36      	ldr	r2, [pc, #216]	; (80037bc <HAL_DMA_Abort_IT+0x3b8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d05e      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <HAL_DMA_Abort_IT+0x3bc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d059      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a33      	ldr	r2, [pc, #204]	; (80037c4 <HAL_DMA_Abort_IT+0x3c0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d054      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <HAL_DMA_Abort_IT+0x3c4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04f      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a30      	ldr	r2, [pc, #192]	; (80037cc <HAL_DMA_Abort_IT+0x3c8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04a      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2e      	ldr	r2, [pc, #184]	; (80037d0 <HAL_DMA_Abort_IT+0x3cc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d045      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <HAL_DMA_Abort_IT+0x3d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d040      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <HAL_DMA_Abort_IT+0x3d4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d03b      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <HAL_DMA_Abort_IT+0x3d8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d036      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <HAL_DMA_Abort_IT+0x3dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d031      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_DMA_Abort_IT+0x3e0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d02c      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <HAL_DMA_Abort_IT+0x3e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d027      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a24      	ldr	r2, [pc, #144]	; (80037ec <HAL_DMA_Abort_IT+0x3e8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <HAL_DMA_Abort_IT+0x3ec>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01d      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_DMA_Abort_IT+0x3f0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <HAL_DMA_Abort_IT+0x3f4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_DMA_Abort_IT+0x3f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_DMA_Abort_IT+0x3fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_DMA_Abort_IT+0x400>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x3a2>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_DMA_Abort_IT+0x404>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d132      	bne.n	800380c <HAL_DMA_Abort_IT+0x408>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e031      	b.n	800380e <HAL_DMA_Abort_IT+0x40a>
 80037aa:	bf00      	nop
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	58025408 	.word	0x58025408
 80037f0:	5802541c 	.word	0x5802541c
 80037f4:	58025430 	.word	0x58025430
 80037f8:	58025444 	.word	0x58025444
 80037fc:	58025458 	.word	0x58025458
 8003800:	5802546c 	.word	0x5802546c
 8003804:	58025480 	.word	0x58025480
 8003808:	58025494 	.word	0x58025494
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d028      	beq.n	8003864 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003840:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003862:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop

08003890 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800389c:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_DMA_IRQHandler+0x1ac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a67      	ldr	r2, [pc, #412]	; (8003a40 <HAL_DMA_IRQHandler+0x1b0>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5f      	ldr	r2, [pc, #380]	; (8003a44 <HAL_DMA_IRQHandler+0x1b4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMA_IRQHandler+0x1b8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_IRQHandler+0x1bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_DMA_IRQHandler+0x1c0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_IRQHandler+0x1c4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_DMA_IRQHandler+0x1c8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_IRQHandler+0x1cc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_DMA_IRQHandler+0x1d0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	; (8003a64 <HAL_DMA_IRQHandler+0x1d4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_DMA_IRQHandler+0x1d8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_DMA_IRQHandler+0x1dc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_DMA_IRQHandler+0x1e0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <HAL_DMA_IRQHandler+0x1e4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <HAL_DMA_IRQHandler+0x1e8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <HAL_DMA_IRQHandler+0x1ec>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_IRQHandler+0xd2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a48      	ldr	r2, [pc, #288]	; (8003a80 <HAL_DMA_IRQHandler+0x1f0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_DMA_IRQHandler+0xd6>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_DMA_IRQHandler+0xd8>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 842b 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2208      	movs	r2, #8
 8003978:	409a      	lsls	r2, r3
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a2 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_DMA_IRQHandler+0x1b4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d04a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <HAL_DMA_IRQHandler+0x1b8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d045      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2b      	ldr	r2, [pc, #172]	; (8003a4c <HAL_DMA_IRQHandler+0x1bc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d040      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_DMA_IRQHandler+0x1c0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d03b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_DMA_IRQHandler+0x1c4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d036      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_DMA_IRQHandler+0x1c8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d031      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_DMA_IRQHandler+0x1cc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_DMA_IRQHandler+0x1d0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d027      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_DMA_IRQHandler+0x1d4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d022      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_DMA_IRQHandler+0x1d8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d01d      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_DMA_IRQHandler+0x1dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d018      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_DMA_IRQHandler+0x1e0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_DMA_IRQHandler+0x1e4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_DMA_IRQHandler+0x1e8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_DMA_IRQHandler+0x1ec>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x194>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_DMA_IRQHandler+0x1f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d12f      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x1f4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e02e      	b.n	8003a98 <HAL_DMA_IRQHandler+0x208>
 8003a3a:	bf00      	nop
 8003a3c:	24000000 	.word	0x24000000
 8003a40:	1b4e81b5 	.word	0x1b4e81b5
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06e      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <HAL_DMA_IRQHandler+0x3f8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d04a      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a67      	ldr	r2, [pc, #412]	; (8003c8c <HAL_DMA_IRQHandler+0x3fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d045      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a66      	ldr	r2, [pc, #408]	; (8003c90 <HAL_DMA_IRQHandler+0x400>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d040      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <HAL_DMA_IRQHandler+0x404>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d03b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a63      	ldr	r2, [pc, #396]	; (8003c98 <HAL_DMA_IRQHandler+0x408>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d036      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_DMA_IRQHandler+0x40c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d031      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a60      	ldr	r2, [pc, #384]	; (8003ca0 <HAL_DMA_IRQHandler+0x410>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d02c      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_DMA_IRQHandler+0x414>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d027      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5d      	ldr	r2, [pc, #372]	; (8003ca8 <HAL_DMA_IRQHandler+0x418>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d022      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5b      	ldr	r2, [pc, #364]	; (8003cac <HAL_DMA_IRQHandler+0x41c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5a      	ldr	r2, [pc, #360]	; (8003cb0 <HAL_DMA_IRQHandler+0x420>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_DMA_IRQHandler+0x424>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a57      	ldr	r2, [pc, #348]	; (8003cb8 <HAL_DMA_IRQHandler+0x428>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a55      	ldr	r2, [pc, #340]	; (8003cbc <HAL_DMA_IRQHandler+0x42c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a54      	ldr	r2, [pc, #336]	; (8003cc0 <HAL_DMA_IRQHandler+0x430>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x2ee>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <HAL_DMA_IRQHandler+0x434>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10a      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x304>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e003      	b.n	8003b9c <HAL_DMA_IRQHandler+0x30c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2201      	movs	r2, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f043 0202 	orr.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 808f 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <HAL_DMA_IRQHandler+0x3f8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d04a      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2a      	ldr	r2, [pc, #168]	; (8003c8c <HAL_DMA_IRQHandler+0x3fc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d045      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a29      	ldr	r2, [pc, #164]	; (8003c90 <HAL_DMA_IRQHandler+0x400>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d040      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <HAL_DMA_IRQHandler+0x404>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03b      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <HAL_DMA_IRQHandler+0x408>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d036      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_DMA_IRQHandler+0x40c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <HAL_DMA_IRQHandler+0x410>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d02c      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a21      	ldr	r2, [pc, #132]	; (8003ca4 <HAL_DMA_IRQHandler+0x414>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d027      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <HAL_DMA_IRQHandler+0x418>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_DMA_IRQHandler+0x41c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01d      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_DMA_IRQHandler+0x420>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_DMA_IRQHandler+0x424>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <HAL_DMA_IRQHandler+0x428>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00e      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_DMA_IRQHandler+0x42c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <HAL_DMA_IRQHandler+0x430>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x3e2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_DMA_IRQHandler+0x434>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12a      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x438>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e023      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x440>
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028
 8003c90:	40020040 	.word	0x40020040
 8003c94:	40020058 	.word	0x40020058
 8003c98:	40020070 	.word	0x40020070
 8003c9c:	40020088 	.word	0x40020088
 8003ca0:	400200a0 	.word	0x400200a0
 8003ca4:	400200b8 	.word	0x400200b8
 8003ca8:	40020410 	.word	0x40020410
 8003cac:	40020428 	.word	0x40020428
 8003cb0:	40020440 	.word	0x40020440
 8003cb4:	40020458 	.word	0x40020458
 8003cb8:	40020470 	.word	0x40020470
 8003cbc:	40020488 	.word	0x40020488
 8003cc0:	400204a0 	.word	0x400204a0
 8003cc4:	400204b8 	.word	0x400204b8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2204      	movs	r2, #4
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a6 	beq.w	8003e52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a85      	ldr	r2, [pc, #532]	; (8003f20 <HAL_DMA_IRQHandler+0x690>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04a      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a83      	ldr	r2, [pc, #524]	; (8003f24 <HAL_DMA_IRQHandler+0x694>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d045      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a82      	ldr	r2, [pc, #520]	; (8003f28 <HAL_DMA_IRQHandler+0x698>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a80      	ldr	r2, [pc, #512]	; (8003f2c <HAL_DMA_IRQHandler+0x69c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7f      	ldr	r2, [pc, #508]	; (8003f30 <HAL_DMA_IRQHandler+0x6a0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d036      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7d      	ldr	r2, [pc, #500]	; (8003f34 <HAL_DMA_IRQHandler+0x6a4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7c      	ldr	r2, [pc, #496]	; (8003f38 <HAL_DMA_IRQHandler+0x6a8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d02c      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_DMA_IRQHandler+0x6ac>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d027      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <HAL_DMA_IRQHandler+0x6b0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a77      	ldr	r2, [pc, #476]	; (8003f44 <HAL_DMA_IRQHandler+0x6b4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a76      	ldr	r2, [pc, #472]	; (8003f48 <HAL_DMA_IRQHandler+0x6b8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <HAL_DMA_IRQHandler+0x6bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a73      	ldr	r2, [pc, #460]	; (8003f50 <HAL_DMA_IRQHandler+0x6c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a71      	ldr	r2, [pc, #452]	; (8003f54 <HAL_DMA_IRQHandler+0x6c4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a70      	ldr	r2, [pc, #448]	; (8003f58 <HAL_DMA_IRQHandler+0x6c8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x516>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_DMA_IRQHandler+0x6cc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10a      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x52c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e009      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x540>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d03e      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2210      	movs	r2, #16
 8003dde:	409a      	lsls	r2, r3
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d024      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e01f      	b.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
 8003e22:	e016      	b.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0208 	bic.w	r2, r2, #8
 8003e40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8110 	beq.w	8004088 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <HAL_DMA_IRQHandler+0x690>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d04a      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <HAL_DMA_IRQHandler+0x694>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d045      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <HAL_DMA_IRQHandler+0x698>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d040      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a28      	ldr	r2, [pc, #160]	; (8003f2c <HAL_DMA_IRQHandler+0x69c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d03b      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <HAL_DMA_IRQHandler+0x6a0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d036      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a25      	ldr	r2, [pc, #148]	; (8003f34 <HAL_DMA_IRQHandler+0x6a4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d031      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <HAL_DMA_IRQHandler+0x6a8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d02c      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_DMA_IRQHandler+0x6ac>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d027      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_DMA_IRQHandler+0x6b0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_DMA_IRQHandler+0x6b4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01d      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_DMA_IRQHandler+0x6b8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d018      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_DMA_IRQHandler+0x6bc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_DMA_IRQHandler+0x6c0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_DMA_IRQHandler+0x6c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_DMA_IRQHandler+0x6c8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x678>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_DMA_IRQHandler+0x6cc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d12b      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x6d0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e02a      	b.n	8003f74 <HAL_DMA_IRQHandler+0x6e4>
 8003f1e:	bf00      	nop
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8087 	beq.w	8004088 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2220      	movs	r2, #32
 8003f84:	409a      	lsls	r2, r3
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d139      	bne.n	800400a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0216 	bic.w	r2, r2, #22
 8003fa4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0x736>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0208 	bic.w	r2, r2, #8
 8003fd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	223f      	movs	r2, #63	; 0x3f
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 834a 	beq.w	8004694 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
          }
          return;
 8004008:	e344      	b.n	8004694 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d018      	beq.n	800404a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d108      	bne.n	8004038 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02c      	beq.n	8004088 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
 8004036:	e027      	b.n	8004088 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d023      	beq.n	8004088 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e01e      	b.n	8004088 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10f      	bne.n	8004078 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0210 	bic.w	r2, r2, #16
 8004066:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8306 	beq.w	800469e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8088 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2204      	movs	r2, #4
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7a      	ldr	r2, [pc, #488]	; (8004298 <HAL_DMA_IRQHandler+0xa08>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a79      	ldr	r2, [pc, #484]	; (800429c <HAL_DMA_IRQHandler+0xa0c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a77      	ldr	r2, [pc, #476]	; (80042a0 <HAL_DMA_IRQHandler+0xa10>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a76      	ldr	r2, [pc, #472]	; (80042a4 <HAL_DMA_IRQHandler+0xa14>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_DMA_IRQHandler+0xa18>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_DMA_IRQHandler+0xa1c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a71      	ldr	r2, [pc, #452]	; (80042b0 <HAL_DMA_IRQHandler+0xa20>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a70      	ldr	r2, [pc, #448]	; (80042b4 <HAL_DMA_IRQHandler+0xa24>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6e      	ldr	r2, [pc, #440]	; (80042b8 <HAL_DMA_IRQHandler+0xa28>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6d      	ldr	r2, [pc, #436]	; (80042bc <HAL_DMA_IRQHandler+0xa2c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_DMA_IRQHandler+0xa30>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6a      	ldr	r2, [pc, #424]	; (80042c4 <HAL_DMA_IRQHandler+0xa34>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a68      	ldr	r2, [pc, #416]	; (80042c8 <HAL_DMA_IRQHandler+0xa38>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a67      	ldr	r2, [pc, #412]	; (80042cc <HAL_DMA_IRQHandler+0xa3c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_DMA_IRQHandler+0xa40>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_IRQHandler+0x8b8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <HAL_DMA_IRQHandler+0xa44>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_DMA_IRQHandler+0x8ca>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <HAL_DMA_IRQHandler+0x8da>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d307      	bcc.n	8004186 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_DMA_IRQHandler+0x8da>
 8004184:	e000      	b.n	8004188 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004186:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2203      	movs	r2, #3
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800419e:	e003      	b.n	80041a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8272 	beq.w	800469e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
 80041c2:	e26c      	b.n	800469e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_DMA_IRQHandler+0xa48>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a42      	ldr	r2, [pc, #264]	; (80042dc <HAL_DMA_IRQHandler+0xa4c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a40      	ldr	r2, [pc, #256]	; (80042e0 <HAL_DMA_IRQHandler+0xa50>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <HAL_DMA_IRQHandler+0xa54>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3d      	ldr	r2, [pc, #244]	; (80042e8 <HAL_DMA_IRQHandler+0xa58>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3c      	ldr	r2, [pc, #240]	; (80042ec <HAL_DMA_IRQHandler+0xa5c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3a      	ldr	r2, [pc, #232]	; (80042f0 <HAL_DMA_IRQHandler+0xa60>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_IRQHandler+0x984>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_DMA_IRQHandler+0xa64>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_DMA_IRQHandler+0x988>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_DMA_IRQHandler+0x98a>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 823f 	beq.w	800469e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80cd 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xb48>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80c7 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2204      	movs	r2, #4
 8004254:	409a      	lsls	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d049      	beq.n	80042f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8210 	beq.w	8004698 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004280:	e20a      	b.n	8004698 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8206 	beq.w	8004698 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004294:	e200      	b.n	8004698 <HAL_DMA_IRQHandler+0xe08>
 8004296:	bf00      	nop
 8004298:	40020010 	.word	0x40020010
 800429c:	40020028 	.word	0x40020028
 80042a0:	40020040 	.word	0x40020040
 80042a4:	40020058 	.word	0x40020058
 80042a8:	40020070 	.word	0x40020070
 80042ac:	40020088 	.word	0x40020088
 80042b0:	400200a0 	.word	0x400200a0
 80042b4:	400200b8 	.word	0x400200b8
 80042b8:	40020410 	.word	0x40020410
 80042bc:	40020428 	.word	0x40020428
 80042c0:	40020440 	.word	0x40020440
 80042c4:	40020458 	.word	0x40020458
 80042c8:	40020470 	.word	0x40020470
 80042cc:	40020488 	.word	0x40020488
 80042d0:	400204a0 	.word	0x400204a0
 80042d4:	400204b8 	.word	0x400204b8
 80042d8:	58025408 	.word	0x58025408
 80042dc:	5802541c 	.word	0x5802541c
 80042e0:	58025430 	.word	0x58025430
 80042e4:	58025444 	.word	0x58025444
 80042e8:	58025458 	.word	0x58025458
 80042ec:	5802546c 	.word	0x5802546c
 80042f0:	58025480 	.word	0x58025480
 80042f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d160      	bne.n	80043c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7f      	ldr	r2, [pc, #508]	; (8004504 <HAL_DMA_IRQHandler+0xc74>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a7d      	ldr	r2, [pc, #500]	; (8004508 <HAL_DMA_IRQHandler+0xc78>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7c      	ldr	r2, [pc, #496]	; (800450c <HAL_DMA_IRQHandler+0xc7c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a7a      	ldr	r2, [pc, #488]	; (8004510 <HAL_DMA_IRQHandler+0xc80>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a79      	ldr	r2, [pc, #484]	; (8004514 <HAL_DMA_IRQHandler+0xc84>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a77      	ldr	r2, [pc, #476]	; (8004518 <HAL_DMA_IRQHandler+0xc88>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a76      	ldr	r2, [pc, #472]	; (800451c <HAL_DMA_IRQHandler+0xc8c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a74      	ldr	r2, [pc, #464]	; (8004520 <HAL_DMA_IRQHandler+0xc90>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a73      	ldr	r2, [pc, #460]	; (8004524 <HAL_DMA_IRQHandler+0xc94>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a71      	ldr	r2, [pc, #452]	; (8004528 <HAL_DMA_IRQHandler+0xc98>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a70      	ldr	r2, [pc, #448]	; (800452c <HAL_DMA_IRQHandler+0xc9c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6e      	ldr	r2, [pc, #440]	; (8004530 <HAL_DMA_IRQHandler+0xca0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6d      	ldr	r2, [pc, #436]	; (8004534 <HAL_DMA_IRQHandler+0xca4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6b      	ldr	r2, [pc, #428]	; (8004538 <HAL_DMA_IRQHandler+0xca8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6a      	ldr	r2, [pc, #424]	; (800453c <HAL_DMA_IRQHandler+0xcac>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_IRQHandler+0xb12>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a68      	ldr	r2, [pc, #416]	; (8004540 <HAL_DMA_IRQHandler+0xcb0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <HAL_DMA_IRQHandler+0xb24>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0208 	bic.w	r2, r2, #8
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e007      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb34>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8165 	beq.w	8004698 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d6:	e15f      	b.n	8004698 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2202      	movs	r2, #2
 80043e2:	409a      	lsls	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80c5 	beq.w	8004578 <HAL_DMA_IRQHandler+0xce8>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80bf 	beq.w	8004578 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2202      	movs	r2, #2
 8004404:	409a      	lsls	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d018      	beq.n	8004446 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 813a 	beq.w	800469c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004430:	e134      	b.n	800469c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8130 	beq.w	800469c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004444:	e12a      	b.n	800469c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 8089 	bne.w	8004564 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2b      	ldr	r2, [pc, #172]	; (8004504 <HAL_DMA_IRQHandler+0xc74>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d04a      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <HAL_DMA_IRQHandler+0xc78>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d045      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <HAL_DMA_IRQHandler+0xc7c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d040      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_DMA_IRQHandler+0xc80>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d03b      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a25      	ldr	r2, [pc, #148]	; (8004514 <HAL_DMA_IRQHandler+0xc84>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d036      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_DMA_IRQHandler+0xc88>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d031      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_DMA_IRQHandler+0xc8c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d02c      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <HAL_DMA_IRQHandler+0xc90>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d027      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_DMA_IRQHandler+0xc94>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d022      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_DMA_IRQHandler+0xc98>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01d      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_DMA_IRQHandler+0xc9c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_DMA_IRQHandler+0xca0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a19      	ldr	r2, [pc, #100]	; (8004534 <HAL_DMA_IRQHandler+0xca4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_DMA_IRQHandler+0xca8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a16      	ldr	r2, [pc, #88]	; (800453c <HAL_DMA_IRQHandler+0xcac>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_DMA_IRQHandler+0xc62>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_DMA_IRQHandler+0xcb0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d128      	bne.n	8004544 <HAL_DMA_IRQHandler+0xcb4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0214 	bic.w	r2, r2, #20
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e027      	b.n	8004554 <HAL_DMA_IRQHandler+0xcc4>
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 020a 	bic.w	r2, r2, #10
 8004552:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8097 	beq.w	800469c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004576:	e091      	b.n	800469c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2208      	movs	r2, #8
 8004582:	409a      	lsls	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8088 	beq.w	800469e <HAL_DMA_IRQHandler+0xe0e>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8082 	beq.w	800469e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <HAL_DMA_IRQHandler+0xe14>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d04a      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <HAL_DMA_IRQHandler+0xe18>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d045      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3e      	ldr	r2, [pc, #248]	; (80046ac <HAL_DMA_IRQHandler+0xe1c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d040      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3c      	ldr	r2, [pc, #240]	; (80046b0 <HAL_DMA_IRQHandler+0xe20>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d03b      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3b      	ldr	r2, [pc, #236]	; (80046b4 <HAL_DMA_IRQHandler+0xe24>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d036      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a39      	ldr	r2, [pc, #228]	; (80046b8 <HAL_DMA_IRQHandler+0xe28>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d031      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_DMA_IRQHandler+0xe2c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d02c      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a36      	ldr	r2, [pc, #216]	; (80046c0 <HAL_DMA_IRQHandler+0xe30>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d027      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a35      	ldr	r2, [pc, #212]	; (80046c4 <HAL_DMA_IRQHandler+0xe34>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a33      	ldr	r2, [pc, #204]	; (80046c8 <HAL_DMA_IRQHandler+0xe38>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_DMA_IRQHandler+0xe3c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d018      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_DMA_IRQHandler+0xe40>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <HAL_DMA_IRQHandler+0xe44>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_DMA_IRQHandler+0xe48>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2c      	ldr	r2, [pc, #176]	; (80046dc <HAL_DMA_IRQHandler+0xe4c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_DMA_IRQHandler+0xdaa>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <HAL_DMA_IRQHandler+0xe50>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <HAL_DMA_IRQHandler+0xdbc>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 021c 	bic.w	r2, r2, #28
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e007      	b.n	800465c <HAL_DMA_IRQHandler+0xdcc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 020e 	bic.w	r2, r2, #14
 800465a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
 8004692:	e004      	b.n	800469e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800469e:	3728      	adds	r7, #40	; 0x28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40020010 	.word	0x40020010
 80046a8:	40020028 	.word	0x40020028
 80046ac:	40020040 	.word	0x40020040
 80046b0:	40020058 	.word	0x40020058
 80046b4:	40020070 	.word	0x40020070
 80046b8:	40020088 	.word	0x40020088
 80046bc:	400200a0 	.word	0x400200a0
 80046c0:	400200b8 	.word	0x400200b8
 80046c4:	40020410 	.word	0x40020410
 80046c8:	40020428 	.word	0x40020428
 80046cc:	40020440 	.word	0x40020440
 80046d0:	40020458 	.word	0x40020458
 80046d4:	40020470 	.word	0x40020470
 80046d8:	40020488 	.word	0x40020488
 80046dc:	400204a0 	.word	0x400204a0
 80046e0:	400204b8 	.word	0x400204b8

080046e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7f      	ldr	r2, [pc, #508]	; (8004918 <DMA_SetConfig+0x21c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d072      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a7d      	ldr	r2, [pc, #500]	; (800491c <DMA_SetConfig+0x220>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d06d      	beq.n	8004806 <DMA_SetConfig+0x10a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a7c      	ldr	r2, [pc, #496]	; (8004920 <DMA_SetConfig+0x224>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d068      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a7a      	ldr	r2, [pc, #488]	; (8004924 <DMA_SetConfig+0x228>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d063      	beq.n	8004806 <DMA_SetConfig+0x10a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a79      	ldr	r2, [pc, #484]	; (8004928 <DMA_SetConfig+0x22c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d05e      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a77      	ldr	r2, [pc, #476]	; (800492c <DMA_SetConfig+0x230>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d059      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a76      	ldr	r2, [pc, #472]	; (8004930 <DMA_SetConfig+0x234>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d054      	beq.n	8004806 <DMA_SetConfig+0x10a>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a74      	ldr	r2, [pc, #464]	; (8004934 <DMA_SetConfig+0x238>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04f      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a73      	ldr	r2, [pc, #460]	; (8004938 <DMA_SetConfig+0x23c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a71      	ldr	r2, [pc, #452]	; (800493c <DMA_SetConfig+0x240>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <DMA_SetConfig+0x10a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a70      	ldr	r2, [pc, #448]	; (8004940 <DMA_SetConfig+0x244>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6e      	ldr	r2, [pc, #440]	; (8004944 <DMA_SetConfig+0x248>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <DMA_SetConfig+0x10a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6d      	ldr	r2, [pc, #436]	; (8004948 <DMA_SetConfig+0x24c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <DMA_SetConfig+0x10a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6b      	ldr	r2, [pc, #428]	; (800494c <DMA_SetConfig+0x250>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6a      	ldr	r2, [pc, #424]	; (8004950 <DMA_SetConfig+0x254>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a68      	ldr	r2, [pc, #416]	; (8004954 <DMA_SetConfig+0x258>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a67      	ldr	r2, [pc, #412]	; (8004958 <DMA_SetConfig+0x25c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	; (800495c <DMA_SetConfig+0x260>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a64      	ldr	r2, [pc, #400]	; (8004960 <DMA_SetConfig+0x264>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a62      	ldr	r2, [pc, #392]	; (8004964 <DMA_SetConfig+0x268>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a61      	ldr	r2, [pc, #388]	; (8004968 <DMA_SetConfig+0x26c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a5f      	ldr	r2, [pc, #380]	; (800496c <DMA_SetConfig+0x270>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5e      	ldr	r2, [pc, #376]	; (8004970 <DMA_SetConfig+0x274>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <DMA_SetConfig+0x10a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5c      	ldr	r2, [pc, #368]	; (8004974 <DMA_SetConfig+0x278>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <DMA_SetConfig+0x10e>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <DMA_SetConfig+0x110>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004818:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800482a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a39      	ldr	r2, [pc, #228]	; (8004918 <DMA_SetConfig+0x21c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04a      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a38      	ldr	r2, [pc, #224]	; (800491c <DMA_SetConfig+0x220>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d045      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a36      	ldr	r2, [pc, #216]	; (8004920 <DMA_SetConfig+0x224>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d040      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a35      	ldr	r2, [pc, #212]	; (8004924 <DMA_SetConfig+0x228>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d03b      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a33      	ldr	r2, [pc, #204]	; (8004928 <DMA_SetConfig+0x22c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d036      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a32      	ldr	r2, [pc, #200]	; (800492c <DMA_SetConfig+0x230>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d031      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	; (8004930 <DMA_SetConfig+0x234>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02c      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2f      	ldr	r2, [pc, #188]	; (8004934 <DMA_SetConfig+0x238>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d027      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <DMA_SetConfig+0x23c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2c      	ldr	r2, [pc, #176]	; (800493c <DMA_SetConfig+0x240>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <DMA_SetConfig+0x244>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <DMA_SetConfig+0x248>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <DMA_SetConfig+0x24c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a26      	ldr	r2, [pc, #152]	; (800494c <DMA_SetConfig+0x250>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a24      	ldr	r2, [pc, #144]	; (8004950 <DMA_SetConfig+0x254>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <DMA_SetConfig+0x1d0>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a23      	ldr	r2, [pc, #140]	; (8004954 <DMA_SetConfig+0x258>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <DMA_SetConfig+0x1d4>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <DMA_SetConfig+0x1d6>
 80048d0:	2300      	movs	r3, #0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d059      	beq.n	800498a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	223f      	movs	r2, #63	; 0x3f
 80048e0:	409a      	lsls	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d138      	bne.n	8004978 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004916:	e086      	b.n	8004a26 <DMA_SetConfig+0x32a>
 8004918:	40020010 	.word	0x40020010
 800491c:	40020028 	.word	0x40020028
 8004920:	40020040 	.word	0x40020040
 8004924:	40020058 	.word	0x40020058
 8004928:	40020070 	.word	0x40020070
 800492c:	40020088 	.word	0x40020088
 8004930:	400200a0 	.word	0x400200a0
 8004934:	400200b8 	.word	0x400200b8
 8004938:	40020410 	.word	0x40020410
 800493c:	40020428 	.word	0x40020428
 8004940:	40020440 	.word	0x40020440
 8004944:	40020458 	.word	0x40020458
 8004948:	40020470 	.word	0x40020470
 800494c:	40020488 	.word	0x40020488
 8004950:	400204a0 	.word	0x400204a0
 8004954:	400204b8 	.word	0x400204b8
 8004958:	58025408 	.word	0x58025408
 800495c:	5802541c 	.word	0x5802541c
 8004960:	58025430 	.word	0x58025430
 8004964:	58025444 	.word	0x58025444
 8004968:	58025458 	.word	0x58025458
 800496c:	5802546c 	.word	0x5802546c
 8004970:	58025480 	.word	0x58025480
 8004974:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
}
 8004988:	e04d      	b.n	8004a26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <DMA_SetConfig+0x338>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d022      	beq.n	80049da <DMA_SetConfig+0x2de>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <DMA_SetConfig+0x33c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01d      	beq.n	80049da <DMA_SetConfig+0x2de>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a26      	ldr	r2, [pc, #152]	; (8004a3c <DMA_SetConfig+0x340>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <DMA_SetConfig+0x2de>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <DMA_SetConfig+0x344>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <DMA_SetConfig+0x2de>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <DMA_SetConfig+0x348>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <DMA_SetConfig+0x2de>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <DMA_SetConfig+0x34c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <DMA_SetConfig+0x2de>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <DMA_SetConfig+0x350>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <DMA_SetConfig+0x2de>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <DMA_SetConfig+0x354>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <DMA_SetConfig+0x2e2>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <DMA_SetConfig+0x2e4>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d108      	bne.n	8004a16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	60da      	str	r2, [r3, #12]
}
 8004a14:	e007      	b.n	8004a26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	60da      	str	r2, [r3, #12]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	58025408 	.word	0x58025408
 8004a38:	5802541c 	.word	0x5802541c
 8004a3c:	58025430 	.word	0x58025430
 8004a40:	58025444 	.word	0x58025444
 8004a44:	58025458 	.word	0x58025458
 8004a48:	5802546c 	.word	0x5802546c
 8004a4c:	58025480 	.word	0x58025480
 8004a50:	58025494 	.word	0x58025494

08004a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <DMA_CalcBaseAndBitshift+0x118>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d04a      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a41      	ldr	r2, [pc, #260]	; (8004b70 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d045      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <DMA_CalcBaseAndBitshift+0x120>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d040      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3e      	ldr	r2, [pc, #248]	; (8004b78 <DMA_CalcBaseAndBitshift+0x124>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d03b      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <DMA_CalcBaseAndBitshift+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d036      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d031      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a39      	ldr	r2, [pc, #228]	; (8004b84 <DMA_CalcBaseAndBitshift+0x130>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02c      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <DMA_CalcBaseAndBitshift+0x134>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d027      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a36      	ldr	r2, [pc, #216]	; (8004b8c <DMA_CalcBaseAndBitshift+0x138>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a35      	ldr	r2, [pc, #212]	; (8004b90 <DMA_CalcBaseAndBitshift+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d01d      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <DMA_CalcBaseAndBitshift+0x140>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <DMA_CalcBaseAndBitshift+0x144>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <DMA_CalcBaseAndBitshift+0x148>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <DMA_CalcBaseAndBitshift+0x150>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <DMA_CalcBaseAndBitshift+0x154>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <DMA_CalcBaseAndBitshift+0xac>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <DMA_CalcBaseAndBitshift+0xae>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d024      	beq.n	8004b50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3b10      	subs	r3, #16
 8004b0e:	4a27      	ldr	r2, [pc, #156]	; (8004bac <DMA_CalcBaseAndBitshift+0x158>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d908      	bls.n	8004b40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b3e:	e00d      	b.n	8004b5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <DMA_CalcBaseAndBitshift+0x160>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4e:	e005      	b.n	8004b5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40020010 	.word	0x40020010
 8004b70:	40020028 	.word	0x40020028
 8004b74:	40020040 	.word	0x40020040
 8004b78:	40020058 	.word	0x40020058
 8004b7c:	40020070 	.word	0x40020070
 8004b80:	40020088 	.word	0x40020088
 8004b84:	400200a0 	.word	0x400200a0
 8004b88:	400200b8 	.word	0x400200b8
 8004b8c:	40020410 	.word	0x40020410
 8004b90:	40020428 	.word	0x40020428
 8004b94:	40020440 	.word	0x40020440
 8004b98:	40020458 	.word	0x40020458
 8004b9c:	40020470 	.word	0x40020470
 8004ba0:	40020488 	.word	0x40020488
 8004ba4:	400204a0 	.word	0x400204a0
 8004ba8:	400204b8 	.word	0x400204b8
 8004bac:	aaaaaaab 	.word	0xaaaaaaab
 8004bb0:	0800ba88 	.word	0x0800ba88
 8004bb4:	fffffc00 	.word	0xfffffc00

08004bb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d120      	bne.n	8004c0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d858      	bhi.n	8004c86 <DMA_CheckFifoParam+0xce>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <DMA_CheckFifoParam+0x24>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bff 	.word	0x08004bff
 8004be4:	08004bed 	.word	0x08004bed
 8004be8:	08004c87 	.word	0x08004c87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d048      	beq.n	8004c8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bfc:	e045      	b.n	8004c8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c06:	d142      	bne.n	8004c8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c0c:	e03f      	b.n	8004c8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c16:	d123      	bne.n	8004c60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d838      	bhi.n	8004c92 <DMA_CheckFifoParam+0xda>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <DMA_CheckFifoParam+0x70>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c3f 	.word	0x08004c3f
 8004c30:	08004c39 	.word	0x08004c39
 8004c34:	08004c51 	.word	0x08004c51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c3c:	e030      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d025      	beq.n	8004c96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c4e:	e022      	b.n	8004c96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c58:	d11f      	bne.n	8004c9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5e:	e01c      	b.n	8004c9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d902      	bls.n	8004c6e <DMA_CheckFifoParam+0xb6>
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d003      	beq.n	8004c74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c6c:	e018      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
        break;
 8004c72:	e015      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
    break;
 8004c84:	e00b      	b.n	8004c9e <DMA_CheckFifoParam+0xe6>
        break;
 8004c86:	bf00      	nop
 8004c88:	e00a      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e008      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e006      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        break;
 8004c92:	bf00      	nop
 8004c94:	e004      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <DMA_CheckFifoParam+0xe8>
    break;
 8004c9e:	bf00      	nop
    }
  }

  return status;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop

08004cb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a38      	ldr	r2, [pc, #224]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d022      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a33      	ldr	r2, [pc, #204]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a32      	ldr	r2, [pc, #200]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01a      	beq.n	8004d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	3b08      	subs	r3, #8
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d4c:	e024      	b.n	8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	3b10      	subs	r3, #16
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d806      	bhi.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d902      	bls.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3308      	adds	r3, #8
 8004d74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	58025408 	.word	0x58025408
 8004da8:	5802541c 	.word	0x5802541c
 8004dac:	58025430 	.word	0x58025430
 8004db0:	58025444 	.word	0x58025444
 8004db4:	58025458 	.word	0x58025458
 8004db8:	5802546c 	.word	0x5802546c
 8004dbc:	58025480 	.word	0x58025480
 8004dc0:	58025494 	.word	0x58025494
 8004dc4:	cccccccd 	.word	0xcccccccd
 8004dc8:	16009600 	.word	0x16009600
 8004dcc:	58025880 	.word	0x58025880
 8004dd0:	aaaaaaab 	.word	0xaaaaaaab
 8004dd4:	400204b8 	.word	0x400204b8
 8004dd8:	4002040f 	.word	0x4002040f
 8004ddc:	10008200 	.word	0x10008200
 8004de0:	40020880 	.word	0x40020880

08004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04a      	beq.n	8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d847      	bhi.n	8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d101      	bne.n	8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e6e:	e009      	b.n	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	58025408 	.word	0x58025408
 8004ea0:	5802541c 	.word	0x5802541c
 8004ea4:	58025430 	.word	0x58025430
 8004ea8:	58025444 	.word	0x58025444
 8004eac:	58025458 	.word	0x58025458
 8004eb0:	5802546c 	.word	0x5802546c
 8004eb4:	58025480 	.word	0x58025480
 8004eb8:	58025494 	.word	0x58025494
 8004ebc:	1600963f 	.word	0x1600963f
 8004ec0:	58025940 	.word	0x58025940
 8004ec4:	1000823f 	.word	0x1000823f
 8004ec8:	40020940 	.word	0x40020940

08004ecc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0cf      	b.n	800507e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2223      	movs	r2, #35	; 0x23
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fc fb51 	bl	8001598 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef6:	4b64      	ldr	r3, [pc, #400]	; (8005088 <HAL_ETH_Init+0x1bc>)
 8004ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004efc:	4a62      	ldr	r2, [pc, #392]	; (8005088 <HAL_ETH_Init+0x1bc>)
 8004efe:	f043 0302 	orr.w	r3, r3, #2
 8004f02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f06:	4b60      	ldr	r3, [pc, #384]	; (8005088 <HAL_ETH_Init+0x1bc>)
 8004f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7a1b      	ldrb	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f7fd f869 	bl	8001ff4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004f22:	e003      	b.n	8004f2c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f28:	f7fd f864 	bl	8001ff4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004f2c:	4b57      	ldr	r3, [pc, #348]	; (800508c <HAL_ETH_Init+0x1c0>)
 8004f2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f48:	f7fd f818 	bl	8001f7c <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f4e:	e011      	b.n	8004f74 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004f50:	f7fd f814 	bl	8001f7c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f5e:	d909      	bls.n	8004f74 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2204      	movs	r2, #4
 8004f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	22e0      	movs	r2, #224	; 0xe0
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e084      	b.n	800507e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e4      	bne.n	8004f50 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f886 	bl	8005098 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004f8c:	f001 feca 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <HAL_ETH_Init+0x1c4>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	0c9a      	lsrs	r2, r3, #18
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3a01      	subs	r2, #1
 8004fa0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa71 	bl	800548c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004fb6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fc6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	22e0      	movs	r2, #224	; 0xe0
 8004fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e049      	b.n	800507e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_ETH_Init+0x1c8>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6952      	ldr	r2, [r2, #20]
 8004ffe:	0051      	lsls	r1, r2, #1
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	430b      	orrs	r3, r1
 8005006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800500a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fad9 	bl	80055c6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fb1f 	bl	8005658 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	3305      	adds	r3, #5
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	021a      	lsls	r2, r3, #8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4619      	mov	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	3303      	adds	r3, #3
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	061a      	lsls	r2, r3, #24
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	3302      	adds	r3, #2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	3301      	adds	r3, #1
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005058:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005066:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005068:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2210      	movs	r2, #16
 8005078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	58000400 	.word	0x58000400
 8005090:	431bde83 	.word	0x431bde83
 8005094:	ffff8001 	.word	0xffff8001

08005098 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80050b2:	f001 fe37 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 80050b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d908      	bls.n	80050d2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d804      	bhi.n	80050d2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e027      	b.n	8005122 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d908      	bls.n	80050ec <HAL_ETH_SetMDIOClockRange+0x54>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d204      	bcs.n	80050ec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e01a      	b.n	8005122 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d303      	bcc.n	80050fc <HAL_ETH_SetMDIOClockRange+0x64>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d911      	bls.n	8005120 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d908      	bls.n	8005116 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4a0f      	ldr	r2, [pc, #60]	; (8005144 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d804      	bhi.n	8005116 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e005      	b.n	8005122 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e000      	b.n	8005122 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005120:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	01312cff 	.word	0x01312cff
 8005138:	02160ebf 	.word	0x02160ebf
 800513c:	03938700 	.word	0x03938700
 8005140:	05f5e0ff 	.word	0x05f5e0ff
 8005144:	08f0d17f 	.word	0x08f0d17f

08005148 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800515a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	791b      	ldrb	r3, [r3, #4]
 8005160:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	7b1b      	ldrb	r3, [r3, #12]
 8005168:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800516a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	7b5b      	ldrb	r3, [r3, #13]
 8005170:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	7b9b      	ldrb	r3, [r3, #14]
 8005178:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800517a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	7bdb      	ldrb	r3, [r3, #15]
 8005180:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005182:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	7c12      	ldrb	r2, [r2, #16]
 8005188:	2a00      	cmp	r2, #0
 800518a:	d102      	bne.n	8005192 <ETH_SetMACConfig+0x4a>
 800518c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005190:	e000      	b.n	8005194 <ETH_SetMACConfig+0x4c>
 8005192:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005194:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	7c52      	ldrb	r2, [r2, #17]
 800519a:	2a00      	cmp	r2, #0
 800519c:	d102      	bne.n	80051a4 <ETH_SetMACConfig+0x5c>
 800519e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051a2:	e000      	b.n	80051a6 <ETH_SetMACConfig+0x5e>
 80051a4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	7c9b      	ldrb	r3, [r3, #18]
 80051ac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051ae:	431a      	orrs	r2, r3
               macconf->Speed |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80051b4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80051ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	7f1b      	ldrb	r3, [r3, #28]
 80051c0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80051c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7f5b      	ldrb	r3, [r3, #29]
 80051c8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80051ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	7f92      	ldrb	r2, [r2, #30]
 80051d0:	2a00      	cmp	r2, #0
 80051d2:	d102      	bne.n	80051da <ETH_SetMACConfig+0x92>
 80051d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d8:	e000      	b.n	80051dc <ETH_SetMACConfig+0x94>
 80051da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80051dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	7fdb      	ldrb	r3, [r3, #31]
 80051e2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80051e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d102      	bne.n	80051f6 <ETH_SetMACConfig+0xae>
 80051f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051f4:	e000      	b.n	80051f8 <ETH_SetMACConfig+0xb0>
 80051f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80051f8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80051fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005206:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005208:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b56      	ldr	r3, [pc, #344]	; (8005374 <ETH_SetMACConfig+0x22c>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	430b      	orrs	r3, r1
 8005224:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005232:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005234:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800523c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800523e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005246:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005248:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005250:	2a00      	cmp	r2, #0
 8005252:	d102      	bne.n	800525a <ETH_SetMACConfig+0x112>
 8005254:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005258:	e000      	b.n	800525c <ETH_SetMACConfig+0x114>
 800525a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800525c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b42      	ldr	r3, [pc, #264]	; (8005378 <ETH_SetMACConfig+0x230>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	430b      	orrs	r3, r1
 8005278:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005280:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b3a      	ldr	r3, [pc, #232]	; (800537c <ETH_SetMACConfig+0x234>)
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	430b      	orrs	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	d101      	bne.n	80052ba <ETH_SetMACConfig+0x172>
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	e000      	b.n	80052bc <ETH_SetMACConfig+0x174>
 80052ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80052bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80052d2:	4013      	ands	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	430b      	orrs	r3, r1
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80052e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80052ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f023 0103 	bic.w	r1, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	430a      	orrs	r2, r1
 8005306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005312:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800532e:	2a00      	cmp	r2, #0
 8005330:	d101      	bne.n	8005336 <ETH_SetMACConfig+0x1ee>
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	e000      	b.n	8005338 <ETH_SetMACConfig+0x1f0>
 8005336:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005338:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005340:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800534a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005358:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	430a      	orrs	r2, r1
 8005364:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	00048083 	.word	0x00048083
 8005378:	c0f88000 	.word	0xc0f88000
 800537c:	fffffef0 	.word	0xfffffef0

08005380 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b38      	ldr	r3, [pc, #224]	; (8005478 <ETH_SetDMAConfig+0xf8>)
 8005396:	4013      	ands	r3, r2
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	6811      	ldr	r1, [r2, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	430b      	orrs	r3, r1
 80053a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053a6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	791b      	ldrb	r3, [r3, #4]
 80053ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	7b1b      	ldrb	r3, [r3, #12]
 80053b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4b2c      	ldr	r3, [pc, #176]	; (800547c <ETH_SetDMAConfig+0xfc>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	430b      	orrs	r3, r1
 80053d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	7b5b      	ldrb	r3, [r3, #13]
 80053de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80053f4:	4b22      	ldr	r3, [pc, #136]	; (8005480 <ETH_SetDMAConfig+0x100>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	430b      	orrs	r3, r1
 8005400:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005404:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	7d1b      	ldrb	r3, [r3, #20]
 8005410:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005412:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7f5b      	ldrb	r3, [r3, #29]
 8005418:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005426:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800542a:	4b16      	ldr	r3, [pc, #88]	; (8005484 <ETH_SetDMAConfig+0x104>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	430b      	orrs	r3, r1
 8005436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800543a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	7f1b      	ldrb	r3, [r3, #28]
 8005442:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005454:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <ETH_SetDMAConfig+0x108>)
 800545a:	4013      	ands	r3, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	430b      	orrs	r3, r1
 8005464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005468:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	ffff87fd 	.word	0xffff87fd
 800547c:	ffff2ffe 	.word	0xffff2ffe
 8005480:	fffec000 	.word	0xfffec000
 8005484:	ffc0efef 	.word	0xffc0efef
 8005488:	7fc0ffff 	.word	0x7fc0ffff

0800548c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b0a4      	sub	sp, #144	; 0x90
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800549a:	2300      	movs	r3, #0
 800549c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80054c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80054e4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80054e8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80054f0:	2300      	movs	r3, #0
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005500:	2300      	movs	r3, #0
 8005502:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005506:	2300      	movs	r3, #0
 8005508:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800550a:	2300      	movs	r3, #0
 800550c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800550e:	2300      	movs	r3, #0
 8005510:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005524:	2320      	movs	r3, #32
 8005526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800552a:	2301      	movs	r3, #1
 800552c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005536:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800553c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005548:	2302      	movs	r3, #2
 800554a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005566:	2300      	movs	r3, #0
 8005568:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fde6 	bl	8005148 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800557c:	2301      	movs	r3, #1
 800557e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005580:	2301      	movs	r3, #1
 8005582:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800558e:	2300      	movs	r3, #0
 8005590:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005592:	2300      	movs	r3, #0
 8005594:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005596:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800559a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800559c:	2300      	movs	r3, #0
 800559e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80055ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fee1 	bl	8005380 <ETH_SetDMAConfig>
}
 80055be:	bf00      	nop
 80055c0:	3790      	adds	r7, #144	; 0x90
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e01d      	b.n	8005610 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68d9      	ldr	r1, [r3, #12]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4413      	add	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	440b      	add	r3, r1
 80055e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2200      	movs	r2, #0
 80055f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	3206      	adds	r2, #6
 8005606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3301      	adds	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d9de      	bls.n	80055d4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005624:	461a      	mov	r2, r3
 8005626:	2303      	movs	r3, #3
 8005628:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005648:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e023      	b.n	80056ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6919      	ldr	r1, [r3, #16]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	3212      	adds	r2, #18
 80056a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d9d8      	bls.n	8005666 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056da:	461a      	mov	r2, r3
 80056dc:	2303      	movs	r3, #3
 80056de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005702:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005722:	4b89      	ldr	r3, [pc, #548]	; (8005948 <HAL_GPIO_Init+0x234>)
 8005724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005726:	e194      	b.n	8005a52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	2101      	movs	r1, #1
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	4013      	ands	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8186 	beq.w	8005a4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d005      	beq.n	8005758 <HAL_GPIO_Init+0x44>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d130      	bne.n	80057ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800578e:	2201      	movs	r2, #1
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4013      	ands	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0201 	and.w	r2, r3, #1
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d017      	beq.n	80057f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	2203      	movs	r2, #3
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d123      	bne.n	800584a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	08da      	lsrs	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3208      	adds	r2, #8
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4313      	orrs	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	08da      	lsrs	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3208      	adds	r2, #8
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	2203      	movs	r2, #3
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 0203 	and.w	r2, r3, #3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80e0 	beq.w	8005a4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588c:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_GPIO_Init+0x238>)
 800588e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005892:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_GPIO_Init+0x238>)
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800589c:	4b2b      	ldr	r3, [pc, #172]	; (800594c <HAL_GPIO_Init+0x238>)
 800589e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058aa:	4a29      	ldr	r2, [pc, #164]	; (8005950 <HAL_GPIO_Init+0x23c>)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	3302      	adds	r3, #2
 80058b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	220f      	movs	r2, #15
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_GPIO_Init+0x240>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d052      	beq.n	800597c <HAL_GPIO_Init+0x268>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <HAL_GPIO_Init+0x244>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d031      	beq.n	8005942 <HAL_GPIO_Init+0x22e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1e      	ldr	r2, [pc, #120]	; (800595c <HAL_GPIO_Init+0x248>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <HAL_GPIO_Init+0x22a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	; (8005960 <HAL_GPIO_Init+0x24c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d025      	beq.n	800593a <HAL_GPIO_Init+0x226>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <HAL_GPIO_Init+0x250>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01f      	beq.n	8005936 <HAL_GPIO_Init+0x222>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <HAL_GPIO_Init+0x254>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d019      	beq.n	8005932 <HAL_GPIO_Init+0x21e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1a      	ldr	r2, [pc, #104]	; (800596c <HAL_GPIO_Init+0x258>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_GPIO_Init+0x21a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <HAL_GPIO_Init+0x25c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00d      	beq.n	800592a <HAL_GPIO_Init+0x216>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <HAL_GPIO_Init+0x260>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <HAL_GPIO_Init+0x212>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a17      	ldr	r2, [pc, #92]	; (8005978 <HAL_GPIO_Init+0x264>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_GPIO_Init+0x20e>
 800591e:	2309      	movs	r3, #9
 8005920:	e02d      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005922:	230a      	movs	r3, #10
 8005924:	e02b      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005926:	2308      	movs	r3, #8
 8005928:	e029      	b.n	800597e <HAL_GPIO_Init+0x26a>
 800592a:	2307      	movs	r3, #7
 800592c:	e027      	b.n	800597e <HAL_GPIO_Init+0x26a>
 800592e:	2306      	movs	r3, #6
 8005930:	e025      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005932:	2305      	movs	r3, #5
 8005934:	e023      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005936:	2304      	movs	r3, #4
 8005938:	e021      	b.n	800597e <HAL_GPIO_Init+0x26a>
 800593a:	2303      	movs	r3, #3
 800593c:	e01f      	b.n	800597e <HAL_GPIO_Init+0x26a>
 800593e:	2302      	movs	r3, #2
 8005940:	e01d      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005942:	2301      	movs	r3, #1
 8005944:	e01b      	b.n	800597e <HAL_GPIO_Init+0x26a>
 8005946:	bf00      	nop
 8005948:	58000080 	.word	0x58000080
 800594c:	58024400 	.word	0x58024400
 8005950:	58000400 	.word	0x58000400
 8005954:	58020000 	.word	0x58020000
 8005958:	58020400 	.word	0x58020400
 800595c:	58020800 	.word	0x58020800
 8005960:	58020c00 	.word	0x58020c00
 8005964:	58021000 	.word	0x58021000
 8005968:	58021400 	.word	0x58021400
 800596c:	58021800 	.word	0x58021800
 8005970:	58021c00 	.word	0x58021c00
 8005974:	58022000 	.word	0x58022000
 8005978:	58022400 	.word	0x58022400
 800597c:	2300      	movs	r3, #0
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	f002 0203 	and.w	r2, r2, #3
 8005984:	0092      	lsls	r2, r2, #2
 8005986:	4093      	lsls	r3, r2
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800598e:	4938      	ldr	r1, [pc, #224]	; (8005a70 <HAL_GPIO_Init+0x35c>)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	089b      	lsrs	r3, r3, #2
 8005994:	3302      	adds	r3, #2
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f47f ae63 	bne.w	8005728 <HAL_GPIO_Init+0x14>
  }
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	3724      	adds	r7, #36	; 0x24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	58000400 	.word	0x58000400

08005a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
 8005a80:	4613      	mov	r3, r2
 8005a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a84:	787b      	ldrb	r3, [r7, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a8a:	887a      	ldrh	r2, [r7, #2]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a90:	e003      	b.n	8005a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	619a      	str	r2, [r3, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <HAL_HSEM_FastTake+0x2c>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3320      	adds	r3, #32
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <HAL_HSEM_FastTake+0x30>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	58026400 	.word	0x58026400
 8005ad8:	80000300 	.word	0x80000300

08005adc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <HAL_HSEM_Release+0x24>)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	58026400 	.word	0x58026400

08005b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	b08f      	sub	sp, #60	; 0x3c
 8005b08:	af0a      	add	r7, sp, #40	; 0x28
 8005b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e116      	b.n	8005d44 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fc f843 	bl	8001bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f005 fbe5 	bl	800b324 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	687e      	ldr	r6, [r7, #4]
 8005b62:	466d      	mov	r5, sp
 8005b64:	f106 0410 	add.w	r4, r6, #16
 8005b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b74:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b78:	1d33      	adds	r3, r6, #4
 8005b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f005 fb63 	bl	800b248 <USB_CoreInit>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0d7      	b.n	8005d44 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f005 fbd3 	bl	800b346 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e04a      	b.n	8005c3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	333d      	adds	r3, #61	; 0x3d
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bba:	7bfa      	ldrb	r2, [r7, #15]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	333c      	adds	r3, #60	; 0x3c
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3344      	adds	r3, #68	; 0x44
 8005be2:	4602      	mov	r2, r0
 8005be4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005be6:	7bfa      	ldrb	r2, [r7, #15]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3340      	adds	r3, #64	; 0x40
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bfa:	7bfa      	ldrb	r2, [r7, #15]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	3348      	adds	r3, #72	; 0x48
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	334c      	adds	r3, #76	; 0x4c
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3354      	adds	r3, #84	; 0x54
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	7bfa      	ldrb	r2, [r7, #15]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3af      	bcc.n	8005ba6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
 8005c4a:	e044      	b.n	8005cd6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c4c:	7bfa      	ldrb	r2, [r7, #15]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c74:	7bfa      	ldrb	r2, [r7, #15]
 8005c76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c8e:	7bfa      	ldrb	r2, [r7, #15]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3b5      	bcc.n	8005c4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	687e      	ldr	r6, [r7, #4]
 8005ce8:	466d      	mov	r5, sp
 8005cea:	f106 0410 	add.w	r4, r6, #16
 8005cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cfe:	1d33      	adds	r3, r6, #4
 8005d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f005 fb6c 	bl	800b3e0 <USB_DevInit>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e014      	b.n	8005d44 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f80a 	bl	8005d4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f005 fd2a 	bl	800b796 <USB_DevDisconnect>

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	10000003 	.word	0x10000003

08005d94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005d9c:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d00a      	beq.n	8005dbe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005da8:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e040      	b.n	8005e3c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e03e      	b.n	8005e3c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005dc6:	491f      	ldr	r1, [pc, #124]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dce:	f7fc f8d5 	bl	8001f7c <HAL_GetTick>
 8005dd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dd4:	e009      	b.n	8005dea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dd6:	f7fc f8d1 	bl	8001f7c <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de4:	d901      	bls.n	8005dea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e028      	b.n	8005e3c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dea:	4b16      	ldr	r3, [pc, #88]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	d1ee      	bne.n	8005dd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b1e      	cmp	r3, #30
 8005dfc:	d008      	beq.n	8005e10 <HAL_PWREx_ConfigSupply+0x7c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b2e      	cmp	r3, #46	; 0x2e
 8005e02:	d005      	beq.n	8005e10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b1d      	cmp	r3, #29
 8005e08:	d002      	beq.n	8005e10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e0e:	d114      	bne.n	8005e3a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e10:	f7fc f8b4 	bl	8001f7c <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e16:	e009      	b.n	8005e2c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e18:	f7fc f8b0 	bl	8001f7c <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e26:	d901      	bls.n	8005e2c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e007      	b.n	8005e3c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d1ee      	bne.n	8005e18 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	58024800 	.word	0x58024800

08005e48 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a04      	ldr	r2, [pc, #16]	; (8005e64 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e56:	60d3      	str	r3, [r2, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	58024800 	.word	0x58024800

08005e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f000 bc1d 	b.w	80066b6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8087 	beq.w	8005f98 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8a:	4b99      	ldr	r3, [pc, #612]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e94:	4b96      	ldr	r3, [pc, #600]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d007      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x48>
 8005ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea2:	2b18      	cmp	r3, #24
 8005ea4:	d110      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x60>
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d10b      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	4b8f      	ldr	r3, [pc, #572]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d06c      	beq.n	8005f96 <HAL_RCC_OscConfig+0x12e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d168      	bne.n	8005f96 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e3f6      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed0:	d106      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x78>
 8005ed2:	4b87      	ldr	r3, [pc, #540]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a86      	ldr	r2, [pc, #536]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e02e      	b.n	8005f3e <HAL_RCC_OscConfig+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCC_OscConfig+0x9a>
 8005ee8:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a80      	ldr	r2, [pc, #512]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	4b7e      	ldr	r3, [pc, #504]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a7d      	ldr	r2, [pc, #500]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	e01d      	b.n	8005f3e <HAL_RCC_OscConfig+0xd6>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f0a:	d10c      	bne.n	8005f26 <HAL_RCC_OscConfig+0xbe>
 8005f0c:	4b78      	ldr	r3, [pc, #480]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a77      	ldr	r2, [pc, #476]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a74      	ldr	r2, [pc, #464]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e00b      	b.n	8005f3e <HAL_RCC_OscConfig+0xd6>
 8005f26:	4b72      	ldr	r3, [pc, #456]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a71      	ldr	r2, [pc, #452]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	4b6f      	ldr	r3, [pc, #444]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6e      	ldr	r2, [pc, #440]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d013      	beq.n	8005f6e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fc f819 	bl	8001f7c <HAL_GetTick>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f4e:	f7fc f815 	bl	8001f7c <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b64      	cmp	r3, #100	; 0x64
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e3aa      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f60:	4b63      	ldr	r3, [pc, #396]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0xe6>
 8005f6c:	e014      	b.n	8005f98 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6e:	f7fc f805 	bl	8001f7c <HAL_GetTick>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f76:	f7fc f801 	bl	8001f7c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b64      	cmp	r3, #100	; 0x64
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e396      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f88:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f0      	bne.n	8005f76 <HAL_RCC_OscConfig+0x10e>
 8005f94:	e000      	b.n	8005f98 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80cb 	beq.w	800613c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa6:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fb0:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_RCC_OscConfig+0x164>
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2b18      	cmp	r3, #24
 8005fc0:	d156      	bne.n	8006070 <HAL_RCC_OscConfig+0x208>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d151      	bne.n	8006070 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fcc:	4b48      	ldr	r3, [pc, #288]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x17c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e368      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fe4:	4b42      	ldr	r3, [pc, #264]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f023 0219 	bic.w	r2, r3, #25
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	493f      	ldr	r1, [pc, #252]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ff6:	f7fb ffc1 	bl	8001f7c <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ffe:	f7fb ffbd 	bl	8001f7c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e352      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006010:	4b37      	ldr	r3, [pc, #220]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601c:	f7fb ffde 	bl	8001fdc <HAL_GetREVID>
 8006020:	4603      	mov	r3, r0
 8006022:	f241 0203 	movw	r2, #4099	; 0x1003
 8006026:	4293      	cmp	r3, r2
 8006028:	d817      	bhi.n	800605a <HAL_RCC_OscConfig+0x1f2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d108      	bne.n	8006044 <HAL_RCC_OscConfig+0x1dc>
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800603a:	4a2d      	ldr	r2, [pc, #180]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006040:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006042:	e07b      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006044:	4b2a      	ldr	r3, [pc, #168]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	031b      	lsls	r3, r3, #12
 8006052:	4927      	ldr	r1, [pc, #156]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8006054:	4313      	orrs	r3, r2
 8006056:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006058:	e070      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605a:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	061b      	lsls	r3, r3, #24
 8006068:	4921      	ldr	r1, [pc, #132]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800606e:	e065      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d048      	beq.n	800610a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f023 0219 	bic.w	r2, r3, #25
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	491a      	ldr	r1, [pc, #104]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fb ff77 	bl	8001f7c <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006092:	f7fb ff73 	bl	8001f7c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e308      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a4:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b0:	f7fb ff94 	bl	8001fdc <HAL_GetREVID>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d81a      	bhi.n	80060f4 <HAL_RCC_OscConfig+0x28c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d108      	bne.n	80060d8 <HAL_RCC_OscConfig+0x270>
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060ce:	4a08      	ldr	r2, [pc, #32]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	e031      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	4902      	ldr	r1, [pc, #8]	; (80060f0 <HAL_RCC_OscConfig+0x288>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	604b      	str	r3, [r1, #4]
 80060ec:	e026      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	4b9a      	ldr	r3, [pc, #616]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	4997      	ldr	r1, [pc, #604]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
 8006108:	e018      	b.n	800613c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610a:	4b95      	ldr	r3, [pc, #596]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a94      	ldr	r2, [pc, #592]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fb ff31 	bl	8001f7c <HAL_GetTick>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611e:	f7fb ff2d 	bl	8001f7c <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e2c2      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006130:	4b8b      	ldr	r3, [pc, #556]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f0      	bne.n	800611e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a9 	beq.w	800629c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800614a:	4b85      	ldr	r3, [pc, #532]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006152:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006154:	4b82      	ldr	r3, [pc, #520]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d007      	beq.n	8006170 <HAL_RCC_OscConfig+0x308>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b18      	cmp	r3, #24
 8006164:	d13a      	bne.n	80061dc <HAL_RCC_OscConfig+0x374>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d135      	bne.n	80061dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006170:	4b7b      	ldr	r3, [pc, #492]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_OscConfig+0x320>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b80      	cmp	r3, #128	; 0x80
 8006182:	d001      	beq.n	8006188 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e296      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006188:	f7fb ff28 	bl	8001fdc <HAL_GetREVID>
 800618c:	4603      	mov	r3, r0
 800618e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006192:	4293      	cmp	r3, r2
 8006194:	d817      	bhi.n	80061c6 <HAL_RCC_OscConfig+0x35e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	2b20      	cmp	r3, #32
 800619c:	d108      	bne.n	80061b0 <HAL_RCC_OscConfig+0x348>
 800619e:	4b70      	ldr	r3, [pc, #448]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061a6:	4a6e      	ldr	r2, [pc, #440]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061ae:	e075      	b.n	800629c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061b0:	4b6b      	ldr	r3, [pc, #428]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	069b      	lsls	r3, r3, #26
 80061be:	4968      	ldr	r1, [pc, #416]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061c4:	e06a      	b.n	800629c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061c6:	4b66      	ldr	r3, [pc, #408]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	061b      	lsls	r3, r3, #24
 80061d4:	4962      	ldr	r1, [pc, #392]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061da:	e05f      	b.n	800629c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d042      	beq.n	800626a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80061e4:	4b5e      	ldr	r3, [pc, #376]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5d      	ldr	r2, [pc, #372]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f0:	f7fb fec4 	bl	8001f7c <HAL_GetTick>
 80061f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061f8:	f7fb fec0 	bl	8001f7c <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e255      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800620a:	4b55      	ldr	r3, [pc, #340]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006216:	f7fb fee1 	bl	8001fdc <HAL_GetREVID>
 800621a:	4603      	mov	r3, r0
 800621c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006220:	4293      	cmp	r3, r2
 8006222:	d817      	bhi.n	8006254 <HAL_RCC_OscConfig+0x3ec>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	2b20      	cmp	r3, #32
 800622a:	d108      	bne.n	800623e <HAL_RCC_OscConfig+0x3d6>
 800622c:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006234:	4a4a      	ldr	r2, [pc, #296]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623a:	6053      	str	r3, [r2, #4]
 800623c:	e02e      	b.n	800629c <HAL_RCC_OscConfig+0x434>
 800623e:	4b48      	ldr	r3, [pc, #288]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	069b      	lsls	r3, r3, #26
 800624c:	4944      	ldr	r1, [pc, #272]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800624e:	4313      	orrs	r3, r2
 8006250:	604b      	str	r3, [r1, #4]
 8006252:	e023      	b.n	800629c <HAL_RCC_OscConfig+0x434>
 8006254:	4b42      	ldr	r3, [pc, #264]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	493f      	ldr	r1, [pc, #252]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006264:	4313      	orrs	r3, r2
 8006266:	60cb      	str	r3, [r1, #12]
 8006268:	e018      	b.n	800629c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800626a:	4b3d      	ldr	r3, [pc, #244]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fb fe81 	bl	8001f7c <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800627e:	f7fb fe7d 	bl	8001f7c <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e212      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006290:	4b33      	ldr	r3, [pc, #204]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d036      	beq.n	8006316 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062b0:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b4:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fb fe5e 	bl	8001f7c <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062c4:	f7fb fe5a 	bl	8001f7c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e1ef      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062d6:	4b22      	ldr	r3, [pc, #136]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0x45c>
 80062e2:	e018      	b.n	8006316 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80062e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 80062ea:	f023 0301 	bic.w	r3, r3, #1
 80062ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fb fe44 	bl	8001f7c <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062f8:	f7fb fe40 	bl	8001f7c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e1d5      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800630a:	4b15      	ldr	r3, [pc, #84]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800630c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d039      	beq.n	8006396 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01c      	beq.n	8006364 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006334:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006336:	f7fb fe21 	bl	8001f7c <HAL_GetTick>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800633e:	f7fb fe1d 	bl	8001f7c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1b2      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCC_OscConfig+0x4f8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0f0      	beq.n	800633e <HAL_RCC_OscConfig+0x4d6>
 800635c:	e01b      	b.n	8006396 <HAL_RCC_OscConfig+0x52e>
 800635e:	bf00      	nop
 8006360:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006364:	4b9b      	ldr	r3, [pc, #620]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a9a      	ldr	r2, [pc, #616]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800636a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800636e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006370:	f7fb fe04 	bl	8001f7c <HAL_GetTick>
 8006374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006378:	f7fb fe00 	bl	8001f7c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e195      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800638a:	4b92      	ldr	r3, [pc, #584]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8081 	beq.w	80064a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063a4:	4b8c      	ldr	r3, [pc, #560]	; (80065d8 <HAL_RCC_OscConfig+0x770>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a8b      	ldr	r2, [pc, #556]	; (80065d8 <HAL_RCC_OscConfig+0x770>)
 80063aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063b0:	f7fb fde4 	bl	8001f7c <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063b8:	f7fb fde0 	bl	8001f7c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e175      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ca:	4b83      	ldr	r3, [pc, #524]	; (80065d8 <HAL_RCC_OscConfig+0x770>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d106      	bne.n	80063ec <HAL_RCC_OscConfig+0x584>
 80063de:	4b7d      	ldr	r3, [pc, #500]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	4a7c      	ldr	r2, [pc, #496]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ea:	e02d      	b.n	8006448 <HAL_RCC_OscConfig+0x5e0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <HAL_RCC_OscConfig+0x5a6>
 80063f4:	4b77      	ldr	r3, [pc, #476]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f8:	4a76      	ldr	r2, [pc, #472]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006400:	4b74      	ldr	r3, [pc, #464]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	4a73      	ldr	r2, [pc, #460]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006406:	f023 0304 	bic.w	r3, r3, #4
 800640a:	6713      	str	r3, [r2, #112]	; 0x70
 800640c:	e01c      	b.n	8006448 <HAL_RCC_OscConfig+0x5e0>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b05      	cmp	r3, #5
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x5c8>
 8006416:	4b6f      	ldr	r3, [pc, #444]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a6e      	ldr	r2, [pc, #440]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	4b6c      	ldr	r3, [pc, #432]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	4a6b      	ldr	r2, [pc, #428]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	6713      	str	r3, [r2, #112]	; 0x70
 800642e:	e00b      	b.n	8006448 <HAL_RCC_OscConfig+0x5e0>
 8006430:	4b68      	ldr	r3, [pc, #416]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006434:	4a67      	ldr	r2, [pc, #412]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	6713      	str	r3, [r2, #112]	; 0x70
 800643c:	4b65      	ldr	r3, [pc, #404]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006440:	4a64      	ldr	r2, [pc, #400]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006442:	f023 0304 	bic.w	r3, r3, #4
 8006446:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fb fd94 	bl	8001f7c <HAL_GetTick>
 8006454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006456:	e00a      	b.n	800646e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006458:	f7fb fd90 	bl	8001f7c <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	; 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e123      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800646e:	4b59      	ldr	r3, [pc, #356]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0ee      	beq.n	8006458 <HAL_RCC_OscConfig+0x5f0>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647c:	f7fb fd7e 	bl	8001f7c <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006482:	e00a      	b.n	800649a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006484:	f7fb fd7a 	bl	8001f7c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e10d      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800649a:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ee      	bne.n	8006484 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8102 	beq.w	80066b4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064b0:	4b48      	ldr	r3, [pc, #288]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b8:	2b18      	cmp	r3, #24
 80064ba:	f000 80bd 	beq.w	8006638 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	f040 809e 	bne.w	8006604 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a41      	ldr	r2, [pc, #260]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80064ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fb fd52 	bl	8001f7c <HAL_GetTick>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fb fd4e 	bl	8001f7c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e0e3      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ee:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064fa:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80064fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCC_OscConfig+0x774>)
 8006500:	4013      	ands	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800650a:	0112      	lsls	r2, r2, #4
 800650c:	430a      	orrs	r2, r1
 800650e:	4931      	ldr	r1, [pc, #196]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006510:	4313      	orrs	r3, r2
 8006512:	628b      	str	r3, [r1, #40]	; 0x28
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	3b01      	subs	r3, #1
 800651a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	3b01      	subs	r3, #1
 8006524:	025b      	lsls	r3, r3, #9
 8006526:	b29b      	uxth	r3, r3
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	3b01      	subs	r3, #1
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	3b01      	subs	r3, #1
 800653e:	061b      	lsls	r3, r3, #24
 8006540:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006544:	4923      	ldr	r1, [pc, #140]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800654a:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006556:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655a:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <HAL_RCC_OscConfig+0x778>)
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006562:	00d2      	lsls	r2, r2, #3
 8006564:	491b      	ldr	r1, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f023 020c 	bic.w	r2, r3, #12
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	4917      	ldr	r1, [pc, #92]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800657c:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f023 0202 	bic.w	r2, r3, #2
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	4912      	ldr	r1, [pc, #72]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800658a:	4313      	orrs	r3, r2
 800658c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a0d      	ldr	r2, [pc, #52]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	4a07      	ldr	r2, [pc, #28]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <HAL_RCC_OscConfig+0x76c>)
 80065c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fb fcd7 	bl	8001f7c <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065d0:	e011      	b.n	80065f6 <HAL_RCC_OscConfig+0x78e>
 80065d2:	bf00      	nop
 80065d4:	58024400 	.word	0x58024400
 80065d8:	58024800 	.word	0x58024800
 80065dc:	fffffc0c 	.word	0xfffffc0c
 80065e0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fb fcca 	bl	8001f7c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e05f      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065f6:	4b32      	ldr	r3, [pc, #200]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x77c>
 8006602:	e057      	b.n	80066b4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006604:	4b2e      	ldr	r3, [pc, #184]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2d      	ldr	r2, [pc, #180]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 800660a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fb fcb4 	bl	8001f7c <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006618:	f7fb fcb0 	bl	8001f7c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e045      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800662a:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x7b0>
 8006636:	e03d      	b.n	80066b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006638:	4b21      	ldr	r3, [pc, #132]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800663e:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <HAL_RCC_OscConfig+0x858>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	2b01      	cmp	r3, #1
 800664a:	d031      	beq.n	80066b0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f003 0203 	and.w	r2, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d12a      	bne.n	80066b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	091b      	lsrs	r3, r3, #4
 800665e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d122      	bne.n	80066b0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d11a      	bne.n	80066b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	0a5b      	lsrs	r3, r3, #9
 800667e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d111      	bne.n	80066b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d108      	bne.n	80066b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	0e1b      	lsrs	r3, r3, #24
 80066a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3730      	adds	r7, #48	; 0x30
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	58024400 	.word	0x58024400

080066c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e19c      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d8:	4b8a      	ldr	r3, [pc, #552]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d910      	bls.n	8006708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b87      	ldr	r3, [pc, #540]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 020f 	bic.w	r2, r3, #15
 80066ee:	4985      	ldr	r1, [pc, #532]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b83      	ldr	r3, [pc, #524]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e184      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d010      	beq.n	8006736 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006720:	429a      	cmp	r2, r3
 8006722:	d908      	bls.n	8006736 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006724:	4b78      	ldr	r3, [pc, #480]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	4975      	ldr	r1, [pc, #468]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006732:	4313      	orrs	r3, r2
 8006734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	4b70      	ldr	r3, [pc, #448]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800674e:	429a      	cmp	r2, r3
 8006750:	d908      	bls.n	8006764 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006752:	4b6d      	ldr	r3, [pc, #436]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	496a      	ldr	r1, [pc, #424]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006760:	4313      	orrs	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	d010      	beq.n	8006792 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	4b64      	ldr	r3, [pc, #400]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800677c:	429a      	cmp	r2, r3
 800677e:	d908      	bls.n	8006792 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006780:	4b61      	ldr	r3, [pc, #388]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	495e      	ldr	r1, [pc, #376]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 800678e:	4313      	orrs	r3, r2
 8006790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d908      	bls.n	80067c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ae:	4b56      	ldr	r3, [pc, #344]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	4953      	ldr	r1, [pc, #332]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d010      	beq.n	80067ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	4b4d      	ldr	r3, [pc, #308]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	429a      	cmp	r2, r3
 80067da:	d908      	bls.n	80067ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067dc:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f023 020f 	bic.w	r2, r3, #15
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4947      	ldr	r1, [pc, #284]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d055      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067fa:	4b43      	ldr	r3, [pc, #268]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4940      	ldr	r1, [pc, #256]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006808:	4313      	orrs	r3, r2
 800680a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d107      	bne.n	8006824 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006814:	4b3c      	ldr	r3, [pc, #240]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d121      	bne.n	8006864 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0f6      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d107      	bne.n	800683c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d115      	bne.n	8006864 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0ea      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d107      	bne.n	8006854 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006844:	4b30      	ldr	r3, [pc, #192]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0de      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006854:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0d6      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006864:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f023 0207 	bic.w	r2, r3, #7
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4925      	ldr	r1, [pc, #148]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006872:	4313      	orrs	r3, r2
 8006874:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006876:	f7fb fb81 	bl	8001f7c <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687c:	e00a      	b.n	8006894 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800687e:	f7fb fb7d 	bl	8001f7c <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	; 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e0be      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d1eb      	bne.n	800687e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	429a      	cmp	r2, r3
 80068c0:	d208      	bcs.n	80068d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f023 020f 	bic.w	r2, r3, #15
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	490e      	ldr	r1, [pc, #56]	; (8006908 <HAL_RCC_ClockConfig+0x244>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d214      	bcs.n	800690c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 020f 	bic.w	r2, r3, #15
 80068ea:	4906      	ldr	r1, [pc, #24]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <HAL_RCC_ClockConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d005      	beq.n	800690c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e086      	b.n	8006a12 <HAL_RCC_ClockConfig+0x34e>
 8006904:	52002000 	.word	0x52002000
 8006908:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d010      	beq.n	800693a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006924:	429a      	cmp	r2, r3
 8006926:	d208      	bcs.n	800693a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006928:	4b3c      	ldr	r3, [pc, #240]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	4939      	ldr	r1, [pc, #228]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 8006936:	4313      	orrs	r3, r2
 8006938:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d010      	beq.n	8006968 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006952:	429a      	cmp	r2, r3
 8006954:	d208      	bcs.n	8006968 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006956:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	492e      	ldr	r1, [pc, #184]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 8006964:	4313      	orrs	r3, r2
 8006966:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b00      	cmp	r3, #0
 8006972:	d010      	beq.n	8006996 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006980:	429a      	cmp	r2, r3
 8006982:	d208      	bcs.n	8006996 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	4922      	ldr	r1, [pc, #136]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 8006992:	4313      	orrs	r3, r2
 8006994:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d010      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d208      	bcs.n	80069c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	4917      	ldr	r1, [pc, #92]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80069c4:	f000 f834 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	4912      	ldr	r1, [pc, #72]	; (8006a20 <HAL_RCC_ClockConfig+0x35c>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
 80069e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <HAL_RCC_ClockConfig+0x358>)
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	4a0d      	ldr	r2, [pc, #52]	; (8006a20 <HAL_RCC_ClockConfig+0x35c>)
 80069ec:	5cd3      	ldrb	r3, [r2, r3]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <HAL_RCC_ClockConfig+0x360>)
 80069fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069fc:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <HAL_RCC_ClockConfig+0x364>)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <HAL_RCC_ClockConfig+0x368>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fb fa6e 	bl	8001ee8 <HAL_InitTick>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	0800ba78 	.word	0x0800ba78
 8006a24:	24000004 	.word	0x24000004
 8006a28:	24000000 	.word	0x24000000
 8006a2c:	24000018 	.word	0x24000018

08006a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	; 0x24
 8006a34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a36:	4bb3      	ldr	r3, [pc, #716]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a3e:	2b18      	cmp	r3, #24
 8006a40:	f200 8155 	bhi.w	8006cee <HAL_RCC_GetSysClockFreq+0x2be>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006cef 	.word	0x08006cef
 8006a54:	08006cef 	.word	0x08006cef
 8006a58:	08006cef 	.word	0x08006cef
 8006a5c:	08006cef 	.word	0x08006cef
 8006a60:	08006cef 	.word	0x08006cef
 8006a64:	08006cef 	.word	0x08006cef
 8006a68:	08006cef 	.word	0x08006cef
 8006a6c:	08006ad7 	.word	0x08006ad7
 8006a70:	08006cef 	.word	0x08006cef
 8006a74:	08006cef 	.word	0x08006cef
 8006a78:	08006cef 	.word	0x08006cef
 8006a7c:	08006cef 	.word	0x08006cef
 8006a80:	08006cef 	.word	0x08006cef
 8006a84:	08006cef 	.word	0x08006cef
 8006a88:	08006cef 	.word	0x08006cef
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006cef 	.word	0x08006cef
 8006a94:	08006cef 	.word	0x08006cef
 8006a98:	08006cef 	.word	0x08006cef
 8006a9c:	08006cef 	.word	0x08006cef
 8006aa0:	08006cef 	.word	0x08006cef
 8006aa4:	08006cef 	.word	0x08006cef
 8006aa8:	08006cef 	.word	0x08006cef
 8006aac:	08006ae3 	.word	0x08006ae3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab0:	4b94      	ldr	r3, [pc, #592]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d009      	beq.n	8006ad0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006abc:	4b91      	ldr	r3, [pc, #580]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	08db      	lsrs	r3, r3, #3
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	4a90      	ldr	r2, [pc, #576]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006ace:	e111      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ad0:	4b8d      	ldr	r3, [pc, #564]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ad2:	61bb      	str	r3, [r7, #24]
    break;
 8006ad4:	e10e      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006ad6:	4b8d      	ldr	r3, [pc, #564]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ad8:	61bb      	str	r3, [r7, #24]
    break;
 8006ada:	e10b      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006adc:	4b8c      	ldr	r3, [pc, #560]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ade:	61bb      	str	r3, [r7, #24]
    break;
 8006ae0:	e108      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ae2:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006aec:	4b85      	ldr	r3, [pc, #532]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006af8:	4b82      	ldr	r3, [pc, #520]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b02:	4b80      	ldr	r3, [pc, #512]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	08db      	lsrs	r3, r3, #3
 8006b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80e1 	beq.w	8006ce8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	f000 8083 	beq.w	8006c34 <HAL_RCC_GetSysClockFreq+0x204>
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	f200 80a1 	bhi.w	8006c78 <HAL_RCC_GetSysClockFreq+0x248>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x114>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d056      	beq.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b42:	e099      	b.n	8006c78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b44:	4b6f      	ldr	r3, [pc, #444]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d02d      	beq.n	8006bac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b50:	4b6c      	ldr	r3, [pc, #432]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	08db      	lsrs	r3, r3, #3
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	4a6b      	ldr	r2, [pc, #428]	; (8006d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b62      	ldr	r3, [pc, #392]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006baa:	e087      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b51      	ldr	r3, [pc, #324]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bd2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bee:	e065      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c02:	4b40      	ldr	r3, [pc, #256]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c32:	e043      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c76:	e021      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b1e      	ldr	r3, [pc, #120]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	0a5b      	lsrs	r3, r3, #9
 8006cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce0:	ee17 3a90 	vmov	r3, s15
 8006ce4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ce6:	e005      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61bb      	str	r3, [r7, #24]
    break;
 8006cec:	e002      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006cf0:	61bb      	str	r3, [r7, #24]
    break;
 8006cf2:	bf00      	nop
  }

  return sysclockfreq;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3724      	adds	r7, #36	; 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
 8006d08:	03d09000 	.word	0x03d09000
 8006d0c:	003d0900 	.word	0x003d0900
 8006d10:	007a1200 	.word	0x007a1200
 8006d14:	46000000 	.word	0x46000000
 8006d18:	4c742400 	.word	0x4c742400
 8006d1c:	4a742400 	.word	0x4a742400
 8006d20:	4af42400 	.word	0x4af42400

08006d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d2a:	f7ff fe81 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	490f      	ldr	r1, [pc, #60]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d3c:	5ccb      	ldrb	r3, [r1, r3]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d48:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d52:	5cd3      	ldrb	r3, [r2, r3]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5e:	4a07      	ldr	r2, [pc, #28]	; (8006d7c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d62:	4a07      	ldr	r2, [pc, #28]	; (8006d80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	58024400 	.word	0x58024400
 8006d78:	0800ba78 	.word	0x0800ba78
 8006d7c:	24000004 	.word	0x24000004
 8006d80:	24000000 	.word	0x24000000

08006d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d88:	f7ff ffcc 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	4904      	ldr	r1, [pc, #16]	; (8006dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	58024400 	.word	0x58024400
 8006dac:	0800ba78 	.word	0x0800ba78

08006db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006db4:	f7ff ffb6 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	4904      	ldr	r1, [pc, #16]	; (8006dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	58024400 	.word	0x58024400
 8006dd8:	0800ba78 	.word	0x0800ba78

08006ddc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006de4:	2300      	movs	r3, #0
 8006de6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006de8:	2300      	movs	r3, #0
 8006dea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d03f      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e00:	d02a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e06:	d824      	bhi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0c:	d018      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e12:	d81e      	bhi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1c:	d007      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e1e:	e018      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4ba3      	ldr	r3, [pc, #652]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4aa2      	ldr	r2, [pc, #648]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e2c:	e015      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2102      	movs	r1, #2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 f9d5 	bl	80081e4 <RCCEx_PLL2_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e3e:	e00c      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	2102      	movs	r1, #2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fa7e 	bl	8008348 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e50:	e003      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
      break;
 8006e56:	e000      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e60:	4b93      	ldr	r3, [pc, #588]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6c:	4990      	ldr	r1, [pc, #576]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	650b      	str	r3, [r1, #80]	; 0x50
 8006e72:	e001      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d03d      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d826      	bhi.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006e8c:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006eb7 	.word	0x08006eb7
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006ee1 	.word	0x08006ee1
 8006ea4:	08006ee1 	.word	0x08006ee1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea8:	4b81      	ldr	r3, [pc, #516]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	4a80      	ldr	r2, [pc, #512]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 f991 	bl	80081e4 <RCCEx_PLL2_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ec6:	e00c      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fa3a 	bl	8008348 <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ed8:	e003      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ee8:	4b71      	ldr	r3, [pc, #452]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eec:	f023 0207 	bic.w	r2, r3, #7
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	496e      	ldr	r1, [pc, #440]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d042      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f14:	d02b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d825      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f1c:	2bc0      	cmp	r3, #192	; 0xc0
 8006f1e:	d028      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006f20:	2bc0      	cmp	r3, #192	; 0xc0
 8006f22:	d821      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d016      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d81d      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d007      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006f34:	e018      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f36:	4b5e      	ldr	r3, [pc, #376]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	4a5d      	ldr	r2, [pc, #372]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f42:	e017      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f94a 	bl	80081e4 <RCCEx_PLL2_Config>
 8006f50:	4603      	mov	r3, r0
 8006f52:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f54:	e00e      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3324      	adds	r3, #36	; 0x24
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f9f3 	bl	8008348 <RCCEx_PLL3_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f66:	e005      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f7a:	4b4d      	ldr	r3, [pc, #308]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f86:	494a      	ldr	r1, [pc, #296]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	650b      	str	r3, [r1, #80]	; 0x50
 8006f8c:	e001      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d049      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fa8:	d030      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fae:	d82a      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fb4:	d02c      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006fb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fba:	d824      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc0:	d018      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc6:	d81e      	bhi.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006fd2:	e018      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd4:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e017      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 f8fb 	bl	80081e4 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ff2:	e00e      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3324      	adds	r3, #36	; 0x24
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 f9a4 	bl	8008348 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007004:	e005      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
      break;
 800700a:	e002      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800700c:	bf00      	nop
 800700e:	e000      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007018:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007026:	4922      	ldr	r1, [pc, #136]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007028:	4313      	orrs	r3, r2
 800702a:	658b      	str	r3, [r1, #88]	; 0x58
 800702c:	e001      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800703a:	2b00      	cmp	r3, #0
 800703c:	d04b      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007048:	d030      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800704e:	d82a      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007050:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007054:	d02e      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007056:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800705a:	d824      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800705c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007060:	d018      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007066:	d81e      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800706c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007070:	d007      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007072:	e018      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800707a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007080:	e019      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f8ab 	bl	80081e4 <RCCEx_PLL2_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007092:	e010      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 f954 	bl	8008348 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070a4:	e007      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
      break;
 80070aa:	e004      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80070ac:	bf00      	nop
 80070ae:	e002      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80070b0:	58024400 	.word	0x58024400
      break;
 80070b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070bc:	4b99      	ldr	r3, [pc, #612]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070ca:	4996      	ldr	r1, [pc, #600]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	658b      	str	r3, [r1, #88]	; 0x58
 80070d0:	e001      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d032      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	2b30      	cmp	r3, #48	; 0x30
 80070e8:	d01c      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80070ea:	2b30      	cmp	r3, #48	; 0x30
 80070ec:	d817      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d00c      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x330>
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d813      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d016      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d10f      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fe:	4b89      	ldr	r3, [pc, #548]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	4a88      	ldr	r2, [pc, #544]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800710a:	e00e      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	2102      	movs	r1, #2
 8007112:	4618      	mov	r0, r3
 8007114:	f001 f866 	bl	80081e4 <RCCEx_PLL2_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800711c:	e005      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
      break;
 8007122:	e002      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007130:	4b7c      	ldr	r3, [pc, #496]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713c:	4979      	ldr	r1, [pc, #484]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800713e:	4313      	orrs	r3, r2
 8007140:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007142:	e001      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d047      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800715c:	d030      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d82a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007168:	d02c      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800716a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800716e:	d824      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d018      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	d81e      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007184:	d007      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007186:	e018      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007188:	4b66      	ldr	r3, [pc, #408]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a65      	ldr	r2, [pc, #404]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800718e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007194:	e017      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f001 f821 	bl	80081e4 <RCCEx_PLL2_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071a6:	e00e      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 f8ca 	bl	8008348 <RCCEx_PLL3_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071b8:	e005      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
      break;
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80071c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071cc:	4b55      	ldr	r3, [pc, #340]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d8:	4952      	ldr	r1, [pc, #328]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	650b      	str	r3, [r1, #80]	; 0x50
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d049      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071f8:	d02e      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80071fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fe:	d828      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007204:	d02a      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800720a:	d822      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800720c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007210:	d026      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007216:	d81c      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721c:	d010      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800721e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007222:	d816      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722c:	d111      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	2101      	movs	r1, #1
 8007234:	4618      	mov	r0, r3
 8007236:	f000 ffd5 	bl	80081e4 <RCCEx_PLL2_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800723e:	e012      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3324      	adds	r3, #36	; 0x24
 8007244:	2101      	movs	r1, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f87e 	bl	8008348 <RCCEx_PLL3_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007250:	e009      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	e006      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007258:	bf00      	nop
 800725a:	e004      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800725c:	bf00      	nop
 800725e:	e002      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007260:	bf00      	nop
 8007262:	e000      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800726c:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007278:	492a      	ldr	r1, [pc, #168]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800727a:	4313      	orrs	r3, r2
 800727c:	650b      	str	r3, [r1, #80]	; 0x50
 800727e:	e001      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d04d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800729a:	d02e      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800729c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a0:	d828      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a6:	d02a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x522>
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ac:	d822      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80072ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072b2:	d026      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80072b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072b8:	d81c      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072be:	d010      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80072c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c4:	d816      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01d      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80072ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ce:	d111      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2101      	movs	r1, #1
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 ff84 	bl	80081e4 <RCCEx_PLL2_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072e0:	e012      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	2101      	movs	r1, #1
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f82d 	bl	8008348 <RCCEx_PLL3_Config>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072f2:	e009      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10c      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007312:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800731c:	4901      	ldr	r1, [pc, #4]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800731e:	4313      	orrs	r3, r2
 8007320:	658b      	str	r3, [r1, #88]	; 0x58
 8007322:	e003      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02f      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007340:	d00e      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007346:	d814      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d015      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800734c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007350:	d10f      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007352:	4baf      	ldr	r3, [pc, #700]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4aae      	ldr	r2, [pc, #696]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800735e:	e00c      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f000 ff3c 	bl	80081e4 <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007370:	e003      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
      break;
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007380:	4ba3      	ldr	r3, [pc, #652]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738c:	49a0      	ldr	r1, [pc, #640]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800738e:	4313      	orrs	r3, r2
 8007390:	650b      	str	r3, [r1, #80]	; 0x50
 8007392:	e001      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d032      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d81b      	bhi.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073eb 	.word	0x080073eb
 80073b8:	080073c5 	.word	0x080073c5
 80073bc:	080073d3 	.word	0x080073d3
 80073c0:	080073eb 	.word	0x080073eb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c4:	4b92      	ldr	r3, [pc, #584]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	4a91      	ldr	r2, [pc, #580]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073d0:	e00c      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	2102      	movs	r1, #2
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 ff03 	bl	80081e4 <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073e2:	e003      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
      break;
 80073e8:	e000      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80073ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073f2:	4b87      	ldr	r3, [pc, #540]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f6:	f023 0203 	bic.w	r2, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	4984      	ldr	r1, [pc, #528]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007400:	4313      	orrs	r3, r2
 8007402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007404:	e001      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8086 	beq.w	8007524 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007418:	4b7e      	ldr	r3, [pc, #504]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a7d      	ldr	r2, [pc, #500]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800741e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007424:	f7fa fdaa 	bl	8001f7c <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800742a:	e009      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800742c:	f7fa fda6 	bl	8001f7c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b64      	cmp	r3, #100	; 0x64
 8007438:	d902      	bls.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	75fb      	strb	r3, [r7, #23]
        break;
 800743e:	e005      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007440:	4b74      	ldr	r3, [pc, #464]	; (8007614 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0ef      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d166      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007452:	4b6f      	ldr	r3, [pc, #444]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800745c:	4053      	eors	r3, r2
 800745e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007462:	2b00      	cmp	r3, #0
 8007464:	d013      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007466:	4b6a      	ldr	r3, [pc, #424]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007470:	4b67      	ldr	r3, [pc, #412]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	4a66      	ldr	r2, [pc, #408]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800747c:	4b64      	ldr	r3, [pc, #400]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	4a63      	ldr	r2, [pc, #396]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007486:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007488:	4a61      	ldr	r2, [pc, #388]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007498:	d115      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7fa fd6f 	bl	8001f7c <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074a0:	e00b      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fa fd6b 	bl	8001f7c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d902      	bls.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	75fb      	strb	r3, [r7, #23]
            break;
 80074b8:	e005      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ba:	4b55      	ldr	r3, [pc, #340]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ed      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d126      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074da:	d10d      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80074dc:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074ea:	0919      	lsrs	r1, r3, #4
 80074ec:	4b4a      	ldr	r3, [pc, #296]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80074ee:	400b      	ands	r3, r1
 80074f0:	4947      	ldr	r1, [pc, #284]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	610b      	str	r3, [r1, #16]
 80074f6:	e005      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80074f8:	4b45      	ldr	r3, [pc, #276]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	4a44      	ldr	r2, [pc, #272]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80074fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007502:	6113      	str	r3, [r2, #16]
 8007504:	4b42      	ldr	r3, [pc, #264]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800750e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007512:	493f      	ldr	r1, [pc, #252]	; (8007610 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007514:	4313      	orrs	r3, r2
 8007516:	670b      	str	r3, [r1, #112]	; 0x70
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	75bb      	strb	r3, [r7, #22]
 800751e:	e001      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8085 	beq.w	800763c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007536:	2b28      	cmp	r3, #40	; 0x28
 8007538:	d866      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800753a:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	0800761d 	.word	0x0800761d
 8007544:	08007609 	.word	0x08007609
 8007548:	08007609 	.word	0x08007609
 800754c:	08007609 	.word	0x08007609
 8007550:	08007609 	.word	0x08007609
 8007554:	08007609 	.word	0x08007609
 8007558:	08007609 	.word	0x08007609
 800755c:	08007609 	.word	0x08007609
 8007560:	080075e5 	.word	0x080075e5
 8007564:	08007609 	.word	0x08007609
 8007568:	08007609 	.word	0x08007609
 800756c:	08007609 	.word	0x08007609
 8007570:	08007609 	.word	0x08007609
 8007574:	08007609 	.word	0x08007609
 8007578:	08007609 	.word	0x08007609
 800757c:	08007609 	.word	0x08007609
 8007580:	080075f7 	.word	0x080075f7
 8007584:	08007609 	.word	0x08007609
 8007588:	08007609 	.word	0x08007609
 800758c:	08007609 	.word	0x08007609
 8007590:	08007609 	.word	0x08007609
 8007594:	08007609 	.word	0x08007609
 8007598:	08007609 	.word	0x08007609
 800759c:	08007609 	.word	0x08007609
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	08007609 	.word	0x08007609
 80075a8:	08007609 	.word	0x08007609
 80075ac:	08007609 	.word	0x08007609
 80075b0:	08007609 	.word	0x08007609
 80075b4:	08007609 	.word	0x08007609
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007609 	.word	0x08007609
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	08007609 	.word	0x08007609
 80075c8:	08007609 	.word	0x08007609
 80075cc:	08007609 	.word	0x08007609
 80075d0:	08007609 	.word	0x08007609
 80075d4:	08007609 	.word	0x08007609
 80075d8:	08007609 	.word	0x08007609
 80075dc:	08007609 	.word	0x08007609
 80075e0:	0800761d 	.word	0x0800761d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	2101      	movs	r1, #1
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fdfa 	bl	80081e4 <RCCEx_PLL2_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80075f4:	e013      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	2101      	movs	r1, #1
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fea3 	bl	8008348 <RCCEx_PLL3_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007606:	e00a      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
      break;
 800760c:	e007      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	58024800 	.word	0x58024800
 8007618:	00ffffcf 	.word	0x00ffffcf
      break;
 800761c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007624:	4b96      	ldr	r3, [pc, #600]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007628:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007630:	4993      	ldr	r1, [pc, #588]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007632:	4313      	orrs	r3, r2
 8007634:	654b      	str	r3, [r1, #84]	; 0x54
 8007636:	e001      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d038      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764c:	2b05      	cmp	r3, #5
 800764e:	d821      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	0800769b 	.word	0x0800769b
 800765c:	08007671 	.word	0x08007671
 8007660:	08007683 	.word	0x08007683
 8007664:	0800769b 	.word	0x0800769b
 8007668:	0800769b 	.word	0x0800769b
 800766c:	0800769b 	.word	0x0800769b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	2101      	movs	r1, #1
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fdb4 	bl	80081e4 <RCCEx_PLL2_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007680:	e00c      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	2101      	movs	r1, #1
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fe5d 	bl	8008348 <RCCEx_PLL3_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007692:	e003      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
      break;
 8007698:	e000      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800769a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076a2:	4b77      	ldr	r3, [pc, #476]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	f023 0207 	bic.w	r2, r3, #7
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ae:	4974      	ldr	r1, [pc, #464]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	654b      	str	r3, [r1, #84]	; 0x54
 80076b4:	e001      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03a      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076cc:	2b05      	cmp	r3, #5
 80076ce:	d821      	bhi.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	0800771b 	.word	0x0800771b
 80076dc:	080076f1 	.word	0x080076f1
 80076e0:	08007703 	.word	0x08007703
 80076e4:	0800771b 	.word	0x0800771b
 80076e8:	0800771b 	.word	0x0800771b
 80076ec:	0800771b 	.word	0x0800771b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	2101      	movs	r1, #1
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fd74 	bl	80081e4 <RCCEx_PLL2_Config>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007700:	e00c      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3324      	adds	r3, #36	; 0x24
 8007706:	2101      	movs	r1, #1
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fe1d 	bl	8008348 <RCCEx_PLL3_Config>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007712:	e003      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]
      break;
 8007718:	e000      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800771a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007722:	4b57      	ldr	r3, [pc, #348]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007726:	f023 0207 	bic.w	r2, r3, #7
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007730:	4953      	ldr	r1, [pc, #332]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007732:	4313      	orrs	r3, r2
 8007734:	658b      	str	r3, [r1, #88]	; 0x58
 8007736:	e001      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d04b      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007752:	d02e      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007754:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007758:	d828      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d02a      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d822      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007766:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800776a:	d026      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800776c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007770:	d81c      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007776:	d010      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777c:	d816      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01d      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007786:	d111      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fd28 	bl	80081e4 <RCCEx_PLL2_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007798:	e012      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3324      	adds	r3, #36	; 0x24
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fdd1 	bl	8008348 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077aa:	e009      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	75fb      	strb	r3, [r7, #23]
      break;
 80077b0:	e006      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80077b2:	bf00      	nop
 80077b4:	e004      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80077b6:	bf00      	nop
 80077b8:	e002      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80077be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077c6:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d4:	492a      	ldr	r1, [pc, #168]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	654b      	str	r3, [r1, #84]	; 0x54
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d04d      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077f6:	d02e      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80077f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077fc:	d828      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	d02a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d822      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800780a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800780e:	d026      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007814:	d81c      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781a:	d010      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007820:	d816      	bhi.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01d      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800782a:	d111      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fcd6 	bl	80081e4 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800783c:	e012      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3324      	adds	r3, #36	; 0x24
 8007842:	2102      	movs	r1, #2
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fd7f 	bl	8008348 <RCCEx_PLL3_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800784e:	e009      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007856:	bf00      	nop
 8007858:	e004      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007878:	4901      	ldr	r1, [pc, #4]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800787a:	4313      	orrs	r3, r2
 800787c:	658b      	str	r3, [r1, #88]	; 0x58
 800787e:	e003      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007890:	2b00      	cmp	r3, #0
 8007892:	d04b      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800789a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800789e:	d02e      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80078a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078a4:	d828      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80078a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078aa:	d02a      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b0:	d822      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80078b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078b6:	d026      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80078b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078bc:	d81c      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80078be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c2:	d010      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80078c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078c8:	d816      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01d      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80078ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d2:	d111      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fc82 	bl	80081e4 <RCCEx_PLL2_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078e4:	e012      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fd2b 	bl	8008348 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078f6:	e009      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	e006      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80078fe:	bf00      	nop
 8007900:	e004      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007902:	bf00      	nop
 8007904:	e002      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007906:	bf00      	nop
 8007908:	e000      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800790a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007912:	4b9d      	ldr	r3, [pc, #628]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007920:	4999      	ldr	r1, [pc, #612]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007922:	4313      	orrs	r3, r2
 8007924:	658b      	str	r3, [r1, #88]	; 0x58
 8007926:	e001      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	d10a      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	2102      	movs	r1, #2
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fcfc 	bl	8008348 <RCCEx_PLL3_Config>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800795a:	4b8b      	ldr	r3, [pc, #556]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007968:	4987      	ldr	r1, [pc, #540]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800796a:	4313      	orrs	r3, r2
 800796c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01a      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007984:	d10a      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3324      	adds	r3, #36	; 0x24
 800798a:	2102      	movs	r1, #2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fcdb 	bl	8008348 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800799c:	4b7a      	ldr	r3, [pc, #488]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800799e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079aa:	4977      	ldr	r1, [pc, #476]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d034      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c6:	d01d      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80079c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079cc:	d817      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80079d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d6:	d009      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80079d8:	e011      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fbff 	bl	80081e4 <RCCEx_PLL2_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079ea:	e00c      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	2102      	movs	r1, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fca8 	bl	8008348 <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079fc:	e003      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
      break;
 8007a02:	e000      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a0c:	4b5e      	ldr	r3, [pc, #376]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a1a:	495b      	ldr	r1, [pc, #364]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a20:	e001      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d033      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a3c:	d01c      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a42:	d816      	bhi.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a48:	d003      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4e:	d007      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007a50:	e00f      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a52:	4b4d      	ldr	r3, [pc, #308]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a4c      	ldr	r2, [pc, #304]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a5e:	e00c      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3324      	adds	r3, #36	; 0x24
 8007a64:	2101      	movs	r1, #1
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fc6e 	bl	8008348 <RCCEx_PLL3_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a70:	e003      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
      break;
 8007a76:	e000      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a80:	4b41      	ldr	r3, [pc, #260]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8e:	493e      	ldr	r1, [pc, #248]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	654b      	str	r3, [r1, #84]	; 0x54
 8007a94:	e001      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d029      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab2:	d007      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007ab4:	e00f      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab6:	4b34      	ldr	r3, [pc, #208]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4a33      	ldr	r2, [pc, #204]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ac2:	e00b      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fb8a 	bl	80081e4 <RCCEx_PLL2_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8007ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ae2:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aee:	4926      	ldr	r1, [pc, #152]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007af4:	e001      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fc1b 	bl	8008348 <RCCEx_PLL3_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d033      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b30:	d017      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b36:	d811      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b3c:	d013      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b42:	d80b      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4c:	d106      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a0d      	ldr	r2, [pc, #52]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b5a:	e007      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b60:	e004      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007b62:	bf00      	nop
 8007b64:	e002      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10c      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	4902      	ldr	r1, [pc, #8]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	654b      	str	r3, [r1, #84]	; 0x54
 8007b84:	e004      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007b86:	bf00      	nop
 8007b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b9c:	4b31      	ldr	r3, [pc, #196]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba8:	492e      	ldr	r1, [pc, #184]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007bba:	4b2a      	ldr	r3, [pc, #168]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bc8:	4926      	ldr	r1, [pc, #152]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bda:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007be6:	491f      	ldr	r1, [pc, #124]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c02:	6113      	str	r3, [r2, #16]
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c0e:	4915      	ldr	r1, [pc, #84]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da08      	bge.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c28:	490e      	ldr	r1, [pc, #56]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007c4e:	7dbb      	ldrb	r3, [r7, #22]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400

08007c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c6c:	f7ff f85a 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	4904      	ldr	r1, [pc, #16]	; (8007c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	0800ba78 	.word	0x0800ba78

08007c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9c:	4ba1      	ldr	r3, [pc, #644]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ca6:	4b9f      	ldr	r3, [pc, #636]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	0b1b      	lsrs	r3, r3, #12
 8007cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007cb2:	4b9c      	ldr	r3, [pc, #624]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007cbe:	4b99      	ldr	r3, [pc, #612]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8111 	beq.w	8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f000 8083 	beq.w	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	f200 80a1 	bhi.w	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d056      	beq.n	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cfe:	e099      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d00:	4b88      	ldr	r3, [pc, #544]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d02d      	beq.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d0c:	4b85      	ldr	r3, [pc, #532]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	08db      	lsrs	r3, r3, #3
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	4a84      	ldr	r2, [pc, #528]	; (8007f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b7b      	ldr	r3, [pc, #492]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d66:	e087      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b6a      	ldr	r3, [pc, #424]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007daa:	e065      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dee:	e043      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b48      	ldr	r3, [pc, #288]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e32:	e021      	b.n	8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e46:	4b37      	ldr	r3, [pc, #220]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e78:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	0a5b      	lsrs	r3, r3, #9
 8007e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9e:	ee17 2a90 	vmov	r2, s15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	0c1b      	lsrs	r3, r3, #16
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ecc:	ee17 2a90 	vmov	r2, s15
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007ed4:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	0e1b      	lsrs	r3, r3, #24
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efa:	ee17 2a90 	vmov	r2, s15
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f02:	e008      	b.n	8007f16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	609a      	str	r2, [r3, #8]
}
 8007f16:	bf00      	nop
 8007f18:	3724      	adds	r7, #36	; 0x24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	46000000 	.word	0x46000000
 8007f30:	4c742400 	.word	0x4c742400
 8007f34:	4a742400 	.word	0x4a742400
 8007f38:	4af42400 	.word	0x4af42400

08007f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f44:	4ba1      	ldr	r3, [pc, #644]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f4e:	4b9f      	ldr	r3, [pc, #636]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	0d1b      	lsrs	r3, r3, #20
 8007f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f5a:	4b9c      	ldr	r3, [pc, #624]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f66:	4b99      	ldr	r3, [pc, #612]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	fb02 f303 	mul.w	r3, r2, r3
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8111 	beq.w	80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	f000 8083 	beq.w	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	f200 80a1 	bhi.w	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d056      	beq.n	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007fa6:	e099      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fa8:	4b88      	ldr	r3, [pc, #544]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d02d      	beq.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fb4:	4b85      	ldr	r3, [pc, #532]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	4a84      	ldr	r2, [pc, #528]	; (80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	ee07 3a90 	vmov	s15, r3
 8007fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b7b      	ldr	r3, [pc, #492]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800800e:	e087      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b6a      	ldr	r3, [pc, #424]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008052:	e065      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b59      	ldr	r3, [pc, #356]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008096:	e043      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b48      	ldr	r3, [pc, #288]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080da:	e021      	b.n	8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b37      	ldr	r3, [pc, #220]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008120:	4b2a      	ldr	r3, [pc, #168]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	0a5b      	lsrs	r3, r3, #9
 8008126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800813a:	edd7 6a07 	vldr	s13, [r7, #28]
 800813e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008146:	ee17 2a90 	vmov	r2, s15
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008168:	edd7 6a07 	vldr	s13, [r7, #28]
 800816c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008174:	ee17 2a90 	vmov	r2, s15
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800817c:	4b13      	ldr	r3, [pc, #76]	; (80081cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	0e1b      	lsrs	r3, r3, #24
 8008182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008196:	edd7 6a07 	vldr	s13, [r7, #28]
 800819a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800819e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a2:	ee17 2a90 	vmov	r2, s15
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80081aa:	e008      	b.n	80081be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
}
 80081be:	bf00      	nop
 80081c0:	3724      	adds	r7, #36	; 0x24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	46000000 	.word	0x46000000
 80081d8:	4c742400 	.word	0x4c742400
 80081dc:	4a742400 	.word	0x4a742400
 80081e0:	4af42400 	.word	0x4af42400

080081e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081f2:	4b53      	ldr	r3, [pc, #332]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d101      	bne.n	8008202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e099      	b.n	8008336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008202:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a4e      	ldr	r2, [pc, #312]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008208:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800820c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820e:	f7f9 feb5 	bl	8001f7c <HAL_GetTick>
 8008212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008214:	e008      	b.n	8008228 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008216:	f7f9 feb1 	bl	8001f7c <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e086      	b.n	8008336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008228:	4b45      	ldr	r3, [pc, #276]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008234:	4b42      	ldr	r3, [pc, #264]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	031b      	lsls	r3, r3, #12
 8008242:	493f      	ldr	r1, [pc, #252]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	628b      	str	r3, [r1, #40]	; 0x28
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	3b01      	subs	r3, #1
 8008258:	025b      	lsls	r3, r3, #9
 800825a:	b29b      	uxth	r3, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	3b01      	subs	r3, #1
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	3b01      	subs	r3, #1
 8008272:	061b      	lsls	r3, r3, #24
 8008274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008278:	4931      	ldr	r1, [pc, #196]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800827e:	4b30      	ldr	r3, [pc, #192]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	492d      	ldr	r1, [pc, #180]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800828c:	4313      	orrs	r3, r2
 800828e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008290:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	f023 0220 	bic.w	r2, r3, #32
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	4928      	ldr	r1, [pc, #160]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80082a2:	4b27      	ldr	r3, [pc, #156]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	4a26      	ldr	r2, [pc, #152]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082ae:	4b24      	ldr	r3, [pc, #144]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b2:	4b24      	ldr	r3, [pc, #144]	; (8008344 <RCCEx_PLL2_Config+0x160>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	69d2      	ldr	r2, [r2, #28]
 80082ba:	00d2      	lsls	r2, r2, #3
 80082bc:	4920      	ldr	r1, [pc, #128]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082c2:	4b1f      	ldr	r3, [pc, #124]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082c8:	f043 0310 	orr.w	r3, r3, #16
 80082cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082d4:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4a19      	ldr	r2, [pc, #100]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082e0:	e00f      	b.n	8008302 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d106      	bne.n	80082f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082f4:	e005      	b.n	8008302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 80082fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008300:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0e      	ldr	r2, [pc, #56]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 8008308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800830c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7f9 fe35 	bl	8001f7c <HAL_GetTick>
 8008312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008314:	e008      	b.n	8008328 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008316:	f7f9 fe31 	bl	8001f7c <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <RCCEx_PLL2_Config+0x15c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400
 8008344:	ffff0007 	.word	0xffff0007

08008348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008356:	4b53      	ldr	r3, [pc, #332]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b03      	cmp	r3, #3
 8008360:	d101      	bne.n	8008366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e099      	b.n	800849a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008366:	4b4f      	ldr	r3, [pc, #316]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a4e      	ldr	r2, [pc, #312]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800836c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008372:	f7f9 fe03 	bl	8001f7c <HAL_GetTick>
 8008376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008378:	e008      	b.n	800838c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800837a:	f7f9 fdff 	bl	8001f7c <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e086      	b.n	800849a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800838c:	4b45      	ldr	r3, [pc, #276]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1f0      	bne.n	800837a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	051b      	lsls	r3, r3, #20
 80083a6:	493f      	ldr	r1, [pc, #252]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	628b      	str	r3, [r1, #40]	; 0x28
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	025b      	lsls	r3, r3, #9
 80083be:	b29b      	uxth	r3, r3
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	041b      	lsls	r3, r3, #16
 80083ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	061b      	lsls	r3, r3, #24
 80083d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083dc:	4931      	ldr	r1, [pc, #196]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083e2:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	492d      	ldr	r1, [pc, #180]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083f4:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	4928      	ldr	r1, [pc, #160]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008402:	4313      	orrs	r3, r2
 8008404:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008406:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800840c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <RCCEx_PLL3_Config+0x160>)
 8008418:	4013      	ands	r3, r2
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	69d2      	ldr	r2, [r2, #28]
 800841e:	00d2      	lsls	r2, r2, #3
 8008420:	4920      	ldr	r1, [pc, #128]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008422:	4313      	orrs	r3, r2
 8008424:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008426:	4b1f      	ldr	r3, [pc, #124]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800842c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008430:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a19      	ldr	r2, [pc, #100]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800843e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008444:	e00f      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d106      	bne.n	800845a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800844c:	4b15      	ldr	r3, [pc, #84]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008452:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008458:	e005      	b.n	8008466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800845a:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008464:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a0e      	ldr	r2, [pc, #56]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800846c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7f9 fd83 	bl	8001f7c <HAL_GetTick>
 8008476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008478:	e008      	b.n	800848c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800847a:	f7f9 fd7f 	bl	8001f7c <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e006      	b.n	800849a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <RCCEx_PLL3_Config+0x15c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	58024400 	.word	0x58024400
 80084a8:	ffff0007 	.word	0xffff0007

080084ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e0f1      	b.n	80086a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a78      	ldr	r2, [pc, #480]	; (80086ac <HAL_SPI_Init+0x200>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00f      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a77      	ldr	r2, [pc, #476]	; (80086b0 <HAL_SPI_Init+0x204>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00a      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a75      	ldr	r2, [pc, #468]	; (80086b4 <HAL_SPI_Init+0x208>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d005      	beq.n	80084ee <HAL_SPI_Init+0x42>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d901      	bls.n	80084ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e0d9      	b.n	80086a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 ff58 	bl	80093a4 <SPI_GetPacketSize>
 80084f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a6c      	ldr	r2, [pc, #432]	; (80086ac <HAL_SPI_Init+0x200>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00c      	beq.n	800851a <HAL_SPI_Init+0x6e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a6a      	ldr	r2, [pc, #424]	; (80086b0 <HAL_SPI_Init+0x204>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <HAL_SPI_Init+0x6e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a69      	ldr	r2, [pc, #420]	; (80086b4 <HAL_SPI_Init+0x208>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d002      	beq.n	800851a <HAL_SPI_Init+0x6e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b08      	cmp	r3, #8
 8008518:	d811      	bhi.n	800853e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800851e:	4a63      	ldr	r2, [pc, #396]	; (80086ac <HAL_SPI_Init+0x200>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a61      	ldr	r2, [pc, #388]	; (80086b0 <HAL_SPI_Init+0x204>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_SPI_Init+0x8c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a60      	ldr	r2, [pc, #384]	; (80086b4 <HAL_SPI_Init+0x208>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d104      	bne.n	8008542 <HAL_SPI_Init+0x96>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b10      	cmp	r3, #16
 800853c:	d901      	bls.n	8008542 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e0af      	b.n	80086a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7f9 f8ec 	bl	8001734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800857e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008588:	d119      	bne.n	80085be <HAL_SPI_Init+0x112>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008592:	d103      	bne.n	800859c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008598:	2b00      	cmp	r3, #0
 800859a:	d008      	beq.n	80085ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10c      	bne.n	80085be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ac:	d107      	bne.n	80085be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69da      	ldr	r2, [r3, #28]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	431a      	orrs	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d0:	ea42 0103 	orr.w	r1, r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	431a      	orrs	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	431a      	orrs	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861e:	ea42 0103 	orr.w	r1, r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008648:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800865c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40013000 	.word	0x40013000
 80086b0:	40003800 	.word	0x40003800
 80086b4:	40003c00 	.word	0x40003c00

080086b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3320      	adds	r3, #32
 80086ce:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_SPI_Transmit+0x2a>
 80086de:	2302      	movs	r3, #2
 80086e0:	e1d7      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ea:	f7f9 fc47 	bl	8001f7c <HAL_GetTick>
 80086ee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d007      	beq.n	800870c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
 80086fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008708:	7efb      	ldrb	r3, [r7, #27]
 800870a:	e1c2      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <HAL_SPI_Transmit+0x60>
 8008712:	88fb      	ldrh	r3, [r7, #6]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d107      	bne.n	8008728 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008724:	7efb      	ldrb	r3, [r7, #27]
 8008726:	e1b4      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2203      	movs	r2, #3
 800872c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	88fa      	ldrh	r2, [r7, #6]
 800874a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008778:	d107      	bne.n	800878a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008788:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	4b96      	ldr	r3, [pc, #600]	; (80089ec <HAL_SPI_Transmit+0x334>)
 8008792:	4013      	ands	r3, r2
 8008794:	88f9      	ldrh	r1, [r7, #6]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	430b      	orrs	r3, r1
 800879c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087b6:	d107      	bne.n	80087c8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	d947      	bls.n	8008860 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087d0:	e03f      	b.n	8008852 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d114      	bne.n	800880a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	1d1a      	adds	r2, r3, #4
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008808:	e023      	b.n	8008852 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800880a:	f7f9 fbb7 	bl	8001f7c <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d803      	bhi.n	8008822 <HAL_SPI_Transmit+0x16a>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d102      	bne.n	8008828 <HAL_SPI_Transmit+0x170>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d114      	bne.n	8008852 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fced 	bl	8009208 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e11f      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1b9      	bne.n	80087d2 <HAL_SPI_Transmit+0x11a>
 800885e:	e0f2      	b.n	8008a46 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b07      	cmp	r3, #7
 8008866:	f240 80e7 	bls.w	8008a38 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800886a:	e05d      	b.n	8008928 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b02      	cmp	r3, #2
 8008878:	d132      	bne.n	80088e0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b01      	cmp	r3, #1
 8008884:	d918      	bls.n	80088b8 <HAL_SPI_Transmit+0x200>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d014      	beq.n	80088b8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b02      	subs	r3, #2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80088b6:	e037      	b.n	8008928 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088bc:	881a      	ldrh	r2, [r3, #0]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c6:	1c9a      	adds	r2, r3, #2
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80088de:	e023      	b.n	8008928 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088e0:	f7f9 fb4c 	bl	8001f7c <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d803      	bhi.n	80088f8 <HAL_SPI_Transmit+0x240>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f6:	d102      	bne.n	80088fe <HAL_SPI_Transmit+0x246>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d114      	bne.n	8008928 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fc82 	bl	8009208 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008912:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e0b4      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d19b      	bne.n	800886c <HAL_SPI_Transmit+0x1b4>
 8008934:	e087      	b.n	8008a46 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b02      	cmp	r3, #2
 8008942:	d155      	bne.n	80089f0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b03      	cmp	r3, #3
 800894e:	d918      	bls.n	8008982 <HAL_SPI_Transmit+0x2ca>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d914      	bls.n	8008982 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008968:	1d1a      	adds	r2, r3, #4
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008974:	b29b      	uxth	r3, r3
 8008976:	3b04      	subs	r3, #4
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008980:	e05a      	b.n	8008a38 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b01      	cmp	r3, #1
 800898c:	d917      	bls.n	80089be <HAL_SPI_Transmit+0x306>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d013      	beq.n	80089be <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899a:	881a      	ldrh	r2, [r3, #0]
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a4:	1c9a      	adds	r2, r3, #2
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b02      	subs	r3, #2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089bc:	e03c      	b.n	8008a38 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3320      	adds	r3, #32
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089e8:	e026      	b.n	8008a38 <HAL_SPI_Transmit+0x380>
 80089ea:	bf00      	nop
 80089ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f0:	f7f9 fac4 	bl	8001f7c <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d803      	bhi.n	8008a08 <HAL_SPI_Transmit+0x350>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d102      	bne.n	8008a0e <HAL_SPI_Transmit+0x356>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d114      	bne.n	8008a38 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fbfa 	bl	8009208 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e02c      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f af78 	bne.w	8008936 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2108      	movs	r1, #8
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fc79 	bl	8009348 <SPI_WaitOnFlagUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fbcb 	bl	8009208 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e000      	b.n	8008a92 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008a90:	7efb      	ldrb	r3, [r7, #27]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop

08008a9c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_SPI_Transmit_DMA+0x20>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e12c      	b.n	8008d16 <HAL_SPI_Transmit_DMA+0x27a>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d007      	beq.n	8008ae0 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	e11a      	b.n	8008d16 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <HAL_SPI_Transmit_DMA+0x50>
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d107      	bne.n	8008afc <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	e10c      	b.n	8008d16 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2203      	movs	r2, #3
 8008b00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008b4c:	d107      	bne.n	8008b5e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b5c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	d905      	bls.n	8008b72 <HAL_SPI_Transmit_DMA+0xd6>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b70:	d10f      	bne.n	8008b92 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008b76:	2b07      	cmp	r3, #7
 8008b78:	d913      	bls.n	8008ba2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d00d      	beq.n	8008ba2 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b8a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b90:	d007      	beq.n	8008ba2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	e0b9      	b.n	8008d16 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b07      	cmp	r3, #7
 8008ba8:	d820      	bhi.n	8008bec <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb4:	d109      	bne.n	8008bca <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	105b      	asrs	r3, r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd4:	d11e      	bne.n	8008c14 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3303      	adds	r3, #3
 8008be0:	109b      	asrs	r3, r3, #2
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008bea:	e013      	b.n	8008c14 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b0f      	cmp	r3, #15
 8008bf2:	d80f      	bhi.n	8008c14 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bfe:	d109      	bne.n	8008c14 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	3301      	adds	r3, #1
 8008c0a:	105b      	asrs	r3, r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c18:	4a41      	ldr	r2, [pc, #260]	; (8008d20 <HAL_SPI_Transmit_DMA+0x284>)
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c20:	4a40      	ldr	r2, [pc, #256]	; (8008d24 <HAL_SPI_Transmit_DMA+0x288>)
 8008c22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c28:	4a3f      	ldr	r2, [pc, #252]	; (8008d28 <HAL_SPI_Transmit_DMA+0x28c>)
 8008c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c30:	2200      	movs	r2, #0
 8008c32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c42:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3320      	adds	r3, #32
 8008c54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c5c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008c5e:	f7f9 fe49 	bl	80028f4 <HAL_DMA_Start_IT>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d013      	beq.n	8008c90 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c6e:	f043 0210 	orr.w	r2, r3, #16
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	e042      	b.n	8008d16 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9a:	d108      	bne.n	8008cae <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6859      	ldr	r1, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	4b21      	ldr	r3, [pc, #132]	; (8008d2c <HAL_SPI_Transmit_DMA+0x290>)
 8008ca8:	400b      	ands	r3, r1
 8008caa:	6053      	str	r3, [r2, #4]
 8008cac:	e009      	b.n	8008cc2 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <HAL_SPI_Transmit_DMA+0x290>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	88f9      	ldrh	r1, [r7, #6]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	430b      	orrs	r3, r1
 8008cc0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cd0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008ce0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cfa:	d107      	bne.n	8008d0c <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d0a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	08009173 	.word	0x08009173
 8008d24:	0800912d 	.word	0x0800912d
 8008d28:	0800918f 	.word	0x0800918f
 8008d2c:	ffff0000 	.word	0xffff0000

08008d30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008d48:	6a3a      	ldr	r2, [r7, #32]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d62:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3330      	adds	r3, #48	; 0x30
 8008d6a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <HAL_SPI_IRQHandler+0x6e>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	f003 0320 	and.w	r3, r3, #32
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10e      	bne.n	8008d9e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
    handled = 1UL;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10f      	bne.n	8008dc8 <HAL_SPI_IRQHandler+0x98>
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d105      	bne.n	8008dc8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	4798      	blx	r3
    handled = 1UL;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10f      	bne.n	8008df2 <HAL_SPI_IRQHandler+0xc2>
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
    handled = 1UL;
 8008dee:	2301      	movs	r3, #1
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 815a 	bne.w	80090ae <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 808b 	beq.w	8008f1c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699a      	ldr	r2, [r3, #24]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0208 	orr.w	r2, r2, #8
 8008e14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0210 	orr.w	r2, r2, #16
 8008e24:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	699a      	ldr	r2, [r3, #24]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e34:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0208 	bic.w	r2, r2, #8
 8008e44:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d13d      	bne.n	8008ed0 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008e54:	e036      	b.n	8008ec4 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	2b0f      	cmp	r3, #15
 8008e5c:	d90b      	bls.n	8008e76 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008e68:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	665a      	str	r2, [r3, #100]	; 0x64
 8008e74:	e01d      	b.n	8008eb2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b07      	cmp	r3, #7
 8008e7c:	d90b      	bls.n	8008e96 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	8812      	ldrh	r2, [r2, #0]
 8008e86:	b292      	uxth	r2, r2
 8008e88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	665a      	str	r2, [r3, #100]	; 0x64
 8008e94:	e00d      	b.n	8008eb2 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1c2      	bne.n	8008e56 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f999 	bl	8009208 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f915 	bl	8009118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008eee:	e0e3      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008ef0:	7cfb      	ldrb	r3, [r7, #19]
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d103      	bne.n	8008efe <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f8fa 	bl	80090f0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008efc:	e0d9      	b.n	80090b2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d103      	bne.n	8008f0c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f8e9 	bl	80090dc <HAL_SPI_RxCpltCallback>
    return;
 8008f0a:	e0d2      	b.n	80090b2 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008f0c:	7cfb      	ldrb	r3, [r7, #19]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f040 80cf 	bne.w	80090b2 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8d7 	bl	80090c8 <HAL_SPI_TxCpltCallback>
    return;
 8008f1a:	e0ca      	b.n	80090b2 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <HAL_SPI_IRQHandler+0x212>
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f3e:	619a      	str	r2, [r3, #24]

    return;
 8008f40:	e0ba      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80b5 	beq.w	80090b8 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00f      	beq.n	8008f78 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f5e:	f043 0204 	orr.w	r2, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f76:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00f      	beq.n	8008fa2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f88:	f043 0201 	orr.w	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00f      	beq.n	8008fcc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb2:	f043 0208 	orr.w	r2, r3, #8
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00f      	beq.n	8008ff6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0220 	orr.w	r2, r2, #32
 8008ff4:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d05a      	beq.n	80090b6 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0201 	bic.w	r2, r2, #1
 800900e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6919      	ldr	r1, [r3, #16]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <HAL_SPI_IRQHandler+0x390>)
 800901c:	400b      	ands	r3, r1
 800901e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009026:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800902a:	d138      	bne.n	800909e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800903a:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d013      	beq.n	800906c <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009048:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <HAL_SPI_IRQHandler+0x394>)
 800904a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009050:	4618      	mov	r0, r3
 8009052:	f7fa f9d7 	bl	8003404 <HAL_DMA_Abort_IT>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d007      	beq.n	800906c <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009070:	2b00      	cmp	r3, #0
 8009072:	d020      	beq.n	80090b6 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009078:	4a12      	ldr	r2, [pc, #72]	; (80090c4 <HAL_SPI_IRQHandler+0x394>)
 800907a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009080:	4618      	mov	r0, r3
 8009082:	f7fa f9bf 	bl	8003404 <HAL_DMA_Abort_IT>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d014      	beq.n	80090b6 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800909c:	e00b      	b.n	80090b6 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f836 	bl	8009118 <HAL_SPI_ErrorCallback>
    return;
 80090ac:	e003      	b.n	80090b6 <HAL_SPI_IRQHandler+0x386>
    return;
 80090ae:	bf00      	nop
 80090b0:	e002      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
    return;
 80090b2:	bf00      	nop
 80090b4:	e000      	b.n	80090b8 <HAL_SPI_IRQHandler+0x388>
    return;
 80090b6:	bf00      	nop
  }
}
 80090b8:	3728      	adds	r7, #40	; 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	fffffc94 	.word	0xfffffc94
 80090c4:	080091d5 	.word	0x080091d5

080090c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b07      	cmp	r3, #7
 8009144:	d011      	beq.n	800916a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009150:	d103      	bne.n	800915a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff ffb8 	bl	80090c8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009158:	e007      	b.n	800916a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0208 	orr.w	r2, r2, #8
 8009168:	611a      	str	r2, [r3, #16]
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff ffbf 	bl	8009104 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009186:	bf00      	nop
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7fb faa1 	bl	80046e4 <HAL_DMA_GetError>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d011      	beq.n	80091cc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f82d 	bl	8009208 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b4:	f043 0210 	orr.w	r2, r3, #16
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff ffa6 	bl	8009118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff ff8c 	bl	8009118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699a      	ldr	r2, [r3, #24]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0210 	orr.w	r2, r2, #16
 8009236:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6919      	ldr	r1, [r3, #16]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	4b3c      	ldr	r3, [pc, #240]	; (8009344 <SPI_CloseTransfer+0x13c>)
 8009254:	400b      	ands	r3, r1
 8009256:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009266:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b04      	cmp	r3, #4
 8009272:	d014      	beq.n	800929e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00f      	beq.n	800929e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009284:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0220 	orr.w	r2, r2, #32
 800929c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d014      	beq.n	80092d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ba:	f043 0204 	orr.w	r2, r3, #4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699a      	ldr	r2, [r3, #24]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00f      	beq.n	80092fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e4:	f043 0201 	orr.w	r2, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00f      	beq.n	8009328 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930e:	f043 0208 	orr.w	r2, r3, #8
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009326:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	fffffc90 	.word	0xfffffc90

08009348 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	4613      	mov	r3, r2
 8009356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009358:	e010      	b.n	800937c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800935a:	f7f8 fe0f 	bl	8001f7c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	429a      	cmp	r2, r3
 8009368:	d803      	bhi.n	8009372 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d102      	bne.n	8009378 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e00f      	b.n	800939c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	695a      	ldr	r2, [r3, #20]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	4013      	ands	r3, r2
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	429a      	cmp	r2, r3
 800938a:	bf0c      	ite	eq
 800938c:	2301      	moveq	r3, #1
 800938e:	2300      	movne	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	429a      	cmp	r2, r3
 8009398:	d0df      	beq.n	800935a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	3307      	adds	r3, #7
 80093c2:	08db      	lsrs	r3, r3, #3
 80093c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e042      	b.n	8009472 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f8 fb0a 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2224      	movs	r2, #36	; 0x24
 8009408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc55 	bl	8009ccc <UART_SetConfig>
 8009422:	4603      	mov	r3, r0
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e022      	b.n	8009472 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 f9b1 	bl	800a79c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009448:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009458:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f042 0201 	orr.w	r2, r2, #1
 8009468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fa38 	bl	800a8e0 <UART_CheckIdleState>
 8009470:	4603      	mov	r3, r0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08a      	sub	sp, #40	; 0x28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009490:	2b20      	cmp	r3, #32
 8009492:	d142      	bne.n	800951a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_UART_Receive_DMA+0x24>
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e03b      	b.n	800951c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Receive_DMA+0x36>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e034      	b.n	800951c <HAL_UART_Receive_DMA+0xa0>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a17      	ldr	r2, [pc, #92]	; (8009524 <HAL_UART_Receive_DMA+0xa8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d01f      	beq.n	800950a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d018      	beq.n	800950a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	613b      	str	r3, [r7, #16]
   return(result);
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	623b      	str	r3, [r7, #32]
 80094f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	69f9      	ldr	r1, [r7, #28]
 80094fc:	6a3a      	ldr	r2, [r7, #32]
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	61bb      	str	r3, [r7, #24]
   return(result);
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	461a      	mov	r2, r3
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f001 faf9 	bl	800ab08 <UART_Start_Receive_DMA>
 8009516:	4603      	mov	r3, r0
 8009518:	e000      	b.n	800951c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800951a:	2302      	movs	r3, #2
  }
}
 800951c:	4618      	mov	r0, r3
 800951e:	3728      	adds	r7, #40	; 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	58000c00 	.word	0x58000c00

08009528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b0ba      	sub	sp, #232	; 0xe8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800954e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009552:	f640 030f 	movw	r3, #2063	; 0x80f
 8009556:	4013      	ands	r3, r2
 8009558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800955c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11b      	bne.n	800959c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b00      	cmp	r3, #0
 800956e:	d015      	beq.n	800959c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d105      	bne.n	8009588 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800957c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 835a 	beq.w	8009c46 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
      }
      return;
 800959a:	e354      	b.n	8009c46 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800959c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 811f 	beq.w	80097e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095aa:	4b8b      	ldr	r3, [pc, #556]	; (80097d8 <HAL_UART_IRQHandler+0x2b0>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095b6:	4b89      	ldr	r3, [pc, #548]	; (80097dc <HAL_UART_IRQHandler+0x2b4>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8112 	beq.w	80097e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d011      	beq.n	80095f0 <HAL_UART_IRQHandler+0xc8>
 80095cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2201      	movs	r2, #1
 80095de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e6:	f043 0201 	orr.w	r2, r3, #1
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d011      	beq.n	8009620 <HAL_UART_IRQHandler+0xf8>
 80095fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2202      	movs	r2, #2
 800960e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009616:	f043 0204 	orr.w	r2, r3, #4
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d011      	beq.n	8009650 <HAL_UART_IRQHandler+0x128>
 800962c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2204      	movs	r2, #4
 800963e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009646:	f043 0202 	orr.w	r2, r3, #2
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d017      	beq.n	800968c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800965c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b00      	cmp	r3, #0
 8009666:	d105      	bne.n	8009674 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009668:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800966c:	4b5a      	ldr	r3, [pc, #360]	; (80097d8 <HAL_UART_IRQHandler+0x2b0>)
 800966e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2208      	movs	r2, #8
 800967a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009682:	f043 0208 	orr.w	r2, r3, #8
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800968c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009694:	2b00      	cmp	r3, #0
 8009696:	d012      	beq.n	80096be <HAL_UART_IRQHandler+0x196>
 8009698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800969c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b4:	f043 0220 	orr.w	r2, r3, #32
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 82c0 	beq.w	8009c4a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d013      	beq.n	80096fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d007      	beq.n	80096fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009712:	2b40      	cmp	r3, #64	; 0x40
 8009714:	d005      	beq.n	8009722 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800971a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800971e:	2b00      	cmp	r3, #0
 8009720:	d04f      	beq.n	80097c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f001 fada 	bl	800acdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d141      	bne.n	80097ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800974c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3308      	adds	r3, #8
 800975e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800976e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800977a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1d9      	bne.n	8009736 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d013      	beq.n	80097b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800978e:	4a14      	ldr	r2, [pc, #80]	; (80097e0 <HAL_UART_IRQHandler+0x2b8>)
 8009790:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009796:	4618      	mov	r0, r3
 8009798:	f7f9 fe34 	bl	8003404 <HAL_DMA_Abort_IT>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d017      	beq.n	80097d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b0:	e00f      	b.n	80097d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa74 	bl	8009ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b8:	e00b      	b.n	80097d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa70 	bl	8009ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c0:	e007      	b.n	80097d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa6c 	bl	8009ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80097d0:	e23b      	b.n	8009c4a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d2:	bf00      	nop
    return;
 80097d4:	e239      	b.n	8009c4a <HAL_UART_IRQHandler+0x722>
 80097d6:	bf00      	nop
 80097d8:	10000001 	.word	0x10000001
 80097dc:	04000120 	.word	0x04000120
 80097e0:	0800af83 	.word	0x0800af83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	f040 81ce 	bne.w	8009b8a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 81c7 	beq.w	8009b8a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 81c0 	beq.w	8009b8a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2210      	movs	r2, #16
 8009810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981c:	2b40      	cmp	r3, #64	; 0x40
 800981e:	f040 813b 	bne.w	8009a98 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a8b      	ldr	r2, [pc, #556]	; (8009a58 <HAL_UART_IRQHandler+0x530>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d059      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a89      	ldr	r2, [pc, #548]	; (8009a5c <HAL_UART_IRQHandler+0x534>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d053      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a87      	ldr	r2, [pc, #540]	; (8009a60 <HAL_UART_IRQHandler+0x538>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d04d      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a85      	ldr	r2, [pc, #532]	; (8009a64 <HAL_UART_IRQHandler+0x53c>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d047      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a83      	ldr	r2, [pc, #524]	; (8009a68 <HAL_UART_IRQHandler+0x540>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d041      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a81      	ldr	r2, [pc, #516]	; (8009a6c <HAL_UART_IRQHandler+0x544>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d03b      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a7f      	ldr	r2, [pc, #508]	; (8009a70 <HAL_UART_IRQHandler+0x548>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d035      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a7d      	ldr	r2, [pc, #500]	; (8009a74 <HAL_UART_IRQHandler+0x54c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d02f      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a7b      	ldr	r2, [pc, #492]	; (8009a78 <HAL_UART_IRQHandler+0x550>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d029      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a79      	ldr	r2, [pc, #484]	; (8009a7c <HAL_UART_IRQHandler+0x554>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d023      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a77      	ldr	r2, [pc, #476]	; (8009a80 <HAL_UART_IRQHandler+0x558>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d01d      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a75      	ldr	r2, [pc, #468]	; (8009a84 <HAL_UART_IRQHandler+0x55c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d017      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a73      	ldr	r2, [pc, #460]	; (8009a88 <HAL_UART_IRQHandler+0x560>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d011      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a71      	ldr	r2, [pc, #452]	; (8009a8c <HAL_UART_IRQHandler+0x564>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00b      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a6f      	ldr	r2, [pc, #444]	; (8009a90 <HAL_UART_IRQHandler+0x568>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d005      	beq.n	80098e2 <HAL_UART_IRQHandler+0x3ba>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a6d      	ldr	r2, [pc, #436]	; (8009a94 <HAL_UART_IRQHandler+0x56c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d105      	bne.n	80098ee <HAL_UART_IRQHandler+0x3c6>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	e004      	b.n	80098f8 <HAL_UART_IRQHandler+0x3d0>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 81a4 	beq.w	8009c4e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800990c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009910:	429a      	cmp	r2, r3
 8009912:	f080 819c 	bcs.w	8009c4e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800991c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800992a:	f000 8086 	beq.w	8009a3a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800994a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800995c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009964:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1da      	bne.n	800992e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3308      	adds	r3, #8
 800997e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800999c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e1      	bne.n	8009978 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e3      	bne.n	80099b4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a02:	e853 3f00 	ldrex	r3, [r3]
 8009a06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0a:	f023 0310 	bic.w	r3, r3, #16
 8009a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e4      	bne.n	80099fa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f9 f9c7 	bl	8002dc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f930 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a54:	e0fb      	b.n	8009c4e <HAL_UART_IRQHandler+0x726>
 8009a56:	bf00      	nop
 8009a58:	40020010 	.word	0x40020010
 8009a5c:	40020028 	.word	0x40020028
 8009a60:	40020040 	.word	0x40020040
 8009a64:	40020058 	.word	0x40020058
 8009a68:	40020070 	.word	0x40020070
 8009a6c:	40020088 	.word	0x40020088
 8009a70:	400200a0 	.word	0x400200a0
 8009a74:	400200b8 	.word	0x400200b8
 8009a78:	40020410 	.word	0x40020410
 8009a7c:	40020428 	.word	0x40020428
 8009a80:	40020440 	.word	0x40020440
 8009a84:	40020458 	.word	0x40020458
 8009a88:	40020470 	.word	0x40020470
 8009a8c:	40020488 	.word	0x40020488
 8009a90:	400204a0 	.word	0x400204a0
 8009a94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80cc 	beq.w	8009c52 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80c7 	beq.w	8009c52 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ae8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e4      	bne.n	8009ac4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	623b      	str	r3, [r7, #32]
   return(result);
 8009b0a:	6a3a      	ldr	r2, [r7, #32]
 8009b0c:	4b54      	ldr	r3, [pc, #336]	; (8009c60 <HAL_UART_IRQHandler+0x738>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e3      	bne.n	8009afa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0310 	bic.w	r3, r3, #16
 8009b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	69b9      	ldr	r1, [r7, #24]
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	617b      	str	r3, [r7, #20]
   return(result);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e4      	bne.n	8009b46 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f896 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b88:	e063      	b.n	8009c52 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <HAL_UART_IRQHandler+0x68c>
 8009b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d008      	beq.n	8009bb4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009baa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fa29 	bl	800b004 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bb2:	e051      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d014      	beq.n	8009bea <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d105      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d03a      	beq.n	8009c56 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
    }
    return;
 8009be8:	e035      	b.n	8009c56 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <HAL_UART_IRQHandler+0x6e2>
 8009bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f9d3 	bl	800afae <UART_EndTransmit_IT>
    return;
 8009c08:	e026      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <HAL_UART_IRQHandler+0x702>
 8009c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fa02 	bl	800b02c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c28:	e016      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d010      	beq.n	8009c58 <HAL_UART_IRQHandler+0x730>
 8009c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da0c      	bge.n	8009c58 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f9ea 	bl	800b018 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c44:	e008      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
      return;
 8009c46:	bf00      	nop
 8009c48:	e006      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
    return;
 8009c4a:	bf00      	nop
 8009c4c:	e004      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
      return;
 8009c4e:	bf00      	nop
 8009c50:	e002      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
      return;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <HAL_UART_IRQHandler+0x730>
    return;
 8009c56:	bf00      	nop
  }
}
 8009c58:	37e8      	adds	r7, #232	; 0xe8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	effffffe 	.word	0xeffffffe

08009c64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd0:	b092      	sub	sp, #72	; 0x48
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	4bbe      	ldr	r3, [pc, #760]	; (8009ff4 <UART_SetConfig+0x328>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	6812      	ldr	r2, [r2, #0]
 8009d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d04:	430b      	orrs	r3, r1
 8009d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4ab3      	ldr	r2, [pc, #716]	; (8009ff8 <UART_SetConfig+0x32c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d004      	beq.n	8009d38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d34:	4313      	orrs	r3, r2
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	4baf      	ldr	r3, [pc, #700]	; (8009ffc <UART_SetConfig+0x330>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	f023 010f 	bic.w	r1, r3, #15
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4aa6      	ldr	r2, [pc, #664]	; (800a000 <UART_SetConfig+0x334>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d177      	bne.n	8009e5c <UART_SetConfig+0x190>
 8009d6c:	4ba5      	ldr	r3, [pc, #660]	; (800a004 <UART_SetConfig+0x338>)
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d74:	2b28      	cmp	r3, #40	; 0x28
 8009d76:	d86d      	bhi.n	8009e54 <UART_SetConfig+0x188>
 8009d78:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <UART_SetConfig+0xb4>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009e25 	.word	0x08009e25
 8009d84:	08009e55 	.word	0x08009e55
 8009d88:	08009e55 	.word	0x08009e55
 8009d8c:	08009e55 	.word	0x08009e55
 8009d90:	08009e55 	.word	0x08009e55
 8009d94:	08009e55 	.word	0x08009e55
 8009d98:	08009e55 	.word	0x08009e55
 8009d9c:	08009e55 	.word	0x08009e55
 8009da0:	08009e2d 	.word	0x08009e2d
 8009da4:	08009e55 	.word	0x08009e55
 8009da8:	08009e55 	.word	0x08009e55
 8009dac:	08009e55 	.word	0x08009e55
 8009db0:	08009e55 	.word	0x08009e55
 8009db4:	08009e55 	.word	0x08009e55
 8009db8:	08009e55 	.word	0x08009e55
 8009dbc:	08009e55 	.word	0x08009e55
 8009dc0:	08009e35 	.word	0x08009e35
 8009dc4:	08009e55 	.word	0x08009e55
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	08009e55 	.word	0x08009e55
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009e55 	.word	0x08009e55
 8009dd8:	08009e55 	.word	0x08009e55
 8009ddc:	08009e55 	.word	0x08009e55
 8009de0:	08009e3d 	.word	0x08009e3d
 8009de4:	08009e55 	.word	0x08009e55
 8009de8:	08009e55 	.word	0x08009e55
 8009dec:	08009e55 	.word	0x08009e55
 8009df0:	08009e55 	.word	0x08009e55
 8009df4:	08009e55 	.word	0x08009e55
 8009df8:	08009e55 	.word	0x08009e55
 8009dfc:	08009e55 	.word	0x08009e55
 8009e00:	08009e45 	.word	0x08009e45
 8009e04:	08009e55 	.word	0x08009e55
 8009e08:	08009e55 	.word	0x08009e55
 8009e0c:	08009e55 	.word	0x08009e55
 8009e10:	08009e55 	.word	0x08009e55
 8009e14:	08009e55 	.word	0x08009e55
 8009e18:	08009e55 	.word	0x08009e55
 8009e1c:	08009e55 	.word	0x08009e55
 8009e20:	08009e4d 	.word	0x08009e4d
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e222      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e21e      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e34:	2308      	movs	r3, #8
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e21a      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e3c:	2310      	movs	r3, #16
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e216      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e44:	2320      	movs	r3, #32
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e212      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e4c:	2340      	movs	r3, #64	; 0x40
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e20e      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e54:	2380      	movs	r3, #128	; 0x80
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e20a      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a69      	ldr	r2, [pc, #420]	; (800a008 <UART_SetConfig+0x33c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d130      	bne.n	8009ec8 <UART_SetConfig+0x1fc>
 8009e66:	4b67      	ldr	r3, [pc, #412]	; (800a004 <UART_SetConfig+0x338>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d826      	bhi.n	8009ec0 <UART_SetConfig+0x1f4>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x1ac>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009e91 	.word	0x08009e91
 8009e7c:	08009e99 	.word	0x08009e99
 8009e80:	08009ea1 	.word	0x08009ea1
 8009e84:	08009ea9 	.word	0x08009ea9
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e1ec      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e1e8      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e1e4      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e1e0      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e1dc      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e1d8      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e1d4      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a4f      	ldr	r2, [pc, #316]	; (800a00c <UART_SetConfig+0x340>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d130      	bne.n	8009f34 <UART_SetConfig+0x268>
 8009ed2:	4b4c      	ldr	r3, [pc, #304]	; (800a004 <UART_SetConfig+0x338>)
 8009ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d826      	bhi.n	8009f2c <UART_SetConfig+0x260>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x218>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009efd 	.word	0x08009efd
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	08009f0d 	.word	0x08009f0d
 8009ef0:	08009f15 	.word	0x08009f15
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f25 	.word	0x08009f25
 8009efc:	2300      	movs	r3, #0
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e1b6      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f04:	2304      	movs	r3, #4
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e1b2      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e1ae      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f14:	2310      	movs	r3, #16
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e1aa      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e1a6      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e1a2      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e19e      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a35      	ldr	r2, [pc, #212]	; (800a010 <UART_SetConfig+0x344>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d130      	bne.n	8009fa0 <UART_SetConfig+0x2d4>
 8009f3e:	4b31      	ldr	r3, [pc, #196]	; (800a004 <UART_SetConfig+0x338>)
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d826      	bhi.n	8009f98 <UART_SetConfig+0x2cc>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x284>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009f69 	.word	0x08009f69
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f79 	.word	0x08009f79
 8009f5c:	08009f81 	.word	0x08009f81
 8009f60:	08009f89 	.word	0x08009f89
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e180      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e17c      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e178      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e174      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e170      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e16c      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e168      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1b      	ldr	r2, [pc, #108]	; (800a014 <UART_SetConfig+0x348>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d142      	bne.n	800a030 <UART_SetConfig+0x364>
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <UART_SetConfig+0x338>)
 8009fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	d838      	bhi.n	800a028 <UART_SetConfig+0x35c>
 8009fb6:	a201      	add	r2, pc, #4	; (adr r2, 8009fbc <UART_SetConfig+0x2f0>)
 8009fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbc:	08009fd5 	.word	0x08009fd5
 8009fc0:	08009fdd 	.word	0x08009fdd
 8009fc4:	08009fe5 	.word	0x08009fe5
 8009fc8:	08009fed 	.word	0x08009fed
 8009fcc:	0800a019 	.word	0x0800a019
 8009fd0:	0800a021 	.word	0x0800a021
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fda:	e14a      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009fdc:	2304      	movs	r3, #4
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe2:	e146      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009fe4:	2308      	movs	r3, #8
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fea:	e142      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009fec:	2310      	movs	r3, #16
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff2:	e13e      	b.n	800a272 <UART_SetConfig+0x5a6>
 8009ff4:	cfff69f3 	.word	0xcfff69f3
 8009ff8:	58000c00 	.word	0x58000c00
 8009ffc:	11fff4ff 	.word	0x11fff4ff
 800a000:	40011000 	.word	0x40011000
 800a004:	58024400 	.word	0x58024400
 800a008:	40004400 	.word	0x40004400
 800a00c:	40004800 	.word	0x40004800
 800a010:	40004c00 	.word	0x40004c00
 800a014:	40005000 	.word	0x40005000
 800a018:	2320      	movs	r3, #32
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e128      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a020:	2340      	movs	r3, #64	; 0x40
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e124      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e120      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4acb      	ldr	r2, [pc, #812]	; (800a364 <UART_SetConfig+0x698>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d176      	bne.n	800a128 <UART_SetConfig+0x45c>
 800a03a:	4bcb      	ldr	r3, [pc, #812]	; (800a368 <UART_SetConfig+0x69c>)
 800a03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a042:	2b28      	cmp	r3, #40	; 0x28
 800a044:	d86c      	bhi.n	800a120 <UART_SetConfig+0x454>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <UART_SetConfig+0x380>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a0f1 	.word	0x0800a0f1
 800a050:	0800a121 	.word	0x0800a121
 800a054:	0800a121 	.word	0x0800a121
 800a058:	0800a121 	.word	0x0800a121
 800a05c:	0800a121 	.word	0x0800a121
 800a060:	0800a121 	.word	0x0800a121
 800a064:	0800a121 	.word	0x0800a121
 800a068:	0800a121 	.word	0x0800a121
 800a06c:	0800a0f9 	.word	0x0800a0f9
 800a070:	0800a121 	.word	0x0800a121
 800a074:	0800a121 	.word	0x0800a121
 800a078:	0800a121 	.word	0x0800a121
 800a07c:	0800a121 	.word	0x0800a121
 800a080:	0800a121 	.word	0x0800a121
 800a084:	0800a121 	.word	0x0800a121
 800a088:	0800a121 	.word	0x0800a121
 800a08c:	0800a101 	.word	0x0800a101
 800a090:	0800a121 	.word	0x0800a121
 800a094:	0800a121 	.word	0x0800a121
 800a098:	0800a121 	.word	0x0800a121
 800a09c:	0800a121 	.word	0x0800a121
 800a0a0:	0800a121 	.word	0x0800a121
 800a0a4:	0800a121 	.word	0x0800a121
 800a0a8:	0800a121 	.word	0x0800a121
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a121 	.word	0x0800a121
 800a0b4:	0800a121 	.word	0x0800a121
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a121 	.word	0x0800a121
 800a0c0:	0800a121 	.word	0x0800a121
 800a0c4:	0800a121 	.word	0x0800a121
 800a0c8:	0800a121 	.word	0x0800a121
 800a0cc:	0800a111 	.word	0x0800a111
 800a0d0:	0800a121 	.word	0x0800a121
 800a0d4:	0800a121 	.word	0x0800a121
 800a0d8:	0800a121 	.word	0x0800a121
 800a0dc:	0800a121 	.word	0x0800a121
 800a0e0:	0800a121 	.word	0x0800a121
 800a0e4:	0800a121 	.word	0x0800a121
 800a0e8:	0800a121 	.word	0x0800a121
 800a0ec:	0800a119 	.word	0x0800a119
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e0bc      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e0b8      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a100:	2308      	movs	r3, #8
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e0b4      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a108:	2310      	movs	r3, #16
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e0b0      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a110:	2320      	movs	r3, #32
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a116:	e0ac      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11e:	e0a8      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a120:	2380      	movs	r3, #128	; 0x80
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a126:	e0a4      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a8f      	ldr	r2, [pc, #572]	; (800a36c <UART_SetConfig+0x6a0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d130      	bne.n	800a194 <UART_SetConfig+0x4c8>
 800a132:	4b8d      	ldr	r3, [pc, #564]	; (800a368 <UART_SetConfig+0x69c>)
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	d826      	bhi.n	800a18c <UART_SetConfig+0x4c0>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <UART_SetConfig+0x478>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a15d 	.word	0x0800a15d
 800a148:	0800a165 	.word	0x0800a165
 800a14c:	0800a16d 	.word	0x0800a16d
 800a150:	0800a175 	.word	0x0800a175
 800a154:	0800a17d 	.word	0x0800a17d
 800a158:	0800a185 	.word	0x0800a185
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a162:	e086      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a164:	2304      	movs	r3, #4
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16a:	e082      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a16c:	2308      	movs	r3, #8
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e07e      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a174:	2310      	movs	r3, #16
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e07a      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a17c:	2320      	movs	r3, #32
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a182:	e076      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18a:	e072      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a18c:	2380      	movs	r3, #128	; 0x80
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e06e      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a75      	ldr	r2, [pc, #468]	; (800a370 <UART_SetConfig+0x6a4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d130      	bne.n	800a200 <UART_SetConfig+0x534>
 800a19e:	4b72      	ldr	r3, [pc, #456]	; (800a368 <UART_SetConfig+0x69c>)
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	2b05      	cmp	r3, #5
 800a1a8:	d826      	bhi.n	800a1f8 <UART_SetConfig+0x52c>
 800a1aa:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <UART_SetConfig+0x4e4>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1c9 	.word	0x0800a1c9
 800a1b4:	0800a1d1 	.word	0x0800a1d1
 800a1b8:	0800a1d9 	.word	0x0800a1d9
 800a1bc:	0800a1e1 	.word	0x0800a1e1
 800a1c0:	0800a1e9 	.word	0x0800a1e9
 800a1c4:	0800a1f1 	.word	0x0800a1f1
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ce:	e050      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d6:	e04c      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1d8:	2308      	movs	r3, #8
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e048      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e044      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1e8:	2320      	movs	r3, #32
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ee:	e040      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e03c      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a1f8:	2380      	movs	r3, #128	; 0x80
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e038      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a5b      	ldr	r2, [pc, #364]	; (800a374 <UART_SetConfig+0x6a8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d130      	bne.n	800a26c <UART_SetConfig+0x5a0>
 800a20a:	4b57      	ldr	r3, [pc, #348]	; (800a368 <UART_SetConfig+0x69c>)
 800a20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	2b05      	cmp	r3, #5
 800a214:	d826      	bhi.n	800a264 <UART_SetConfig+0x598>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <UART_SetConfig+0x550>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a235 	.word	0x0800a235
 800a220:	0800a23d 	.word	0x0800a23d
 800a224:	0800a245 	.word	0x0800a245
 800a228:	0800a24d 	.word	0x0800a24d
 800a22c:	0800a255 	.word	0x0800a255
 800a230:	0800a25d 	.word	0x0800a25d
 800a234:	2302      	movs	r3, #2
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e01a      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a23c:	2304      	movs	r3, #4
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e016      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a244:	2308      	movs	r3, #8
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e012      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a24c:	2310      	movs	r3, #16
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e00e      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a254:	2320      	movs	r3, #32
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25a:	e00a      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a262:	e006      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a264:	2380      	movs	r3, #128	; 0x80
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a26a:	e002      	b.n	800a272 <UART_SetConfig+0x5a6>
 800a26c:	2380      	movs	r3, #128	; 0x80
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a3f      	ldr	r2, [pc, #252]	; (800a374 <UART_SetConfig+0x6a8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	f040 80f8 	bne.w	800a46e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a27e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a282:	2b20      	cmp	r3, #32
 800a284:	dc46      	bgt.n	800a314 <UART_SetConfig+0x648>
 800a286:	2b02      	cmp	r3, #2
 800a288:	f2c0 8082 	blt.w	800a390 <UART_SetConfig+0x6c4>
 800a28c:	3b02      	subs	r3, #2
 800a28e:	2b1e      	cmp	r3, #30
 800a290:	d87e      	bhi.n	800a390 <UART_SetConfig+0x6c4>
 800a292:	a201      	add	r2, pc, #4	; (adr r2, 800a298 <UART_SetConfig+0x5cc>)
 800a294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a298:	0800a31b 	.word	0x0800a31b
 800a29c:	0800a391 	.word	0x0800a391
 800a2a0:	0800a323 	.word	0x0800a323
 800a2a4:	0800a391 	.word	0x0800a391
 800a2a8:	0800a391 	.word	0x0800a391
 800a2ac:	0800a391 	.word	0x0800a391
 800a2b0:	0800a333 	.word	0x0800a333
 800a2b4:	0800a391 	.word	0x0800a391
 800a2b8:	0800a391 	.word	0x0800a391
 800a2bc:	0800a391 	.word	0x0800a391
 800a2c0:	0800a391 	.word	0x0800a391
 800a2c4:	0800a391 	.word	0x0800a391
 800a2c8:	0800a391 	.word	0x0800a391
 800a2cc:	0800a391 	.word	0x0800a391
 800a2d0:	0800a343 	.word	0x0800a343
 800a2d4:	0800a391 	.word	0x0800a391
 800a2d8:	0800a391 	.word	0x0800a391
 800a2dc:	0800a391 	.word	0x0800a391
 800a2e0:	0800a391 	.word	0x0800a391
 800a2e4:	0800a391 	.word	0x0800a391
 800a2e8:	0800a391 	.word	0x0800a391
 800a2ec:	0800a391 	.word	0x0800a391
 800a2f0:	0800a391 	.word	0x0800a391
 800a2f4:	0800a391 	.word	0x0800a391
 800a2f8:	0800a391 	.word	0x0800a391
 800a2fc:	0800a391 	.word	0x0800a391
 800a300:	0800a391 	.word	0x0800a391
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a391 	.word	0x0800a391
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a383 	.word	0x0800a383
 800a314:	2b40      	cmp	r3, #64	; 0x40
 800a316:	d037      	beq.n	800a388 <UART_SetConfig+0x6bc>
 800a318:	e03a      	b.n	800a390 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a31a:	f7fd fca5 	bl	8007c68 <HAL_RCCEx_GetD3PCLK1Freq>
 800a31e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a320:	e03c      	b.n	800a39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a326:	4618      	mov	r0, r3
 800a328:	f7fd fcb4 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a330:	e034      	b.n	800a39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a332:	f107 0318 	add.w	r3, r7, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f7fd fe00 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a340:	e02c      	b.n	800a39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <UART_SetConfig+0x69c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d016      	beq.n	800a37c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <UART_SetConfig+0x69c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	08db      	lsrs	r3, r3, #3
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	4a07      	ldr	r2, [pc, #28]	; (800a378 <UART_SetConfig+0x6ac>)
 800a35a:	fa22 f303 	lsr.w	r3, r2, r3
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a360:	e01c      	b.n	800a39c <UART_SetConfig+0x6d0>
 800a362:	bf00      	nop
 800a364:	40011400 	.word	0x40011400
 800a368:	58024400 	.word	0x58024400
 800a36c:	40007800 	.word	0x40007800
 800a370:	40007c00 	.word	0x40007c00
 800a374:	58000c00 	.word	0x58000c00
 800a378:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a37c:	4b9d      	ldr	r3, [pc, #628]	; (800a5f4 <UART_SetConfig+0x928>)
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a380:	e00c      	b.n	800a39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a382:	4b9d      	ldr	r3, [pc, #628]	; (800a5f8 <UART_SetConfig+0x92c>)
 800a384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a386:	e009      	b.n	800a39c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38e:	e005      	b.n	800a39c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a39a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 81de 	beq.w	800a760 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	4a94      	ldr	r2, [pc, #592]	; (800a5fc <UART_SetConfig+0x930>)
 800a3aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	4413      	add	r3, r2
 800a3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d305      	bcc.n	800a3d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d903      	bls.n	800a3dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3da:	e1c1      	b.n	800a760 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3de:	2200      	movs	r2, #0
 800a3e0:	60bb      	str	r3, [r7, #8]
 800a3e2:	60fa      	str	r2, [r7, #12]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	4a84      	ldr	r2, [pc, #528]	; (800a5fc <UART_SetConfig+0x930>)
 800a3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	607a      	str	r2, [r7, #4]
 800a3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3fe:	f7f5 ff6b 	bl	80002d8 <__aeabi_uldivmod>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4610      	mov	r0, r2
 800a408:	4619      	mov	r1, r3
 800a40a:	f04f 0200 	mov.w	r2, #0
 800a40e:	f04f 0300 	mov.w	r3, #0
 800a412:	020b      	lsls	r3, r1, #8
 800a414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a418:	0202      	lsls	r2, r0, #8
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	6849      	ldr	r1, [r1, #4]
 800a41e:	0849      	lsrs	r1, r1, #1
 800a420:	2000      	movs	r0, #0
 800a422:	460c      	mov	r4, r1
 800a424:	4605      	mov	r5, r0
 800a426:	eb12 0804 	adds.w	r8, r2, r4
 800a42a:	eb43 0905 	adc.w	r9, r3, r5
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	469a      	mov	sl, r3
 800a436:	4693      	mov	fp, r2
 800a438:	4652      	mov	r2, sl
 800a43a:	465b      	mov	r3, fp
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f5 ff4a 	bl	80002d8 <__aeabi_uldivmod>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4613      	mov	r3, r2
 800a44a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a452:	d308      	bcc.n	800a466 <UART_SetConfig+0x79a>
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a45a:	d204      	bcs.n	800a466 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a462:	60da      	str	r2, [r3, #12]
 800a464:	e17c      	b.n	800a760 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a46c:	e178      	b.n	800a760 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a476:	f040 80c5 	bne.w	800a604 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a47a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a47e:	2b20      	cmp	r3, #32
 800a480:	dc48      	bgt.n	800a514 <UART_SetConfig+0x848>
 800a482:	2b00      	cmp	r3, #0
 800a484:	db7b      	blt.n	800a57e <UART_SetConfig+0x8b2>
 800a486:	2b20      	cmp	r3, #32
 800a488:	d879      	bhi.n	800a57e <UART_SetConfig+0x8b2>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x7c4>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a51b 	.word	0x0800a51b
 800a494:	0800a523 	.word	0x0800a523
 800a498:	0800a57f 	.word	0x0800a57f
 800a49c:	0800a57f 	.word	0x0800a57f
 800a4a0:	0800a52b 	.word	0x0800a52b
 800a4a4:	0800a57f 	.word	0x0800a57f
 800a4a8:	0800a57f 	.word	0x0800a57f
 800a4ac:	0800a57f 	.word	0x0800a57f
 800a4b0:	0800a53b 	.word	0x0800a53b
 800a4b4:	0800a57f 	.word	0x0800a57f
 800a4b8:	0800a57f 	.word	0x0800a57f
 800a4bc:	0800a57f 	.word	0x0800a57f
 800a4c0:	0800a57f 	.word	0x0800a57f
 800a4c4:	0800a57f 	.word	0x0800a57f
 800a4c8:	0800a57f 	.word	0x0800a57f
 800a4cc:	0800a57f 	.word	0x0800a57f
 800a4d0:	0800a54b 	.word	0x0800a54b
 800a4d4:	0800a57f 	.word	0x0800a57f
 800a4d8:	0800a57f 	.word	0x0800a57f
 800a4dc:	0800a57f 	.word	0x0800a57f
 800a4e0:	0800a57f 	.word	0x0800a57f
 800a4e4:	0800a57f 	.word	0x0800a57f
 800a4e8:	0800a57f 	.word	0x0800a57f
 800a4ec:	0800a57f 	.word	0x0800a57f
 800a4f0:	0800a57f 	.word	0x0800a57f
 800a4f4:	0800a57f 	.word	0x0800a57f
 800a4f8:	0800a57f 	.word	0x0800a57f
 800a4fc:	0800a57f 	.word	0x0800a57f
 800a500:	0800a57f 	.word	0x0800a57f
 800a504:	0800a57f 	.word	0x0800a57f
 800a508:	0800a57f 	.word	0x0800a57f
 800a50c:	0800a57f 	.word	0x0800a57f
 800a510:	0800a571 	.word	0x0800a571
 800a514:	2b40      	cmp	r3, #64	; 0x40
 800a516:	d02e      	beq.n	800a576 <UART_SetConfig+0x8aa>
 800a518:	e031      	b.n	800a57e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a51a:	f7fc fc33 	bl	8006d84 <HAL_RCC_GetPCLK1Freq>
 800a51e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a520:	e033      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a522:	f7fc fc45 	bl	8006db0 <HAL_RCC_GetPCLK2Freq>
 800a526:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a528:	e02f      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a52a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fd fbb0 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a538:	e027      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a53a:	f107 0318 	add.w	r3, r7, #24
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fd fcfc 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a548:	e01f      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a54a:	4b2d      	ldr	r3, [pc, #180]	; (800a600 <UART_SetConfig+0x934>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d009      	beq.n	800a56a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a556:	4b2a      	ldr	r3, [pc, #168]	; (800a600 <UART_SetConfig+0x934>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	08db      	lsrs	r3, r3, #3
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	4a24      	ldr	r2, [pc, #144]	; (800a5f4 <UART_SetConfig+0x928>)
 800a562:	fa22 f303 	lsr.w	r3, r2, r3
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a568:	e00f      	b.n	800a58a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a56a:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <UART_SetConfig+0x928>)
 800a56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56e:	e00c      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a570:	4b21      	ldr	r3, [pc, #132]	; (800a5f8 <UART_SetConfig+0x92c>)
 800a572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a574:	e009      	b.n	800a58a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a57c:	e005      	b.n	800a58a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 80e7 	beq.w	800a760 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	4a19      	ldr	r2, [pc, #100]	; (800a5fc <UART_SetConfig+0x930>)
 800a598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a59c:	461a      	mov	r2, r3
 800a59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5a4:	005a      	lsls	r2, r3, #1
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	441a      	add	r2, r3
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	2b0f      	cmp	r3, #15
 800a5bc:	d916      	bls.n	800a5ec <UART_SetConfig+0x920>
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c4:	d212      	bcs.n	800a5ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f023 030f 	bic.w	r3, r3, #15
 800a5ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	085b      	lsrs	r3, r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a5e8:	60da      	str	r2, [r3, #12]
 800a5ea:	e0b9      	b.n	800a760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5f2:	e0b5      	b.n	800a760 <UART_SetConfig+0xa94>
 800a5f4:	03d09000 	.word	0x03d09000
 800a5f8:	003d0900 	.word	0x003d0900
 800a5fc:	0800ba90 	.word	0x0800ba90
 800a600:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a604:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a608:	2b20      	cmp	r3, #32
 800a60a:	dc49      	bgt.n	800a6a0 <UART_SetConfig+0x9d4>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	db7c      	blt.n	800a70a <UART_SetConfig+0xa3e>
 800a610:	2b20      	cmp	r3, #32
 800a612:	d87a      	bhi.n	800a70a <UART_SetConfig+0xa3e>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <UART_SetConfig+0x950>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a6a7 	.word	0x0800a6a7
 800a620:	0800a6af 	.word	0x0800a6af
 800a624:	0800a70b 	.word	0x0800a70b
 800a628:	0800a70b 	.word	0x0800a70b
 800a62c:	0800a6b7 	.word	0x0800a6b7
 800a630:	0800a70b 	.word	0x0800a70b
 800a634:	0800a70b 	.word	0x0800a70b
 800a638:	0800a70b 	.word	0x0800a70b
 800a63c:	0800a6c7 	.word	0x0800a6c7
 800a640:	0800a70b 	.word	0x0800a70b
 800a644:	0800a70b 	.word	0x0800a70b
 800a648:	0800a70b 	.word	0x0800a70b
 800a64c:	0800a70b 	.word	0x0800a70b
 800a650:	0800a70b 	.word	0x0800a70b
 800a654:	0800a70b 	.word	0x0800a70b
 800a658:	0800a70b 	.word	0x0800a70b
 800a65c:	0800a6d7 	.word	0x0800a6d7
 800a660:	0800a70b 	.word	0x0800a70b
 800a664:	0800a70b 	.word	0x0800a70b
 800a668:	0800a70b 	.word	0x0800a70b
 800a66c:	0800a70b 	.word	0x0800a70b
 800a670:	0800a70b 	.word	0x0800a70b
 800a674:	0800a70b 	.word	0x0800a70b
 800a678:	0800a70b 	.word	0x0800a70b
 800a67c:	0800a70b 	.word	0x0800a70b
 800a680:	0800a70b 	.word	0x0800a70b
 800a684:	0800a70b 	.word	0x0800a70b
 800a688:	0800a70b 	.word	0x0800a70b
 800a68c:	0800a70b 	.word	0x0800a70b
 800a690:	0800a70b 	.word	0x0800a70b
 800a694:	0800a70b 	.word	0x0800a70b
 800a698:	0800a70b 	.word	0x0800a70b
 800a69c:	0800a6fd 	.word	0x0800a6fd
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d02e      	beq.n	800a702 <UART_SetConfig+0xa36>
 800a6a4:	e031      	b.n	800a70a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a6:	f7fc fb6d 	bl	8006d84 <HAL_RCC_GetPCLK1Freq>
 800a6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6ac:	e033      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ae:	f7fc fb7f 	bl	8006db0 <HAL_RCC_GetPCLK2Freq>
 800a6b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6b4:	e02f      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fd faea 	bl	8007c94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c4:	e027      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fd fc36 	bl	8007f3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d4:	e01f      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6d6:	4b2d      	ldr	r3, [pc, #180]	; (800a78c <UART_SetConfig+0xac0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	; (800a78c <UART_SetConfig+0xac0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	08db      	lsrs	r3, r3, #3
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	4a28      	ldr	r2, [pc, #160]	; (800a790 <UART_SetConfig+0xac4>)
 800a6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f4:	e00f      	b.n	800a716 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a6f6:	4b26      	ldr	r3, [pc, #152]	; (800a790 <UART_SetConfig+0xac4>)
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6fa:	e00c      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6fc:	4b25      	ldr	r3, [pc, #148]	; (800a794 <UART_SetConfig+0xac8>)
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a700:	e009      	b.n	800a716 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a708:	e005      	b.n	800a716 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a714:	bf00      	nop
    }

    if (pclk != 0U)
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d021      	beq.n	800a760 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	4a1d      	ldr	r2, [pc, #116]	; (800a798 <UART_SetConfig+0xacc>)
 800a722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a726:	461a      	mov	r2, r3
 800a728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	441a      	add	r2, r3
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	2b0f      	cmp	r3, #15
 800a744:	d909      	bls.n	800a75a <UART_SetConfig+0xa8e>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74c:	d205      	bcs.n	800a75a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	b29a      	uxth	r2, r3
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60da      	str	r2, [r3, #12]
 800a758:	e002      	b.n	800a760 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2201      	movs	r2, #1
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2200      	movs	r2, #0
 800a774:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2200      	movs	r2, #0
 800a77a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a77c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a780:	4618      	mov	r0, r3
 800a782:	3748      	adds	r7, #72	; 0x48
 800a784:	46bd      	mov	sp, r7
 800a786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a78a:	bf00      	nop
 800a78c:	58024400 	.word	0x58024400
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	0800ba90 	.word	0x0800ba90

0800a79c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00a      	beq.n	800a7c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00a      	beq.n	800a7e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00a      	beq.n	800a80a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a830:	f003 0310 	and.w	r3, r3, #16
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00a      	beq.n	800a84e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01a      	beq.n	800a8b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a89a:	d10a      	bne.n	800a8b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	605a      	str	r2, [r3, #4]
  }
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8f0:	f7f7 fb44 	bl	8001f7c <HAL_GetTick>
 800a8f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0308 	and.w	r3, r3, #8
 800a900:	2b08      	cmp	r3, #8
 800a902:	d10e      	bne.n	800a922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f82f 	bl	800a976 <UART_WaitOnFlagUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e025      	b.n	800a96e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d10e      	bne.n	800a94e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f819 	bl	800a976 <UART_WaitOnFlagUntilTimeout>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e00f      	b.n	800a96e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2220      	movs	r2, #32
 800a95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b09c      	sub	sp, #112	; 0x70
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	603b      	str	r3, [r7, #0]
 800a982:	4613      	mov	r3, r2
 800a984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a986:	e0a9      	b.n	800aadc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98e:	f000 80a5 	beq.w	800aadc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a992:	f7f7 faf3 	bl	8001f7c <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a9a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d140      	bne.n	800aa2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e6      	bne.n	800a9a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	663b      	str	r3, [r7, #96]	; 0x60
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e5      	bne.n	800a9da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e069      	b.n	800aafe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0304 	and.w	r3, r3, #4
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d051      	beq.n	800aadc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa46:	d149      	bne.n	800aadc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	e853 3f00 	ldrex	r3, [r3]
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
 800aa72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e6      	bne.n	800aa52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3308      	adds	r3, #8
 800aa8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	613b      	str	r3, [r7, #16]
   return(result);
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f023 0301 	bic.w	r3, r3, #1
 800aa9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaa4:	623a      	str	r2, [r7, #32]
 800aaa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa8:	69f9      	ldr	r1, [r7, #28]
 800aaaa:	6a3a      	ldr	r2, [r7, #32]
 800aaac:	e841 2300 	strex	r3, r2, [r1]
 800aab0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e5      	bne.n	800aa84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e010      	b.n	800aafe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69da      	ldr	r2, [r3, #28]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	4013      	ands	r3, r2
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	bf0c      	ite	eq
 800aaec:	2301      	moveq	r3, #1
 800aaee:	2300      	movne	r3, #0
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	f43f af46 	beq.w	800a988 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3770      	adds	r7, #112	; 0x70
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b096      	sub	sp, #88	; 0x58
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	88fa      	ldrh	r2, [r7, #6]
 800ab20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2222      	movs	r2, #34	; 0x22
 800ab30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d02c      	beq.n	800ab96 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab40:	4a42      	ldr	r2, [pc, #264]	; (800ac4c <UART_Start_Receive_DMA+0x144>)
 800ab42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab48:	4a41      	ldr	r2, [pc, #260]	; (800ac50 <UART_Start_Receive_DMA+0x148>)
 800ab4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab50:	4a40      	ldr	r2, [pc, #256]	; (800ac54 <UART_Start_Receive_DMA+0x14c>)
 800ab52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab58:	2200      	movs	r2, #0
 800ab5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3324      	adds	r3, #36	; 0x24
 800ab66:	4619      	mov	r1, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	88fb      	ldrh	r3, [r7, #6]
 800ab70:	f7f7 fec0 	bl	80028f4 <HAL_DMA_Start_IT>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00d      	beq.n	800ab96 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2210      	movs	r2, #16
 800ab7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e055      	b.n	800ac42 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d018      	beq.n	800abd8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abae:	e853 3f00 	ldrex	r3, [r3]
 800abb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abba:	657b      	str	r3, [r7, #84]	; 0x54
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abcc:	e841 2300 	strex	r3, r2, [r1]
 800abd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1e6      	bne.n	800aba6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3308      	adds	r3, #8
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	653b      	str	r3, [r7, #80]	; 0x50
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	3308      	adds	r3, #8
 800abf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abf8:	637a      	str	r2, [r7, #52]	; 0x34
 800abfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e5      	bne.n	800abd8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac2c:	623a      	str	r2, [r7, #32]
 800ac2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	69f9      	ldr	r1, [r7, #28]
 800ac32:	6a3a      	ldr	r2, [r7, #32]
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e5      	bne.n	800ac0c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3758      	adds	r7, #88	; 0x58
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800ada9 	.word	0x0800ada9
 800ac50:	0800aecb 	.word	0x0800aecb
 800ac54:	0800af03 	.word	0x0800af03

0800ac58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b08f      	sub	sp, #60	; 0x3c
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e6      	bne.n	800ac60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3308      	adds	r3, #8
 800acb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb2:	61ba      	str	r2, [r7, #24]
 800acb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	613b      	str	r3, [r7, #16]
   return(result);
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e5      	bne.n	800ac92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800acce:	bf00      	nop
 800acd0:	373c      	adds	r7, #60	; 0x3c
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acdc:	b480      	push	{r7}
 800acde:	b095      	sub	sp, #84	; 0x54
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad02:	643b      	str	r3, [r7, #64]	; 0x40
 800ad04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1e6      	bne.n	800ace4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	e853 3f00 	ldrex	r3, [r3]
 800ad24:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	4b1e      	ldr	r3, [pc, #120]	; (800ada4 <UART_EndRxTransfer+0xc8>)
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3308      	adds	r3, #8
 800ad34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad3e:	e841 2300 	strex	r3, r2, [r1]
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1e5      	bne.n	800ad16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d118      	bne.n	800ad84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f023 0310 	bic.w	r3, r3, #16
 800ad66:	647b      	str	r3, [r7, #68]	; 0x44
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad70:	61bb      	str	r3, [r7, #24]
 800ad72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6979      	ldr	r1, [r7, #20]
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e6      	bne.n	800ad52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2220      	movs	r2, #32
 800ad88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ad98:	bf00      	nop
 800ad9a:	3754      	adds	r7, #84	; 0x54
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	effffffe 	.word	0xeffffffe

0800ada8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b09c      	sub	sp, #112	; 0x70
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adbe:	d071      	beq.n	800aea4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800adc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800add6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800addc:	66bb      	str	r3, [r7, #104]	; 0x68
 800adde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ade6:	65bb      	str	r3, [r7, #88]	; 0x58
 800ade8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e6      	bne.n	800adc8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	667b      	str	r3, [r7, #100]	; 0x64
 800ae12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae1a:	647a      	str	r2, [r7, #68]	; 0x44
 800ae1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e5      	bne.n	800adfa <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3308      	adds	r3, #8
 800ae34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae44:	663b      	str	r3, [r7, #96]	; 0x60
 800ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae4e:	633a      	str	r2, [r7, #48]	; 0x30
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e5      	bne.n	800ae2e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d118      	bne.n	800aea4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0310 	bic.w	r3, r3, #16
 800ae86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	69b9      	ldr	r1, [r7, #24]
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e6      	bne.n	800ae72 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d107      	bne.n	800aebc <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aeb6:	f7fe fefd 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeba:	e002      	b.n	800aec2 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800aebc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aebe:	f7fe fedb 	bl	8009c78 <HAL_UART_RxCpltCallback>
}
 800aec2:	bf00      	nop
 800aec4:	3770      	adds	r7, #112	; 0x70
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d109      	bne.n	800aef4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aee6:	085b      	lsrs	r3, r3, #1
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4619      	mov	r1, r3
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7fe fee1 	bl	8009cb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aef2:	e002      	b.n	800aefa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7fe fec9 	bl	8009c8c <HAL_UART_RxHalfCpltCallback>
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b086      	sub	sp, #24
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b80      	cmp	r3, #128	; 0x80
 800af2c:	d109      	bne.n	800af42 <UART_DMAError+0x40>
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b21      	cmp	r3, #33	; 0x21
 800af32:	d106      	bne.n	800af42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2200      	movs	r2, #0
 800af38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800af3c:	6978      	ldr	r0, [r7, #20]
 800af3e:	f7ff fe8b 	bl	800ac58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	d109      	bne.n	800af64 <UART_DMAError+0x62>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b22      	cmp	r3, #34	; 0x22
 800af54:	d106      	bne.n	800af64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f7ff febc 	bl	800acdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af6a:	f043 0210 	orr.w	r2, r3, #16
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af74:	6978      	ldr	r0, [r7, #20]
 800af76:	f7fe fe93 	bl	8009ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af7a:	bf00      	nop
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7fe fe7d 	bl	8009ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b088      	sub	sp, #32
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	61bb      	str	r3, [r7, #24]
 800afd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6979      	ldr	r1, [r7, #20]
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	613b      	str	r3, [r7, #16]
   return(result);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e6      	bne.n	800afb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7fe fe34 	bl	8009c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800affc:	bf00      	nop
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d101      	bne.n	800b056 <HAL_UARTEx_DisableFifoMode+0x16>
 800b052:	2302      	movs	r3, #2
 800b054:	e027      	b.n	800b0a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2224      	movs	r2, #36	; 0x24
 800b062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f022 0201 	bic.w	r2, r2, #1
 800b07c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b084:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2220      	movs	r2, #32
 800b098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e02d      	b.n	800b126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2224      	movs	r2, #36	; 0x24
 800b0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f850 	bl	800b1ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b142:	2302      	movs	r3, #2
 800b144:	e02d      	b.n	800b1a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f812 	bl	800b1ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d108      	bne.n	800b1ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1cc:	e031      	b.n	800b232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1ce:	2310      	movs	r3, #16
 800b1d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1d2:	2310      	movs	r3, #16
 800b1d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	0e5b      	lsrs	r3, r3, #25
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	0f5b      	lsrs	r3, r3, #29
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f003 0307 	and.w	r3, r3, #7
 800b1f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	7b3a      	ldrb	r2, [r7, #12]
 800b1fa:	4911      	ldr	r1, [pc, #68]	; (800b240 <UARTEx_SetNbDataToProcess+0x94>)
 800b1fc:	5c8a      	ldrb	r2, [r1, r2]
 800b1fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b202:	7b3a      	ldrb	r2, [r7, #12]
 800b204:	490f      	ldr	r1, [pc, #60]	; (800b244 <UARTEx_SetNbDataToProcess+0x98>)
 800b206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b208:	fb93 f3f2 	sdiv	r3, r3, r2
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	7b7a      	ldrb	r2, [r7, #13]
 800b218:	4909      	ldr	r1, [pc, #36]	; (800b240 <UARTEx_SetNbDataToProcess+0x94>)
 800b21a:	5c8a      	ldrb	r2, [r1, r2]
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b220:	7b7a      	ldrb	r2, [r7, #13]
 800b222:	4908      	ldr	r1, [pc, #32]	; (800b244 <UARTEx_SetNbDataToProcess+0x98>)
 800b224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b226:	fb93 f3f2 	sdiv	r3, r3, r2
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b232:	bf00      	nop
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	0800baa8 	.word	0x0800baa8
 800b244:	0800bab0 	.word	0x0800bab0

0800b248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b248:	b084      	sub	sp, #16
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	f107 001c 	add.w	r0, r7, #28
 800b256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d120      	bne.n	800b2a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	4b2a      	ldr	r3, [pc, #168]	; (800b31c <USB_CoreInit+0xd4>)
 800b272:	4013      	ands	r3, r2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b286:	2b01      	cmp	r3, #1
 800b288:	d105      	bne.n	800b296 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 faac 	bl	800b7f4 <USB_CoreReset>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
 800b2a0:	e01a      	b.n	800b2d8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 faa0 	bl	800b7f4 <USB_CoreReset>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ca:	e005      	b.n	800b2d8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d116      	bne.n	800b30c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2ec:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <USB_CoreInit+0xd8>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f043 0206 	orr.w	r2, r3, #6
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f043 0220 	orr.w	r2, r3, #32
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b318:	b004      	add	sp, #16
 800b31a:	4770      	bx	lr
 800b31c:	ffbdffbf 	.word	0xffbdffbf
 800b320:	03ee0000 	.word	0x03ee0000

0800b324 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f023 0201 	bic.w	r2, r3, #1
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b362:	78fb      	ldrb	r3, [r7, #3]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d115      	bne.n	800b394 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b374:	2001      	movs	r0, #1
 800b376:	f7f6 fe0d 	bl	8001f94 <HAL_Delay>
      ms++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fa29 	bl	800b7d8 <USB_GetMode>
 800b386:	4603      	mov	r3, r0
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d01e      	beq.n	800b3ca <USB_SetCurrentMode+0x84>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b31      	cmp	r3, #49	; 0x31
 800b390:	d9f0      	bls.n	800b374 <USB_SetCurrentMode+0x2e>
 800b392:	e01a      	b.n	800b3ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d115      	bne.n	800b3c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	f7f6 fdf4 	bl	8001f94 <HAL_Delay>
      ms++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa10 	bl	800b7d8 <USB_GetMode>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <USB_SetCurrentMode+0x84>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b31      	cmp	r3, #49	; 0x31
 800b3c2:	d9f0      	bls.n	800b3a6 <USB_SetCurrentMode+0x60>
 800b3c4:	e001      	b.n	800b3ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e005      	b.n	800b3d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b32      	cmp	r3, #50	; 0x32
 800b3ce:	d101      	bne.n	800b3d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e000      	b.n	800b3d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b086      	sub	sp, #24
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b3ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	613b      	str	r3, [r7, #16]
 800b3fe:	e009      	b.n	800b414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3340      	adds	r3, #64	; 0x40
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	2200      	movs	r2, #0
 800b40c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	3301      	adds	r3, #1
 800b412:	613b      	str	r3, [r7, #16]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b0e      	cmp	r3, #14
 800b418:	d9f2      	bls.n	800b400 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d11c      	bne.n	800b45a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b42e:	f043 0302 	orr.w	r3, r3, #2
 800b432:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e005      	b.n	800b466 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b46c:	461a      	mov	r2, r3
 800b46e:	2300      	movs	r3, #0
 800b470:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b478:	4619      	mov	r1, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b480:	461a      	mov	r2, r3
 800b482:	680b      	ldr	r3, [r1, #0]
 800b484:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d10c      	bne.n	800b4a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d104      	bne.n	800b49c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b492:	2100      	movs	r1, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f965 	bl	800b764 <USB_SetDevSpeed>
 800b49a:	e008      	b.n	800b4ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b49c:	2101      	movs	r1, #1
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f960 	bl	800b764 <USB_SetDevSpeed>
 800b4a4:	e003      	b.n	800b4ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4a6:	2103      	movs	r1, #3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f95b 	bl	800b764 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4ae:	2110      	movs	r1, #16
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8f3 	bl	800b69c <USB_FlushTxFifo>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f91f 	bl	800b704 <USB_FlushRxFifo>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	e043      	b.n	800b582 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b50c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b510:	d118      	bne.n	800b544 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10a      	bne.n	800b52e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	461a      	mov	r2, r3
 800b526:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	e013      	b.n	800b556 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53a:	461a      	mov	r2, r3
 800b53c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	e008      	b.n	800b556 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	461a      	mov	r2, r3
 800b552:	2300      	movs	r3, #0
 800b554:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b562:	461a      	mov	r2, r3
 800b564:	2300      	movs	r3, #0
 800b566:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	461a      	mov	r2, r3
 800b576:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b57a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	3301      	adds	r3, #1
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	429a      	cmp	r2, r3
 800b588:	d3b7      	bcc.n	800b4fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	613b      	str	r3, [r7, #16]
 800b58e:	e043      	b.n	800b618 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	015a      	lsls	r2, r3, #5
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4413      	add	r3, r2
 800b598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5a6:	d118      	bne.n	800b5da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	e013      	b.n	800b5ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	015a      	lsls	r2, r3, #5
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e008      	b.n	800b5ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60a:	461a      	mov	r2, r3
 800b60c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3301      	adds	r3, #1
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d3b7      	bcc.n	800b590 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b62e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b632:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b640:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	2b00      	cmp	r3, #0
 800b646:	d105      	bne.n	800b654 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	f043 0210 	orr.w	r2, r3, #16
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	699a      	ldr	r2, [r3, #24]
 800b658:	4b0e      	ldr	r3, [pc, #56]	; (800b694 <USB_DevInit+0x2b4>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d005      	beq.n	800b672 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	f043 0208 	orr.w	r2, r3, #8
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b674:	2b01      	cmp	r3, #1
 800b676:	d105      	bne.n	800b684 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <USB_DevInit+0x2b8>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b690:	b004      	add	sp, #16
 800b692:	4770      	bx	lr
 800b694:	803c3800 	.word	0x803c3800
 800b698:	40000004 	.word	0x40000004

0800b69c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a13      	ldr	r2, [pc, #76]	; (800b700 <USB_FlushTxFifo+0x64>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d901      	bls.n	800b6bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e01b      	b.n	800b6f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	daf2      	bge.n	800b6aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	019b      	lsls	r3, r3, #6
 800b6cc:	f043 0220 	orr.w	r2, r3, #32
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4a08      	ldr	r2, [pc, #32]	; (800b700 <USB_FlushTxFifo+0x64>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d901      	bls.n	800b6e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e006      	b.n	800b6f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	f003 0320 	and.w	r3, r3, #32
 800b6ee:	2b20      	cmp	r3, #32
 800b6f0:	d0f0      	beq.n	800b6d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	00030d40 	.word	0x00030d40

0800b704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4a11      	ldr	r2, [pc, #68]	; (800b760 <USB_FlushRxFifo+0x5c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d901      	bls.n	800b722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e018      	b.n	800b754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	daf2      	bge.n	800b710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2210      	movs	r2, #16
 800b732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3301      	adds	r3, #1
 800b738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4a08      	ldr	r2, [pc, #32]	; (800b760 <USB_FlushRxFifo+0x5c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d901      	bls.n	800b746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e006      	b.n	800b754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f003 0310 	and.w	r3, r3, #16
 800b74e:	2b10      	cmp	r3, #16
 800b750:	d0f0      	beq.n	800b734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	00030d40 	.word	0x00030d40

0800b764 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	68f9      	ldr	r1, [r7, #12]
 800b780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b784:	4313      	orrs	r3, r2
 800b786:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b796:	b480      	push	{r7}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7c4:	f043 0302 	orr.w	r3, r3, #2
 800b7c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a13      	ldr	r2, [pc, #76]	; (800b858 <USB_CoreReset+0x64>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d901      	bls.n	800b812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e01b      	b.n	800b84a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	daf2      	bge.n	800b800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f043 0201 	orr.w	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a09      	ldr	r2, [pc, #36]	; (800b858 <USB_CoreReset+0x64>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d901      	bls.n	800b83c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e006      	b.n	800b84a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b01      	cmp	r3, #1
 800b846:	d0f0      	beq.n	800b82a <USB_CoreReset+0x36>

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	00030d40 	.word	0x00030d40

0800b85c <calloc>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <calloc+0xc>)
 800b85e:	460a      	mov	r2, r1
 800b860:	4601      	mov	r1, r0
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	f000 b834 	b.w	800b8d0 <_calloc_r>
 800b868:	24000020 	.word	0x24000020

0800b86c <__errno>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <__errno+0x8>)
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	24000020 	.word	0x24000020

0800b878 <__libc_init_array>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	4d0d      	ldr	r5, [pc, #52]	; (800b8b0 <__libc_init_array+0x38>)
 800b87c:	4c0d      	ldr	r4, [pc, #52]	; (800b8b4 <__libc_init_array+0x3c>)
 800b87e:	1b64      	subs	r4, r4, r5
 800b880:	10a4      	asrs	r4, r4, #2
 800b882:	2600      	movs	r6, #0
 800b884:	42a6      	cmp	r6, r4
 800b886:	d109      	bne.n	800b89c <__libc_init_array+0x24>
 800b888:	4d0b      	ldr	r5, [pc, #44]	; (800b8b8 <__libc_init_array+0x40>)
 800b88a:	4c0c      	ldr	r4, [pc, #48]	; (800b8bc <__libc_init_array+0x44>)
 800b88c:	f000 f8e8 	bl	800ba60 <_init>
 800b890:	1b64      	subs	r4, r4, r5
 800b892:	10a4      	asrs	r4, r4, #2
 800b894:	2600      	movs	r6, #0
 800b896:	42a6      	cmp	r6, r4
 800b898:	d105      	bne.n	800b8a6 <__libc_init_array+0x2e>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a0:	4798      	blx	r3
 800b8a2:	3601      	adds	r6, #1
 800b8a4:	e7ee      	b.n	800b884 <__libc_init_array+0xc>
 800b8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8aa:	4798      	blx	r3
 800b8ac:	3601      	adds	r6, #1
 800b8ae:	e7f2      	b.n	800b896 <__libc_init_array+0x1e>
 800b8b0:	0800bac0 	.word	0x0800bac0
 800b8b4:	0800bac0 	.word	0x0800bac0
 800b8b8:	0800bac0 	.word	0x0800bac0
 800b8bc:	0800bac4 	.word	0x0800bac4

0800b8c0 <memset>:
 800b8c0:	4402      	add	r2, r0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d100      	bne.n	800b8ca <memset+0xa>
 800b8c8:	4770      	bx	lr
 800b8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b8ce:	e7f9      	b.n	800b8c4 <memset+0x4>

0800b8d0 <_calloc_r>:
 800b8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d2:	fba1 2402 	umull	r2, r4, r1, r2
 800b8d6:	b94c      	cbnz	r4, 800b8ec <_calloc_r+0x1c>
 800b8d8:	4611      	mov	r1, r2
 800b8da:	9201      	str	r2, [sp, #4]
 800b8dc:	f000 f82e 	bl	800b93c <_malloc_r>
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	b930      	cbnz	r0, 800b8f4 <_calloc_r+0x24>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	b003      	add	sp, #12
 800b8ea:	bd30      	pop	{r4, r5, pc}
 800b8ec:	220c      	movs	r2, #12
 800b8ee:	6002      	str	r2, [r0, #0]
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	e7f8      	b.n	800b8e6 <_calloc_r+0x16>
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	f7ff ffe3 	bl	800b8c0 <memset>
 800b8fa:	e7f4      	b.n	800b8e6 <_calloc_r+0x16>

0800b8fc <sbrk_aligned>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4e0e      	ldr	r6, [pc, #56]	; (800b938 <sbrk_aligned+0x3c>)
 800b900:	460c      	mov	r4, r1
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	b911      	cbnz	r1, 800b90e <sbrk_aligned+0x12>
 800b908:	f000 f88c 	bl	800ba24 <_sbrk_r>
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 f887 	bl	800ba24 <_sbrk_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d00a      	beq.n	800b930 <sbrk_aligned+0x34>
 800b91a:	1cc4      	adds	r4, r0, #3
 800b91c:	f024 0403 	bic.w	r4, r4, #3
 800b920:	42a0      	cmp	r0, r4
 800b922:	d007      	beq.n	800b934 <sbrk_aligned+0x38>
 800b924:	1a21      	subs	r1, r4, r0
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f87c 	bl	800ba24 <_sbrk_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	d101      	bne.n	800b934 <sbrk_aligned+0x38>
 800b930:	f04f 34ff 	mov.w	r4, #4294967295
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	2400cb40 	.word	0x2400cb40

0800b93c <_malloc_r>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	1ccd      	adds	r5, r1, #3
 800b942:	f025 0503 	bic.w	r5, r5, #3
 800b946:	3508      	adds	r5, #8
 800b948:	2d0c      	cmp	r5, #12
 800b94a:	bf38      	it	cc
 800b94c:	250c      	movcc	r5, #12
 800b94e:	2d00      	cmp	r5, #0
 800b950:	4607      	mov	r7, r0
 800b952:	db01      	blt.n	800b958 <_malloc_r+0x1c>
 800b954:	42a9      	cmp	r1, r5
 800b956:	d905      	bls.n	800b964 <_malloc_r+0x28>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	2600      	movs	r6, #0
 800b95e:	4630      	mov	r0, r6
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	4e2e      	ldr	r6, [pc, #184]	; (800ba20 <_malloc_r+0xe4>)
 800b966:	f000 f86d 	bl	800ba44 <__malloc_lock>
 800b96a:	6833      	ldr	r3, [r6, #0]
 800b96c:	461c      	mov	r4, r3
 800b96e:	bb34      	cbnz	r4, 800b9be <_malloc_r+0x82>
 800b970:	4629      	mov	r1, r5
 800b972:	4638      	mov	r0, r7
 800b974:	f7ff ffc2 	bl	800b8fc <sbrk_aligned>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	4604      	mov	r4, r0
 800b97c:	d14d      	bne.n	800ba1a <_malloc_r+0xde>
 800b97e:	6834      	ldr	r4, [r6, #0]
 800b980:	4626      	mov	r6, r4
 800b982:	2e00      	cmp	r6, #0
 800b984:	d140      	bne.n	800ba08 <_malloc_r+0xcc>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4631      	mov	r1, r6
 800b98a:	4638      	mov	r0, r7
 800b98c:	eb04 0803 	add.w	r8, r4, r3
 800b990:	f000 f848 	bl	800ba24 <_sbrk_r>
 800b994:	4580      	cmp	r8, r0
 800b996:	d13a      	bne.n	800ba0e <_malloc_r+0xd2>
 800b998:	6821      	ldr	r1, [r4, #0]
 800b99a:	3503      	adds	r5, #3
 800b99c:	1a6d      	subs	r5, r5, r1
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff ffa5 	bl	800b8fc <sbrk_aligned>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d02b      	beq.n	800ba0e <_malloc_r+0xd2>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	442b      	add	r3, r5
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	e00e      	b.n	800b9dc <_malloc_r+0xa0>
 800b9be:	6822      	ldr	r2, [r4, #0]
 800b9c0:	1b52      	subs	r2, r2, r5
 800b9c2:	d41e      	bmi.n	800ba02 <_malloc_r+0xc6>
 800b9c4:	2a0b      	cmp	r2, #11
 800b9c6:	d916      	bls.n	800b9f6 <_malloc_r+0xba>
 800b9c8:	1961      	adds	r1, r4, r5
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6025      	str	r5, [r4, #0]
 800b9ce:	bf18      	it	ne
 800b9d0:	6059      	strne	r1, [r3, #4]
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	bf08      	it	eq
 800b9d6:	6031      	streq	r1, [r6, #0]
 800b9d8:	5162      	str	r2, [r4, r5]
 800b9da:	604b      	str	r3, [r1, #4]
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f104 060b 	add.w	r6, r4, #11
 800b9e2:	f000 f835 	bl	800ba50 <__malloc_unlock>
 800b9e6:	f026 0607 	bic.w	r6, r6, #7
 800b9ea:	1d23      	adds	r3, r4, #4
 800b9ec:	1af2      	subs	r2, r6, r3
 800b9ee:	d0b6      	beq.n	800b95e <_malloc_r+0x22>
 800b9f0:	1b9b      	subs	r3, r3, r6
 800b9f2:	50a3      	str	r3, [r4, r2]
 800b9f4:	e7b3      	b.n	800b95e <_malloc_r+0x22>
 800b9f6:	6862      	ldr	r2, [r4, #4]
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	bf0c      	ite	eq
 800b9fc:	6032      	streq	r2, [r6, #0]
 800b9fe:	605a      	strne	r2, [r3, #4]
 800ba00:	e7ec      	b.n	800b9dc <_malloc_r+0xa0>
 800ba02:	4623      	mov	r3, r4
 800ba04:	6864      	ldr	r4, [r4, #4]
 800ba06:	e7b2      	b.n	800b96e <_malloc_r+0x32>
 800ba08:	4634      	mov	r4, r6
 800ba0a:	6876      	ldr	r6, [r6, #4]
 800ba0c:	e7b9      	b.n	800b982 <_malloc_r+0x46>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4638      	mov	r0, r7
 800ba14:	f000 f81c 	bl	800ba50 <__malloc_unlock>
 800ba18:	e7a1      	b.n	800b95e <_malloc_r+0x22>
 800ba1a:	6025      	str	r5, [r4, #0]
 800ba1c:	e7de      	b.n	800b9dc <_malloc_r+0xa0>
 800ba1e:	bf00      	nop
 800ba20:	2400cb3c 	.word	0x2400cb3c

0800ba24 <_sbrk_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d06      	ldr	r5, [pc, #24]	; (800ba40 <_sbrk_r+0x1c>)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	602b      	str	r3, [r5, #0]
 800ba30:	f7f6 f9be 	bl	8001db0 <_sbrk>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d102      	bne.n	800ba3e <_sbrk_r+0x1a>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b103      	cbz	r3, 800ba3e <_sbrk_r+0x1a>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	2400cb44 	.word	0x2400cb44

0800ba44 <__malloc_lock>:
 800ba44:	4801      	ldr	r0, [pc, #4]	; (800ba4c <__malloc_lock+0x8>)
 800ba46:	f000 b809 	b.w	800ba5c <__retarget_lock_acquire_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	2400cb48 	.word	0x2400cb48

0800ba50 <__malloc_unlock>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__malloc_unlock+0x8>)
 800ba52:	f000 b804 	b.w	800ba5e <__retarget_lock_release_recursive>
 800ba56:	bf00      	nop
 800ba58:	2400cb48 	.word	0x2400cb48

0800ba5c <__retarget_lock_acquire_recursive>:
 800ba5c:	4770      	bx	lr

0800ba5e <__retarget_lock_release_recursive>:
 800ba5e:	4770      	bx	lr

0800ba60 <_init>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	bf00      	nop
 800ba64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba66:	bc08      	pop	{r3}
 800ba68:	469e      	mov	lr, r3
 800ba6a:	4770      	bx	lr

0800ba6c <_fini>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	bf00      	nop
 800ba70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba72:	bc08      	pop	{r3}
 800ba74:	469e      	mov	lr, r3
 800ba76:	4770      	bx	lr
