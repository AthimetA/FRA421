
POWERMODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003334  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003468  08003468  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000010  08003480  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003480  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad0  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e2  00000000  00000000  0002bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a55  00000000  00000000  0002e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5c7  00000000  00000000  0003f30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068336  00000000  00000000  0004b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002648  00000000  00000000  000b3c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033dc 	.word	0x080033dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080033dc 	.word	0x080033dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fafe 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f882 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9a4 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f972 	bl	80007a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004bc:	f000 f8ee 	bl	800069c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80004c0:	4b35      	ldr	r3, [pc, #212]	; (8000598 <main+0xf0>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fde0 	bl	8002088 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <main+0xf0>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fe67 	bl	80021a0 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);
 80004d2:	4b32      	ldr	r3, [pc, #200]	; (800059c <main+0xf4>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fb59 	bl	8000b8c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //simulate task
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,400);
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <main+0xf0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	0052      	lsls	r2, r2, #1
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
	  ramDemo++;
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <main+0xf8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <main+0xf8>)
 80004ec:	601a      	str	r2, [r3, #0]
	  HAL_Delay(3000);
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <main+0xfc>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fb4b 	bl	8000b8c <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,2800);
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <main+0xf0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	22af      	movs	r2, #175	; 0xaf
 80004fc:	0112      	lsls	r2, r2, #4
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
	  ramDemo++;
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <main+0xf8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <main+0xf8>)
 8000508:	601a      	str	r2, [r3, #0]
	  HAL_Delay(3000);
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <main+0xfc>)
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fb3d 	bl	8000b8c <HAL_Delay>

	  if(Enter.Sleep)
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <main+0x100>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d011      	beq.n	800053e <main+0x96>
	  {
		  HAL_SuspendTick();
 800051a:	f000 fb5b 	bl	8000bd4 <HAL_SuspendTick>
		  HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn); //Clear IT that is already in or in execution
 800051e:	2007      	movs	r0, #7
 8000520:	f000 fc44 	bl	8000dac <HAL_NVIC_ClearPendingIRQ>
		  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13); //Clear IT flag
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <main+0x104>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0192      	lsls	r2, r2, #6
 800052a:	615a      	str	r2, [r3, #20]
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800052c:	2102      	movs	r1, #2
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fdda 	bl	80010e8 <HAL_PWR_EnterSLEEPMode>
		  //CPU PAUSE HERE
		  HAL_ResumeTick();
 8000534:	f000 fb5c 	bl	8000bf0 <HAL_ResumeTick>
		  Enter.Sleep =0;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <main+0x100>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]

	  }

	  if(Enter.Stop)
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <main+0x100>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d013      	beq.n	800056e <main+0xc6>
	   {
		HAL_SuspendTick();
 8000546:	f000 fb45 	bl	8000bd4 <HAL_SuspendTick>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800054a:	2007      	movs	r0, #7
 800054c:	f000 fc2e 	bl	8000dac <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0x104>)
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	0192      	lsls	r2, r2, #6
 8000556:	615a      	str	r2, [r3, #20]
		HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000558:	2102      	movs	r1, #2
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fe1c 	bl	8001198 <HAL_PWR_EnterSTOPMode>
		//CPU PAUSE HERE
		SystemClock_Config(); // Since all peripheral is down the setting is lost so we need to set config again.
 8000560:	f000 f82a 	bl	80005b8 <SystemClock_Config>
		HAL_ResumeTick();
 8000564:	f000 fb44 	bl	8000bf0 <HAL_ResumeTick>
		Enter.Stop =0;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0x100>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
	   }

	  if(Enter.Standby)
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0x100>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00c      	beq.n	8000590 <main+0xe8>
	  {
		  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fda4 	bl	80010c8 <HAL_PWR_EnableWakeUpPin>
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); // Use to check if our mcu wake up not sys reset
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0x108>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <main+0x108>)
 8000586:	2104      	movs	r1, #4
 8000588:	430a      	orrs	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
		  //we can read __HAL_PWR_GET_FLAG(PWR_FLAG_WU) to identify reset cause
		  //or read PWR->CSR
		  HAL_PWR_EnterSTANDBYMode();
 800058c:	f000 fe60 	bl	8001250 <HAL_PWR_EnterSTANDBYMode>
		  //code will never run upto here
	  }
	  __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST);
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <main+0x10c>)
 8000592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,400);
 8000594:	e7a1      	b.n	80004da <main+0x32>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	2000002c 	.word	0x2000002c
 800059c:	00001388 	.word	0x00001388
 80005a0:	20000000 	.word	0x20000000
 80005a4:	00000bb8 	.word	0x00000bb8
 80005a8:	200000f0 	.word	0x200000f0
 80005ac:	40010400 	.word	0x40010400
 80005b0:	40007000 	.word	0x40007000
 80005b4:	40021000 	.word	0x40021000

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b099      	sub	sp, #100	; 0x64
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	242c      	movs	r4, #44	; 0x2c
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2334      	movs	r3, #52	; 0x34
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 feff 	bl	80033cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	2318      	movs	r3, #24
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 fef7 	bl	80033cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005de:	003b      	movs	r3, r7
 80005e0:	0018      	movs	r0, r3
 80005e2:	2318      	movs	r3, #24
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f002 fef0 	bl	80033cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xdc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a29      	ldr	r2, [pc, #164]	; (8000698 <SystemClock_Config+0xe0>)
 80005f2:	401a      	ands	r2, r3
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <SystemClock_Config+0xdc>)
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0109      	lsls	r1, r1, #4
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	22a0      	movs	r2, #160	; 0xa0
 800060a:	02d2      	lsls	r2, r2, #11
 800060c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2202      	movs	r2, #2
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	22c0      	movs	r2, #192	; 0xc0
 8000620:	0312      	lsls	r2, r2, #12
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	03d2      	lsls	r2, r2, #15
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	187b      	adds	r3, r7, r1
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fe24 	bl	800127c <HAL_RCC_OscConfig>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 f92a 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	2118      	movs	r1, #24
 800063e:	187b      	adds	r3, r7, r1
 8000640:	220f      	movs	r2, #15
 8000642:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2203      	movs	r2, #3
 8000648:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2101      	movs	r1, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f987 	bl	8001974 <HAL_RCC_ClockConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800066a:	f000 f911 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800066e:	003b      	movs	r3, r7
 8000670:	2202      	movs	r2, #2
 8000672:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067a:	003b      	movs	r3, r7
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fb9d 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000686:	f000 f903 	bl	8000890 <Error_Handler>
  }
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b019      	add	sp, #100	; 0x64
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40007000 	.word	0x40007000
 8000698:	ffffe7ff 	.word	0xffffe7ff

0800069c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	2318      	movs	r3, #24
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	0018      	movs	r0, r3
 80006a8:	2310      	movs	r3, #16
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f002 fe8d 	bl	80033cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b2:	2310      	movs	r3, #16
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0018      	movs	r0, r3
 80006b8:	2308      	movs	r3, #8
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f002 fe85 	bl	80033cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c2:	003b      	movs	r3, r7
 80006c4:	0018      	movs	r0, r3
 80006c6:	2310      	movs	r3, #16
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f002 fe7e 	bl	80033cc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	05d2      	lsls	r2, r2, #23
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006da:	4a30      	ldr	r2, [pc, #192]	; (800079c <MX_TIM2_Init+0x100>)
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006e6:	22c8      	movs	r2, #200	; 0xc8
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <MX_TIM2_Init+0xfc>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fc84 	bl	8002008 <HAL_TIM_Base_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000704:	f000 f8c4 	bl	8000890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	2118      	movs	r1, #24
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0152      	lsls	r2, r2, #5
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000712:	187a      	adds	r2, r7, r1
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_TIM2_Init+0xfc>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fe93 	bl	8002444 <HAL_TIM_ConfigClockSource>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000722:	f000 f8b5 	bl	8000890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM2_Init+0xfc>)
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fcf1 	bl	8002110 <HAL_TIM_PWM_Init>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000732:	f000 f8ad 	bl	8000890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2110      	movs	r1, #16
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000744:	187a      	adds	r2, r7, r1
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_TIM2_Init+0xfc>)
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f002 f964 	bl	8002a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000754:	f000 f89c 	bl	8000890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000758:	003b      	movs	r3, r7
 800075a:	2260      	movs	r2, #96	; 0x60
 800075c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1600;
 800075e:	003b      	movs	r3, r7
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	0039      	movs	r1, r7
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_TIM2_Init+0xfc>)
 8000776:	2200      	movs	r2, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f001 fd9d 	bl	80022b8 <HAL_TIM_PWM_ConfigChannel>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000782:	f000 f885 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <MX_TIM2_Init+0xfc>)
 8000788:	0018      	movs	r0, r3
 800078a:	f000 f8b1 	bl	80008f0 <HAL_TIM_MspPostInit>

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b00a      	add	sp, #40	; 0x28
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	2000002c 	.word	0x2000002c
 800079c:	00002710 	.word	0x00002710

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	22e1      	movs	r2, #225	; 0xe1
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 f96f 	bl	8002ac8 <HAL_UART_Init>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f84f 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000006c 	.word	0x2000006c
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	240c      	movs	r4, #12
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fddb 	bl	80033cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0x88>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_GPIO_Init+0x88>)
 800081c:	2104      	movs	r1, #4
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_GPIO_Init+0x88>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_GPIO_Init+0x88>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0x88>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_GPIO_Init+0x88>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_GPIO_Init+0x88>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_GPIO_Init+0x88>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_GPIO_Init+0x88>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0192      	lsls	r2, r2, #6
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2290      	movs	r2, #144	; 0x90
 800086a:	0352      	lsls	r2, r2, #13
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	193b      	adds	r3, r7, r4
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <MX_GPIO_Init+0x8c>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f000 faa6 	bl	8000dcc <HAL_GPIO_Init>

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b009      	add	sp, #36	; 0x24
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	50000800 	.word	0x50000800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_MspInit+0x24>)
 80008a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x24>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <HAL_MspInit+0x24>)
 80008ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_MspInit+0x24>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	0549      	lsls	r1, r1, #21
 80008b6:	430a      	orrs	r2, r1
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d105      	bne.n	80008e4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <HAL_TIM_Base_MspInit+0x28>)
 80008da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_TIM_Base_MspInit+0x28>)
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	240c      	movs	r4, #12
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	0018      	movs	r0, r3
 80008fe:	2314      	movs	r3, #20
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f002 fd62 	bl	80033cc <memset>
  if(htim->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	429a      	cmp	r2, r3
 8000912:	d122      	bne.n	800095a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_TIM_MspPostInit+0x74>)
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_TIM_MspPostInit+0x74>)
 800091a:	2101      	movs	r1, #1
 800091c:	430a      	orrs	r2, r1
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_TIM_MspPostInit+0x74>)
 8000922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000924:	2201      	movs	r2, #1
 8000926:	4013      	ands	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800092c:	0021      	movs	r1, r4
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2220      	movs	r2, #32
 8000932:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2202      	movs	r2, #2
 8000938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2205      	movs	r2, #5
 800094a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	187a      	adds	r2, r7, r1
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fa39 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b009      	add	sp, #36	; 0x24
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	240c      	movs	r4, #12
 8000972:	193b      	adds	r3, r7, r4
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f002 fd26 	bl	80033cc <memset>
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <HAL_UART_MspInit+0x80>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d129      	bne.n	80009de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x84>)
 800098c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0x84>)
 800099a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_UART_MspInit+0x84>)
 800099e:	2101      	movs	r1, #1
 80009a0:	430a      	orrs	r2, r1
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0x84>)
 80009a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a8:	2201      	movs	r2, #1
 80009aa:	4013      	ands	r3, r2
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b0:	0021      	movs	r1, r4
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	220c      	movs	r2, #12
 80009b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2202      	movs	r2, #2
 80009bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2203      	movs	r2, #3
 80009c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2204      	movs	r2, #4
 80009ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 f9f7 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b009      	add	sp, #36	; 0x24
 80009e4:	bd90      	pop	{r4, r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40021000 	.word	0x40021000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f89e 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <LoopForever+0x6>)
    LDR R1, [R0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <LoopForever+0xa>)
    CMP R1, R2
 8000a34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a36:	d105      	bne.n	8000a44 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a3a:	4913      	ldr	r1, [pc, #76]	; (8000a88 <LoopForever+0x12>)
    STR R1, [R0]
 8000a3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a40:	4913      	ldr	r1, [pc, #76]	; (8000a90 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a42:	6001      	str	r1, [r0, #0]

08000a44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a46:	4914      	ldr	r1, [pc, #80]	; (8000a98 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <LoopForever+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a5c:	4c11      	ldr	r4, [pc, #68]	; (8000aa4 <LoopForever+0x2e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a6a:	f7ff ffd8 	bl	8000a1e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 fc89 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fd19 	bl	80004a8 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
   ldr   r0, =_estack
 8000a78:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a7c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a80:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a84:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a88:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a8c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a90:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a9c:	08003470 	.word	0x08003470
  ldr r2, =_sbss
 8000aa0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aa4:	20000100 	.word	0x20000100

08000aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>
	...

08000aac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x3c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_Init+0x3c>)
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f811 	bl	8000aec <HAL_InitTick>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e001      	b.n	8000ada <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad6:	f7ff fee1 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_InitTick+0x5c>)
 8000af6:	681c      	ldr	r4, [r3, #0]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_InitTick+0x60>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	0019      	movs	r1, r3
 8000afe:	23fa      	movs	r3, #250	; 0xfa
 8000b00:	0098      	lsls	r0, r3, #2
 8000b02:	f7ff fb01 	bl	8000108 <__udivsi3>
 8000b06:	0003      	movs	r3, r0
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	f7ff fafc 	bl	8000108 <__udivsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 f93d 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e00f      	b.n	8000b40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d80b      	bhi.n	8000b3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f91a 	bl	8000d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_InitTick+0x64>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b003      	add	sp, #12
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	2000000c 	.word	0x2000000c
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	18d2      	adds	r2, r2, r3
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_IncTick+0x20>)
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	200000fc 	.word	0x200000fc

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	200000fc 	.word	0x200000fc

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff fff0 	bl	8000b78 <HAL_GetTick>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001a      	movs	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	189b      	adds	r3, r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	f7ff ffe0 	bl	8000b78 <HAL_GetTick>
 8000bb8:	0002      	movs	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <HAL_SuspendTick+0x18>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_SuspendTick+0x18>)
 8000bde:	2102      	movs	r1, #2
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_ResumeTick+0x18>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_ResumeTick+0x18>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c1e:	d80a      	bhi.n	8000c36 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	001a      	movs	r2, r3
 8000c26:	231f      	movs	r3, #31
 8000c28:	4013      	ands	r3, r2
 8000c2a:	4905      	ldr	r1, [pc, #20]	; (8000c40 <__NVIC_ClearPendingIRQ+0x34>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	50ca      	str	r2, [r1, r3]
  }
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b7f      	cmp	r3, #127	; 0x7f
 8000c58:	d828      	bhi.n	8000cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	33c0      	adds	r3, #192	; 0xc0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	589b      	ldr	r3, [r3, r2]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	481f      	ldr	r0, [pc, #124]	; (8000d18 <__NVIC_SetPriority+0xd4>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	33c0      	adds	r3, #192	; 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000caa:	e031      	b.n	8000d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3306      	adds	r3, #6
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1dfa      	adds	r2, r7, #7
 8000cc8:	7812      	ldrb	r2, [r2, #0]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	400a      	ands	r2, r1
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	21ff      	movs	r1, #255	; 0xff
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	43d2      	mvns	r2, r2
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	22ff      	movs	r2, #255	; 0xff
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	2303      	movs	r3, #3
 8000cee:	4003      	ands	r3, r0
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <__NVIC_SetPriority+0xd8>)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001c      	movs	r4, r3
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4023      	ands	r3, r4
 8000d00:	3b08      	subs	r3, #8
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	3306      	adds	r3, #6
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	18c3      	adds	r3, r0, r3
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b003      	add	sp, #12
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	045b      	lsls	r3, r3, #17
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d301      	bcc.n	8000d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d34:	2301      	movs	r3, #1
 8000d36:	e010      	b.n	8000d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SysTick_Config+0x44>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2103      	movs	r1, #3
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff7c 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x44>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x44>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	210f      	movs	r1, #15
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	1c02      	adds	r2, r0, #0
 8000d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ffbf 	bl	8000d20 <SysTick_Config>
 8000da2:	0003      	movs	r3, r0
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff ff24 	bl	8000c0c <__NVIC_ClearPendingIRQ>
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000de2:	e155      	b.n	8001090 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4091      	lsls	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x30>
 8000dfa:	e146      	b.n	800108a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	2201      	movs	r2, #1
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	58d3      	ldr	r3, [r2, r3]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2207      	movs	r2, #7
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2107      	movs	r1, #7
 8000eea:	400b      	ands	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	401a      	ands	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	23c0      	movs	r3, #192	; 0xc0
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_GPIO_Init+0x17c>
 8000f46:	e0a0      	b.n	800108a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f54:	4a55      	ldr	r2, [pc, #340]	; (80010ac <HAL_GPIO_Init+0x2e0>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	589b      	ldr	r3, [r3, r2]
 8000f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x1f6>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x2e4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x1f2>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_GPIO_Init+0x2e8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1ee>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_GPIO_Init+0x2ec>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1ea>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2f0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1e6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2f4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1e2>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	400a      	ands	r2, r1
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	; (80010ac <HAL_GPIO_Init+0x2e0>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	035b      	lsls	r3, r3, #13
 800104e:	4013      	ands	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43da      	mvns	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	039b      	lsls	r3, r3, #14
 8001078:	4013      	ands	r3, r2
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_GPIO_Init+0x2f8>)
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	40da      	lsrs	r2, r3
 8001098:	1e13      	subs	r3, r2, #0
 800109a:	d000      	beq.n	800109e <HAL_GPIO_Init+0x2d2>
 800109c:	e6a2      	b.n	8000de4 <HAL_GPIO_Init+0x18>
  }
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	50000400 	.word	0x50000400
 80010b4:	50000800 	.word	0x50000800
 80010b8:	50000c00 	.word	0x50000c00
 80010bc:	50001000 	.word	0x50001000
 80010c0:	50001c00 	.word	0x50001c00
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_PWR_EnableWakeUpPin+0x1c>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	430a      	orrs	r2, r1
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	000a      	movs	r2, r1
 80010f2:	1cfb      	adds	r3, r7, #3
 80010f4:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	2201      	movs	r2, #1
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <HAL_PWR_EnterSLEEPMode+0x40>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001122:	491b      	ldr	r1, [pc, #108]	; (8001190 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2203      	movs	r2, #3
 8001132:	4393      	bics	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_PWR_EnterSLEEPMode+0xac>)
 800114a:	2104      	movs	r1, #4
 800114c:	438a      	bics	r2, r1
 800114e:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001150:	1cfb      	adds	r3, r7, #3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001158:	bf30      	wfi
 800115a:	e002      	b.n	8001162 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800115c:	bf40      	sev
    __WFE();
 800115e:	bf20      	wfe
    __WFE();
 8001160:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <HAL_PWR_EnterSLEEPMode+0x94>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0089      	lsls	r1, r1, #2
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 800117c:	46c0      	nop			; (mov r8, r8)

}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40007000 	.word	0x40007000
 800118c:	40010000 	.word	0x40010000
 8001190:	fffffdff 	.word	0xfffffdff
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	000a      	movs	r2, r1
 80011a2:	1cfb      	adds	r3, r7, #3
 80011a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_PWR_EnterSTOPMode+0xac>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d008      	beq.n	80011d8 <HAL_PWR_EnterSTOPMode+0x40>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011d2:	491d      	ldr	r1, [pc, #116]	; (8001248 <HAL_PWR_EnterSTOPMode+0xb0>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4393      	bics	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	430a      	orrs	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001200:	1cfb      	adds	r3, r7, #3
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001208:	bf30      	wfi
 800120a:	e002      	b.n	8001212 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800120c:	bf40      	sev
    __WFE();
 800120e:	bf20      	wfe
    __WFE();
 8001210:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001218:	2104      	movs	r1, #4
 800121a:	438a      	bics	r2, r1
 800121c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <HAL_PWR_EnterSTOPMode+0xa0>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0089      	lsls	r1, r1, #2
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
  }
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b006      	add	sp, #24
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40007000 	.word	0x40007000
 8001244:	40010000 	.word	0x40010000
 8001248:	fffffdff 	.word	0xfffffdff
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_PWR_EnterSTANDBYMode+0x24>)
 800125a:	2102      	movs	r1, #2
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001266:	2104      	movs	r1, #4
 8001268:	430a      	orrs	r2, r1
 800126a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800126c:	bf30      	wfi
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40007000 	.word	0x40007000
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	f000 fb6c 	bl	8001968 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001290:	4bc8      	ldr	r3, [pc, #800]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	220c      	movs	r2, #12
 8001296:	4013      	ands	r3, r2
 8001298:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129a:	4bc6      	ldr	r3, [pc, #792]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2201      	movs	r2, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	d100      	bne.n	80012b2 <HAL_RCC_OscConfig+0x36>
 80012b0:	e07d      	b.n	80013ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d007      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x68>
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	025b      	lsls	r3, r3, #9
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d10d      	bne.n	80012e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	4bba      	ldr	r3, [pc, #744]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d100      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5a>
 80012d4:	e06a      	b.n	80013ac <HAL_RCC_OscConfig+0x130>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d166      	bne.n	80013ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f000 fb42 	bl	8001968 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d107      	bne.n	8001300 <HAL_RCC_OscConfig+0x84>
 80012f0:	4bb0      	ldr	r3, [pc, #704]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4baf      	ldr	r3, [pc, #700]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0249      	lsls	r1, r1, #9
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e027      	b.n	8001350 <HAL_RCC_OscConfig+0xd4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	02db      	lsls	r3, r3, #11
 8001308:	429a      	cmp	r2, r3
 800130a:	d10e      	bne.n	800132a <HAL_RCC_OscConfig+0xae>
 800130c:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4ba8      	ldr	r3, [pc, #672]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	02c9      	lsls	r1, r1, #11
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4ba5      	ldr	r3, [pc, #660]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0249      	lsls	r1, r1, #9
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e012      	b.n	8001350 <HAL_RCC_OscConfig+0xd4>
 800132a:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4ba1      	ldr	r3, [pc, #644]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001330:	49a1      	ldr	r1, [pc, #644]	; (80015b8 <HAL_RCC_OscConfig+0x33c>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	4b9f      	ldr	r3, [pc, #636]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4b9b      	ldr	r3, [pc, #620]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b9a      	ldr	r3, [pc, #616]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800134a:	499c      	ldr	r1, [pc, #624]	; (80015bc <HAL_RCC_OscConfig+0x340>)
 800134c:	400a      	ands	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d014      	beq.n	8001382 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fc0e 	bl	8000b78 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001362:	f7ff fc09 	bl	8000b78 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e2f9      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001374:	4b8f      	ldr	r3, [pc, #572]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0xe6>
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fbf9 	bl	8000b78 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fbf4 	bl	8000b78 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e2e4      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x110>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x13e>
 80013b8:	e099      	b.n	80014ee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	2220      	movs	r2, #32
 80013c4:	4013      	ands	r3, r2
 80013c6:	d009      	beq.n	80013dc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b79      	ldr	r3, [pc, #484]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80013ce:	2120      	movs	r1, #32
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	2220      	movs	r2, #32
 80013d8:	4393      	bics	r3, r2
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d13e      	bne.n	8001466 <HAL_RCC_OscConfig+0x1ea>
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d13b      	bne.n	8001466 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d004      	beq.n	8001402 <HAL_RCC_OscConfig+0x186>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e2b2      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x344>)
 8001408:	4013      	ands	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	021a      	lsls	r2, r3, #8
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2209      	movs	r2, #9
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800142a:	f000 fbeb 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 800142e:	0001      	movs	r1, r0
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	220f      	movs	r2, #15
 8001438:	4013      	ands	r3, r2
 800143a:	4a62      	ldr	r2, [pc, #392]	; (80015c4 <HAL_RCC_OscConfig+0x348>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	000a      	movs	r2, r1
 8001440:	40da      	lsrs	r2, r3
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_RCC_OscConfig+0x34c>)
 8001444:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_RCC_OscConfig+0x350>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2513      	movs	r5, #19
 800144c:	197c      	adds	r4, r7, r5
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff fb4c 	bl	8000aec <HAL_InitTick>
 8001454:	0003      	movs	r3, r0
 8001456:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001458:	197b      	adds	r3, r7, r5
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d046      	beq.n	80014ee <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001460:	197b      	adds	r3, r7, r5
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	e280      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d027      	beq.n	80014bc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2209      	movs	r2, #9
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb7b 	bl	8000b78 <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fb76 	bl	8000b78 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e266      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f1      	beq.n	8001488 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <HAL_RCC_OscConfig+0x344>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	0019      	movs	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	021a      	lsls	r2, r3, #8
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb56 	bl	8000b78 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fb51 	bl	8000b78 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e241      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2204      	movs	r2, #4
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f1      	bne.n	80014d2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2210      	movs	r2, #16
 80014f4:	4013      	ands	r3, r2
 80014f6:	d100      	bne.n	80014fa <HAL_RCC_OscConfig+0x27e>
 80014f8:	e0a1      	b.n	800163e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d140      	bne.n	8001582 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x29c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e227      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <HAL_RCC_OscConfig+0x354>)
 800151e:	4013      	ands	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	0a19      	lsrs	r1, r3, #8
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	061a      	lsls	r2, r3, #24
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	0b5b      	lsrs	r3, r3, #13
 8001546:	3301      	adds	r3, #1
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	0212      	lsls	r2, r2, #8
 800154c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	210f      	movs	r1, #15
 8001556:	400b      	ands	r3, r1
 8001558:	491a      	ldr	r1, [pc, #104]	; (80015c4 <HAL_RCC_OscConfig+0x348>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_RCC_OscConfig+0x34c>)
 8001560:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x350>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2513      	movs	r5, #19
 8001568:	197c      	adds	r4, r7, r5
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff fabe 	bl	8000aec <HAL_InitTick>
 8001570:	0003      	movs	r3, r0
 8001572:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001574:	197b      	adds	r3, r7, r5
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d060      	beq.n	800163e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	e1f2      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d03f      	beq.n	800160a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0049      	lsls	r1, r1, #1
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff faee 	bl	8000b78 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a0:	e018      	b.n	80015d4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fae9 	bl	8000b78 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d911      	bls.n	80015d4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1d9      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	fffeffff 	.word	0xfffeffff
 80015bc:	fffbffff 	.word	0xfffbffff
 80015c0:	ffffe0ff 	.word	0xffffe0ff
 80015c4:	080033f4 	.word	0x080033f4
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000008 	.word	0x20000008
 80015d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d4:	4bc9      	ldr	r3, [pc, #804]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d0e0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4bc6      	ldr	r3, [pc, #792]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4ac6      	ldr	r2, [pc, #792]	; (8001900 <HAL_RCC_OscConfig+0x684>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	4bc3      	ldr	r3, [pc, #780]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f4:	4bc1      	ldr	r3, [pc, #772]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	0a19      	lsrs	r1, r3, #8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	4bbe      	ldr	r3, [pc, #760]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	e019      	b.n	800163e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800160a:	4bbc      	ldr	r3, [pc, #752]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4bbb      	ldr	r3, [pc, #748]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001610:	49bc      	ldr	r1, [pc, #752]	; (8001904 <HAL_RCC_OscConfig+0x688>)
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faaf 	bl	8000b78 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001620:	f7ff faaa 	bl	8000b78 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e19a      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001632:	4bb2      	ldr	r3, [pc, #712]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2208      	movs	r2, #8
 8001644:	4013      	ands	r3, r2
 8001646:	d036      	beq.n	80016b6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d019      	beq.n	8001684 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001650:	4baa      	ldr	r3, [pc, #680]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001654:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001656:	2101      	movs	r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa8c 	bl	8000b78 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fa87 	bl	8000b78 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e177      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001678:	4ba0      	ldr	r3, [pc, #640]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800167a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d0f1      	beq.n	8001666 <HAL_RCC_OscConfig+0x3ea>
 8001682:	e018      	b.n	80016b6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b9d      	ldr	r3, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001688:	4b9c      	ldr	r3, [pc, #624]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fa72 	bl	8000b78 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fa6d 	bl	8000b78 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e15d      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016ac:	4b93      	ldr	r3, [pc, #588]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80016ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f1      	bne.n	800169a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x446>
 80016c0:	e0ae      	b.n	8001820 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2023      	movs	r0, #35	; 0x23
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80016cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	055b      	lsls	r3, r3, #21
 80016d2:	4013      	ands	r3, r2
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80016d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016e4:	183b      	adds	r3, r7, r0
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b87      	ldr	r3, [pc, #540]	; (8001908 <HAL_RCC_OscConfig+0x68c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b84      	ldr	r3, [pc, #528]	; (8001908 <HAL_RCC_OscConfig+0x68c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b83      	ldr	r3, [pc, #524]	; (8001908 <HAL_RCC_OscConfig+0x68c>)
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0049      	lsls	r1, r1, #1
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001704:	f7ff fa38 	bl	8000b78 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170e:	f7ff fa33 	bl	8000b78 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	; 0x64
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e123      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <HAL_RCC_OscConfig+0x68c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x4cc>
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173c:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0049      	lsls	r1, r1, #1
 8001742:	430a      	orrs	r2, r1
 8001744:	651a      	str	r2, [r3, #80]	; 0x50
 8001746:	e031      	b.n	80017ac <HAL_RCC_OscConfig+0x530>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x4ee>
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001754:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001756:	496b      	ldr	r1, [pc, #428]	; (8001904 <HAL_RCC_OscConfig+0x688>)
 8001758:	400a      	ands	r2, r1
 800175a:	651a      	str	r2, [r3, #80]	; 0x50
 800175c:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001762:	496a      	ldr	r1, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x690>)
 8001764:	400a      	ands	r2, r1
 8001766:	651a      	str	r2, [r3, #80]	; 0x50
 8001768:	e020      	b.n	80017ac <HAL_RCC_OscConfig+0x530>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	23a0      	movs	r3, #160	; 0xa0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	429a      	cmp	r2, r3
 8001774:	d10e      	bne.n	8001794 <HAL_RCC_OscConfig+0x518>
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	00c9      	lsls	r1, r1, #3
 8001780:	430a      	orrs	r2, r1
 8001782:	651a      	str	r2, [r3, #80]	; 0x50
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001788:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	0049      	lsls	r1, r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	651a      	str	r2, [r3, #80]	; 0x50
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0x530>
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800179a:	495a      	ldr	r1, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x688>)
 800179c:	400a      	ands	r2, r1
 800179e:	651a      	str	r2, [r3, #80]	; 0x50
 80017a0:	4b56      	ldr	r3, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80017a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80017a6:	4959      	ldr	r1, [pc, #356]	; (800190c <HAL_RCC_OscConfig+0x690>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f9e0 	bl	8000b78 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9db 	bl	8000b78 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_RCC_OscConfig+0x694>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0ca      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80017d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0ef      	beq.n	80017be <HAL_RCC_OscConfig+0x542>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff f9ca 	bl	8000b78 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff f9c5 	bl	8000b78 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a46      	ldr	r2, [pc, #280]	; (8001910 <HAL_RCC_OscConfig+0x694>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0b4      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d1ef      	bne.n	80017ea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180a:	2323      	movs	r3, #35	; 0x23
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800181a:	493e      	ldr	r1, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x698>)
 800181c:	400a      	ands	r2, r1
 800181e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <HAL_RCC_OscConfig+0x5ae>
 8001828:	e09d      	b.n	8001966 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d100      	bne.n	8001832 <HAL_RCC_OscConfig+0x5b6>
 8001830:	e076      	b.n	8001920 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b02      	cmp	r3, #2
 8001838:	d145      	bne.n	80018c6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_RCC_OscConfig+0x69c>)
 8001842:	400a      	ands	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff f997 	bl	8000b78 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7ff f992 	bl	8000b78 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e082      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	049b      	lsls	r3, r3, #18
 800186a:	4013      	ands	r3, r2
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x6a0>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	431a      	orrs	r2, r3
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0449      	lsls	r1, r1, #17
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f96c 	bl	8000b78 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f967 	bl	8000b78 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e057      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	049b      	lsls	r3, r3, #18
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x62a>
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80018cc:	4912      	ldr	r1, [pc, #72]	; (8001918 <HAL_RCC_OscConfig+0x69c>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f951 	bl	8000b78 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f94c 	bl	8000b78 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e03c      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x680>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	049b      	lsls	r3, r3, #18
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x660>
 80018fa:	e034      	b.n	8001966 <HAL_RCC_OscConfig+0x6ea>
 80018fc:	40021000 	.word	0x40021000
 8001900:	ffff1fff 	.word	0xffff1fff
 8001904:	fffffeff 	.word	0xfffffeff
 8001908:	40007000 	.word	0x40007000
 800190c:	fffffbff 	.word	0xfffffbff
 8001910:	00001388 	.word	0x00001388
 8001914:	efffffff 	.word	0xefffffff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x6f4>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	429a      	cmp	r2, r3
 8001940:	d10f      	bne.n	8001962 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	23f0      	movs	r3, #240	; 0xf0
 8001946:	039b      	lsls	r3, r3, #14
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	23c0      	movs	r3, #192	; 0xc0
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b00a      	add	sp, #40	; 0x28
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e128      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b96      	ldr	r3, [pc, #600]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d91e      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b93      	ldr	r3, [pc, #588]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	4b90      	ldr	r3, [pc, #576]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a8:	f7ff f8e6 	bl	8000b78 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b0:	e009      	b.n	80019c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b2:	f7ff f8e1 	bl	8000b78 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e109      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b87      	ldr	r3, [pc, #540]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	22f0      	movs	r2, #240	; 0xf0
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_ClockConfig+0x8a>
 80019fc:	e089      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a06:	4b79      	ldr	r3, [pc, #484]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d120      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e1      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a1e:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	049b      	lsls	r3, r3, #18
 8001a26:	4013      	ands	r3, r2
 8001a28:	d114      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0d5      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d109      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0ca      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a44:	4b69      	ldr	r3, [pc, #420]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0c2      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff f886 	bl	8000b78 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d111      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff f87d 	bl	8000b78 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0a5      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8e:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	220c      	movs	r2, #12
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x106>
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f867 	bl	8000b78 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e08f      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x132>
 8001ac6:	e024      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11b      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff f851 	bl	8000b78 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e079      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	220c      	movs	r2, #12
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x15e>
 8001af2:	e00e      	b.n	8001b12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff f840 	bl	8000b78 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e068      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b08:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d21e      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b32:	f7ff f821 	bl	8000b78 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff f81c 	bl	8000b78 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_RCC_ClockConfig+0x274>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e044      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2204      	movs	r2, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	d009      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x27c>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2208      	movs	r2, #8
 8001b82:	4013      	ands	r3, r2
 8001b84:	d00a      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_RCC_ClockConfig+0x280>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00da      	lsls	r2, r3, #3
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9c:	f000 f832 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001ba0:	0001      	movs	r1, r0
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_ClockConfig+0x278>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	220f      	movs	r2, #15
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x284>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	40da      	lsrs	r2, r3
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_ClockConfig+0x288>)
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_ClockConfig+0x28c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	250b      	movs	r5, #11
 8001bbe:	197c      	adds	r4, r7, r5
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe ff93 	bl	8000aec <HAL_InitTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bca:	197b      	adds	r3, r7, r5
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bd2:	197b      	adds	r3, r7, r5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40022000 	.word	0x40022000
 8001be8:	00001388 	.word	0x00001388
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	fffff8ff 	.word	0xfffff8ff
 8001bf4:	ffffc7ff 	.word	0xffffc7ff
 8001bf8:	080033f4 	.word	0x080033f4
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	230c      	movs	r3, #12
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d014      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1a:	d900      	bls.n	8001c1e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c1c:	e07b      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x112>
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x24>
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c26:	e076      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c36:	e07c      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c3c:	e079      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c42:	e076      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	0c9a      	lsrs	r2, r3, #18
 8001c48:	230f      	movs	r3, #15
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x148>)
 8001c4e:	5c9b      	ldrb	r3, [r3, r2]
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	0d9a      	lsrs	r2, r3, #22
 8001c56:	2303      	movs	r3, #3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	4013      	ands	r3, r2
 8001c68:	d01a      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	4a35      	ldr	r2, [pc, #212]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c74:	2300      	movs	r3, #0
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	f7fe faf1 	bl	8000260 <__aeabi_lmul>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	0010      	movs	r0, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f7fe fac5 	bl	8000220 <__aeabi_uldivmod>
 8001c96:	0002      	movs	r2, r0
 8001c98:	000b      	movs	r3, r1
 8001c9a:	0013      	movs	r3, r2
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9e:	e037      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	68b8      	ldr	r0, [r7, #8]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	f7fe fad1 	bl	8000260 <__aeabi_lmul>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	000b      	movs	r3, r1
 8001cc2:	0010      	movs	r0, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f7fe faa5 	bl	8000220 <__aeabi_uldivmod>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	000b      	movs	r3, r1
 8001cda:	0013      	movs	r3, r2
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cde:	e017      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cea:	2300      	movs	r3, #0
 8001cec:	f7fe fab8 	bl	8000260 <__aeabi_lmul>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	001d      	movs	r5, r3
 8001d00:	0022      	movs	r2, r4
 8001d02:	002b      	movs	r3, r5
 8001d04:	f7fe fa8c 	bl	8000220 <__aeabi_uldivmod>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	0013      	movs	r3, r2
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d14:	e00d      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4013      	ands	r3, r2
 8001d20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	3301      	adds	r3, #1
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	0212      	lsls	r2, r2, #8
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d30:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b00e      	add	sp, #56	; 0x38
 8001d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	003d0900 	.word	0x003d0900
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	0800340c 	.word	0x0800340c

08001d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d68:	f7ff fff2 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	2207      	movs	r2, #7
 8001d76:	4013      	ands	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	40d9      	lsrs	r1, r3
 8001d7e:	000b      	movs	r3, r1
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08003404 	.word	0x08003404

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d94:	f7ff ffdc 	bl	8001d50 <HAL_RCC_GetHCLKFreq>
 8001d98:	0001      	movs	r1, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	0adb      	lsrs	r3, r3, #11
 8001da0:	2207      	movs	r2, #7
 8001da2:	4013      	ands	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	40d9      	lsrs	r1, r3
 8001daa:	000b      	movs	r3, r1
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08003404 	.word	0x08003404

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2017      	movs	r0, #23
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d100      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001dd6:	e0c2      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd8:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	055b      	lsls	r3, r3, #21
 8001de0:	4013      	ands	r3, r2
 8001de2:	d109      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001de8:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	0549      	lsls	r1, r1, #21
 8001dee:	430a      	orrs	r2, r1
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d11a      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0049      	lsls	r1, r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe feb1 	bl	8000b78 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	e008      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe feac 	bl	8000b78 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0d4      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	23c0      	movs	r3, #192	; 0xc0
 8001e40:	039b      	lsls	r3, r3, #14
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	23c0      	movs	r3, #192	; 0xc0
 8001e4c:	039b      	lsls	r3, r3, #14
 8001e4e:	4013      	ands	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d013      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	23c0      	movs	r3, #192	; 0xc0
 8001e5c:	029b      	lsls	r3, r3, #10
 8001e5e:	401a      	ands	r2, r3
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d10a      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	401a      	ands	r2, r3
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0ac      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03b      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	4013      	ands	r3, r2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d033      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d02e      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001eaa:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb8:	4b49      	ldr	r3, [pc, #292]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0309      	lsls	r1, r1, #12
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec8:	4948      	ldr	r1, [pc, #288]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d014      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fe4b 	bl	8000b78 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee6:	e009      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fe46 	bl	8000b78 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e06d      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0ef      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	401a      	ands	r2, r3
 8001f12:	23c0      	movs	r3, #192	; 0xc0
 8001f14:	029b      	lsls	r3, r3, #10
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001f1a:	4b31      	ldr	r3, [pc, #196]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a35      	ldr	r2, [pc, #212]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	23c0      	movs	r3, #192	; 0xc0
 8001f2a:	039b      	lsls	r3, r3, #14
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f36:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	401a      	ands	r2, r3
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f58:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2204      	movs	r2, #4
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b006      	add	sp, #24
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	fffcffff 	.word	0xfffcffff
 8001fec:	fff7ffff 	.word	0xfff7ffff
 8001ff0:	00001388 	.word	0x00001388
 8001ff4:	ffcfffff 	.word	0xffcfffff
 8001ff8:	efffffff 	.word	0xefffffff
 8001ffc:	fffff3ff 	.word	0xfffff3ff
 8002000:	ffffcfff 	.word	0xffffcfff
 8002004:	fff3ffff 	.word	0xfff3ffff

08002008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e032      	b.n	8002080 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2239      	movs	r2, #57	; 0x39
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d107      	bne.n	8002036 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2238      	movs	r2, #56	; 0x38
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f7fe fc47 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2239      	movs	r2, #57	; 0x39
 800203a:	2102      	movs	r1, #2
 800203c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	0019      	movs	r1, r3
 8002048:	0010      	movs	r0, r2
 800204a:	f000 facf 	bl	80025ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223e      	movs	r2, #62	; 0x3e
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	223a      	movs	r2, #58	; 0x3a
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	223b      	movs	r2, #59	; 0x3b
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223c      	movs	r2, #60	; 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223d      	movs	r2, #61	; 0x3d
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2239      	movs	r2, #57	; 0x39
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2239      	movs	r2, #57	; 0x39
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d001      	beq.n	80020a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e02e      	b.n	80020fe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2239      	movs	r2, #57	; 0x39
 80020a4:	2102      	movs	r1, #2
 80020a6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	05db      	lsls	r3, r3, #23
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d009      	beq.n	80020c8 <HAL_TIM_Base_Start+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_TIM_Base_Start+0x80>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_TIM_Base_Start+0x40>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <HAL_TIM_Base_Start+0x84>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d111      	bne.n	80020ec <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d010      	beq.n	80020fc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ea:	e007      	b.n	80020fc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2101      	movs	r1, #1
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40010800 	.word	0x40010800
 800210c:	40011400 	.word	0x40011400

08002110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e032      	b.n	8002188 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2239      	movs	r2, #57	; 0x39
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2238      	movs	r2, #56	; 0x38
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	0018      	movs	r0, r3
 800213a:	f000 f829 	bl	8002190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2239      	movs	r2, #57	; 0x39
 8002142:	2102      	movs	r1, #2
 8002144:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f000 fa4b 	bl	80025ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223e      	movs	r2, #62	; 0x3e
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223a      	movs	r2, #58	; 0x3a
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	223b      	movs	r2, #59	; 0x3b
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	223c      	movs	r2, #60	; 0x3c
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223d      	movs	r2, #61	; 0x3d
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2239      	movs	r2, #57	; 0x39
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x22>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	223a      	movs	r2, #58	; 0x3a
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	4193      	sbcs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e01f      	b.n	8002202 <HAL_TIM_PWM_Start+0x62>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d108      	bne.n	80021da <HAL_TIM_PWM_Start+0x3a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	223b      	movs	r2, #59	; 0x3b
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	4193      	sbcs	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e013      	b.n	8002202 <HAL_TIM_PWM_Start+0x62>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d108      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x52>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	223c      	movs	r2, #60	; 0x3c
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	1e5a      	subs	r2, r3, #1
 80021ec:	4193      	sbcs	r3, r2
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e007      	b.n	8002202 <HAL_TIM_PWM_Start+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	223d      	movs	r2, #61	; 0x3d
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	4193      	sbcs	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e04d      	b.n	80022a6 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_TIM_PWM_Start+0x7a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	223a      	movs	r2, #58	; 0x3a
 8002214:	2102      	movs	r1, #2
 8002216:	5499      	strb	r1, [r3, r2]
 8002218:	e013      	b.n	8002242 <HAL_TIM_PWM_Start+0xa2>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d104      	bne.n	800222a <HAL_TIM_PWM_Start+0x8a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	223b      	movs	r2, #59	; 0x3b
 8002224:	2102      	movs	r1, #2
 8002226:	5499      	strb	r1, [r3, r2]
 8002228:	e00b      	b.n	8002242 <HAL_TIM_PWM_Start+0xa2>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0x9a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	223c      	movs	r2, #60	; 0x3c
 8002234:	2102      	movs	r1, #2
 8002236:	5499      	strb	r1, [r3, r2]
 8002238:	e003      	b.n	8002242 <HAL_TIM_PWM_Start+0xa2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	223d      	movs	r2, #61	; 0x3d
 800223e:	2102      	movs	r1, #2
 8002240:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fbc0 	bl	80029d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	05db      	lsls	r3, r3, #23
 8002258:	429a      	cmp	r2, r3
 800225a:	d009      	beq.n	8002270 <HAL_TIM_PWM_Start+0xd0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_TIM_PWM_Start+0x110>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_PWM_Start+0xd0>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <HAL_TIM_PWM_Start+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b06      	cmp	r3, #6
 8002280:	d010      	beq.n	80022a4 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002292:	e007      	b.n	80022a4 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b004      	add	sp, #16
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40011400 	.word	0x40011400

080022b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2317      	movs	r3, #23
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	5c9b      	ldrb	r3, [r3, r2]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PWM_ConfigChannel+0x22>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0ad      	b.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d100      	bne.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80022e8:	e076      	b.n	80023d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d900      	bls.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80022f0:	e095      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x166>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d04e      	beq.n	8002396 <HAL_TIM_PWM_ConfigChannel+0xde>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d900      	bls.n	8002300 <HAL_TIM_PWM_ConfigChannel+0x48>
 80022fe:	e08e      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d021      	beq.n	8002350 <HAL_TIM_PWM_ConfigChannel+0x98>
 800230c:	e087      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	0011      	movs	r1, r2
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f9bc 	bl	8002694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2108      	movs	r1, #8
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2104      	movs	r1, #4
 8002338:	438a      	bics	r2, r1
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	619a      	str	r2, [r3, #24]
      break;
 800234e:	e06b      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	0011      	movs	r1, r2
 8002358:	0018      	movs	r0, r3
 800235a:	f000 f9d7 	bl	800270c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0109      	lsls	r1, r1, #4
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4931      	ldr	r1, [pc, #196]	; (8002440 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800237c:	400a      	ands	r2, r1
 800237e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6999      	ldr	r1, [r3, #24]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]
      break;
 8002394:	e048      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f9f6 	bl	8002790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2108      	movs	r1, #8
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2104      	movs	r1, #4
 80023c0:	438a      	bics	r2, r1
 80023c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69d9      	ldr	r1, [r3, #28]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	61da      	str	r2, [r3, #28]
      break;
 80023d6:	e027      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fa15 	bl	8002810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0109      	lsls	r1, r1, #4
 80023f4:	430a      	orrs	r2, r1
 80023f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	490f      	ldr	r1, [pc, #60]	; (8002440 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002404:	400a      	ands	r2, r1
 8002406:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69d9      	ldr	r1, [r3, #28]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	021a      	lsls	r2, r3, #8
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	61da      	str	r2, [r3, #28]
      break;
 800241c:	e004      	b.n	8002428 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800241e:	2317      	movs	r3, #23
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
      break;
 8002426:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2238      	movs	r2, #56	; 0x38
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

  return status;
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b006      	add	sp, #24
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	fffffbff 	.word	0xfffffbff

08002444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	230f      	movs	r3, #15
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2238      	movs	r2, #56	; 0x38
 800245a:	5c9b      	ldrb	r3, [r3, r2]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIM_ConfigClockSource+0x20>
 8002460:	2302      	movs	r3, #2
 8002462:	e0bc      	b.n	80025de <HAL_TIM_ConfigClockSource+0x19a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2238      	movs	r2, #56	; 0x38
 8002468:	2101      	movs	r1, #1
 800246a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2239      	movs	r2, #57	; 0x39
 8002470:	2102      	movs	r1, #2
 8002472:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2277      	movs	r2, #119	; 0x77
 8002480:	4393      	bics	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0192      	lsls	r2, r2, #6
 800249c:	4293      	cmp	r3, r2
 800249e:	d040      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xde>
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d900      	bls.n	80024aa <HAL_TIM_ConfigClockSource+0x66>
 80024a8:	e088      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	0152      	lsls	r2, r2, #5
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d100      	bne.n	80024b4 <HAL_TIM_ConfigClockSource+0x70>
 80024b2:	e088      	b.n	80025c6 <HAL_TIM_ConfigClockSource+0x182>
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	0152      	lsls	r2, r2, #5
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d900      	bls.n	80024be <HAL_TIM_ConfigClockSource+0x7a>
 80024bc:	e07e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024be:	2b70      	cmp	r3, #112	; 0x70
 80024c0:	d018      	beq.n	80024f4 <HAL_TIM_ConfigClockSource+0xb0>
 80024c2:	d900      	bls.n	80024c6 <HAL_TIM_ConfigClockSource+0x82>
 80024c4:	e07a      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024c6:	2b60      	cmp	r3, #96	; 0x60
 80024c8:	d04f      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x126>
 80024ca:	d900      	bls.n	80024ce <HAL_TIM_ConfigClockSource+0x8a>
 80024cc:	e076      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024ce:	2b50      	cmp	r3, #80	; 0x50
 80024d0:	d03b      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x106>
 80024d2:	d900      	bls.n	80024d6 <HAL_TIM_ConfigClockSource+0x92>
 80024d4:	e072      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	d057      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x146>
 80024da:	d900      	bls.n	80024de <HAL_TIM_ConfigClockSource+0x9a>
 80024dc:	e06e      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d063      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x166>
 80024e2:	d86b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d060      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x166>
 80024e8:	d868      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d05d      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x166>
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d05b      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x166>
 80024f2:	e063      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f000 fa44 	bl	8002990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2277      	movs	r2, #119	; 0x77
 8002514:	4313      	orrs	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e052      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f000 fa2d 	bl	8002990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2180      	movs	r1, #128	; 0x80
 8002542:	01c9      	lsls	r1, r1, #7
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
      break;
 8002548:	e03e      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	001a      	movs	r2, r3
 8002558:	f000 f9a0 	bl	800289c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2150      	movs	r1, #80	; 0x50
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f9fa 	bl	800295c <TIM_ITRx_SetConfig>
      break;
 8002568:	e02e      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	001a      	movs	r2, r3
 8002578:	f000 f9be 	bl	80028f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f9ea 	bl	800295c <TIM_ITRx_SetConfig>
      break;
 8002588:	e01e      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	001a      	movs	r2, r3
 8002598:	f000 f980 	bl	800289c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f9da 	bl	800295c <TIM_ITRx_SetConfig>
      break;
 80025a8:	e00e      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0019      	movs	r1, r3
 80025b4:	0010      	movs	r0, r2
 80025b6:	f000 f9d1 	bl	800295c <TIM_ITRx_SetConfig>
      break;
 80025ba:	e005      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80025bc:	230f      	movs	r3, #15
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
      break;
 80025c4:	e000      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2239      	movs	r2, #57	; 0x39
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2238      	movs	r2, #56	; 0x38
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

  return status;
 80025d8:	230f      	movs	r3, #15
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	781b      	ldrb	r3, [r3, #0]
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	ffff00ff 	.word	0xffff00ff

080025ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	05db      	lsls	r3, r3, #23
 8002602:	429a      	cmp	r2, r3
 8002604:	d007      	beq.n	8002616 <TIM_Base_SetConfig+0x2a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <TIM_Base_SetConfig+0x9c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <TIM_Base_SetConfig+0x2a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <TIM_Base_SetConfig+0xa0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d108      	bne.n	8002628 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2270      	movs	r2, #112	; 0x70
 800261a:	4393      	bics	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	429a      	cmp	r2, r3
 8002630:	d007      	beq.n	8002642 <TIM_Base_SetConfig+0x56>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <TIM_Base_SetConfig+0x9c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <TIM_Base_SetConfig+0x56>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <TIM_Base_SetConfig+0xa0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <TIM_Base_SetConfig+0xa4>)
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	4393      	bics	r3, r2
 800265a:	001a      	movs	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	615a      	str	r2, [r3, #20]
}
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b004      	add	sp, #16
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40010800 	.word	0x40010800
 800268c:	40011400 	.word	0x40011400
 8002690:	fffffcff 	.word	0xfffffcff

08002694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4393      	bics	r3, r2
 80026a6:	001a      	movs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2270      	movs	r2, #112	; 0x70
 80026c2:	4393      	bics	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4393      	bics	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2202      	movs	r2, #2
 80026dc:	4393      	bics	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b006      	add	sp, #24
 800270a:	bd80      	pop	{r7, pc}

0800270c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	2210      	movs	r2, #16
 800271c:	4393      	bics	r3, r2
 800271e:	001a      	movs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <TIM_OC2_SetConfig+0x7c>)
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <TIM_OC2_SetConfig+0x80>)
 8002742:	4013      	ands	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2220      	movs	r2, #32
 8002756:	4393      	bics	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b006      	add	sp, #24
 8002786:	bd80      	pop	{r7, pc}
 8002788:	ffff8fff 	.word	0xffff8fff
 800278c:	fffffcff 	.word	0xfffffcff

08002790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <TIM_OC3_SetConfig+0x78>)
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2270      	movs	r2, #112	; 0x70
 80027bc:	4393      	bics	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2203      	movs	r2, #3
 80027c4:	4393      	bics	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <TIM_OC3_SetConfig+0x7c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	fffffeff 	.word	0xfffffeff
 800280c:	fffffdff 	.word	0xfffffdff

08002810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <TIM_OC4_SetConfig+0x7c>)
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <TIM_OC4_SetConfig+0x80>)
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <TIM_OC4_SetConfig+0x84>)
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <TIM_OC4_SetConfig+0x88>)
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	031b      	lsls	r3, r3, #12
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b006      	add	sp, #24
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	ffffefff 	.word	0xffffefff
 8002890:	ffff8fff 	.word	0xffff8fff
 8002894:	fffffcff 	.word	0xfffffcff
 8002898:	ffffdfff 	.word	0xffffdfff

0800289c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	2201      	movs	r2, #1
 80028b4:	4393      	bics	r3, r2
 80028b6:	001a      	movs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	22f0      	movs	r2, #240	; 0xf0
 80028c6:	4393      	bics	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	220a      	movs	r2, #10
 80028d8:	4393      	bics	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	621a      	str	r2, [r3, #32]
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b006      	add	sp, #24
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	2210      	movs	r2, #16
 800290a:	4393      	bics	r3, r2
 800290c:	001a      	movs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <TIM_TI2_ConfigInputStage+0x60>)
 8002922:	4013      	ands	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	22a0      	movs	r2, #160	; 0xa0
 8002934:	4393      	bics	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	ffff0fff 	.word	0xffff0fff

0800295c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2270      	movs	r2, #112	; 0x70
 8002970:	4393      	bics	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	2207      	movs	r2, #7
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	609a      	str	r2, [r3, #8]
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <TIM_ETR_SetConfig+0x3c>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	021a      	lsls	r2, r3, #8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b006      	add	sp, #24
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	ffff00ff 	.word	0xffff00ff

080029d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	221f      	movs	r2, #31
 80029e0:	4013      	ands	r3, r2
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	0013      	movs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	43d2      	mvns	r2, r2
 80029f2:	401a      	ands	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1a      	ldr	r2, [r3, #32]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	211f      	movs	r1, #31
 8002a00:	400b      	ands	r3, r1
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4099      	lsls	r1, r3
 8002a06:	000b      	movs	r3, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b006      	add	sp, #24
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2238      	movs	r2, #56	; 0x38
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e042      	b.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2238      	movs	r2, #56	; 0x38
 8002a34:	2101      	movs	r1, #1
 8002a36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2239      	movs	r2, #57	; 0x39
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2270      	movs	r2, #112	; 0x70
 8002a54:	4393      	bics	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	05db      	lsls	r3, r3, #23
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d009      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10c      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4393      	bics	r3, r2
 8002a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2239      	movs	r2, #57	; 0x39
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2238      	movs	r2, #56	; 0x38
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	40011400 	.word	0x40011400

08002ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e044      	b.n	8002b64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2274      	movs	r2, #116	; 0x74
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fd ff3b 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2224      	movs	r2, #36	; 0x24
 8002af6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f830 	bl	8002b70 <UART_SetConfig>
 8002b10:	0003      	movs	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e024      	b.n	8002b64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fa6d 	bl	8003004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	490d      	ldr	r1, [pc, #52]	; (8002b6c <HAL_UART_Init+0xa4>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	212a      	movs	r1, #42	; 0x2a
 8002b46:	438a      	bics	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 fb05 	bl	800316c <UART_CheckIdleState>
 8002b62:	0003      	movs	r3, r0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	ffffb7ff 	.word	0xffffb7ff

08002b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b78:	231a      	movs	r3, #26
 8002b7a:	2218      	movs	r2, #24
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4ab4      	ldr	r2, [pc, #720]	; (8002e74 <UART_SetConfig+0x304>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4aaf      	ldr	r2, [pc, #700]	; (8002e78 <UART_SetConfig+0x308>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4aa9      	ldr	r2, [pc, #676]	; (8002e7c <UART_SetConfig+0x30c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be0:	4313      	orrs	r3, r2
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4aa5      	ldr	r2, [pc, #660]	; (8002e80 <UART_SetConfig+0x310>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4aa1      	ldr	r2, [pc, #644]	; (8002e84 <UART_SetConfig+0x314>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d131      	bne.n	8002c68 <UART_SetConfig+0xf8>
 8002c04:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <UART_SetConfig+0x318>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d01d      	beq.n	8002c4c <UART_SetConfig+0xdc>
 8002c10:	d823      	bhi.n	8002c5a <UART_SetConfig+0xea>
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d00c      	beq.n	8002c30 <UART_SetConfig+0xc0>
 8002c16:	d820      	bhi.n	8002c5a <UART_SetConfig+0xea>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <UART_SetConfig+0xb2>
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00e      	beq.n	8002c3e <UART_SetConfig+0xce>
 8002c20:	e01b      	b.n	8002c5a <UART_SetConfig+0xea>
 8002c22:	231b      	movs	r3, #27
 8002c24:	2218      	movs	r2, #24
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e065      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002c30:	231b      	movs	r3, #27
 8002c32:	2218      	movs	r2, #24
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	2202      	movs	r2, #2
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e05e      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002c3e:	231b      	movs	r3, #27
 8002c40:	2218      	movs	r2, #24
 8002c42:	189b      	adds	r3, r3, r2
 8002c44:	19db      	adds	r3, r3, r7
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e057      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002c4c:	231b      	movs	r3, #27
 8002c4e:	2218      	movs	r2, #24
 8002c50:	189b      	adds	r3, r3, r2
 8002c52:	19db      	adds	r3, r3, r7
 8002c54:	2208      	movs	r2, #8
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e050      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002c5a:	231b      	movs	r3, #27
 8002c5c:	2218      	movs	r2, #24
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	19db      	adds	r3, r3, r7
 8002c62:	2210      	movs	r2, #16
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e049      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a83      	ldr	r2, [pc, #524]	; (8002e7c <UART_SetConfig+0x30c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d13e      	bne.n	8002cf0 <UART_SetConfig+0x180>
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <UART_SetConfig+0x318>)
 8002c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c76:	23c0      	movs	r3, #192	; 0xc0
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	22c0      	movs	r2, #192	; 0xc0
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d027      	beq.n	8002cd4 <UART_SetConfig+0x164>
 8002c84:	22c0      	movs	r2, #192	; 0xc0
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d82a      	bhi.n	8002ce2 <UART_SetConfig+0x172>
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d011      	beq.n	8002cb8 <UART_SetConfig+0x148>
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d822      	bhi.n	8002ce2 <UART_SetConfig+0x172>
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <UART_SetConfig+0x13a>
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	00d2      	lsls	r2, r2, #3
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00e      	beq.n	8002cc6 <UART_SetConfig+0x156>
 8002ca8:	e01b      	b.n	8002ce2 <UART_SetConfig+0x172>
 8002caa:	231b      	movs	r3, #27
 8002cac:	2218      	movs	r2, #24
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19db      	adds	r3, r3, r7
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e021      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002cb8:	231b      	movs	r3, #27
 8002cba:	2218      	movs	r2, #24
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	19db      	adds	r3, r3, r7
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e01a      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e013      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002cd4:	231b      	movs	r3, #27
 8002cd6:	2218      	movs	r2, #24
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	19db      	adds	r3, r3, r7
 8002cdc:	2208      	movs	r2, #8
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e00c      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002ce2:	231b      	movs	r3, #27
 8002ce4:	2218      	movs	r2, #24
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	2210      	movs	r2, #16
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e005      	b.n	8002cfc <UART_SetConfig+0x18c>
 8002cf0:	231b      	movs	r3, #27
 8002cf2:	2218      	movs	r2, #24
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	19db      	adds	r3, r3, r7
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5e      	ldr	r2, [pc, #376]	; (8002e7c <UART_SetConfig+0x30c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d000      	beq.n	8002d08 <UART_SetConfig+0x198>
 8002d06:	e084      	b.n	8002e12 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d08:	231b      	movs	r3, #27
 8002d0a:	2218      	movs	r2, #24
 8002d0c:	189b      	adds	r3, r3, r2
 8002d0e:	19db      	adds	r3, r3, r7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d01d      	beq.n	8002d52 <UART_SetConfig+0x1e2>
 8002d16:	dc20      	bgt.n	8002d5a <UART_SetConfig+0x1ea>
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d015      	beq.n	8002d48 <UART_SetConfig+0x1d8>
 8002d1c:	dc1d      	bgt.n	8002d5a <UART_SetConfig+0x1ea>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <UART_SetConfig+0x1b8>
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d005      	beq.n	8002d32 <UART_SetConfig+0x1c2>
 8002d26:	e018      	b.n	8002d5a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff f81c 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d30:	e01c      	b.n	8002d6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <UART_SetConfig+0x318>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d002      	beq.n	8002d42 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d3c:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <UART_SetConfig+0x31c>)
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d40:	e014      	b.n	8002d6c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002d42:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <UART_SetConfig+0x320>)
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d46:	e011      	b.n	8002d6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d48:	f7fe ff5c 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d50:	e00c      	b.n	8002d6c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d58:	e008      	b.n	8002d6c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d5e:	231a      	movs	r3, #26
 8002d60:	2218      	movs	r2, #24
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
        break;
 8002d6a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d100      	bne.n	8002d74 <UART_SetConfig+0x204>
 8002d72:	e130      	b.n	8002fd6 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	0013      	movs	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d305      	bcc.n	8002d90 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d906      	bls.n	8002d9e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002d90:	231a      	movs	r3, #26
 8002d92:	2218      	movs	r2, #24
 8002d94:	189b      	adds	r3, r3, r2
 8002d96:	19db      	adds	r3, r3, r7
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e11b      	b.n	8002fd6 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	6939      	ldr	r1, [r7, #16]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	000b      	movs	r3, r1
 8002dac:	0e1b      	lsrs	r3, r3, #24
 8002dae:	0010      	movs	r0, r2
 8002db0:	0205      	lsls	r5, r0, #8
 8002db2:	431d      	orrs	r5, r3
 8002db4:	000b      	movs	r3, r1
 8002db6:	021c      	lsls	r4, r3, #8
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68b8      	ldr	r0, [r7, #8]
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	1900      	adds	r0, r0, r4
 8002dca:	4169      	adcs	r1, r5
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f7fd fa21 	bl	8000220 <__aeabi_uldivmod>
 8002dde:	0002      	movs	r2, r0
 8002de0:	000b      	movs	r3, r1
 8002de2:	0013      	movs	r3, r2
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de8:	23c0      	movs	r3, #192	; 0xc0
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d309      	bcc.n	8002e04 <UART_SetConfig+0x294>
 8002df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	035b      	lsls	r3, r3, #13
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d204      	bcs.n	8002e04 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e0e8      	b.n	8002fd6 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002e04:	231a      	movs	r3, #26
 8002e06:	2218      	movs	r2, #24
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e0e1      	b.n	8002fd6 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d000      	beq.n	8002e20 <UART_SetConfig+0x2b0>
 8002e1e:	e083      	b.n	8002f28 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002e20:	231b      	movs	r3, #27
 8002e22:	2218      	movs	r2, #24
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d834      	bhi.n	8002e98 <UART_SetConfig+0x328>
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <UART_SetConfig+0x324>)
 8002e32:	18d3      	adds	r3, r2, r3
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7fe ff94 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e40:	e033      	b.n	8002eaa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e42:	f7fe ffa5 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8002e46:	0003      	movs	r3, r0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4a:	e02e      	b.n	8002eaa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <UART_SetConfig+0x318>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	4013      	ands	r3, r2
 8002e54:	d002      	beq.n	8002e5c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <UART_SetConfig+0x31c>)
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e5a:	e026      	b.n	8002eaa <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <UART_SetConfig+0x320>)
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e60:	e023      	b.n	8002eaa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e62:	f7fe fecf 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8002e66:	0003      	movs	r3, r0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e6a:	e01e      	b.n	8002eaa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e72:	e01a      	b.n	8002eaa <UART_SetConfig+0x33a>
 8002e74:	efff69f3 	.word	0xefff69f3
 8002e78:	ffffcfff 	.word	0xffffcfff
 8002e7c:	40004800 	.word	0x40004800
 8002e80:	fffff4ff 	.word	0xfffff4ff
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	003d0900 	.word	0x003d0900
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	08003418 	.word	0x08003418
      default:
        pclk = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e9c:	231a      	movs	r3, #26
 8002e9e:	2218      	movs	r2, #24
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
        break;
 8002ea8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <UART_SetConfig+0x342>
 8002eb0:	e091      	b.n	8002fd6 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	005a      	lsls	r2, r3, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	18d2      	adds	r2, r2, r3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	f7fd f91f 	bl	8000108 <__udivsi3>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	d921      	bls.n	8002f1a <UART_SetConfig+0x3aa>
 8002ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d21c      	bcs.n	8002f1a <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	200e      	movs	r0, #14
 8002ee6:	2418      	movs	r4, #24
 8002ee8:	1903      	adds	r3, r0, r4
 8002eea:	19db      	adds	r3, r3, r7
 8002eec:	210f      	movs	r1, #15
 8002eee:	438a      	bics	r2, r1
 8002ef0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2207      	movs	r2, #7
 8002efa:	4013      	ands	r3, r2
 8002efc:	b299      	uxth	r1, r3
 8002efe:	1903      	adds	r3, r0, r4
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	1902      	adds	r2, r0, r4
 8002f04:	19d2      	adds	r2, r2, r7
 8002f06:	8812      	ldrh	r2, [r2, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1902      	adds	r2, r0, r4
 8002f12:	19d2      	adds	r2, r2, r7
 8002f14:	8812      	ldrh	r2, [r2, #0]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	e05d      	b.n	8002fd6 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002f1a:	231a      	movs	r3, #26
 8002f1c:	2218      	movs	r2, #24
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	19db      	adds	r3, r3, r7
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e056      	b.n	8002fd6 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f28:	231b      	movs	r3, #27
 8002f2a:	2218      	movs	r2, #24
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	19db      	adds	r3, r3, r7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d822      	bhi.n	8002f7c <UART_SetConfig+0x40c>
 8002f36:	009a      	lsls	r2, r3, #2
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <UART_SetConfig+0x484>)
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7fe ff10 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002f44:	0003      	movs	r3, r0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f48:	e021      	b.n	8002f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4a:	f7fe ff21 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f52:	e01c      	b.n	8002f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <UART_SetConfig+0x488>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d002      	beq.n	8002f64 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f5e:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <UART_SetConfig+0x48c>)
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f62:	e014      	b.n	8002f8e <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 8002f64:	4b26      	ldr	r3, [pc, #152]	; (8003000 <UART_SetConfig+0x490>)
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f68:	e011      	b.n	8002f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6a:	f7fe fe4b 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f72:	e00c      	b.n	8002f8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f7a:	e008      	b.n	8002f8e <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f80:	231a      	movs	r3, #26
 8002f82:	2218      	movs	r2, #24
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	19db      	adds	r3, r3, r7
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
        break;
 8002f8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	085a      	lsrs	r2, r3, #1
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	18d2      	adds	r2, r2, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	f7fd f8af 	bl	8000108 <__udivsi3>
 8002faa:	0003      	movs	r3, r0
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d909      	bls.n	8002fca <UART_SetConfig+0x45a>
 8002fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d204      	bcs.n	8002fca <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	e005      	b.n	8002fd6 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002fca:	231a      	movs	r3, #26
 8002fcc:	2218      	movs	r2, #24
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fe2:	231a      	movs	r3, #26
 8002fe4:	2218      	movs	r2, #24
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	781b      	ldrb	r3, [r3, #0]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b00e      	add	sp, #56	; 0x38
 8002ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff4:	0800343c 	.word	0x0800343c
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	003d0900 	.word	0x003d0900
 8003000:	00f42400 	.word	0x00f42400

08003004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d00b      	beq.n	800302e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <UART_AdvFeatureConfig+0x144>)
 800301e:	4013      	ands	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2202      	movs	r2, #2
 8003034:	4013      	ands	r3, r2
 8003036:	d00b      	beq.n	8003050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a43      	ldr	r2, [pc, #268]	; (800314c <UART_AdvFeatureConfig+0x148>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2204      	movs	r2, #4
 8003056:	4013      	ands	r3, r2
 8003058:	d00b      	beq.n	8003072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a3b      	ldr	r2, [pc, #236]	; (8003150 <UART_AdvFeatureConfig+0x14c>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2208      	movs	r2, #8
 8003078:	4013      	ands	r3, r2
 800307a:	d00b      	beq.n	8003094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <UART_AdvFeatureConfig+0x150>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2210      	movs	r2, #16
 800309a:	4013      	ands	r3, r2
 800309c:	d00b      	beq.n	80030b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <UART_AdvFeatureConfig+0x154>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2220      	movs	r2, #32
 80030bc:	4013      	ands	r3, r2
 80030be:	d00b      	beq.n	80030d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	4a25      	ldr	r2, [pc, #148]	; (800315c <UART_AdvFeatureConfig+0x158>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	4013      	ands	r3, r2
 80030e0:	d01d      	beq.n	800311e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <UART_AdvFeatureConfig+0x15c>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	035b      	lsls	r3, r3, #13
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <UART_AdvFeatureConfig+0x160>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	4013      	ands	r3, r2
 8003126:	d00b      	beq.n	8003140 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <UART_AdvFeatureConfig+0x164>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fffdffff 	.word	0xfffdffff
 800314c:	fffeffff 	.word	0xfffeffff
 8003150:	fffbffff 	.word	0xfffbffff
 8003154:	ffff7fff 	.word	0xffff7fff
 8003158:	ffffefff 	.word	0xffffefff
 800315c:	ffffdfff 	.word	0xffffdfff
 8003160:	ffefffff 	.word	0xffefffff
 8003164:	ff9fffff 	.word	0xff9fffff
 8003168:	fff7ffff 	.word	0xfff7ffff

0800316c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af02      	add	r7, sp, #8
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	2100      	movs	r1, #0
 800317a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800317c:	f7fd fcfc 	bl	8000b78 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2208      	movs	r2, #8
 800318c:	4013      	ands	r3, r2
 800318e:	2b08      	cmp	r3, #8
 8003190:	d10c      	bne.n	80031ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	0391      	lsls	r1, r2, #14
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <UART_CheckIdleState+0x8c>)
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	f000 f82c 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e021      	b.n	80031f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2204      	movs	r2, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d10c      	bne.n	80031d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	03d1      	lsls	r1, r2, #15
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <UART_CheckIdleState+0x8c>)
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f000 f818 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d001      	beq.n	80031d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e00d      	b.n	80031f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2274      	movs	r2, #116	; 0x74
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	01ffffff 	.word	0x01ffffff

080031fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b094      	sub	sp, #80	; 0x50
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	e0a3      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003210:	3301      	adds	r3, #1
 8003212:	d100      	bne.n	8003216 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003214:	e09f      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fd fcaf 	bl	8000b78 <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <UART_WaitOnFlagUntilTimeout+0x30>
 8003226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13d      	bne.n	80032a8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322c:	f3ef 8310 	mrs	r3, PRIMASK
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
 8003236:	2301      	movs	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	f383 8810 	msr	PRIMASK, r3
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	494c      	ldr	r1, [pc, #304]	; (8003380 <UART_WaitOnFlagUntilTimeout+0x184>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003266:	643b      	str	r3, [r7, #64]	; 0x40
 8003268:	2301      	movs	r3, #1
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	f383 8810 	msr	PRIMASK, r3
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	f383 8810 	msr	PRIMASK, r3
}
 800328e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2274      	movs	r2, #116	; 0x74
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e067      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2204      	movs	r2, #4
 80032b0:	4013      	ands	r3, r2
 80032b2:	d050      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	401a      	ands	r2, r3
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d146      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	613b      	str	r3, [r7, #16]
  return(result);
 80032d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	2301      	movs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f383 8810 	msr	PRIMASK, r3
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4923      	ldr	r1, [pc, #140]	; (8003380 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	61fb      	str	r3, [r7, #28]
  return(result);
 800330a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
 800330e:	2301      	movs	r3, #1
 8003310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2101      	movs	r1, #1
 8003326:	438a      	bics	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	2120      	movs	r1, #32
 8003348:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2274      	movs	r2, #116	; 0x74
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e010      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	425a      	negs	r2, r3
 8003366:	4153      	adcs	r3, r2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	001a      	movs	r2, r3
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d100      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003374:	e74b      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b014      	add	sp, #80	; 0x50
 800337e:	bd80      	pop	{r7, pc}
 8003380:	fffffe5f 	.word	0xfffffe5f

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2600      	movs	r6, #0
 8003388:	4d0c      	ldr	r5, [pc, #48]	; (80033bc <__libc_init_array+0x38>)
 800338a:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338c:	1b64      	subs	r4, r4, r5
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	42a6      	cmp	r6, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	2600      	movs	r6, #0
 8003396:	f000 f821 	bl	80033dc <_init>
 800339a:	4d0a      	ldr	r5, [pc, #40]	; (80033c4 <__libc_init_array+0x40>)
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <__libc_init_array+0x44>)
 800339e:	1b64      	subs	r4, r4, r5
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	42a6      	cmp	r6, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	00b3      	lsls	r3, r6, #2
 80033aa:	58eb      	ldr	r3, [r5, r3]
 80033ac:	4798      	blx	r3
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	00b3      	lsls	r3, r6, #2
 80033b4:	58eb      	ldr	r3, [r5, r3]
 80033b6:	4798      	blx	r3
 80033b8:	3601      	adds	r6, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08003468 	.word	0x08003468
 80033c0:	08003468 	.word	0x08003468
 80033c4:	08003468 	.word	0x08003468
 80033c8:	0800346c 	.word	0x0800346c

080033cc <memset>:
 80033cc:	0003      	movs	r3, r0
 80033ce:	1882      	adds	r2, r0, r2
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	7019      	strb	r1, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
