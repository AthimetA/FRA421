
FRA421_H745_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa0  08009aa0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009ab8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009b18  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000824  240000d0  08009b78  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240008f4  08009b78  000208f4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d8c2  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030f9  00000000  00000000  0003d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e0  00000000  00000000  00040ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c8  00000000  00000000  00041da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b451  00000000  00000000  00042f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a10d  00000000  00000000  0007e3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001849b3  00000000  00000000  000984c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021ce79  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005080  00000000  00000000  0021cecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009740 	.word	0x08009740

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009740 	.word	0x08009740

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <byteToW2812BEncode1>:

uint8_t LEDBuffer[NUM_LED_WS2812S*9 + 20] = {0}; //20 is reset bit can be calculate base on SPI hz


void byteToW2812BEncode1(uint8_t dataIn, uint8_t* Array3Output)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
	memcpy(Array3Output,&W2812LUT[dataIn*3],3);
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <byteToW2812BEncode1+0x2c>)
 800071e:	4413      	add	r3, r2
 8000720:	2203      	movs	r2, #3
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f008 fff5 	bl	8009714 <memcpy>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08009768 	.word	0x08009768

08000738 <W2812B_Init>:
					| (((dataIn >> 1) & 0x1) << 4) | (((dataIn ) & 0x1) << 1);

}

void W2812B_Init(SPI_HandleTypeDef *hspi)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi,LEDBuffer,NUM_LED_WS2812S  * 9 + 20);
 8000740:	225c      	movs	r2, #92	; 0x5c
 8000742:	4904      	ldr	r1, [pc, #16]	; (8000754 <W2812B_Init+0x1c>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f006 ffd5 	bl	80076f4 <HAL_SPI_Transmit_DMA>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	240000ec 	.word	0x240000ec

08000758 <W2812B_UpdateData>:

void W2812B_UpdateData(W2812BStructure *input)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e035      	b.n	80007d2 <W2812B_UpdateData+0x7a>
	{
		byteToW2812BEncode1(input[i].G,&LEDBuffer[20+i*9]);
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	7858      	ldrb	r0, [r3, #1]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	3314      	adds	r3, #20
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <W2812B_UpdateData+0x8c>)
 8000780:	4413      	add	r3, r2
 8000782:	4619      	mov	r1, r3
 8000784:	f7ff ffc0 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].R,&LEDBuffer[20+i*9+3]);
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	7818      	ldrb	r0, [r3, #0]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	3317      	adds	r3, #23
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007a2:	4413      	add	r3, r2
 80007a4:	4619      	mov	r1, r3
 80007a6:	f7ff ffaf 	bl	8000708 <byteToW2812BEncode1>
		byteToW2812BEncode1(input[i].B,&LEDBuffer[20+i*9+6]);
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	7898      	ldrb	r0, [r3, #2]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4413      	add	r3, r2
 80007c0:	331a      	adds	r3, #26
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <W2812B_UpdateData+0x8c>)
 80007c4:	4413      	add	r3, r2
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff9e 	bl	8000708 <byteToW2812BEncode1>
	for(int i = 0;i<NUM_LED_WS2812S;i++)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b07      	cmp	r3, #7
 80007d6:	ddc6      	ble.n	8000766 <W2812B_UpdateData+0xe>
	}
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	240000ec 	.word	0x240000ec

080007e8 <HToRGB>:
void HToRGB(int h,W2812BStructure *input)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	uint8_t mode= h/256;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	da00      	bge.n	80007fa <HToRGB+0x12>
 80007f8:	33ff      	adds	r3, #255	; 0xff
 80007fa:	121b      	asrs	r3, r3, #8
 80007fc:	73fb      	strb	r3, [r7, #15]
	uint8_t state = h%256;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	425a      	negs	r2, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	bf58      	it	pl
 8000808:	4253      	negpl	r3, r2
 800080a:	73bb      	strb	r3, [r7, #14]

	switch (mode) {
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d842      	bhi.n	8000898 <HToRGB+0xb0>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <HToRGB+0x30>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	0800082d 	.word	0x0800082d
 800081c:	08000841 	.word	0x08000841
 8000820:	08000859 	.word	0x08000859
 8000824:	0800086d 	.word	0x0800086d
 8000828:	08000885 	.word	0x08000885
	case 0:
		input->B = 0;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	709a      	strb	r2, [r3, #2]
		input->G = state;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	701a      	strb	r2, [r3, #0]
		break;
 800083e:	e037      	b.n	80008b0 <HToRGB+0xc8>
	case 1:
		input->B = 0;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	22ff      	movs	r2, #255	; 0xff
 800084a:	705a      	strb	r2, [r3, #1]
		input->R = 255-state;
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	43db      	mvns	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e02b      	b.n	80008b0 <HToRGB+0xc8>
	case 2:
		input->B = state;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	709a      	strb	r2, [r3, #2]
		input->G = 255;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
		break;
 800086a:	e021      	b.n	80008b0 <HToRGB+0xc8>
	case 3:
		input->B = 255;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	709a      	strb	r2, [r3, #2]
		input->G = 255-state;
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	43db      	mvns	r3, r3
 8000876:	b2da      	uxtb	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	705a      	strb	r2, [r3, #1]
		input->R = 0;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		break;
 8000882:	e015      	b.n	80008b0 <HToRGB+0xc8>
	case 4:
		input->B = 255;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	705a      	strb	r2, [r3, #1]
		input->R = state;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	7bba      	ldrb	r2, [r7, #14]
 8000894:	701a      	strb	r2, [r3, #0]
		break;
 8000896:	e00b      	b.n	80008b0 <HToRGB+0xc8>
	default:
	case 5:
		input->B = 255-state;
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	43db      	mvns	r3, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	709a      	strb	r2, [r3, #2]
		input->G = 0;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2200      	movs	r2, #0
 80008a6:	705a      	strb	r2, [r3, #1]
		input->R = 255;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	701a      	strb	r2, [r3, #0]
		break;
 80008ae:	bf00      	nop


	}
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008c8:	bf00      	nop
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <main+0x138>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <main+0x24>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	60fa      	str	r2, [r7, #12]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dcf4      	bgt.n	80008ca <main+0xe>
  if ( timeout < 0 )
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da01      	bge.n	80008ea <main+0x2e>
  {
  Error_Handler();
 80008e6:	f000 fae5 	bl	8000eb4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fdfd 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f88d 	bl	8000a0c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <main+0x138>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	4a3e      	ldr	r2, [pc, #248]	; (80009f4 <main+0x138>)
 80008fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <main+0x138>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000910:	2000      	movs	r0, #0
 8000912:	f004 f8e7 	bl	8004ae4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f004 f8fd 	bl	8004b18 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800091e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000922:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000924:	bf00      	nop
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <main+0x138>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d104      	bne.n	800093c <main+0x80>
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	60fa      	str	r2, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dcf4      	bgt.n	8000926 <main+0x6a>
if ( timeout < 0 )
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da01      	bge.n	8000946 <main+0x8a>
{
Error_Handler();
 8000942:	f000 fab7 	bl	8000eb4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 fa25 	bl	8000d94 <MX_GPIO_Init>
  MX_ETH_Init();
 800094a:	f000 f8e3 	bl	8000b14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800094e:	f000 f983 	bl	8000c58 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000952:	f000 f9ff 	bl	8000d54 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000956:	f000 f9cb 	bl	8000cf0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800095a:	f000 f927 	bl	8000bac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GPIOB->OTYPER = GPIOB->OTYPER | GPIO_PIN_5;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <main+0x13c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	4a25      	ldr	r2, [pc, #148]	; (80009f8 <main+0x13c>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	6053      	str	r3, [r2, #4]
  W2812B_Init(&hspi1);
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <main+0x140>)
 800096c:	f7ff fee4 	bl	8000738 <W2812B_Init>
//	  HAL_Delay(1000);
	  static int h =0;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f000 fe4b 	bl	800160c <HAL_Delay>
		for (int i = 0; i < 8; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	e01f      	b.n	80009bc <main+0x100>

			HToRGB((h + 192*i) % 1536, &LED[i]);
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	461a      	mov	r2, r3
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <main+0x144>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	441a      	add	r2, r3
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <main+0x148>)
 8000990:	fb83 1302 	smull	r1, r3, r3, r2
 8000994:	1219      	asrs	r1, r3, #8
 8000996:	17d3      	asrs	r3, r2, #31
 8000998:	1ac8      	subs	r0, r1, r3
 800099a:	4603      	mov	r3, r0
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4403      	add	r3, r0
 80009a0:	025b      	lsls	r3, r3, #9
 80009a2:	1ad0      	subs	r0, r2, r3
 80009a4:	68ba      	ldr	r2, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <main+0x14c>)
 80009ae:	4413      	add	r3, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	f7ff ff19 	bl	80007e8 <HToRGB>
		for (int i = 0; i < 8; i++) {
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b07      	cmp	r3, #7
 80009c0:	dddc      	ble.n	800097c <main+0xc0>
		}
		h++;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <main+0x144>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <main+0x144>)
 80009ca:	6013      	str	r3, [r2, #0]
		h%=1536;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <main+0x144>)
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <main+0x148>)
 80009d2:	fb83 2301 	smull	r2, r3, r3, r1
 80009d6:	121a      	asrs	r2, r3, #8
 80009d8:	17cb      	asrs	r3, r1, #31
 80009da:	1ad2      	subs	r2, r2, r3
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	025b      	lsls	r3, r3, #9
 80009e4:	1aca      	subs	r2, r1, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <main+0x144>)
 80009e8:	601a      	str	r2, [r3, #0]
	  W2812B_UpdateData(LED);
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <main+0x14c>)
 80009ec:	f7ff feb4 	bl	8000758 <W2812B_UpdateData>
  {
 80009f0:	e7be      	b.n	8000970 <main+0xb4>
 80009f2:	bf00      	nop
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58020400 	.word	0x58020400
 80009fc:	24000230 	.word	0x24000230
 8000a00:	240008e4 	.word	0x240008e4
 8000a04:	2aaaaaab 	.word	0x2aaaaaab
 8000a08:	240008cc 	.word	0x240008cc

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 fe88 	bl	8009730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f008 fe82 	bl	8009730 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f004 f9cf 	bl	8004dd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <SystemClock_Config+0xfc>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <SystemClock_Config+0xfc>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <SystemClock_Config+0xfc>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <SystemClock_Config+0x100>)
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <SystemClock_Config+0x100>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <SystemClock_Config+0x100>)
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a64:	bf00      	nop
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xfc>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a72:	d1f8      	bne.n	8000a66 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <SystemClock_Config+0x104>)
 8000a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a78:	f023 0303 	bic.w	r3, r3, #3
 8000a7c:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <SystemClock_Config+0x104>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a9a:	2378      	movs	r3, #120	; 0x78
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 f9f2 	bl	8004ea4 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ac6:	f000 f9f5 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	233f      	movs	r3, #63	; 0x3f
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2104      	movs	r1, #4
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 fe05 	bl	8005700 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000afc:	f000 f9da 	bl	8000eb4 <Error_Handler>
  }
}
 8000b00:	bf00      	nop
 8000b02:	3770      	adds	r7, #112	; 0x70
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024800 	.word	0x58024800
 8000b0c:	58000400 	.word	0x58000400
 8000b10:	58024400 	.word	0x58024400

08000b14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_ETH_Init+0x84>)
 8000b1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b2c:	22e1      	movs	r2, #225	; 0xe1
 8000b2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_ETH_Init+0x8c>)
 8000b52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_ETH_Init+0x90>)
 8000b58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b64:	f003 f9d0 	bl	8003f08 <HAL_ETH_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b6e:	f000 f9a1 	bl	8000eb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b72:	2238      	movs	r2, #56	; 0x38
 8000b74:	2100      	movs	r1, #0
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b78:	f008 fdda 	bl	8009730 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b7e:	2221      	movs	r2, #33	; 0x21
 8000b80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24000180 	.word	0x24000180
 8000b98:	40028000 	.word	0x40028000
 8000b9c:	240008e8 	.word	0x240008e8
 8000ba0:	24000070 	.word	0x24000070
 8000ba4:	24000010 	.word	0x24000010
 8000ba8:	24000148 	.word	0x24000148

08000bac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bb2:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <MX_SPI1_Init+0xa8>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000be0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000be4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_SPI1_Init+0xa4>)
 8000c3e:	f006 fc53 	bl	80074e8 <HAL_SPI_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c48:	f000 f934 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000230 	.word	0x24000230
 8000c54:	40013000 	.word	0x40013000

08000c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <MX_USART3_UART_Init+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca0:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f007 f998 	bl	8007fd6 <HAL_UART_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f902 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f008 f936 	bl	8008f24 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f8f9 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cc6:	f008 f96b 	bl	8008fa0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd0:	f000 f8f0 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cd6:	f008 f8ec 	bl	8008eb2 <HAL_UARTEx_DisableFifoMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 f8e8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	24000330 	.word	0x24000330
 8000cec:	40004800 	.word	0x40004800

08000cf0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfc:	2209      	movs	r2, #9
 8000cfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d38:	f003 ff02 	bl	8004b40 <HAL_PCD_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 f8b7 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240003c0 	.word	0x240003c0
 8000d50:	40080000 	.word	0x40080000

08000d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_DMA_Init+0x3c>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <MX_DMA_Init+0x3c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_DMA_Init+0x3c>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	200b      	movs	r0, #11
 8000d7e:	f000 fd64 	bl	800184a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d82:	200b      	movs	r0, #11
 8000d84:	f000 fd7b 	bl	800187e <HAL_NVIC_EnableIRQ>

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58024400 	.word	0x58024400

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b40      	ldr	r3, [pc, #256]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_GPIO_Init+0x118>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc8:	4b38      	ldr	r3, [pc, #224]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a37      	ldr	r2, [pc, #220]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <MX_GPIO_Init+0x118>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <MX_GPIO_Init+0x118>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_GPIO_Init+0x118>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a28      	ldr	r2, [pc, #160]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a20      	ldr	r2, [pc, #128]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a11      	ldr	r2, [pc, #68]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_GPIO_Init+0x118>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <MX_GPIO_Init+0x11c>)
 8000e82:	f003 fe15 	bl	8004ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_GPIO_Init+0x11c>)
 8000e9e:	f003 fc57 	bl	8004750 <HAL_GPIO_Init>

}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58021000 	.word	0x58021000

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a59      	ldr	r2, [pc, #356]	; (8001078 <HAL_ETH_MspInit+0x184>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	f040 80ab 	bne.w	800106e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1e:	4a57      	ldr	r2, [pc, #348]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f28:	4b54      	ldr	r3, [pc, #336]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f46:	4b4d      	ldr	r3, [pc, #308]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f54:	4b49      	ldr	r3, [pc, #292]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f64:	4b45      	ldr	r3, [pc, #276]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	4a39      	ldr	r2, [pc, #228]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	4a31      	ldr	r2, [pc, #196]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fea:	2332      	movs	r3, #50	; 0x32
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ffa:	230b      	movs	r3, #11
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <HAL_ETH_MspInit+0x18c>)
 8001006:	f003 fba3 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800100a:	2386      	movs	r3, #134	; 0x86
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101a:	230b      	movs	r3, #11
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <HAL_ETH_MspInit+0x190>)
 8001026:	f003 fb93 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103c:	230b      	movs	r3, #11
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <HAL_ETH_MspInit+0x194>)
 8001048:	f003 fb82 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800104c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105e:	230b      	movs	r3, #11
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <HAL_ETH_MspInit+0x198>)
 800106a:	f003 fb71 	bl	8004750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40028000 	.word	0x40028000
 800107c:	58024400 	.word	0x58024400
 8001080:	58020800 	.word	0x58020800
 8001084:	58020000 	.word	0x58020000
 8001088:	58020400 	.word	0x58020400
 800108c:	58021800 	.word	0x58021800

08001090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ba      	sub	sp, #232	; 0xe8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	22bc      	movs	r2, #188	; 0xbc
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 fb3d 	bl	8009730 <memset>
  if(hspi->Instance==SPI1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5a      	ldr	r2, [pc, #360]	; (8001224 <HAL_SPI_MspInit+0x194>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	f040 80ad 	bne.w	800121c <HAL_SPI_MspInit+0x18c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 36;
 80010cc:	2324      	movs	r3, #36	; 0x24
 80010ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 fe90 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 80010fe:	f7ff fed9 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001108:	4a47      	ldr	r2, [pc, #284]	; (8001228 <HAL_SPI_MspInit+0x198>)
 800110a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a38      	ldr	r2, [pc, #224]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_SPI_MspInit+0x198>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001174:	2305      	movs	r3, #5
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117e:	4619      	mov	r1, r3
 8001180:	482a      	ldr	r0, [pc, #168]	; (800122c <HAL_SPI_MspInit+0x19c>)
 8001182:	f003 fae5 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001186:	2320      	movs	r3, #32
 8001188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119e:	2305      	movs	r3, #5
 80011a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4821      	ldr	r0, [pc, #132]	; (8001230 <HAL_SPI_MspInit+0x1a0>)
 80011ac:	f003 fad0 	bl	8004750 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_SPI_MspInit+0x1a8>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011b8:	2226      	movs	r2, #38	; 0x26
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 80011f2:	f000 fb5f 	bl	80018b4 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 80011fc:	f7ff fe5a 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 8001204:	679a      	str	r2, [r3, #120]	; 0x78
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_SPI_MspInit+0x1a4>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2023      	movs	r0, #35	; 0x23
 8001212:	f000 fb1a 	bl	800184a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001216:	2023      	movs	r0, #35	; 0x23
 8001218:	f000 fb31 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	37e8      	adds	r7, #232	; 0xe8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40013000 	.word	0x40013000
 8001228:	58024400 	.word	0x58024400
 800122c:	58020000 	.word	0x58020000
 8001230:	58020400 	.word	0x58020400
 8001234:	240002b8 	.word	0x240002b8
 8001238:	40020010 	.word	0x40020010

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0b8      	sub	sp, #224	; 0xe0
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	22bc      	movs	r2, #188	; 0xbc
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f008 fa67 	bl	8009730 <memset>
  if(huart->Instance==USART3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_UART_MspInit+0xc0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d142      	bne.n	80012f2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fdcc 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001286:	f7ff fe15 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_UART_MspInit+0xc4>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_UART_MspInit+0xc4>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xc4>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_UART_MspInit+0xc4>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_UART_MspInit+0xc4>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_UART_MspInit+0xc4>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_UART_MspInit+0xc8>)
 80012ee:	f003 fa2f 	bl	8004750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	37e0      	adds	r7, #224	; 0xe0
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004800 	.word	0x40004800
 8001300:	58024400 	.word	0x58024400
 8001304:	58020c00 	.word	0x58020c00

08001308 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0b8      	sub	sp, #224	; 0xe0
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22bc      	movs	r2, #188	; 0xbc
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f008 fa01 	bl	8009730 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_PCD_MspInit+0x104>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d165      	bne.n	8001404 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001338:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800133c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800133e:	2301      	movs	r3, #1
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001342:	2318      	movs	r3, #24
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001346:	2302      	movs	r3, #2
 8001348:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800134a:	2304      	movs	r3, #4
 800134c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800134e:	2302      	movs	r3, #2
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800135c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4618      	mov	r0, r3
 800136a:	f004 fd55 	bl	8005e18 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001374:	f7ff fd9e 	bl	8000eb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001378:	f003 fd84 	bl	8004e84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_PCD_MspInit+0x108>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_PCD_MspInit+0x108>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_PCD_MspInit+0x108>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800139a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800139e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013b4:	230a      	movs	r3, #10
 80013b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013be:	4619      	mov	r1, r3
 80013c0:	4814      	ldr	r0, [pc, #80]	; (8001414 <HAL_PCD_MspInit+0x10c>)
 80013c2:	f003 f9c5 	bl	8004750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <HAL_PCD_MspInit+0x10c>)
 80013e2:	f003 f9b5 	bl	8004750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_PCD_MspInit+0x108>)
 80013e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_PCD_MspInit+0x108>)
 80013ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_PCD_MspInit+0x108>)
 80013f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	37e0      	adds	r7, #224	; 0xe0
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40080000 	.word	0x40080000
 8001410:	58024400 	.word	0x58024400
 8001414:	58020000 	.word	0x58020000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f8b2 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Stream0_IRQHandler+0x10>)
 8001472:	f001 fa2b 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	240002b8 	.word	0x240002b8

08001480 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <SPI1_IRQHandler+0x10>)
 8001486:	f006 fa7f 	bl	8007988 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	24000230 	.word	0x24000230

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001498:	f7ff f8a0 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	; (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f008 f903 	bl	80096cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff f9f9 	bl	80008bc <main>
  bx  lr
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014d4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80014d8:	08009aa8 	.word	0x08009aa8
  ldr r2, =_sbss
 80014dc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80014e0:	240008f4 	.word	0x240008f4

080014e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC3_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f9a0 	bl	8001834 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014f4:	f004 faba 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_Init+0x68>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	4913      	ldr	r1, [pc, #76]	; (8001554 <HAL_Init+0x6c>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_Init+0x68>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_Init+0x6c>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_Init+0x70>)
 800152a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_Init+0x74>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f814 	bl	8001560 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e002      	b.n	8001548 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001542:	f7ff fcbd 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	58024400 	.word	0x58024400
 8001554:	08009758 	.word	0x08009758
 8001558:	24000004 	.word	0x24000004
 800155c:	24000000 	.word	0x24000000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_InitTick+0x60>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e021      	b.n	80015b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_InitTick+0x64>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_InitTick+0x60>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f985 	bl	800189a <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f94f 	bl	800184a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x68>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2400000c 	.word	0x2400000c
 80015c4:	24000000 	.word	0x24000000
 80015c8:	24000008 	.word	0x24000008

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2400000c 	.word	0x2400000c
 80015f0:	240008f0 	.word	0x240008f0

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	240008f0 	.word	0x240008f0

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2400000c 	.word	0x2400000c

08001654 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetREVID+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0c1b      	lsrs	r3, r3, #16
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	5c001000 	.word	0x5c001000

0800166c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58000400 	.word	0x58000400

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <__NVIC_SetPriorityGrouping+0x40>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <__NVIC_SetPriorityGrouping+0x40>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	05fa0000 	.word	0x05fa0000

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <__NVIC_EnableIRQ+0x38>)
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	; (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	; (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001800:	d301      	bcc.n	8001806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001802:	2301      	movs	r3, #1
 8001804:	e00f      	b.n	8001826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <SysTick_Config+0x40>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180e:	210f      	movs	r1, #15
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f7ff ff8e 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SysTick_Config+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SysTick_Config+0x40>)
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010

08001834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff29 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff40 	bl	80016dc <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff33 	bl	80016f8 <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa4 	bl	80017f0 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fe9a 	bl	80015f4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e316      	b.n	8001efa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a66      	ldr	r2, [pc, #408]	; (8001a6c <HAL_DMA_Init+0x1b8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04a      	beq.n	800196c <HAL_DMA_Init+0xb8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_DMA_Init+0x1bc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d045      	beq.n	800196c <HAL_DMA_Init+0xb8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a63      	ldr	r2, [pc, #396]	; (8001a74 <HAL_DMA_Init+0x1c0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d040      	beq.n	800196c <HAL_DMA_Init+0xb8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a62      	ldr	r2, [pc, #392]	; (8001a78 <HAL_DMA_Init+0x1c4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d03b      	beq.n	800196c <HAL_DMA_Init+0xb8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a60      	ldr	r2, [pc, #384]	; (8001a7c <HAL_DMA_Init+0x1c8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d036      	beq.n	800196c <HAL_DMA_Init+0xb8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5f      	ldr	r2, [pc, #380]	; (8001a80 <HAL_DMA_Init+0x1cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d031      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5d      	ldr	r2, [pc, #372]	; (8001a84 <HAL_DMA_Init+0x1d0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d02c      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_DMA_Init+0x1d4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d027      	beq.n	800196c <HAL_DMA_Init+0xb8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a5a      	ldr	r2, [pc, #360]	; (8001a8c <HAL_DMA_Init+0x1d8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d022      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a59      	ldr	r2, [pc, #356]	; (8001a90 <HAL_DMA_Init+0x1dc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d01d      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_DMA_Init+0x1e0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d018      	beq.n	800196c <HAL_DMA_Init+0xb8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_DMA_Init+0x1e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_DMA_Init+0x1e8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00e      	beq.n	800196c <HAL_DMA_Init+0xb8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a53      	ldr	r2, [pc, #332]	; (8001aa0 <HAL_DMA_Init+0x1ec>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d009      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_DMA_Init+0x1f0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_DMA_Init+0xb8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <HAL_DMA_Init+0x1f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Init+0xbc>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_DMA_Init+0xbe>
 8001970:	2300      	movs	r3, #0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 813b 	beq.w	8001bee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <HAL_DMA_Init+0x1b8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d04a      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_DMA_Init+0x1bc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d045      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <HAL_DMA_Init+0x1c0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d040      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <HAL_DMA_Init+0x1c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d03b      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_DMA_Init+0x1c8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d036      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <HAL_DMA_Init+0x1cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d031      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2e      	ldr	r2, [pc, #184]	; (8001a84 <HAL_DMA_Init+0x1d0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d02c      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <HAL_DMA_Init+0x1d4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d027      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <HAL_DMA_Init+0x1d8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d022      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a2a      	ldr	r2, [pc, #168]	; (8001a90 <HAL_DMA_Init+0x1dc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d01d      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_DMA_Init+0x1e0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_DMA_Init+0x1e4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_DMA_Init+0x1e8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00e      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <HAL_DMA_Init+0x1ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d009      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_DMA_Init+0x1f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_DMA_Init+0x174>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <HAL_DMA_Init+0x1f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d108      	bne.n	8001a3a <HAL_DMA_Init+0x186>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_DMA_Init+0x196>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a4a:	e02f      	b.n	8001aac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4c:	f7ff fdd2 	bl	80015f4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d928      	bls.n	8001aac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e246      	b.n	8001efa <HAL_DMA_Init+0x646>
 8001a6c:	40020010 	.word	0x40020010
 8001a70:	40020028 	.word	0x40020028
 8001a74:	40020040 	.word	0x40020040
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	40020070 	.word	0x40020070
 8001a80:	40020088 	.word	0x40020088
 8001a84:	400200a0 	.word	0x400200a0
 8001a88:	400200b8 	.word	0x400200b8
 8001a8c:	40020410 	.word	0x40020410
 8001a90:	40020428 	.word	0x40020428
 8001a94:	40020440 	.word	0x40020440
 8001a98:	40020458 	.word	0x40020458
 8001a9c:	40020470 	.word	0x40020470
 8001aa0:	40020488 	.word	0x40020488
 8001aa4:	400204a0 	.word	0x400204a0
 8001aa8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1c8      	bne.n	8001a4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_DMA_Init+0x420>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ad2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b10:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_DMA_Init+0x424>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <HAL_DMA_Init+0x428>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1c:	d328      	bcc.n	8001b70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b28      	cmp	r3, #40	; 0x28
 8001b24:	d903      	bls.n	8001b2e <HAL_DMA_Init+0x27a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b2c:	d917      	bls.n	8001b5e <HAL_DMA_Init+0x2aa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b3e      	cmp	r3, #62	; 0x3e
 8001b34:	d903      	bls.n	8001b3e <HAL_DMA_Init+0x28a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b42      	cmp	r3, #66	; 0x42
 8001b3c:	d90f      	bls.n	8001b5e <HAL_DMA_Init+0x2aa>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b46      	cmp	r3, #70	; 0x46
 8001b44:	d903      	bls.n	8001b4e <HAL_DMA_Init+0x29a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b48      	cmp	r3, #72	; 0x48
 8001b4c:	d907      	bls.n	8001b5e <HAL_DMA_Init+0x2aa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b4e      	cmp	r3, #78	; 0x4e
 8001b54:	d905      	bls.n	8001b62 <HAL_DMA_Init+0x2ae>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b52      	cmp	r3, #82	; 0x52
 8001b5c:	d801      	bhi.n	8001b62 <HAL_DMA_Init+0x2ae>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_DMA_Init+0x2b0>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f023 0307 	bic.w	r3, r3, #7
 8001b86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d117      	bne.n	8001bca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00e      	beq.n	8001bca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f002 f821 	bl	8003bf4 <DMA_CheckFifoParam>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e197      	b.n	8001efa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f001 ff5c 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	223f      	movs	r2, #63	; 0x3f
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e0cd      	b.n	8001d8a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a3b      	ldr	r2, [pc, #236]	; (8001ce0 <HAL_DMA_Init+0x42c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_DMA_Init+0x430>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01d      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a38      	ldr	r2, [pc, #224]	; (8001ce8 <HAL_DMA_Init+0x434>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d018      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a36      	ldr	r2, [pc, #216]	; (8001cec <HAL_DMA_Init+0x438>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a35      	ldr	r2, [pc, #212]	; (8001cf0 <HAL_DMA_Init+0x43c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00e      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <HAL_DMA_Init+0x440>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <HAL_DMA_Init+0x444>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d004      	beq.n	8001c3e <HAL_DMA_Init+0x38a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_DMA_Init+0x448>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_DMA_Init+0x38e>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_Init+0x390>
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8097 	beq.w	8001d78 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <HAL_DMA_Init+0x42c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d021      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_DMA_Init+0x430>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01c      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <HAL_DMA_Init+0x434>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d017      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_DMA_Init+0x438>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d012      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <HAL_DMA_Init+0x43c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HAL_DMA_Init+0x440>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d008      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_DMA_Init+0x444>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_DMA_Init+0x3e4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_DMA_Init+0x448>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_DMA_Init+0x44c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b40      	cmp	r3, #64	; 0x40
 8001cc0:	d020      	beq.n	8001d04 <HAL_DMA_Init+0x450>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b80      	cmp	r3, #128	; 0x80
 8001cc8:	d102      	bne.n	8001cd0 <HAL_DMA_Init+0x41c>
 8001cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cce:	e01a      	b.n	8001d06 <HAL_DMA_Init+0x452>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e018      	b.n	8001d06 <HAL_DMA_Init+0x452>
 8001cd4:	fe10803f 	.word	0xfe10803f
 8001cd8:	5c001000 	.word	0x5c001000
 8001cdc:	ffff0000 	.word	0xffff0000
 8001ce0:	58025408 	.word	0x58025408
 8001ce4:	5802541c 	.word	0x5802541c
 8001ce8:	58025430 	.word	0x58025430
 8001cec:	58025444 	.word	0x58025444
 8001cf0:	58025458 	.word	0x58025458
 8001cf4:	5802546c 	.word	0x5802546c
 8001cf8:	58025480 	.word	0x58025480
 8001cfc:	58025494 	.word	0x58025494
 8001d00:	fffe000f 	.word	0xfffe000f
 8001d04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <HAL_DMA_Init+0x650>)
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	; (8001f08 <HAL_DMA_Init+0x654>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	009a      	lsls	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 fe97 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 8001d62:	4603      	mov	r3, r0
 8001d64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	e008      	b.n	8001d8a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2203      	movs	r2, #3
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0b7      	b.n	8001efa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a5f      	ldr	r2, [pc, #380]	; (8001f0c <HAL_DMA_Init+0x658>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d072      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5d      	ldr	r2, [pc, #372]	; (8001f10 <HAL_DMA_Init+0x65c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d06d      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5c      	ldr	r2, [pc, #368]	; (8001f14 <HAL_DMA_Init+0x660>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d068      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5a      	ldr	r2, [pc, #360]	; (8001f18 <HAL_DMA_Init+0x664>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d063      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a59      	ldr	r2, [pc, #356]	; (8001f1c <HAL_DMA_Init+0x668>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d05e      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_DMA_Init+0x66c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d059      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <HAL_DMA_Init+0x670>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d054      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a54      	ldr	r2, [pc, #336]	; (8001f28 <HAL_DMA_Init+0x674>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d04f      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_DMA_Init+0x678>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04a      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_DMA_Init+0x67c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d045      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_DMA_Init+0x680>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d040      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_DMA_Init+0x684>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d03b      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_DMA_Init+0x688>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d036      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	; (8001f40 <HAL_DMA_Init+0x68c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d031      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <HAL_DMA_Init+0x690>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d02c      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <HAL_DMA_Init+0x694>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d027      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_DMA_Init+0x698>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d022      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a45      	ldr	r2, [pc, #276]	; (8001f50 <HAL_DMA_Init+0x69c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a44      	ldr	r2, [pc, #272]	; (8001f54 <HAL_DMA_Init+0x6a0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d018      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <HAL_DMA_Init+0x6a4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a41      	ldr	r2, [pc, #260]	; (8001f5c <HAL_DMA_Init+0x6a8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a3f      	ldr	r2, [pc, #252]	; (8001f60 <HAL_DMA_Init+0x6ac>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a3e      	ldr	r2, [pc, #248]	; (8001f64 <HAL_DMA_Init+0x6b0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_Init+0x5c6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_DMA_Init+0x6b4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Init+0x5ca>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_DMA_Init+0x5cc>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f001 ff31 	bl	8003cec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b80      	cmp	r3, #128	; 0x80
 8001e90:	d102      	bne.n	8001e98 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_DMA_Init+0x624>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d80c      	bhi.n	8001ed8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f001 ffae 	bl	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	e008      	b.n	8001eea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	a7fdabf8 	.word	0xa7fdabf8
 8001f08:	cccccccd 	.word	0xcccccccd
 8001f0c:	40020010 	.word	0x40020010
 8001f10:	40020028 	.word	0x40020028
 8001f14:	40020040 	.word	0x40020040
 8001f18:	40020058 	.word	0x40020058
 8001f1c:	40020070 	.word	0x40020070
 8001f20:	40020088 	.word	0x40020088
 8001f24:	400200a0 	.word	0x400200a0
 8001f28:	400200b8 	.word	0x400200b8
 8001f2c:	40020410 	.word	0x40020410
 8001f30:	40020428 	.word	0x40020428
 8001f34:	40020440 	.word	0x40020440
 8001f38:	40020458 	.word	0x40020458
 8001f3c:	40020470 	.word	0x40020470
 8001f40:	40020488 	.word	0x40020488
 8001f44:	400204a0 	.word	0x400204a0
 8001f48:	400204b8 	.word	0x400204b8
 8001f4c:	58025408 	.word	0x58025408
 8001f50:	5802541c 	.word	0x5802541c
 8001f54:	58025430 	.word	0x58025430
 8001f58:	58025444 	.word	0x58025444
 8001f5c:	58025458 	.word	0x58025458
 8001f60:	5802546c 	.word	0x5802546c
 8001f64:	58025480 	.word	0x58025480
 8001f68:	58025494 	.word	0x58025494

08001f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e226      	b.n	80023d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Start_IT+0x2a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e21f      	b.n	80023d6 <HAL_DMA_Start_IT+0x46a>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	f040 820a 	bne.w	80023c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a68      	ldr	r2, [pc, #416]	; (8002160 <HAL_DMA_Start_IT+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04a      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a66      	ldr	r2, [pc, #408]	; (8002164 <HAL_DMA_Start_IT+0x1f8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d045      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a65      	ldr	r2, [pc, #404]	; (8002168 <HAL_DMA_Start_IT+0x1fc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d040      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_DMA_Start_IT+0x200>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d03b      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a62      	ldr	r2, [pc, #392]	; (8002170 <HAL_DMA_Start_IT+0x204>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d036      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a60      	ldr	r2, [pc, #384]	; (8002174 <HAL_DMA_Start_IT+0x208>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d031      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <HAL_DMA_Start_IT+0x20c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d02c      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_DMA_Start_IT+0x210>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d027      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a5c      	ldr	r2, [pc, #368]	; (8002180 <HAL_DMA_Start_IT+0x214>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d022      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <HAL_DMA_Start_IT+0x218>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01d      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a59      	ldr	r2, [pc, #356]	; (8002188 <HAL_DMA_Start_IT+0x21c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d018      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_DMA_Start_IT+0x220>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_DMA_Start_IT+0x224>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_DMA_Start_IT+0x228>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a53      	ldr	r2, [pc, #332]	; (8002198 <HAL_DMA_Start_IT+0x22c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Start_IT+0xee>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a51      	ldr	r2, [pc, #324]	; (800219c <HAL_DMA_Start_IT+0x230>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d108      	bne.n	800206c <HAL_DMA_Start_IT+0x100>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <HAL_DMA_Start_IT+0x110>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f001 fb58 	bl	8003738 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a34      	ldr	r2, [pc, #208]	; (8002160 <HAL_DMA_Start_IT+0x1f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d04a      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <HAL_DMA_Start_IT+0x1f8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d045      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a31      	ldr	r2, [pc, #196]	; (8002168 <HAL_DMA_Start_IT+0x1fc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d040      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a30      	ldr	r2, [pc, #192]	; (800216c <HAL_DMA_Start_IT+0x200>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d03b      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <HAL_DMA_Start_IT+0x204>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d036      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_DMA_Start_IT+0x208>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d031      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_DMA_Start_IT+0x20c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d02c      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2a      	ldr	r2, [pc, #168]	; (800217c <HAL_DMA_Start_IT+0x210>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d027      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_DMA_Start_IT+0x214>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d022      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_DMA_Start_IT+0x218>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d01d      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_DMA_Start_IT+0x21c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d018      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a24      	ldr	r2, [pc, #144]	; (800218c <HAL_DMA_Start_IT+0x220>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a22      	ldr	r2, [pc, #136]	; (8002190 <HAL_DMA_Start_IT+0x224>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00e      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a21      	ldr	r2, [pc, #132]	; (8002194 <HAL_DMA_Start_IT+0x228>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_DMA_Start_IT+0x22c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_DMA_Start_IT+0x1bc>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_DMA_Start_IT+0x230>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_DMA_Start_IT+0x1c0>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_DMA_Start_IT+0x1c2>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 021e 	bic.w	r2, r3, #30
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0216 	orr.w	r2, r2, #22
 8002144:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03e      	beq.n	80021cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0208 	orr.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e035      	b.n	80021cc <HAL_DMA_Start_IT+0x260>
 8002160:	40020010 	.word	0x40020010
 8002164:	40020028 	.word	0x40020028
 8002168:	40020040 	.word	0x40020040
 800216c:	40020058 	.word	0x40020058
 8002170:	40020070 	.word	0x40020070
 8002174:	40020088 	.word	0x40020088
 8002178:	400200a0 	.word	0x400200a0
 800217c:	400200b8 	.word	0x400200b8
 8002180:	40020410 	.word	0x40020410
 8002184:	40020428 	.word	0x40020428
 8002188:	40020440 	.word	0x40020440
 800218c:	40020458 	.word	0x40020458
 8002190:	40020470 	.word	0x40020470
 8002194:	40020488 	.word	0x40020488
 8002198:	400204a0 	.word	0x400204a0
 800219c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 020e 	bic.w	r2, r3, #14
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 020a 	orr.w	r2, r2, #10
 80021b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0204 	orr.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a83      	ldr	r2, [pc, #524]	; (80023e0 <HAL_DMA_Start_IT+0x474>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d072      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a82      	ldr	r2, [pc, #520]	; (80023e4 <HAL_DMA_Start_IT+0x478>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d06d      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_DMA_Start_IT+0x47c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d068      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7f      	ldr	r2, [pc, #508]	; (80023ec <HAL_DMA_Start_IT+0x480>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d063      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a7d      	ldr	r2, [pc, #500]	; (80023f0 <HAL_DMA_Start_IT+0x484>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d05e      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7c      	ldr	r2, [pc, #496]	; (80023f4 <HAL_DMA_Start_IT+0x488>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d059      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7a      	ldr	r2, [pc, #488]	; (80023f8 <HAL_DMA_Start_IT+0x48c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d054      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a79      	ldr	r2, [pc, #484]	; (80023fc <HAL_DMA_Start_IT+0x490>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d04f      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_DMA_Start_IT+0x494>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d04a      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a76      	ldr	r2, [pc, #472]	; (8002404 <HAL_DMA_Start_IT+0x498>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d045      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a74      	ldr	r2, [pc, #464]	; (8002408 <HAL_DMA_Start_IT+0x49c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d040      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a73      	ldr	r2, [pc, #460]	; (800240c <HAL_DMA_Start_IT+0x4a0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d03b      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a71      	ldr	r2, [pc, #452]	; (8002410 <HAL_DMA_Start_IT+0x4a4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d036      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a70      	ldr	r2, [pc, #448]	; (8002414 <HAL_DMA_Start_IT+0x4a8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d031      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <HAL_DMA_Start_IT+0x4ac>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02c      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6d      	ldr	r2, [pc, #436]	; (800241c <HAL_DMA_Start_IT+0x4b0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d027      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <HAL_DMA_Start_IT+0x4b4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_DMA_Start_IT+0x4b8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01d      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a68      	ldr	r2, [pc, #416]	; (8002428 <HAL_DMA_Start_IT+0x4bc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d018      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a67      	ldr	r2, [pc, #412]	; (800242c <HAL_DMA_Start_IT+0x4c0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <HAL_DMA_Start_IT+0x4c4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00e      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a64      	ldr	r2, [pc, #400]	; (8002434 <HAL_DMA_Start_IT+0x4c8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a62      	ldr	r2, [pc, #392]	; (8002438 <HAL_DMA_Start_IT+0x4cc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Start_IT+0x350>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a61      	ldr	r2, [pc, #388]	; (800243c <HAL_DMA_Start_IT+0x4d0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_DMA_Start_IT+0x354>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_DMA_Start_IT+0x356>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01a      	beq.n	80022fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_DMA_Start_IT+0x474>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a36      	ldr	r2, [pc, #216]	; (80023e4 <HAL_DMA_Start_IT+0x478>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	; (80023e8 <HAL_DMA_Start_IT+0x47c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <HAL_DMA_Start_IT+0x480>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <HAL_DMA_Start_IT+0x484>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_DMA_Start_IT+0x488>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_DMA_Start_IT+0x48c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_DMA_Start_IT+0x490>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <HAL_DMA_Start_IT+0x494>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_DMA_Start_IT+0x498>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_DMA_Start_IT+0x49c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_DMA_Start_IT+0x4a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_DMA_Start_IT+0x4a4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_DMA_Start_IT+0x4a8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_DMA_Start_IT+0x4ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Start_IT+0x430>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_DMA_Start_IT+0x4b0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <HAL_DMA_Start_IT+0x442>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e012      	b.n	80023d4 <HAL_DMA_Start_IT+0x468>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e009      	b.n	80023d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40020010 	.word	0x40020010
 80023e4:	40020028 	.word	0x40020028
 80023e8:	40020040 	.word	0x40020040
 80023ec:	40020058 	.word	0x40020058
 80023f0:	40020070 	.word	0x40020070
 80023f4:	40020088 	.word	0x40020088
 80023f8:	400200a0 	.word	0x400200a0
 80023fc:	400200b8 	.word	0x400200b8
 8002400:	40020410 	.word	0x40020410
 8002404:	40020428 	.word	0x40020428
 8002408:	40020440 	.word	0x40020440
 800240c:	40020458 	.word	0x40020458
 8002410:	40020470 	.word	0x40020470
 8002414:	40020488 	.word	0x40020488
 8002418:	400204a0 	.word	0x400204a0
 800241c:	400204b8 	.word	0x400204b8
 8002420:	58025408 	.word	0x58025408
 8002424:	5802541c 	.word	0x5802541c
 8002428:	58025430 	.word	0x58025430
 800242c:	58025444 	.word	0x58025444
 8002430:	58025458 	.word	0x58025458
 8002434:	5802546c 	.word	0x5802546c
 8002438:	58025480 	.word	0x58025480
 800243c:	58025494 	.word	0x58025494

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e237      	b.n	80028c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e22c      	b.n	80028c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5c      	ldr	r2, [pc, #368]	; (80025e0 <HAL_DMA_Abort_IT+0x1a0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04a      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_DMA_Abort_IT+0x1a4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d045      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a59      	ldr	r2, [pc, #356]	; (80025e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d040      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_DMA_Abort_IT+0x1ac>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d03b      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_DMA_Abort_IT+0x1b0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d036      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_DMA_Abort_IT+0x1b4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <HAL_DMA_Abort_IT+0x1b8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_DMA_Abort_IT+0x1bc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_DMA_Abort_IT+0x1c0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4f      	ldr	r2, [pc, #316]	; (8002604 <HAL_DMA_Abort_IT+0x1c4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01d      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_DMA_Abort_IT+0x1c8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a4c      	ldr	r2, [pc, #304]	; (800260c <HAL_DMA_Abort_IT+0x1cc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a4a      	ldr	r2, [pc, #296]	; (8002610 <HAL_DMA_Abort_IT+0x1d0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_DMA_Abort_IT+0x1d4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a47      	ldr	r2, [pc, #284]	; (8002618 <HAL_DMA_Abort_IT+0x1d8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a46      	ldr	r2, [pc, #280]	; (800261c <HAL_DMA_Abort_IT+0x1dc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_DMA_Abort_IT+0xcc>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_DMA_Abort_IT+0xce>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8086 	beq.w	8002620 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2f      	ldr	r2, [pc, #188]	; (80025e0 <HAL_DMA_Abort_IT+0x1a0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <HAL_DMA_Abort_IT+0x1a4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_DMA_Abort_IT+0x1ac>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a29      	ldr	r2, [pc, #164]	; (80025f0 <HAL_DMA_Abort_IT+0x1b0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <HAL_DMA_Abort_IT+0x1b4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_DMA_Abort_IT+0x1b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <HAL_DMA_Abort_IT+0x1bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <HAL_DMA_Abort_IT+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_DMA_Abort_IT+0x1c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_DMA_Abort_IT+0x1c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_DMA_Abort_IT+0x1cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_DMA_Abort_IT+0x1d0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_DMA_Abort_IT+0x1d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_DMA_Abort_IT+0x1d8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Abort_IT+0x17c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a19      	ldr	r2, [pc, #100]	; (800261c <HAL_DMA_Abort_IT+0x1dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <HAL_DMA_Abort_IT+0x18e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e178      	b.n	80028c0 <HAL_DMA_Abort_IT+0x480>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e16f      	b.n	80028c0 <HAL_DMA_Abort_IT+0x480>
 80025e0:	40020010 	.word	0x40020010
 80025e4:	40020028 	.word	0x40020028
 80025e8:	40020040 	.word	0x40020040
 80025ec:	40020058 	.word	0x40020058
 80025f0:	40020070 	.word	0x40020070
 80025f4:	40020088 	.word	0x40020088
 80025f8:	400200a0 	.word	0x400200a0
 80025fc:	400200b8 	.word	0x400200b8
 8002600:	40020410 	.word	0x40020410
 8002604:	40020428 	.word	0x40020428
 8002608:	40020440 	.word	0x40020440
 800260c:	40020458 	.word	0x40020458
 8002610:	40020470 	.word	0x40020470
 8002614:	40020488 	.word	0x40020488
 8002618:	400204a0 	.word	0x400204a0
 800261c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020e 	bic.w	r2, r2, #14
 800262e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6c      	ldr	r2, [pc, #432]	; (80027e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d04a      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <HAL_DMA_Abort_IT+0x3ac>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d045      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <HAL_DMA_Abort_IT+0x3b0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d040      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a68      	ldr	r2, [pc, #416]	; (80027f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d03b      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a66      	ldr	r2, [pc, #408]	; (80027f8 <HAL_DMA_Abort_IT+0x3b8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d036      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a65      	ldr	r2, [pc, #404]	; (80027fc <HAL_DMA_Abort_IT+0x3bc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a63      	ldr	r2, [pc, #396]	; (8002800 <HAL_DMA_Abort_IT+0x3c0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02c      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a62      	ldr	r2, [pc, #392]	; (8002804 <HAL_DMA_Abort_IT+0x3c4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d027      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a60      	ldr	r2, [pc, #384]	; (8002808 <HAL_DMA_Abort_IT+0x3c8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d022      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a5f      	ldr	r2, [pc, #380]	; (800280c <HAL_DMA_Abort_IT+0x3cc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d01d      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <HAL_DMA_Abort_IT+0x3d0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d018      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a5c      	ldr	r2, [pc, #368]	; (8002814 <HAL_DMA_Abort_IT+0x3d4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_DMA_Abort_IT+0x3d8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00e      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a59      	ldr	r2, [pc, #356]	; (800281c <HAL_DMA_Abort_IT+0x3dc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a57      	ldr	r2, [pc, #348]	; (8002820 <HAL_DMA_Abort_IT+0x3e0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x290>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a56      	ldr	r2, [pc, #344]	; (8002824 <HAL_DMA_Abort_IT+0x3e4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <HAL_DMA_Abort_IT+0x2a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_DMA_Abort_IT+0x2b2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_DMA_Abort_IT+0x3a8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d072      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <HAL_DMA_Abort_IT+0x3ac>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d06d      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <HAL_DMA_Abort_IT+0x3b0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d068      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d063      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d05e      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a34      	ldr	r2, [pc, #208]	; (80027fc <HAL_DMA_Abort_IT+0x3bc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d059      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a33      	ldr	r2, [pc, #204]	; (8002800 <HAL_DMA_Abort_IT+0x3c0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d054      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a31      	ldr	r2, [pc, #196]	; (8002804 <HAL_DMA_Abort_IT+0x3c4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d04f      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a30      	ldr	r2, [pc, #192]	; (8002808 <HAL_DMA_Abort_IT+0x3c8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04a      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <HAL_DMA_Abort_IT+0x3cc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d045      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <HAL_DMA_Abort_IT+0x3d0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d040      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_DMA_Abort_IT+0x3d4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d03b      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_DMA_Abort_IT+0x3d8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d036      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_DMA_Abort_IT+0x3dc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d031      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_DMA_Abort_IT+0x3e0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d02c      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <HAL_DMA_Abort_IT+0x3e4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d027      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <HAL_DMA_Abort_IT+0x3e8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d022      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <HAL_DMA_Abort_IT+0x3ec>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a21      	ldr	r2, [pc, #132]	; (8002830 <HAL_DMA_Abort_IT+0x3f0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d018      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_DMA_Abort_IT+0x3f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <HAL_DMA_Abort_IT+0x3f8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00e      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_DMA_Abort_IT+0x3fc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_DMA_Abort_IT+0x400>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_DMA_Abort_IT+0x404>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d132      	bne.n	8002848 <HAL_DMA_Abort_IT+0x408>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e031      	b.n	800284a <HAL_DMA_Abort_IT+0x40a>
 80027e6:	bf00      	nop
 80027e8:	40020010 	.word	0x40020010
 80027ec:	40020028 	.word	0x40020028
 80027f0:	40020040 	.word	0x40020040
 80027f4:	40020058 	.word	0x40020058
 80027f8:	40020070 	.word	0x40020070
 80027fc:	40020088 	.word	0x40020088
 8002800:	400200a0 	.word	0x400200a0
 8002804:	400200b8 	.word	0x400200b8
 8002808:	40020410 	.word	0x40020410
 800280c:	40020428 	.word	0x40020428
 8002810:	40020440 	.word	0x40020440
 8002814:	40020458 	.word	0x40020458
 8002818:	40020470 	.word	0x40020470
 800281c:	40020488 	.word	0x40020488
 8002820:	400204a0 	.word	0x400204a0
 8002824:	400204b8 	.word	0x400204b8
 8002828:	58025408 	.word	0x58025408
 800282c:	5802541c 	.word	0x5802541c
 8002830:	58025430 	.word	0x58025430
 8002834:	58025444 	.word	0x58025444
 8002838:	58025458 	.word	0x58025458
 800283c:	5802546c 	.word	0x5802546c
 8002840:	58025480 	.word	0x58025480
 8002844:	58025494 	.word	0x58025494
 8002848:	2300      	movs	r3, #0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d028      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800285c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800287c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800289e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_DMA_IRQHandler+0x1ac>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_DMA_IRQHandler+0x1b0>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5f      	ldr	r2, [pc, #380]	; (8002a80 <HAL_DMA_IRQHandler+0x1b4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04a      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_DMA_IRQHandler+0x1b8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d045      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5c      	ldr	r2, [pc, #368]	; (8002a88 <HAL_DMA_IRQHandler+0x1bc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d040      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <HAL_DMA_IRQHandler+0x1c0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d03b      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a59      	ldr	r2, [pc, #356]	; (8002a90 <HAL_DMA_IRQHandler+0x1c4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d036      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_DMA_IRQHandler+0x1c8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d031      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_DMA_IRQHandler+0x1cc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d02c      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_DMA_IRQHandler+0x1d0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d027      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_DMA_IRQHandler+0x1d4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a51      	ldr	r2, [pc, #324]	; (8002aa4 <HAL_DMA_IRQHandler+0x1d8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <HAL_DMA_IRQHandler+0x1dc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_DMA_IRQHandler+0x1e0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <HAL_DMA_IRQHandler+0x1e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_DMA_IRQHandler+0x1ec>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_DMA_IRQHandler+0x1f0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_IRQHandler+0xd6>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 842b 	beq.w	8003200 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2208      	movs	r2, #8
 80029b4:	409a      	lsls	r2, r3
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80a2 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <HAL_DMA_IRQHandler+0x1b4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04a      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2d      	ldr	r2, [pc, #180]	; (8002a84 <HAL_DMA_IRQHandler+0x1b8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d045      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <HAL_DMA_IRQHandler+0x1bc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d040      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <HAL_DMA_IRQHandler+0x1c0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d03b      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_DMA_IRQHandler+0x1c4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d036      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <HAL_DMA_IRQHandler+0x1c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d031      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_DMA_IRQHandler+0x1cc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d02c      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <HAL_DMA_IRQHandler+0x1d0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d027      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_DMA_IRQHandler+0x1d4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d022      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <HAL_DMA_IRQHandler+0x1d8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d01d      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_DMA_IRQHandler+0x1dc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d018      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_DMA_IRQHandler+0x1e0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_DMA_IRQHandler+0x1e4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <HAL_DMA_IRQHandler+0x1e8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_DMA_IRQHandler+0x1ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_DMA_IRQHandler+0x1f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d12f      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x1f4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e02e      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x208>
 8002a76:	bf00      	nop
 8002a78:	24000000 	.word	0x24000000
 8002a7c:	1b4e81b5 	.word	0x1b4e81b5
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2208      	movs	r2, #8
 8002af2:	409a      	lsls	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06e      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04a      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a67      	ldr	r2, [pc, #412]	; (8002cc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d045      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_DMA_IRQHandler+0x400>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d040      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <HAL_DMA_IRQHandler+0x404>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d03b      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_DMA_IRQHandler+0x408>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d036      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a61      	ldr	r2, [pc, #388]	; (8002cd8 <HAL_DMA_IRQHandler+0x40c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d031      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_DMA_IRQHandler+0x410>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d02c      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_DMA_IRQHandler+0x414>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d027      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5d      	ldr	r2, [pc, #372]	; (8002ce4 <HAL_DMA_IRQHandler+0x418>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5b      	ldr	r2, [pc, #364]	; (8002ce8 <HAL_DMA_IRQHandler+0x41c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_DMA_IRQHandler+0x420>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_DMA_IRQHandler+0x424>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a57      	ldr	r2, [pc, #348]	; (8002cf4 <HAL_DMA_IRQHandler+0x428>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a55      	ldr	r2, [pc, #340]	; (8002cf8 <HAL_DMA_IRQHandler+0x42c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_DMA_IRQHandler+0x430>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_DMA_IRQHandler+0x434>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x304>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e003      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	f043 0202 	orr.w	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 808f 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d04a      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d045      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_DMA_IRQHandler+0x400>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d040      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_IRQHandler+0x404>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d03b      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_DMA_IRQHandler+0x408>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d036      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_IRQHandler+0x40c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d031      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_DMA_IRQHandler+0x410>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d02c      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_IRQHandler+0x414>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_DMA_IRQHandler+0x418>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d022      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_IRQHandler+0x41c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01d      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_DMA_IRQHandler+0x420>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_IRQHandler+0x424>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_DMA_IRQHandler+0x428>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00e      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_DMA_IRQHandler+0x42c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_DMA_IRQHandler+0x430>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_DMA_IRQHandler+0x434>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12a      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x438>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e023      	b.n	8002d0c <HAL_DMA_IRQHandler+0x440>
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2210      	movs	r2, #16
 8002d36:	409a      	lsls	r2, r3
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a6 	beq.w	8002e8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a85      	ldr	r2, [pc, #532]	; (8002f5c <HAL_DMA_IRQHandler+0x690>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04a      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a83      	ldr	r2, [pc, #524]	; (8002f60 <HAL_DMA_IRQHandler+0x694>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d045      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a82      	ldr	r2, [pc, #520]	; (8002f64 <HAL_DMA_IRQHandler+0x698>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d040      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_DMA_IRQHandler+0x69c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d03b      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7f      	ldr	r2, [pc, #508]	; (8002f6c <HAL_DMA_IRQHandler+0x6a0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d036      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7d      	ldr	r2, [pc, #500]	; (8002f70 <HAL_DMA_IRQHandler+0x6a4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d031      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7c      	ldr	r2, [pc, #496]	; (8002f74 <HAL_DMA_IRQHandler+0x6a8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d02c      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_DMA_IRQHandler+0x6ac>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d027      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a79      	ldr	r2, [pc, #484]	; (8002f7c <HAL_DMA_IRQHandler+0x6b0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_DMA_IRQHandler+0x6b4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a76      	ldr	r2, [pc, #472]	; (8002f84 <HAL_DMA_IRQHandler+0x6b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <HAL_DMA_IRQHandler+0x6bc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a73      	ldr	r2, [pc, #460]	; (8002f8c <HAL_DMA_IRQHandler+0x6c0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a71      	ldr	r2, [pc, #452]	; (8002f90 <HAL_DMA_IRQHandler+0x6c4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a70      	ldr	r2, [pc, #448]	; (8002f94 <HAL_DMA_IRQHandler+0x6c8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_DMA_IRQHandler+0x6cc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10a      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x52c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e009      	b.n	8002e0c <HAL_DMA_IRQHandler+0x540>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03e      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2210      	movs	r2, #16
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d108      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d024      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
 8002e4c:	e01f      	b.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
 8002e5e:	e016      	b.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d107      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0208 	bic.w	r2, r2, #8
 8002e7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2220      	movs	r2, #32
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8110 	beq.w	80030c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2c      	ldr	r2, [pc, #176]	; (8002f5c <HAL_DMA_IRQHandler+0x690>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d04a      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_DMA_IRQHandler+0x694>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d045      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_DMA_IRQHandler+0x698>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d040      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <HAL_DMA_IRQHandler+0x69c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d03b      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_DMA_IRQHandler+0x6a0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d036      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_DMA_IRQHandler+0x6a4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d031      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_DMA_IRQHandler+0x6a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02c      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_DMA_IRQHandler+0x6ac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d027      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_DMA_IRQHandler+0x6b0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_DMA_IRQHandler+0x6b4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d01d      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_DMA_IRQHandler+0x6b8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_DMA_IRQHandler+0x6bc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_DMA_IRQHandler+0x6c0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_DMA_IRQHandler+0x6c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_DMA_IRQHandler+0x6c8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_DMA_IRQHandler+0x6cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d12b      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x6d0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e02a      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x6e4>
 8002f5a:	bf00      	nop
 8002f5c:	40020010 	.word	0x40020010
 8002f60:	40020028 	.word	0x40020028
 8002f64:	40020040 	.word	0x40020040
 8002f68:	40020058 	.word	0x40020058
 8002f6c:	40020070 	.word	0x40020070
 8002f70:	40020088 	.word	0x40020088
 8002f74:	400200a0 	.word	0x400200a0
 8002f78:	400200b8 	.word	0x400200b8
 8002f7c:	40020410 	.word	0x40020410
 8002f80:	40020428 	.word	0x40020428
 8002f84:	40020440 	.word	0x40020440
 8002f88:	40020458 	.word	0x40020458
 8002f8c:	40020470 	.word	0x40020470
 8002f90:	40020488 	.word	0x40020488
 8002f94:	400204a0 	.word	0x400204a0
 8002f98:	400204b8 	.word	0x400204b8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8087 	beq.w	80030c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d139      	bne.n	8003046 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0216 	bic.w	r2, r2, #22
 8002fe0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_DMA_IRQHandler+0x736>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0208 	bic.w	r2, r2, #8
 8003010:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	223f      	movs	r2, #63	; 0x3f
 800301c:	409a      	lsls	r2, r3
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 834a 	beq.w	80036d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
          }
          return;
 8003044:	e344      	b.n	80036d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d018      	beq.n	8003086 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02c      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
 8003072:	e027      	b.n	80030c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d023      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e01e      	b.n	80030c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10f      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0210 	bic.w	r2, r2, #16
 80030a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8306 	beq.w	80036da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8088 	beq.w	80031ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a7a      	ldr	r2, [pc, #488]	; (80032d4 <HAL_DMA_IRQHandler+0xa08>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04a      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a79      	ldr	r2, [pc, #484]	; (80032d8 <HAL_DMA_IRQHandler+0xa0c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d045      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a77      	ldr	r2, [pc, #476]	; (80032dc <HAL_DMA_IRQHandler+0xa10>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a76      	ldr	r2, [pc, #472]	; (80032e0 <HAL_DMA_IRQHandler+0xa14>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d03b      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a74      	ldr	r2, [pc, #464]	; (80032e4 <HAL_DMA_IRQHandler+0xa18>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d036      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <HAL_DMA_IRQHandler+0xa1c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d031      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a71      	ldr	r2, [pc, #452]	; (80032ec <HAL_DMA_IRQHandler+0xa20>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02c      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a70      	ldr	r2, [pc, #448]	; (80032f0 <HAL_DMA_IRQHandler+0xa24>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d027      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_DMA_IRQHandler+0xa28>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6d      	ldr	r2, [pc, #436]	; (80032f8 <HAL_DMA_IRQHandler+0xa2c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01d      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6b      	ldr	r2, [pc, #428]	; (80032fc <HAL_DMA_IRQHandler+0xa30>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_DMA_IRQHandler+0xa34>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_DMA_IRQHandler+0xa38>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_DMA_IRQHandler+0xa3c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	; (800330c <HAL_DMA_IRQHandler+0xa40>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a64      	ldr	r2, [pc, #400]	; (8003310 <HAL_DMA_IRQHandler+0xa44>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_DMA_IRQHandler+0x8ca>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <HAL_DMA_IRQHandler+0x8da>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d307      	bcc.n	80031c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f2      	bne.n	80031a6 <HAL_DMA_IRQHandler+0x8da>
 80031c0:	e000      	b.n	80031c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031da:	e003      	b.n	80031e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8272 	beq.w	80036da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
 80031fe:	e26c      	b.n	80036da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a43      	ldr	r2, [pc, #268]	; (8003314 <HAL_DMA_IRQHandler+0xa48>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a42      	ldr	r2, [pc, #264]	; (8003318 <HAL_DMA_IRQHandler+0xa4c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a40      	ldr	r2, [pc, #256]	; (800331c <HAL_DMA_IRQHandler+0xa50>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3f      	ldr	r2, [pc, #252]	; (8003320 <HAL_DMA_IRQHandler+0xa54>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <HAL_DMA_IRQHandler+0xa58>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_DMA_IRQHandler+0xa5c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_DMA_IRQHandler+0xa60>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_IRQHandler+0x984>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a39      	ldr	r2, [pc, #228]	; (8003330 <HAL_DMA_IRQHandler+0xa64>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_DMA_IRQHandler+0x988>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_DMA_IRQHandler+0x98a>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 823f 	beq.w	80036da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2204      	movs	r2, #4
 800326e:	409a      	lsls	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80cd 	beq.w	8003414 <HAL_DMA_IRQHandler+0xb48>
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80c7 	beq.w	8003414 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2204      	movs	r2, #4
 8003290:	409a      	lsls	r2, r3
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d049      	beq.n	8003334 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8210 	beq.w	80036d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032bc:	e20a      	b.n	80036d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8206 	beq.w	80036d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d0:	e200      	b.n	80036d4 <HAL_DMA_IRQHandler+0xe08>
 80032d2:	bf00      	nop
 80032d4:	40020010 	.word	0x40020010
 80032d8:	40020028 	.word	0x40020028
 80032dc:	40020040 	.word	0x40020040
 80032e0:	40020058 	.word	0x40020058
 80032e4:	40020070 	.word	0x40020070
 80032e8:	40020088 	.word	0x40020088
 80032ec:	400200a0 	.word	0x400200a0
 80032f0:	400200b8 	.word	0x400200b8
 80032f4:	40020410 	.word	0x40020410
 80032f8:	40020428 	.word	0x40020428
 80032fc:	40020440 	.word	0x40020440
 8003300:	40020458 	.word	0x40020458
 8003304:	40020470 	.word	0x40020470
 8003308:	40020488 	.word	0x40020488
 800330c:	400204a0 	.word	0x400204a0
 8003310:	400204b8 	.word	0x400204b8
 8003314:	58025408 	.word	0x58025408
 8003318:	5802541c 	.word	0x5802541c
 800331c:	58025430 	.word	0x58025430
 8003320:	58025444 	.word	0x58025444
 8003324:	58025458 	.word	0x58025458
 8003328:	5802546c 	.word	0x5802546c
 800332c:	58025480 	.word	0x58025480
 8003330:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d160      	bne.n	8003400 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7f      	ldr	r2, [pc, #508]	; (8003540 <HAL_DMA_IRQHandler+0xc74>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7d      	ldr	r2, [pc, #500]	; (8003544 <HAL_DMA_IRQHandler+0xc78>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7c      	ldr	r2, [pc, #496]	; (8003548 <HAL_DMA_IRQHandler+0xc7c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <HAL_DMA_IRQHandler+0xc80>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a79      	ldr	r2, [pc, #484]	; (8003550 <HAL_DMA_IRQHandler+0xc84>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_DMA_IRQHandler+0xc88>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a76      	ldr	r2, [pc, #472]	; (8003558 <HAL_DMA_IRQHandler+0xc8c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a74      	ldr	r2, [pc, #464]	; (800355c <HAL_DMA_IRQHandler+0xc90>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a73      	ldr	r2, [pc, #460]	; (8003560 <HAL_DMA_IRQHandler+0xc94>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a71      	ldr	r2, [pc, #452]	; (8003564 <HAL_DMA_IRQHandler+0xc98>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_DMA_IRQHandler+0xc9c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_DMA_IRQHandler+0xca0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6d      	ldr	r2, [pc, #436]	; (8003570 <HAL_DMA_IRQHandler+0xca4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6b      	ldr	r2, [pc, #428]	; (8003574 <HAL_DMA_IRQHandler+0xca8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <HAL_DMA_IRQHandler+0xcac>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a68      	ldr	r2, [pc, #416]	; (800357c <HAL_DMA_IRQHandler+0xcb0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <HAL_DMA_IRQHandler+0xb24>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_DMA_IRQHandler+0xb34>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8165 	beq.w	80036d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003412:	e15f      	b.n	80036d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2202      	movs	r2, #2
 800341e:	409a      	lsls	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c5 	beq.w	80035b4 <HAL_DMA_IRQHandler+0xce8>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80bf 	beq.w	80035b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2202      	movs	r2, #2
 8003440:	409a      	lsls	r2, r3
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d018      	beq.n	8003482 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 813a 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800346c:	e134      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8130 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003480:	e12a      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 8089 	bne.w	80035a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <HAL_DMA_IRQHandler+0xc74>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d04a      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_DMA_IRQHandler+0xc78>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d045      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_DMA_IRQHandler+0xc7c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d040      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <HAL_DMA_IRQHandler+0xc80>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d03b      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_DMA_IRQHandler+0xc84>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d036      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_DMA_IRQHandler+0xc88>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d031      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_DMA_IRQHandler+0xc8c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d02c      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_DMA_IRQHandler+0xc90>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d027      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_DMA_IRQHandler+0xc94>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d022      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_DMA_IRQHandler+0xc98>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01d      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_DMA_IRQHandler+0xc9c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d018      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1a      	ldr	r2, [pc, #104]	; (800356c <HAL_DMA_IRQHandler+0xca0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_DMA_IRQHandler+0xca4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_DMA_IRQHandler+0xca8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <HAL_DMA_IRQHandler+0xcac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_DMA_IRQHandler+0xc62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <HAL_DMA_IRQHandler+0xcb0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d128      	bne.n	8003580 <HAL_DMA_IRQHandler+0xcb4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0214 	bic.w	r2, r2, #20
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e027      	b.n	8003590 <HAL_DMA_IRQHandler+0xcc4>
 8003540:	40020010 	.word	0x40020010
 8003544:	40020028 	.word	0x40020028
 8003548:	40020040 	.word	0x40020040
 800354c:	40020058 	.word	0x40020058
 8003550:	40020070 	.word	0x40020070
 8003554:	40020088 	.word	0x40020088
 8003558:	400200a0 	.word	0x400200a0
 800355c:	400200b8 	.word	0x400200b8
 8003560:	40020410 	.word	0x40020410
 8003564:	40020428 	.word	0x40020428
 8003568:	40020440 	.word	0x40020440
 800356c:	40020458 	.word	0x40020458
 8003570:	40020470 	.word	0x40020470
 8003574:	40020488 	.word	0x40020488
 8003578:	400204a0 	.word	0x400204a0
 800357c:	400204b8 	.word	0x400204b8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 020a 	bic.w	r2, r2, #10
 800358e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8097 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b2:	e091      	b.n	80036d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2208      	movs	r2, #8
 80035be:	409a      	lsls	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8088 	beq.w	80036da <HAL_DMA_IRQHandler+0xe0e>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8082 	beq.w	80036da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a41      	ldr	r2, [pc, #260]	; (80036e0 <HAL_DMA_IRQHandler+0xe14>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d04a      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3f      	ldr	r2, [pc, #252]	; (80036e4 <HAL_DMA_IRQHandler+0xe18>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d045      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3e      	ldr	r2, [pc, #248]	; (80036e8 <HAL_DMA_IRQHandler+0xe1c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d040      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <HAL_DMA_IRQHandler+0xe20>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d03b      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_DMA_IRQHandler+0xe24>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d036      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <HAL_DMA_IRQHandler+0xe28>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d031      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a38      	ldr	r2, [pc, #224]	; (80036f8 <HAL_DMA_IRQHandler+0xe2c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d02c      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a36      	ldr	r2, [pc, #216]	; (80036fc <HAL_DMA_IRQHandler+0xe30>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d027      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a35      	ldr	r2, [pc, #212]	; (8003700 <HAL_DMA_IRQHandler+0xe34>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a33      	ldr	r2, [pc, #204]	; (8003704 <HAL_DMA_IRQHandler+0xe38>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01d      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_DMA_IRQHandler+0xe3c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d018      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a30      	ldr	r2, [pc, #192]	; (800370c <HAL_DMA_IRQHandler+0xe40>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <HAL_DMA_IRQHandler+0xe44>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2d      	ldr	r2, [pc, #180]	; (8003714 <HAL_DMA_IRQHandler+0xe48>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <HAL_DMA_IRQHandler+0xe4c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <HAL_DMA_IRQHandler+0xe50>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <HAL_DMA_IRQHandler+0xdbc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 021c 	bic.w	r2, r2, #28
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e007      	b.n	8003698 <HAL_DMA_IRQHandler+0xdcc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020e 	bic.w	r2, r2, #14
 8003696:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2201      	movs	r2, #1
 80036a2:	409a      	lsls	r2, r3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
 80036ce:	e004      	b.n	80036da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036d0:	bf00      	nop
 80036d2:	e002      	b.n	80036da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	bf00      	nop
 80036d6:	e000      	b.n	80036da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036da:	3728      	adds	r7, #40	; 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40020010 	.word	0x40020010
 80036e4:	40020028 	.word	0x40020028
 80036e8:	40020040 	.word	0x40020040
 80036ec:	40020058 	.word	0x40020058
 80036f0:	40020070 	.word	0x40020070
 80036f4:	40020088 	.word	0x40020088
 80036f8:	400200a0 	.word	0x400200a0
 80036fc:	400200b8 	.word	0x400200b8
 8003700:	40020410 	.word	0x40020410
 8003704:	40020428 	.word	0x40020428
 8003708:	40020440 	.word	0x40020440
 800370c:	40020458 	.word	0x40020458
 8003710:	40020470 	.word	0x40020470
 8003714:	40020488 	.word	0x40020488
 8003718:	400204a0 	.word	0x400204a0
 800371c:	400204b8 	.word	0x400204b8

08003720 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7f      	ldr	r2, [pc, #508]	; (8003954 <DMA_SetConfig+0x21c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d072      	beq.n	8003842 <DMA_SetConfig+0x10a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7d      	ldr	r2, [pc, #500]	; (8003958 <DMA_SetConfig+0x220>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d06d      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7c      	ldr	r2, [pc, #496]	; (800395c <DMA_SetConfig+0x224>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d068      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <DMA_SetConfig+0x228>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d063      	beq.n	8003842 <DMA_SetConfig+0x10a>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a79      	ldr	r2, [pc, #484]	; (8003964 <DMA_SetConfig+0x22c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d05e      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a77      	ldr	r2, [pc, #476]	; (8003968 <DMA_SetConfig+0x230>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d059      	beq.n	8003842 <DMA_SetConfig+0x10a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a76      	ldr	r2, [pc, #472]	; (800396c <DMA_SetConfig+0x234>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d054      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a74      	ldr	r2, [pc, #464]	; (8003970 <DMA_SetConfig+0x238>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04f      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a73      	ldr	r2, [pc, #460]	; (8003974 <DMA_SetConfig+0x23c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d04a      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a71      	ldr	r2, [pc, #452]	; (8003978 <DMA_SetConfig+0x240>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d045      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a70      	ldr	r2, [pc, #448]	; (800397c <DMA_SetConfig+0x244>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d040      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6e      	ldr	r2, [pc, #440]	; (8003980 <DMA_SetConfig+0x248>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d03b      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6d      	ldr	r2, [pc, #436]	; (8003984 <DMA_SetConfig+0x24c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d036      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6b      	ldr	r2, [pc, #428]	; (8003988 <DMA_SetConfig+0x250>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d031      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6a      	ldr	r2, [pc, #424]	; (800398c <DMA_SetConfig+0x254>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d02c      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a68      	ldr	r2, [pc, #416]	; (8003990 <DMA_SetConfig+0x258>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d027      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a67      	ldr	r2, [pc, #412]	; (8003994 <DMA_SetConfig+0x25c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <DMA_SetConfig+0x10a>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a65      	ldr	r2, [pc, #404]	; (8003998 <DMA_SetConfig+0x260>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01d      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a64      	ldr	r2, [pc, #400]	; (800399c <DMA_SetConfig+0x264>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a62      	ldr	r2, [pc, #392]	; (80039a0 <DMA_SetConfig+0x268>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <DMA_SetConfig+0x10a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <DMA_SetConfig+0x26c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5f      	ldr	r2, [pc, #380]	; (80039a8 <DMA_SetConfig+0x270>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <DMA_SetConfig+0x10a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <DMA_SetConfig+0x274>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <DMA_SetConfig+0x10a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <DMA_SetConfig+0x278>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <DMA_SetConfig+0x10e>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <DMA_SetConfig+0x110>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003854:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003866:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a39      	ldr	r2, [pc, #228]	; (8003954 <DMA_SetConfig+0x21c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a38      	ldr	r2, [pc, #224]	; (8003958 <DMA_SetConfig+0x220>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a36      	ldr	r2, [pc, #216]	; (800395c <DMA_SetConfig+0x224>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a35      	ldr	r2, [pc, #212]	; (8003960 <DMA_SetConfig+0x228>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a33      	ldr	r2, [pc, #204]	; (8003964 <DMA_SetConfig+0x22c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a32      	ldr	r2, [pc, #200]	; (8003968 <DMA_SetConfig+0x230>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a30      	ldr	r2, [pc, #192]	; (800396c <DMA_SetConfig+0x234>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <DMA_SetConfig+0x238>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <DMA_SetConfig+0x23c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <DMA_SetConfig+0x240>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <DMA_SetConfig+0x244>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <DMA_SetConfig+0x248>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <DMA_SetConfig+0x24c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <DMA_SetConfig+0x250>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a24      	ldr	r2, [pc, #144]	; (800398c <DMA_SetConfig+0x254>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <DMA_SetConfig+0x1d0>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a23      	ldr	r2, [pc, #140]	; (8003990 <DMA_SetConfig+0x258>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <DMA_SetConfig+0x1d4>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <DMA_SetConfig+0x1d6>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d059      	beq.n	80039c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	223f      	movs	r2, #63	; 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003930:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d138      	bne.n	80039b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003952:	e086      	b.n	8003a62 <DMA_SetConfig+0x32a>
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
}
 80039c4:	e04d      	b.n	8003a62 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <DMA_SetConfig+0x338>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <DMA_SetConfig+0x33c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01d      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <DMA_SetConfig+0x340>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <DMA_SetConfig+0x344>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <DMA_SetConfig+0x348>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <DMA_SetConfig+0x34c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <DMA_SetConfig+0x350>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <DMA_SetConfig+0x2de>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <DMA_SetConfig+0x354>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <DMA_SetConfig+0x2e2>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <DMA_SetConfig+0x2e4>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d108      	bne.n	8003a52 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
}
 8003a50:	e007      	b.n	8003a62 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	58025408 	.word	0x58025408
 8003a74:	5802541c 	.word	0x5802541c
 8003a78:	58025430 	.word	0x58025430
 8003a7c:	58025444 	.word	0x58025444
 8003a80:	58025458 	.word	0x58025458
 8003a84:	5802546c 	.word	0x5802546c
 8003a88:	58025480 	.word	0x58025480
 8003a8c:	58025494 	.word	0x58025494

08003a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x118>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a41      	ldr	r2, [pc, #260]	; (8003bac <DMA_CalcBaseAndBitshift+0x11c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d045      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3f      	ldr	r2, [pc, #252]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x120>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3e      	ldr	r2, [pc, #248]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x124>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d03b      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x128>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d036      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a3b      	ldr	r2, [pc, #236]	; (8003bbc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d031      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a39      	ldr	r2, [pc, #228]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x130>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02c      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a38      	ldr	r2, [pc, #224]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x134>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d027      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a36      	ldr	r2, [pc, #216]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x138>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <DMA_CalcBaseAndBitshift+0x13c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d01d      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a33      	ldr	r2, [pc, #204]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <DMA_CalcBaseAndBitshift+0x144>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <DMA_CalcBaseAndBitshift+0x148>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <DMA_CalcBaseAndBitshift+0x14c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <DMA_CalcBaseAndBitshift+0x150>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <DMA_CalcBaseAndBitshift+0x154>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <DMA_CalcBaseAndBitshift+0xac>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <DMA_CalcBaseAndBitshift+0xae>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d024      	beq.n	8003b8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b10      	subs	r3, #16
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <DMA_CalcBaseAndBitshift+0x158>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	4a24      	ldr	r2, [pc, #144]	; (8003bec <DMA_CalcBaseAndBitshift+0x15c>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d908      	bls.n	8003b7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	659a      	str	r2, [r3, #88]	; 0x58
 8003b7a:	e00d      	b.n	8003b98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <DMA_CalcBaseAndBitshift+0x160>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8a:	e005      	b.n	8003b98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40020010 	.word	0x40020010
 8003bac:	40020028 	.word	0x40020028
 8003bb0:	40020040 	.word	0x40020040
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	40020070 	.word	0x40020070
 8003bbc:	40020088 	.word	0x40020088
 8003bc0:	400200a0 	.word	0x400200a0
 8003bc4:	400200b8 	.word	0x400200b8
 8003bc8:	40020410 	.word	0x40020410
 8003bcc:	40020428 	.word	0x40020428
 8003bd0:	40020440 	.word	0x40020440
 8003bd4:	40020458 	.word	0x40020458
 8003bd8:	40020470 	.word	0x40020470
 8003bdc:	40020488 	.word	0x40020488
 8003be0:	400204a0 	.word	0x400204a0
 8003be4:	400204b8 	.word	0x400204b8
 8003be8:	aaaaaaab 	.word	0xaaaaaaab
 8003bec:	08009a68 	.word	0x08009a68
 8003bf0:	fffffc00 	.word	0xfffffc00

08003bf4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d120      	bne.n	8003c4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d858      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xce>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <DMA_CheckFifoParam+0x24>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c3b 	.word	0x08003c3b
 8003c20:	08003c29 	.word	0x08003c29
 8003c24:	08003cc3 	.word	0x08003cc3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d048      	beq.n	8003cc6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c38:	e045      	b.n	8003cc6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c42:	d142      	bne.n	8003cca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c48:	e03f      	b.n	8003cca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c52:	d123      	bne.n	8003c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d838      	bhi.n	8003cce <DMA_CheckFifoParam+0xda>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <DMA_CheckFifoParam+0x70>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c7b 	.word	0x08003c7b
 8003c6c:	08003c75 	.word	0x08003c75
 8003c70:	08003c8d 	.word	0x08003c8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
        break;
 8003c78:	e030      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d025      	beq.n	8003cd2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c8a:	e022      	b.n	8003cd2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c94:	d11f      	bne.n	8003cd6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c9a:	e01c      	b.n	8003cd6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d902      	bls.n	8003caa <DMA_CheckFifoParam+0xb6>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d003      	beq.n	8003cb0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ca8:	e018      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
        break;
 8003cae:	e015      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8003cc0:	e00b      	b.n	8003cda <DMA_CheckFifoParam+0xe6>
        break;
 8003cc2:	bf00      	nop
 8003cc4:	e00a      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e008      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e006      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <DMA_CheckFifoParam+0xe8>
    break;
 8003cda:	bf00      	nop
    }
  }

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a36      	ldr	r2, [pc, #216]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a33      	ldr	r2, [pc, #204]	; (8003dec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01a      	beq.n	8003d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	3b08      	subs	r3, #8
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d78:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d88:	e024      	b.n	8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3b10      	subs	r3, #16
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d806      	bhi.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d902      	bls.n	8003db2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3308      	adds	r3, #8
 8003db0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	; (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003dc4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2201      	movs	r2, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	58025408 	.word	0x58025408
 8003de4:	5802541c 	.word	0x5802541c
 8003de8:	58025430 	.word	0x58025430
 8003dec:	58025444 	.word	0x58025444
 8003df0:	58025458 	.word	0x58025458
 8003df4:	5802546c 	.word	0x5802546c
 8003df8:	58025480 	.word	0x58025480
 8003dfc:	58025494 	.word	0x58025494
 8003e00:	cccccccd 	.word	0xcccccccd
 8003e04:	16009600 	.word	0x16009600
 8003e08:	58025880 	.word	0x58025880
 8003e0c:	aaaaaaab 	.word	0xaaaaaaab
 8003e10:	400204b8 	.word	0x400204b8
 8003e14:	4002040f 	.word	0x4002040f
 8003e18:	10008200 	.word	0x10008200
 8003e1c:	40020880 	.word	0x40020880

08003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04a      	beq.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d847      	bhi.n	8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a24      	ldr	r2, [pc, #144]	; (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ea8:	671a      	str	r2, [r3, #112]	; 0x70
 8003eaa:	e009      	b.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ebe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	58025408 	.word	0x58025408
 8003edc:	5802541c 	.word	0x5802541c
 8003ee0:	58025430 	.word	0x58025430
 8003ee4:	58025444 	.word	0x58025444
 8003ee8:	58025458 	.word	0x58025458
 8003eec:	5802546c 	.word	0x5802546c
 8003ef0:	58025480 	.word	0x58025480
 8003ef4:	58025494 	.word	0x58025494
 8003ef8:	1600963f 	.word	0x1600963f
 8003efc:	58025940 	.word	0x58025940
 8003f00:	1000823f 	.word	0x1000823f
 8003f04:	40020940 	.word	0x40020940

08003f08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0cf      	b.n	80040ba <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2223      	movs	r2, #35	; 0x23
 8003f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fc ffe1 	bl	8000ef4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <HAL_ETH_Init+0x1bc>)
 8003f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f38:	4a62      	ldr	r2, [pc, #392]	; (80040c4 <HAL_ETH_Init+0x1bc>)
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f42:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_ETH_Init+0x1bc>)
 8003f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7a1b      	ldrb	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fd fb87 	bl	800166c <HAL_SYSCFG_ETHInterfaceSelect>
 8003f5e:	e003      	b.n	8003f68 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f64:	f7fd fb82 	bl	800166c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f68:	4b57      	ldr	r3, [pc, #348]	; (80040c8 <HAL_ETH_Init+0x1c0>)
 8003f6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f84:	f7fd fb36 	bl	80015f4 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f8a:	e011      	b.n	8003fb0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003f8c:	f7fd fb32 	bl	80015f4 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f9a:	d909      	bls.n	8003fb0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	22e0      	movs	r2, #224	; 0xe0
 8003fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e084      	b.n	80040ba <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e4      	bne.n	8003f8c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f886 	bl	80040d4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003fc8:	f001 feca 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_ETH_Init+0x1c4>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	0c9a      	lsrs	r2, r3, #18
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3a01      	subs	r2, #1
 8003fdc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa71 	bl	80044c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ff2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004002:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	22e0      	movs	r2, #224	; 0xe0
 800401e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e049      	b.n	80040ba <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004032:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_ETH_Init+0x1c8>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6952      	ldr	r2, [r2, #20]
 800403a:	0051      	lsls	r1, r2, #1
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004046:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fad9 	bl	8004602 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fb1f 	bl	8004694 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	3305      	adds	r3, #5
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	3303      	adds	r3, #3
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	061a      	lsls	r2, r3, #24
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	3302      	adds	r3, #2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	3301      	adds	r3, #1
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004094:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2210      	movs	r2, #16
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	58000400 	.word	0x58000400
 80040cc:	431bde83 	.word	0x431bde83
 80040d0:	ffff8001 	.word	0xffff8001

080040d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80040ee:	f001 fe37 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 80040f2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d908      	bls.n	800410e <HAL_ETH_SetMDIOClockRange+0x3a>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d804      	bhi.n	800410e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e027      	b.n	800415e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d908      	bls.n	8004128 <HAL_ETH_SetMDIOClockRange+0x54>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d204      	bcs.n	8004128 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e01a      	b.n	800415e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d303      	bcc.n	8004138 <HAL_ETH_SetMDIOClockRange+0x64>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d911      	bls.n	800415c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d908      	bls.n	8004152 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a0f      	ldr	r2, [pc, #60]	; (8004180 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d804      	bhi.n	8004152 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e005      	b.n	800415e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e000      	b.n	800415e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800415c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	01312cff 	.word	0x01312cff
 8004174:	02160ebf 	.word	0x02160ebf
 8004178:	03938700 	.word	0x03938700
 800417c:	05f5e0ff 	.word	0x05f5e0ff
 8004180:	08f0d17f 	.word	0x08f0d17f

08004184 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004196:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	791b      	ldrb	r3, [r3, #4]
 800419c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800419e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	7b1b      	ldrb	r3, [r3, #12]
 80041a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80041a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	7b5b      	ldrb	r3, [r3, #13]
 80041ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	7b9b      	ldrb	r3, [r3, #14]
 80041b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80041b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	7bdb      	ldrb	r3, [r3, #15]
 80041bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	7c12      	ldrb	r2, [r2, #16]
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d102      	bne.n	80041ce <ETH_SetMACConfig+0x4a>
 80041c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041cc:	e000      	b.n	80041d0 <ETH_SetMACConfig+0x4c>
 80041ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	7c52      	ldrb	r2, [r2, #17]
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	d102      	bne.n	80041e0 <ETH_SetMACConfig+0x5c>
 80041da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041de:	e000      	b.n	80041e2 <ETH_SetMACConfig+0x5e>
 80041e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80041e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	7c9b      	ldrb	r3, [r3, #18]
 80041e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80041ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80041f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80041f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	7f1b      	ldrb	r3, [r3, #28]
 80041fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80041fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	7f5b      	ldrb	r3, [r3, #29]
 8004204:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004206:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	7f92      	ldrb	r2, [r2, #30]
 800420c:	2a00      	cmp	r2, #0
 800420e:	d102      	bne.n	8004216 <ETH_SetMACConfig+0x92>
 8004210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004214:	e000      	b.n	8004218 <ETH_SetMACConfig+0x94>
 8004216:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004218:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	7fdb      	ldrb	r3, [r3, #31]
 800421e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004220:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004228:	2a00      	cmp	r2, #0
 800422a:	d102      	bne.n	8004232 <ETH_SetMACConfig+0xae>
 800422c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004230:	e000      	b.n	8004234 <ETH_SetMACConfig+0xb0>
 8004232:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004234:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800423a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004242:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004244:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	4b56      	ldr	r3, [pc, #344]	; (80043b0 <ETH_SetMACConfig+0x22c>)
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	430b      	orrs	r3, r1
 8004260:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800426e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004270:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004278:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800427a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004282:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004284:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800428c:	2a00      	cmp	r2, #0
 800428e:	d102      	bne.n	8004296 <ETH_SetMACConfig+0x112>
 8004290:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004294:	e000      	b.n	8004298 <ETH_SetMACConfig+0x114>
 8004296:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004298:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <ETH_SetMACConfig+0x230>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <ETH_SetMACConfig+0x234>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	430b      	orrs	r3, r1
 80042d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80042e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80042ee:	2a00      	cmp	r2, #0
 80042f0:	d101      	bne.n	80042f6 <ETH_SetMACConfig+0x172>
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	e000      	b.n	80042f8 <ETH_SetMACConfig+0x174>
 80042f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80042f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	430b      	orrs	r3, r1
 8004318:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004320:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004328:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f023 0103 	bic.w	r1, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	430a      	orrs	r2, r1
 8004342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800434e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800436a:	2a00      	cmp	r2, #0
 800436c:	d101      	bne.n	8004372 <ETH_SetMACConfig+0x1ee>
 800436e:	2240      	movs	r2, #64	; 0x40
 8004370:	e000      	b.n	8004374 <ETH_SetMACConfig+0x1f0>
 8004372:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800437c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800437e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004386:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004394:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	430a      	orrs	r2, r1
 80043a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	00048083 	.word	0x00048083
 80043b4:	c0f88000 	.word	0xc0f88000
 80043b8:	fffffef0 	.word	0xfffffef0

080043bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <ETH_SetDMAConfig+0xf8>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	6811      	ldr	r1, [r2, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	430b      	orrs	r3, r1
 80043de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	791b      	ldrb	r3, [r3, #4]
 80043e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80043ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	7b1b      	ldrb	r3, [r3, #12]
 80043f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <ETH_SetDMAConfig+0xfc>)
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	430b      	orrs	r3, r1
 8004410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004414:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	7b5b      	ldrb	r3, [r3, #13]
 800441a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <ETH_SetDMAConfig+0x100>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	430b      	orrs	r3, r1
 800443c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004440:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	7d1b      	ldrb	r3, [r3, #20]
 800444c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800444e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	7f5b      	ldrb	r3, [r3, #29]
 8004454:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004462:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <ETH_SetDMAConfig+0x104>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	430b      	orrs	r3, r1
 8004472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004476:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	7f1b      	ldrb	r3, [r3, #28]
 800447e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004490:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <ETH_SetDMAConfig+0x108>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	430b      	orrs	r3, r1
 80044a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	ffff87fd 	.word	0xffff87fd
 80044b8:	ffff2ffe 	.word	0xffff2ffe
 80044bc:	fffec000 	.word	0xfffec000
 80044c0:	ffc0efef 	.word	0xffc0efef
 80044c4:	7fc0ffff 	.word	0x7fc0ffff

080044c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0a4      	sub	sp, #144	; 0x90
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044d6:	2300      	movs	r3, #0
 80044d8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80044da:	2300      	movs	r3, #0
 80044dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004510:	2300      	movs	r3, #0
 8004512:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004514:	2300      	movs	r3, #0
 8004516:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004520:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800452c:	2300      	movs	r3, #0
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004542:	2300      	movs	r3, #0
 8004544:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004546:	2300      	movs	r3, #0
 8004548:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800454a:	2300      	movs	r3, #0
 800454c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004560:	2320      	movs	r3, #32
 8004562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004572:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800457c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004584:	2302      	movs	r3, #2
 8004586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004590:	2300      	movs	r3, #0
 8004592:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045a2:	2300      	movs	r3, #0
 80045a4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fde6 	bl	8004184 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045bc:	2301      	movs	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80045d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80045d8:	2300      	movs	r3, #0
 80045da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80045dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80045e8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80045ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fee1 	bl	80043bc <ETH_SetDMAConfig>
}
 80045fa:	bf00      	nop
 80045fc:	3790      	adds	r7, #144	; 0x90
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e01d      	b.n	800464c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	440b      	add	r3, r1
 8004620:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2200      	movs	r2, #0
 800462c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	3206      	adds	r2, #6
 8004642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d9de      	bls.n	8004610 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	461a      	mov	r2, r3
 8004662:	2303      	movs	r3, #3
 8004664:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004674:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e023      	b.n	80046ea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2200      	movs	r2, #0
 80046ca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	3212      	adds	r2, #18
 80046e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d9d8      	bls.n	80046a2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	2303      	movs	r3, #3
 800471a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800475e:	4b89      	ldr	r3, [pc, #548]	; (8004984 <HAL_GPIO_Init+0x234>)
 8004760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004762:	e194      	b.n	8004a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	2101      	movs	r1, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8186 	beq.w	8004a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d005      	beq.n	8004794 <HAL_GPIO_Init+0x44>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d130      	bne.n	80047f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ca:	2201      	movs	r2, #1
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0201 	and.w	r2, r3, #1
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d017      	beq.n	8004832 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d123      	bne.n	8004886 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	08da      	lsrs	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3208      	adds	r2, #8
 8004846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	08da      	lsrs	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3208      	adds	r2, #8
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0203 	and.w	r2, r3, #3
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80e0 	beq.w	8004a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c8:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_GPIO_Init+0x238>)
 80048ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ce:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <HAL_GPIO_Init+0x238>)
 80048d0:	f043 0302 	orr.w	r3, r3, #2
 80048d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048d8:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <HAL_GPIO_Init+0x238>)
 80048da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e6:	4a29      	ldr	r2, [pc, #164]	; (800498c <HAL_GPIO_Init+0x23c>)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_GPIO_Init+0x240>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d052      	beq.n	80049b8 <HAL_GPIO_Init+0x268>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_GPIO_Init+0x244>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_GPIO_Init+0x22e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_GPIO_Init+0x248>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02b      	beq.n	800497a <HAL_GPIO_Init+0x22a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_GPIO_Init+0x24c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d025      	beq.n	8004976 <HAL_GPIO_Init+0x226>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_GPIO_Init+0x250>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01f      	beq.n	8004972 <HAL_GPIO_Init+0x222>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_GPIO_Init+0x254>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d019      	beq.n	800496e <HAL_GPIO_Init+0x21e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1a      	ldr	r2, [pc, #104]	; (80049a8 <HAL_GPIO_Init+0x258>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x21a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <HAL_GPIO_Init+0x25c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x216>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_GPIO_Init+0x260>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x212>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_GPIO_Init+0x264>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x20e>
 800495a:	2309      	movs	r3, #9
 800495c:	e02d      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 800495e:	230a      	movs	r3, #10
 8004960:	e02b      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 8004962:	2308      	movs	r3, #8
 8004964:	e029      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 8004966:	2307      	movs	r3, #7
 8004968:	e027      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 800496a:	2306      	movs	r3, #6
 800496c:	e025      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 800496e:	2305      	movs	r3, #5
 8004970:	e023      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 8004972:	2304      	movs	r3, #4
 8004974:	e021      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 8004976:	2303      	movs	r3, #3
 8004978:	e01f      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 800497a:	2302      	movs	r3, #2
 800497c:	e01d      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 800497e:	2301      	movs	r3, #1
 8004980:	e01b      	b.n	80049ba <HAL_GPIO_Init+0x26a>
 8004982:	bf00      	nop
 8004984:	58000080 	.word	0x58000080
 8004988:	58024400 	.word	0x58024400
 800498c:	58000400 	.word	0x58000400
 8004990:	58020000 	.word	0x58020000
 8004994:	58020400 	.word	0x58020400
 8004998:	58020800 	.word	0x58020800
 800499c:	58020c00 	.word	0x58020c00
 80049a0:	58021000 	.word	0x58021000
 80049a4:	58021400 	.word	0x58021400
 80049a8:	58021800 	.word	0x58021800
 80049ac:	58021c00 	.word	0x58021c00
 80049b0:	58022000 	.word	0x58022000
 80049b4:	58022400 	.word	0x58022400
 80049b8:	2300      	movs	r3, #0
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	f002 0203 	and.w	r2, r2, #3
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4093      	lsls	r3, r2
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ca:	4938      	ldr	r1, [pc, #224]	; (8004aac <HAL_GPIO_Init+0x35c>)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f47f ae63 	bne.w	8004764 <HAL_GPIO_Init+0x14>
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	3724      	adds	r7, #36	; 0x24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	58000400 	.word	0x58000400

08004ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
 8004abc:	4613      	mov	r3, r2
 8004abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ac0:	787b      	ldrb	r3, [r7, #1]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004acc:	e003      	b.n	8004ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	041a      	lsls	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	619a      	str	r2, [r3, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004aec:	4a08      	ldr	r2, [pc, #32]	; (8004b10 <HAL_HSEM_FastTake+0x2c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3320      	adds	r3, #32
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <HAL_HSEM_FastTake+0x30>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	58026400 	.word	0x58026400
 8004b14:	80000300 	.word	0x80000300

08004b18 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b22:	4906      	ldr	r1, [pc, #24]	; (8004b3c <HAL_HSEM_Release+0x24>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	58026400 	.word	0x58026400

08004b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b42:	b08f      	sub	sp, #60	; 0x3c
 8004b44:	af0a      	add	r7, sp, #40	; 0x28
 8004b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e116      	b.n	8004d80 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fc fbcb 	bl	8001308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f004 faff 	bl	8009194 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	687e      	ldr	r6, [r7, #4]
 8004b9e:	466d      	mov	r5, sp
 8004ba0:	f106 0410 	add.w	r4, r6, #16
 8004ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb4:	1d33      	adds	r3, r6, #4
 8004bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb8:	6838      	ldr	r0, [r7, #0]
 8004bba:	f004 fa7d 	bl	80090b8 <USB_CoreInit>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0d7      	b.n	8004d80 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f004 faed 	bl	80091b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e04a      	b.n	8004c78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	333d      	adds	r3, #61	; 0x3d
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	333c      	adds	r3, #60	; 0x3c
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	b298      	uxth	r0, r3
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	3344      	adds	r3, #68	; 0x44
 8004c1e:	4602      	mov	r2, r0
 8004c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3340      	adds	r3, #64	; 0x40
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3348      	adds	r3, #72	; 0x48
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334c      	adds	r3, #76	; 0x4c
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3354      	adds	r3, #84	; 0x54
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	3301      	adds	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3af      	bcc.n	8004be2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e044      	b.n	8004d12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004cb0:	7bfa      	ldrb	r2, [r7, #15]
 8004cb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
 8004d12:	7bfa      	ldrb	r2, [r7, #15]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d3b5      	bcc.n	8004c88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	687e      	ldr	r6, [r7, #4]
 8004d24:	466d      	mov	r5, sp
 8004d26:	f106 0410 	add.w	r4, r6, #16
 8004d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d3a:	1d33      	adds	r3, r6, #4
 8004d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d3e:	6838      	ldr	r0, [r7, #0]
 8004d40:	f004 fa86 	bl	8009250 <USB_DevInit>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e014      	b.n	8004d80 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f80a 	bl	8004d88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f004 fc44 	bl	8009606 <USB_DevDisconnect>

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_PCDEx_ActivateLPM+0x44>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	10000003 	.word	0x10000003

08004dd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d00a      	beq.n	8004dfa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004de4:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e040      	b.n	8004e78 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e03e      	b.n	8004e78 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004e02:	491f      	ldr	r1, [pc, #124]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e0a:	f7fc fbf3 	bl	80015f4 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e10:	e009      	b.n	8004e26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e12:	f7fc fbef 	bl	80015f4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e20:	d901      	bls.n	8004e26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e028      	b.n	8004e78 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e26:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	d1ee      	bne.n	8004e12 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b1e      	cmp	r3, #30
 8004e38:	d008      	beq.n	8004e4c <HAL_PWREx_ConfigSupply+0x7c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e3e:	d005      	beq.n	8004e4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b1d      	cmp	r3, #29
 8004e44:	d002      	beq.n	8004e4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b2d      	cmp	r3, #45	; 0x2d
 8004e4a:	d114      	bne.n	8004e76 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004e4c:	f7fc fbd2 	bl	80015f4 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e52:	e009      	b.n	8004e68 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e54:	f7fc fbce 	bl	80015f4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e62:	d901      	bls.n	8004e68 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e007      	b.n	8004e78 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d1ee      	bne.n	8004e54 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	58024800 	.word	0x58024800

08004e84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e92:	60d3      	str	r3, [r2, #12]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	58024800 	.word	0x58024800

08004ea4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	; 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f000 bc1d 	b.w	80056f2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8087 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec6:	4b99      	ldr	r3, [pc, #612]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ed0:	4b96      	ldr	r3, [pc, #600]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d007      	beq.n	8004eec <HAL_RCC_OscConfig+0x48>
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	2b18      	cmp	r3, #24
 8004ee0:	d110      	bne.n	8004f04 <HAL_RCC_OscConfig+0x60>
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b8f      	ldr	r3, [pc, #572]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d06c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x12e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d168      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e3f6      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x78>
 8004f0e:	4b87      	ldr	r3, [pc, #540]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a86      	ldr	r2, [pc, #536]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e02e      	b.n	8004f7a <HAL_RCC_OscConfig+0xd6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCC_OscConfig+0x9a>
 8004f24:	4b81      	ldr	r3, [pc, #516]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a80      	ldr	r2, [pc, #512]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b7e      	ldr	r3, [pc, #504]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a7d      	ldr	r2, [pc, #500]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e01d      	b.n	8004f7a <HAL_RCC_OscConfig+0xd6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCC_OscConfig+0xbe>
 8004f48:	4b78      	ldr	r3, [pc, #480]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a77      	ldr	r2, [pc, #476]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a74      	ldr	r2, [pc, #464]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	e00b      	b.n	8004f7a <HAL_RCC_OscConfig+0xd6>
 8004f62:	4b72      	ldr	r3, [pc, #456]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a71      	ldr	r2, [pc, #452]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d013      	beq.n	8004faa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fc fb37 	bl	80015f4 <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f8a:	f7fc fb33 	bl	80015f4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b64      	cmp	r3, #100	; 0x64
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e3aa      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f9c:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0xe6>
 8004fa8:	e014      	b.n	8004fd4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fc fb23 	bl	80015f4 <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fb1f 	bl	80015f4 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b64      	cmp	r3, #100	; 0x64
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e396      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fc4:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x10e>
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80cb 	beq.w	8005178 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe2:	4b52      	ldr	r3, [pc, #328]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fec:	4b4f      	ldr	r3, [pc, #316]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <HAL_RCC_OscConfig+0x164>
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b18      	cmp	r3, #24
 8004ffc:	d156      	bne.n	80050ac <HAL_RCC_OscConfig+0x208>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d151      	bne.n	80050ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005008:	4b48      	ldr	r3, [pc, #288]	; (800512c <HAL_RCC_OscConfig+0x288>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_OscConfig+0x17c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e368      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005020:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 0219 	bic.w	r2, r3, #25
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	493f      	ldr	r1, [pc, #252]	; (800512c <HAL_RCC_OscConfig+0x288>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005032:	f7fc fadf 	bl	80015f4 <HAL_GetTick>
 8005036:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800503a:	f7fc fadb 	bl	80015f4 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e352      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x288>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005058:	f7fc fafc 	bl	8001654 <HAL_GetREVID>
 800505c:	4603      	mov	r3, r0
 800505e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005062:	4293      	cmp	r3, r2
 8005064:	d817      	bhi.n	8005096 <HAL_RCC_OscConfig+0x1f2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d108      	bne.n	8005080 <HAL_RCC_OscConfig+0x1dc>
 800506e:	4b2f      	ldr	r3, [pc, #188]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005076:	4a2d      	ldr	r2, [pc, #180]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507e:	e07b      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	4927      	ldr	r1, [pc, #156]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005094:	e070      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	4921      	ldr	r1, [pc, #132]	; (800512c <HAL_RCC_OscConfig+0x288>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050aa:	e065      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d048      	beq.n	8005146 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_RCC_OscConfig+0x288>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 0219 	bic.w	r2, r3, #25
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	491a      	ldr	r1, [pc, #104]	; (800512c <HAL_RCC_OscConfig+0x288>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fc fa95 	bl	80015f4 <HAL_GetTick>
 80050ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ce:	f7fc fa91 	bl	80015f4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e308      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCC_OscConfig+0x288>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	f7fc fab2 	bl	8001654 <HAL_GetREVID>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d81a      	bhi.n	8005130 <HAL_RCC_OscConfig+0x28c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d108      	bne.n	8005114 <HAL_RCC_OscConfig+0x270>
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800510a:	4a08      	ldr	r2, [pc, #32]	; (800512c <HAL_RCC_OscConfig+0x288>)
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	6053      	str	r3, [r2, #4]
 8005112:	e031      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	4902      	ldr	r1, [pc, #8]	; (800512c <HAL_RCC_OscConfig+0x288>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	e026      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	4b9a      	ldr	r3, [pc, #616]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	4997      	ldr	r1, [pc, #604]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	e018      	b.n	8005178 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b95      	ldr	r3, [pc, #596]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a94      	ldr	r2, [pc, #592]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fc fa4f 	bl	80015f4 <HAL_GetTick>
 8005156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515a:	f7fc fa4b 	bl	80015f4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e2c2      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800516c:	4b8b      	ldr	r3, [pc, #556]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a9 	beq.w	80052d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005186:	4b85      	ldr	r3, [pc, #532]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800518e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005190:	4b82      	ldr	r3, [pc, #520]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d007      	beq.n	80051ac <HAL_RCC_OscConfig+0x308>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b18      	cmp	r3, #24
 80051a0:	d13a      	bne.n	8005218 <HAL_RCC_OscConfig+0x374>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d135      	bne.n	8005218 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ac:	4b7b      	ldr	r3, [pc, #492]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x320>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2b80      	cmp	r3, #128	; 0x80
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e296      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c4:	f7fc fa46 	bl	8001654 <HAL_GetREVID>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d817      	bhi.n	8005202 <HAL_RCC_OscConfig+0x35e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d108      	bne.n	80051ec <HAL_RCC_OscConfig+0x348>
 80051da:	4b70      	ldr	r3, [pc, #448]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80051e2:	4a6e      	ldr	r2, [pc, #440]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80051e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ea:	e075      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ec:	4b6b      	ldr	r3, [pc, #428]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	069b      	lsls	r3, r3, #26
 80051fa:	4968      	ldr	r1, [pc, #416]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005200:	e06a      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005202:	4b66      	ldr	r3, [pc, #408]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	4962      	ldr	r1, [pc, #392]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005216:	e05f      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d042      	beq.n	80052a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005220:	4b5e      	ldr	r3, [pc, #376]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5d      	ldr	r2, [pc, #372]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fc f9e2 	bl	80015f4 <HAL_GetTick>
 8005230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005234:	f7fc f9de 	bl	80015f4 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e255      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005246:	4b55      	ldr	r3, [pc, #340]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005252:	f7fc f9ff 	bl	8001654 <HAL_GetREVID>
 8005256:	4603      	mov	r3, r0
 8005258:	f241 0203 	movw	r2, #4099	; 0x1003
 800525c:	4293      	cmp	r3, r2
 800525e:	d817      	bhi.n	8005290 <HAL_RCC_OscConfig+0x3ec>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	2b20      	cmp	r3, #32
 8005266:	d108      	bne.n	800527a <HAL_RCC_OscConfig+0x3d6>
 8005268:	4b4c      	ldr	r3, [pc, #304]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005270:	4a4a      	ldr	r2, [pc, #296]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005276:	6053      	str	r3, [r2, #4]
 8005278:	e02e      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
 800527a:	4b48      	ldr	r3, [pc, #288]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	069b      	lsls	r3, r3, #26
 8005288:	4944      	ldr	r1, [pc, #272]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
 800528e:	e023      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
 8005290:	4b42      	ldr	r3, [pc, #264]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	493f      	ldr	r1, [pc, #252]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60cb      	str	r3, [r1, #12]
 80052a4:	e018      	b.n	80052d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052a6:	4b3d      	ldr	r3, [pc, #244]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3c      	ldr	r2, [pc, #240]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b2:	f7fc f99f 	bl	80015f4 <HAL_GetTick>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052ba:	f7fc f99b 	bl	80015f4 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e212      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052cc:	4b33      	ldr	r3, [pc, #204]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d036      	beq.n	8005352 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d019      	beq.n	8005320 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ec:	4b2b      	ldr	r3, [pc, #172]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc f97c 	bl	80015f4 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005300:	f7fc f978 	bl	80015f4 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1ef      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x45c>
 800531e:	e018      	b.n	8005352 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fc f962 	bl	80015f4 <HAL_GetTick>
 8005330:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005334:	f7fc f95e 	bl	80015f4 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1d5      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d039      	beq.n	80053d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01c      	beq.n	80053a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0c      	ldr	r2, [pc, #48]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800536c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005372:	f7fc f93f 	bl	80015f4 <HAL_GetTick>
 8005376:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800537a:	f7fc f93b 	bl	80015f4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1b2      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <HAL_RCC_OscConfig+0x4f8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x4d6>
 8005398:	e01b      	b.n	80053d2 <HAL_RCC_OscConfig+0x52e>
 800539a:	bf00      	nop
 800539c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053a0:	4b9b      	ldr	r3, [pc, #620]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a9a      	ldr	r2, [pc, #616]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80053a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053ac:	f7fc f922 	bl	80015f4 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053b4:	f7fc f91e 	bl	80015f4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e195      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053c6:	4b92      	ldr	r3, [pc, #584]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8081 	beq.w	80054e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053e0:	4b8c      	ldr	r3, [pc, #560]	; (8005614 <HAL_RCC_OscConfig+0x770>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a8b      	ldr	r2, [pc, #556]	; (8005614 <HAL_RCC_OscConfig+0x770>)
 80053e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ec:	f7fc f902 	bl	80015f4 <HAL_GetTick>
 80053f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053f4:	f7fc f8fe 	bl	80015f4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b64      	cmp	r3, #100	; 0x64
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e175      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005406:	4b83      	ldr	r3, [pc, #524]	; (8005614 <HAL_RCC_OscConfig+0x770>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d106      	bne.n	8005428 <HAL_RCC_OscConfig+0x584>
 800541a:	4b7d      	ldr	r3, [pc, #500]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a7c      	ldr	r2, [pc, #496]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
 8005426:	e02d      	b.n	8005484 <HAL_RCC_OscConfig+0x5e0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10c      	bne.n	800544a <HAL_RCC_OscConfig+0x5a6>
 8005430:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a76      	ldr	r2, [pc, #472]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	4b74      	ldr	r3, [pc, #464]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a73      	ldr	r2, [pc, #460]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005442:	f023 0304 	bic.w	r3, r3, #4
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	e01c      	b.n	8005484 <HAL_RCC_OscConfig+0x5e0>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b05      	cmp	r3, #5
 8005450:	d10c      	bne.n	800546c <HAL_RCC_OscConfig+0x5c8>
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	4a6e      	ldr	r2, [pc, #440]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005458:	f043 0304 	orr.w	r3, r3, #4
 800545c:	6713      	str	r3, [r2, #112]	; 0x70
 800545e:	4b6c      	ldr	r3, [pc, #432]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005462:	4a6b      	ldr	r2, [pc, #428]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6713      	str	r3, [r2, #112]	; 0x70
 800546a:	e00b      	b.n	8005484 <HAL_RCC_OscConfig+0x5e0>
 800546c:	4b68      	ldr	r3, [pc, #416]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	4a67      	ldr	r2, [pc, #412]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	6713      	str	r3, [r2, #112]	; 0x70
 8005478:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a64      	ldr	r2, [pc, #400]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800547e:	f023 0304 	bic.w	r3, r3, #4
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d015      	beq.n	80054b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fc f8b2 	bl	80015f4 <HAL_GetTick>
 8005490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fc f8ae 	bl	80015f4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e123      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054aa:	4b59      	ldr	r3, [pc, #356]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ee      	beq.n	8005494 <HAL_RCC_OscConfig+0x5f0>
 80054b6:	e014      	b.n	80054e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fc f89c 	bl	80015f4 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fc f898 	bl	80015f4 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e10d      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054d6:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ee      	bne.n	80054c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8102 	beq.w	80056f0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054ec:	4b48      	ldr	r3, [pc, #288]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f4:	2b18      	cmp	r3, #24
 80054f6:	f000 80bd 	beq.w	8005674 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b02      	cmp	r3, #2
 8005500:	f040 809e 	bne.w	8005640 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a41      	ldr	r2, [pc, #260]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800550a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fc f870 	bl	80015f4 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005518:	f7fc f86c 	bl	80015f4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0e3      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005536:	4b36      	ldr	r3, [pc, #216]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCC_OscConfig+0x774>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005546:	0112      	lsls	r2, r2, #4
 8005548:	430a      	orrs	r2, r1
 800554a:	4931      	ldr	r1, [pc, #196]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	628b      	str	r3, [r1, #40]	; 0x28
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005554:	3b01      	subs	r3, #1
 8005556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	3b01      	subs	r3, #1
 8005560:	025b      	lsls	r3, r3, #9
 8005562:	b29b      	uxth	r3, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	3b01      	subs	r3, #1
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	3b01      	subs	r3, #1
 800557a:	061b      	lsls	r3, r3, #24
 800557c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005580:	4923      	ldr	r1, [pc, #140]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005582:	4313      	orrs	r3, r2
 8005584:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4a21      	ldr	r2, [pc, #132]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x778>)
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800559e:	00d2      	lsls	r2, r2, #3
 80055a0:	491b      	ldr	r1, [pc, #108]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	4917      	ldr	r1, [pc, #92]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f023 0202 	bic.w	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	4912      	ldr	r1, [pc, #72]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	4a10      	ldr	r2, [pc, #64]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a04      	ldr	r2, [pc, #16]	; (8005610 <HAL_RCC_OscConfig+0x76c>)
 8005600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fb fff5 	bl	80015f4 <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800560c:	e011      	b.n	8005632 <HAL_RCC_OscConfig+0x78e>
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
 8005614:	58024800 	.word	0x58024800
 8005618:	fffffc0c 	.word	0xfffffc0c
 800561c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005620:	f7fb ffe8 	bl	80015f4 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e05f      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005632:	4b32      	ldr	r3, [pc, #200]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x77c>
 800563e:	e057      	b.n	80056f0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b2e      	ldr	r3, [pc, #184]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fb ffd2 	bl	80015f4 <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005654:	f7fb ffce 	bl	80015f4 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e045      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005666:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x7b0>
 8005672:	e03d      	b.n	80056f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800567a:	4b20      	ldr	r3, [pc, #128]	; (80056fc <HAL_RCC_OscConfig+0x858>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b01      	cmp	r3, #1
 8005686:	d031      	beq.n	80056ec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d12a      	bne.n	80056ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d122      	bne.n	80056ec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11a      	bne.n	80056ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d111      	bne.n	80056ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d108      	bne.n	80056ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	0e1b      	lsrs	r3, r3, #24
 80056de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3730      	adds	r7, #48	; 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400

08005700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e19c      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b8a      	ldr	r3, [pc, #552]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d910      	bls.n	8005744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b87      	ldr	r3, [pc, #540]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 020f 	bic.w	r2, r3, #15
 800572a:	4985      	ldr	r1, [pc, #532]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b83      	ldr	r3, [pc, #524]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e184      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	4b7b      	ldr	r3, [pc, #492]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800575c:	429a      	cmp	r2, r3
 800575e:	d908      	bls.n	8005772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005760:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	4975      	ldr	r1, [pc, #468]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800576e:	4313      	orrs	r3, r2
 8005770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	4b70      	ldr	r3, [pc, #448]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800578a:	429a      	cmp	r2, r3
 800578c:	d908      	bls.n	80057a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800578e:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	496a      	ldr	r1, [pc, #424]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800579c:	4313      	orrs	r3, r2
 800579e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b64      	ldr	r3, [pc, #400]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d908      	bls.n	80057ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	495e      	ldr	r1, [pc, #376]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d908      	bls.n	80057fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80057ea:	4b56      	ldr	r3, [pc, #344]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4953      	ldr	r1, [pc, #332]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d010      	beq.n	800582a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	429a      	cmp	r2, r3
 8005816:	d908      	bls.n	800582a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005818:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f023 020f 	bic.w	r2, r3, #15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4947      	ldr	r1, [pc, #284]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005826:	4313      	orrs	r3, r2
 8005828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d055      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005836:	4b43      	ldr	r3, [pc, #268]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	4940      	ldr	r1, [pc, #256]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005844:	4313      	orrs	r3, r2
 8005846:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d107      	bne.n	8005860 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005850:	4b3c      	ldr	r3, [pc, #240]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d121      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0f6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d107      	bne.n	8005878 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005868:	4b36      	ldr	r3, [pc, #216]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d115      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0ea      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005880:	4b30      	ldr	r3, [pc, #192]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0de      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005890:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0d6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a0:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f023 0207 	bic.w	r2, r3, #7
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4925      	ldr	r1, [pc, #148]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fb fe9f 	bl	80015f4 <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ba:	f7fb fe9b 	bl	80015f4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0be      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	429a      	cmp	r2, r3
 80058e0:	d1eb      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d208      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	f023 020f 	bic.w	r2, r3, #15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	490e      	ldr	r1, [pc, #56]	; (8005944 <HAL_RCC_ClockConfig+0x244>)
 800590c:	4313      	orrs	r3, r2
 800590e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d214      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 020f 	bic.w	r2, r3, #15
 8005926:	4906      	ldr	r1, [pc, #24]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <HAL_RCC_ClockConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d005      	beq.n	8005948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e086      	b.n	8005a4e <HAL_RCC_ClockConfig+0x34e>
 8005940:	52002000 	.word	0x52002000
 8005944:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	4b3f      	ldr	r3, [pc, #252]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005960:	429a      	cmp	r2, r3
 8005962:	d208      	bcs.n	8005976 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005964:	4b3c      	ldr	r3, [pc, #240]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	4939      	ldr	r1, [pc, #228]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005972:	4313      	orrs	r3, r2
 8005974:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d010      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	4b34      	ldr	r3, [pc, #208]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800598e:	429a      	cmp	r2, r3
 8005990:	d208      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005992:	4b31      	ldr	r3, [pc, #196]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	492e      	ldr	r1, [pc, #184]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	4b28      	ldr	r3, [pc, #160]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059bc:	429a      	cmp	r2, r3
 80059be:	d208      	bcs.n	80059d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059c0:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	4922      	ldr	r1, [pc, #136]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d208      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059ee:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4917      	ldr	r1, [pc, #92]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a00:	f000 f834 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4912      	ldr	r1, [pc, #72]	; (8005a5c <HAL_RCC_ClockConfig+0x35c>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <HAL_RCC_ClockConfig+0x35c>)
 8005a28:	5cd3      	ldrb	r3, [r2, r3]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <HAL_RCC_ClockConfig+0x360>)
 8005a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <HAL_RCC_ClockConfig+0x364>)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <HAL_RCC_ClockConfig+0x368>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fb fd8c 	bl	8001560 <HAL_InitTick>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	08009758 	.word	0x08009758
 8005a60:	24000004 	.word	0x24000004
 8005a64:	24000000 	.word	0x24000000
 8005a68:	24000008 	.word	0x24000008

08005a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	; 0x24
 8005a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a72:	4bb3      	ldr	r3, [pc, #716]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a7a:	2b18      	cmp	r3, #24
 8005a7c:	f200 8155 	bhi.w	8005d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aed 	.word	0x08005aed
 8005a8c:	08005d2b 	.word	0x08005d2b
 8005a90:	08005d2b 	.word	0x08005d2b
 8005a94:	08005d2b 	.word	0x08005d2b
 8005a98:	08005d2b 	.word	0x08005d2b
 8005a9c:	08005d2b 	.word	0x08005d2b
 8005aa0:	08005d2b 	.word	0x08005d2b
 8005aa4:	08005d2b 	.word	0x08005d2b
 8005aa8:	08005b13 	.word	0x08005b13
 8005aac:	08005d2b 	.word	0x08005d2b
 8005ab0:	08005d2b 	.word	0x08005d2b
 8005ab4:	08005d2b 	.word	0x08005d2b
 8005ab8:	08005d2b 	.word	0x08005d2b
 8005abc:	08005d2b 	.word	0x08005d2b
 8005ac0:	08005d2b 	.word	0x08005d2b
 8005ac4:	08005d2b 	.word	0x08005d2b
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005d2b 	.word	0x08005d2b
 8005ad0:	08005d2b 	.word	0x08005d2b
 8005ad4:	08005d2b 	.word	0x08005d2b
 8005ad8:	08005d2b 	.word	0x08005d2b
 8005adc:	08005d2b 	.word	0x08005d2b
 8005ae0:	08005d2b 	.word	0x08005d2b
 8005ae4:	08005d2b 	.word	0x08005d2b
 8005ae8:	08005b1f 	.word	0x08005b1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aec:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d009      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005af8:	4b91      	ldr	r3, [pc, #580]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	4a90      	ldr	r2, [pc, #576]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b0a:	e111      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b0c:	4b8d      	ldr	r3, [pc, #564]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b0e:	61bb      	str	r3, [r7, #24]
    break;
 8005b10:	e10e      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b12:	4b8d      	ldr	r3, [pc, #564]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b14:	61bb      	str	r3, [r7, #24]
    break;
 8005b16:	e10b      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b18:	4b8c      	ldr	r3, [pc, #560]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b1a:	61bb      	str	r3, [r7, #24]
    break;
 8005b1c:	e108      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005b28:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b34:	4b82      	ldr	r3, [pc, #520]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b3e:	4b80      	ldr	r3, [pc, #512]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80e1 	beq.w	8005d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	f000 8083 	beq.w	8005c70 <HAL_RCC_GetSysClockFreq+0x204>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	f200 80a1 	bhi.w	8005cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x114>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d056      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b7e:	e099      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b8c:	4b6c      	ldr	r3, [pc, #432]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	4a6b      	ldr	r2, [pc, #428]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b62      	ldr	r3, [pc, #392]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005be6:	e087      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c2a:	e065      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6e:	e043      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb2:	e021      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b1e      	ldr	r3, [pc, #120]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	3301      	adds	r3, #1
 8005d04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1c:	ee17 3a90 	vmov	r3, s15
 8005d20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
    break;
 8005d28:	e002      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d2c:	61bb      	str	r3, [r7, #24]
    break;
 8005d2e:	bf00      	nop
  }

  return sysclockfreq;
 8005d30:	69bb      	ldr	r3, [r7, #24]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3724      	adds	r7, #36	; 0x24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400
 8005d44:	03d09000 	.word	0x03d09000
 8005d48:	003d0900 	.word	0x003d0900
 8005d4c:	007a1200 	.word	0x007a1200
 8005d50:	46000000 	.word	0x46000000
 8005d54:	4c742400 	.word	0x4c742400
 8005d58:	4a742400 	.word	0x4a742400
 8005d5c:	4af42400 	.word	0x4af42400

08005d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d66:	f7ff fe81 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	0a1b      	lsrs	r3, r3, #8
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	490f      	ldr	r1, [pc, #60]	; (8005db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d78:	5ccb      	ldrb	r3, [r1, r3]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d8e:	5cd3      	ldrb	r3, [r2, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	4a07      	ldr	r2, [pc, #28]	; (8005db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d9e:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005da6:	681b      	ldr	r3, [r3, #0]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	58024400 	.word	0x58024400
 8005db4:	08009758 	.word	0x08009758
 8005db8:	24000004 	.word	0x24000004
 8005dbc:	24000000 	.word	0x24000000

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dc4:	f7ff ffcc 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	091b      	lsrs	r3, r3, #4
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4904      	ldr	r1, [pc, #16]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	58024400 	.word	0x58024400
 8005de8:	08009758 	.word	0x08009758

08005dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005df0:	f7ff ffb6 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005df4:	4602      	mov	r2, r0
 8005df6:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	4904      	ldr	r1, [pc, #16]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e02:	5ccb      	ldrb	r3, [r1, r3]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	58024400 	.word	0x58024400
 8005e14:	08009758 	.word	0x08009758

08005e18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e20:	2300      	movs	r3, #0
 8005e22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e24:	2300      	movs	r3, #0
 8005e26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d03f      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e3c:	d02a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e42:	d824      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e48:	d018      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e4e:	d81e      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e58:	d007      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e5a:	e018      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5c:	4ba3      	ldr	r3, [pc, #652]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	4aa2      	ldr	r2, [pc, #648]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e68:	e015      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 f9d5 	bl	8007220 <RCCEx_PLL2_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e7a:	e00c      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	2102      	movs	r1, #2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fa7e 	bl	8007384 <RCCEx_PLL3_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	75fb      	strb	r3, [r7, #23]
      break;
 8005e92:	e000      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e9c:	4b93      	ldr	r3, [pc, #588]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	4990      	ldr	r1, [pc, #576]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	650b      	str	r3, [r1, #80]	; 0x50
 8005eae:	e001      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d03d      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d826      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005ef3 	.word	0x08005ef3
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1d 	.word	0x08005f1d
 8005ee0:	08005f1d 	.word	0x08005f1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b81      	ldr	r3, [pc, #516]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a80      	ldr	r2, [pc, #512]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ef0:	e015      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f991 	bl	8007220 <RCCEx_PLL2_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f02:	e00c      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3324      	adds	r3, #36	; 0x24
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fa3a 	bl	8007384 <RCCEx_PLL3_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f14:	e003      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1a:	e000      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f24:	4b71      	ldr	r3, [pc, #452]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	f023 0207 	bic.w	r2, r3, #7
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	496e      	ldr	r1, [pc, #440]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	650b      	str	r3, [r1, #80]	; 0x50
 8005f36:	e001      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d042      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f50:	d02b      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d825      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f58:	2bc0      	cmp	r3, #192	; 0xc0
 8005f5a:	d028      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f5c:	2bc0      	cmp	r3, #192	; 0xc0
 8005f5e:	d821      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f60:	2b80      	cmp	r3, #128	; 0x80
 8005f62:	d016      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d81d      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d007      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005f70:	e018      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f72:	4b5e      	ldr	r3, [pc, #376]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	4a5d      	ldr	r2, [pc, #372]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e017      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f94a 	bl	8007220 <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005f90:	e00e      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3324      	adds	r3, #36	; 0x24
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 f9f3 	bl	8007384 <RCCEx_PLL3_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005fb6:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc2:	494a      	ldr	r1, [pc, #296]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	650b      	str	r3, [r1, #80]	; 0x50
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d049      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fe4:	d030      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fea:	d82a      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ff0:	d02c      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ff6:	d824      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffc:	d018      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006002:	d81e      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600c:	d007      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800600e:	e018      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006010:	4b36      	ldr	r3, [pc, #216]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a35      	ldr	r2, [pc, #212]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800601c:	e017      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f8fb 	bl	8007220 <RCCEx_PLL2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800602e:	e00e      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f001 f9a4 	bl	8007384 <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006040:	e005      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
      break;
 8006046:	e002      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006048:	bf00      	nop
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800604c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006054:	4b25      	ldr	r3, [pc, #148]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006058:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006062:	4922      	ldr	r1, [pc, #136]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	658b      	str	r3, [r1, #88]	; 0x58
 8006068:	e001      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04b      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006084:	d030      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800608a:	d82a      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800608c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006090:	d02e      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006096:	d824      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609c:	d018      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800609e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a2:	d81e      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80060a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ac:	d007      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80060ae:	e018      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060bc:	e019      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f8ab 	bl	8007220 <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060ce:	e010      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3324      	adds	r3, #36	; 0x24
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 f954 	bl	8007384 <RCCEx_PLL3_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060e0:	e007      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
      break;
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80060e8:	bf00      	nop
 80060ea:	e002      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060ec:	58024400 	.word	0x58024400
      break;
 80060f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060f8:	4b99      	ldr	r3, [pc, #612]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006106:	4996      	ldr	r1, [pc, #600]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006108:	4313      	orrs	r3, r2
 800610a:	658b      	str	r3, [r1, #88]	; 0x58
 800610c:	e001      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d032      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006122:	2b30      	cmp	r3, #48	; 0x30
 8006124:	d01c      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006126:	2b30      	cmp	r3, #48	; 0x30
 8006128:	d817      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d00c      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800612e:	2b20      	cmp	r3, #32
 8006130:	d813      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006136:	2b10      	cmp	r3, #16
 8006138:	d10f      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613a:	4b89      	ldr	r3, [pc, #548]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	4a88      	ldr	r2, [pc, #544]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006146:	e00e      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2102      	movs	r1, #2
 800614e:	4618      	mov	r0, r3
 8006150:	f001 f866 	bl	8007220 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006158:	e005      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      break;
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800616c:	4b7c      	ldr	r3, [pc, #496]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800616e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006170:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006178:	4979      	ldr	r1, [pc, #484]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800617a:	4313      	orrs	r3, r2
 800617c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800617e:	e001      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d047      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006198:	d030      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800619a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619e:	d82a      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80061a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061a4:	d02c      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80061a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061aa:	d824      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d018      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	d81e      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c0:	d007      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80061c2:	e018      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c4:	4b66      	ldr	r3, [pc, #408]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	4a65      	ldr	r2, [pc, #404]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061d0:	e017      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 f821 	bl	8007220 <RCCEx_PLL2_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061e2:	e00e      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f8ca 	bl	8007384 <RCCEx_PLL3_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061f4:	e005      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
      break;
 80061fa:	e002      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80061fc:	bf00      	nop
 80061fe:	e000      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006202:	7dfb      	ldrb	r3, [r7, #23]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006208:	4b55      	ldr	r3, [pc, #340]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	4952      	ldr	r1, [pc, #328]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006216:	4313      	orrs	r3, r2
 8006218:	650b      	str	r3, [r1, #80]	; 0x50
 800621a:	e001      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d049      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006234:	d02e      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800623a:	d828      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800623c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006240:	d02a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006246:	d822      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006248:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800624c:	d026      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800624e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006252:	d81c      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006258:	d010      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800625a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800625e:	d816      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01d      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006268:	d111      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3304      	adds	r3, #4
 800626e:	2101      	movs	r1, #1
 8006270:	4618      	mov	r0, r3
 8006272:	f000 ffd5 	bl	8007220 <RCCEx_PLL2_Config>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800627a:	e012      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3324      	adds	r3, #36	; 0x24
 8006280:	2101      	movs	r1, #1
 8006282:	4618      	mov	r0, r3
 8006284:	f001 f87e 	bl	8007384 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800628c:	e009      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
      break;
 8006292:	e006      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006294:	bf00      	nop
 8006296:	e004      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006298:	bf00      	nop
 800629a:	e002      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80062a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062a8:	4b2d      	ldr	r3, [pc, #180]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b4:	492a      	ldr	r1, [pc, #168]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	650b      	str	r3, [r1, #80]	; 0x50
 80062ba:	e001      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d04d      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d6:	d02e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80062d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062dc:	d828      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d02a      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d822      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062ee:	d026      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80062f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062f4:	d81c      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fa:	d010      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80062fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006300:	d816      	bhi.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01d      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630a:	d111      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	2101      	movs	r1, #1
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ff84 	bl	8007220 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800631c:	e012      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3324      	adds	r3, #36	; 0x24
 8006322:	2101      	movs	r1, #1
 8006324:	4618      	mov	r0, r3
 8006326:	f001 f82d 	bl	8007384 <RCCEx_PLL3_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800632e:	e009      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
      break;
 8006334:	e006      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006336:	bf00      	nop
 8006338:	e004      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10c      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006358:	4901      	ldr	r1, [pc, #4]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800635a:	4313      	orrs	r3, r2
 800635c:	658b      	str	r3, [r1, #88]	; 0x58
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02f      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637c:	d00e      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006382:	d814      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638c:	d10f      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638e:	4baf      	ldr	r3, [pc, #700]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	4aae      	ldr	r2, [pc, #696]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800639a:	e00c      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	2101      	movs	r1, #1
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 ff3c 	bl	8007220 <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
      break;
 80063b2:	e000      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80063b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063bc:	4ba3      	ldr	r3, [pc, #652]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c8:	49a0      	ldr	r1, [pc, #640]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	650b      	str	r3, [r1, #80]	; 0x50
 80063ce:	e001      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d032      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d81b      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80063e8:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006427 	.word	0x08006427
 80063f4:	08006401 	.word	0x08006401
 80063f8:	0800640f 	.word	0x0800640f
 80063fc:	08006427 	.word	0x08006427
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4b92      	ldr	r3, [pc, #584]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4a91      	ldr	r2, [pc, #580]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800640c:	e00c      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3304      	adds	r3, #4
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f000 ff03 	bl	8007220 <RCCEx_PLL2_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800642e:	4b87      	ldr	r3, [pc, #540]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	f023 0203 	bic.w	r2, r3, #3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	4984      	ldr	r1, [pc, #528]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800643c:	4313      	orrs	r3, r2
 800643e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006440:	e001      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 8086 	beq.w	8006560 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006454:	4b7e      	ldr	r3, [pc, #504]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7d      	ldr	r2, [pc, #500]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800645a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006460:	f7fb f8c8 	bl	80015f4 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006466:	e009      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006468:	f7fb f8c4 	bl	80015f4 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	; 0x64
 8006474:	d902      	bls.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	75fb      	strb	r3, [r7, #23]
        break;
 800647a:	e005      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800647c:	4b74      	ldr	r3, [pc, #464]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0ef      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d166      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800648e:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006498:	4053      	eors	r3, r2
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d013      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064a2:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064ac:	4b67      	ldr	r3, [pc, #412]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a66      	ldr	r2, [pc, #408]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b8:	4b64      	ldr	r3, [pc, #400]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a63      	ldr	r2, [pc, #396]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064c4:	4a61      	ldr	r2, [pc, #388]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d4:	d115      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fb f88d 	bl	80015f4 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064dc:	e00b      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fb f889 	bl	80015f4 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d902      	bls.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	75fb      	strb	r3, [r7, #23]
            break;
 80064f4:	e005      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064f6:	4b55      	ldr	r3, [pc, #340]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ed      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d126      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006516:	d10d      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006518:	4b4c      	ldr	r3, [pc, #304]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006526:	0919      	lsrs	r1, r3, #4
 8006528:	4b4a      	ldr	r3, [pc, #296]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800652a:	400b      	ands	r3, r1
 800652c:	4947      	ldr	r1, [pc, #284]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800652e:	4313      	orrs	r3, r2
 8006530:	610b      	str	r3, [r1, #16]
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006534:	4b45      	ldr	r3, [pc, #276]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4a44      	ldr	r2, [pc, #272]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800653e:	6113      	str	r3, [r2, #16]
 8006540:	4b42      	ldr	r3, [pc, #264]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800654a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654e:	493f      	ldr	r1, [pc, #252]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006550:	4313      	orrs	r3, r2
 8006552:	670b      	str	r3, [r1, #112]	; 0x70
 8006554:	e004      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	75bb      	strb	r3, [r7, #22]
 800655a:	e001      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8085 	beq.w	8006678 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006572:	2b28      	cmp	r3, #40	; 0x28
 8006574:	d866      	bhi.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	08006659 	.word	0x08006659
 8006580:	08006645 	.word	0x08006645
 8006584:	08006645 	.word	0x08006645
 8006588:	08006645 	.word	0x08006645
 800658c:	08006645 	.word	0x08006645
 8006590:	08006645 	.word	0x08006645
 8006594:	08006645 	.word	0x08006645
 8006598:	08006645 	.word	0x08006645
 800659c:	08006621 	.word	0x08006621
 80065a0:	08006645 	.word	0x08006645
 80065a4:	08006645 	.word	0x08006645
 80065a8:	08006645 	.word	0x08006645
 80065ac:	08006645 	.word	0x08006645
 80065b0:	08006645 	.word	0x08006645
 80065b4:	08006645 	.word	0x08006645
 80065b8:	08006645 	.word	0x08006645
 80065bc:	08006633 	.word	0x08006633
 80065c0:	08006645 	.word	0x08006645
 80065c4:	08006645 	.word	0x08006645
 80065c8:	08006645 	.word	0x08006645
 80065cc:	08006645 	.word	0x08006645
 80065d0:	08006645 	.word	0x08006645
 80065d4:	08006645 	.word	0x08006645
 80065d8:	08006645 	.word	0x08006645
 80065dc:	08006659 	.word	0x08006659
 80065e0:	08006645 	.word	0x08006645
 80065e4:	08006645 	.word	0x08006645
 80065e8:	08006645 	.word	0x08006645
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006645 	.word	0x08006645
 80065f8:	08006645 	.word	0x08006645
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006645 	.word	0x08006645
 8006604:	08006645 	.word	0x08006645
 8006608:	08006645 	.word	0x08006645
 800660c:	08006645 	.word	0x08006645
 8006610:	08006645 	.word	0x08006645
 8006614:	08006645 	.word	0x08006645
 8006618:	08006645 	.word	0x08006645
 800661c:	08006659 	.word	0x08006659
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3304      	adds	r3, #4
 8006624:	2101      	movs	r1, #1
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fdfa 	bl	8007220 <RCCEx_PLL2_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006630:	e013      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3324      	adds	r3, #36	; 0x24
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fea3 	bl	8007384 <RCCEx_PLL3_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006642:	e00a      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
      break;
 8006648:	e007      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
 8006650:	58024800 	.word	0x58024800
 8006654:	00ffffcf 	.word	0x00ffffcf
      break;
 8006658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006660:	4b96      	ldr	r3, [pc, #600]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800666c:	4993      	ldr	r1, [pc, #588]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800666e:	4313      	orrs	r3, r2
 8006670:	654b      	str	r3, [r1, #84]	; 0x54
 8006672:	e001      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d038      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006688:	2b05      	cmp	r3, #5
 800668a:	d821      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066d7 	.word	0x080066d7
 8006698:	080066ad 	.word	0x080066ad
 800669c:	080066bf 	.word	0x080066bf
 80066a0:	080066d7 	.word	0x080066d7
 80066a4:	080066d7 	.word	0x080066d7
 80066a8:	080066d7 	.word	0x080066d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3304      	adds	r3, #4
 80066b0:	2101      	movs	r1, #1
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fdb4 	bl	8007220 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80066bc:	e00c      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3324      	adds	r3, #36	; 0x24
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe5d 	bl	8007384 <RCCEx_PLL3_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
      break;
 80066d4:	e000      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80066d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066de:	4b77      	ldr	r3, [pc, #476]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	f023 0207 	bic.w	r2, r3, #7
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ea:	4974      	ldr	r1, [pc, #464]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	654b      	str	r3, [r1, #84]	; 0x54
 80066f0:	e001      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d03a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006708:	2b05      	cmp	r3, #5
 800670a:	d821      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006757 	.word	0x08006757
 8006718:	0800672d 	.word	0x0800672d
 800671c:	0800673f 	.word	0x0800673f
 8006720:	08006757 	.word	0x08006757
 8006724:	08006757 	.word	0x08006757
 8006728:	08006757 	.word	0x08006757
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fd74 	bl	8007220 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800673c:	e00c      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3324      	adds	r3, #36	; 0x24
 8006742:	2101      	movs	r1, #1
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fe1d 	bl	8007384 <RCCEx_PLL3_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	75fb      	strb	r3, [r7, #23]
      break;
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800675e:	4b57      	ldr	r3, [pc, #348]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	f023 0207 	bic.w	r2, r3, #7
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	4953      	ldr	r1, [pc, #332]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800676e:	4313      	orrs	r3, r2
 8006770:	658b      	str	r3, [r1, #88]	; 0x58
 8006772:	e001      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d04b      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800678a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678e:	d02e      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006794:	d828      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679a:	d02a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800679c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a0:	d822      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80067a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a6:	d026      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80067a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067ac:	d81c      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80067ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b2:	d010      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80067b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b8:	d816      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01d      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80067be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c2:	d111      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fd28 	bl	8007220 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067d4:	e012      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3324      	adds	r3, #36	; 0x24
 80067da:	2102      	movs	r1, #2
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fdd1 	bl	8007384 <RCCEx_PLL3_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067e6:	e009      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
      break;
 80067ec:	e006      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006810:	492a      	ldr	r1, [pc, #168]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006812:	4313      	orrs	r3, r2
 8006814:	654b      	str	r3, [r1, #84]	; 0x54
 8006816:	e001      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d04d      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800682e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006832:	d02e      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006834:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006838:	d828      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800683a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683e:	d02a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d822      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684a:	d026      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800684c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006850:	d81c      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006856:	d010      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d816      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01d      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d111      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fcd6 	bl	8007220 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006878:	e012      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3324      	adds	r3, #36	; 0x24
 800687e:	2102      	movs	r1, #2
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fd7f 	bl	8007384 <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800688a:	e009      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
      break;
 8006890:	e006      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006892:	bf00      	nop
 8006894:	e004      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800689e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b4:	4901      	ldr	r1, [pc, #4]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	658b      	str	r3, [r1, #88]	; 0x58
 80068ba:	e003      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80068bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d04b      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068da:	d02e      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80068dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068e0:	d828      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e6:	d02a      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80068e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ec:	d822      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068f2:	d026      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80068f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068f8:	d81c      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fe:	d010      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006904:	d816      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01d      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800690a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690e:	d111      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fc82 	bl	8007220 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006920:	e012      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3324      	adds	r3, #36	; 0x24
 8006926:	2102      	movs	r1, #2
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fd2b 	bl	8007384 <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006932:	e009      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800693a:	bf00      	nop
 800693c:	e004      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800693e:	bf00      	nop
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800694e:	4b9d      	ldr	r3, [pc, #628]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695c:	4999      	ldr	r1, [pc, #612]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800695e:	4313      	orrs	r3, r2
 8006960:	658b      	str	r3, [r1, #88]	; 0x58
 8006962:	e001      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01a      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	d10a      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2102      	movs	r1, #2
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fcfc 	bl	8007384 <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006996:	4b8b      	ldr	r3, [pc, #556]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a4:	4987      	ldr	r1, [pc, #540]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01a      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c0:	d10a      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	; 0x24
 80069c6:	2102      	movs	r1, #2
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fcdb 	bl	8007384 <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069d8:	4b7a      	ldr	r3, [pc, #488]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e6:	4977      	ldr	r1, [pc, #476]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d034      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a02:	d01d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a08:	d817      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a12:	d009      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006a14:	e011      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fbff 	bl	8007220 <RCCEx_PLL2_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a26:	e00c      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3324      	adds	r3, #36	; 0x24
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fca8 	bl	8007384 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3e:	e000      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a48:	4b5e      	ldr	r3, [pc, #376]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a56:	495b      	ldr	r1, [pc, #364]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	658b      	str	r3, [r1, #88]	; 0x58
 8006a5c:	e001      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d033      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a78:	d01c      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006a7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a7e:	d816      	bhi.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a84:	d003      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a8a:	d007      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006a8c:	e00f      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8e:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a4c      	ldr	r2, [pc, #304]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a9a:	e00c      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3324      	adds	r3, #36	; 0x24
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc6e 	bl	8007384 <RCCEx_PLL3_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006aac:	e003      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006abc:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aca:	493e      	ldr	r1, [pc, #248]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	654b      	str	r3, [r1, #84]	; 0x54
 8006ad0:	e001      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d029      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aee:	d007      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006af0:	e00f      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af2:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006afe:	e00b      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fb8a 	bl	8007220 <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b10:	e002      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
      break;
 8006b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b1e:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	4926      	ldr	r1, [pc, #152]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b30:	e001      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3324      	adds	r3, #36	; 0x24
 8006b46:	2102      	movs	r1, #2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fc1b 	bl	8007384 <RCCEx_PLL3_Config>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d033      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6c:	d017      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b72:	d811      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b78:	d013      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7e:	d80b      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b88:	d106      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8a:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	4a0d      	ldr	r2, [pc, #52]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006b96:	e007      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b9c:	e004      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e000      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bba:	4902      	ldr	r1, [pc, #8]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8006bc0:	e004      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006bc2:	bf00      	nop
 8006bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	492e      	ldr	r1, [pc, #184]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bf6:	4b2a      	ldr	r3, [pc, #168]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c04:	4926      	ldr	r1, [pc, #152]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c16:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c22:	491f      	ldr	r1, [pc, #124]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c34:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c3e:	6113      	str	r3, [r2, #16]
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c4a:	4915      	ldr	r1, [pc, #84]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da08      	bge.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	490e      	ldr	r1, [pc, #56]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c84:	4906      	ldr	r1, [pc, #24]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006c8a:	7dbb      	ldrb	r3, [r7, #22]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	58024400 	.word	0x58024400

08006ca4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ca8:	f7ff f85a 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4904      	ldr	r1, [pc, #16]	; (8006ccc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	08009758 	.word	0x08009758

08006cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	; 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cd8:	4ba1      	ldr	r3, [pc, #644]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ce2:	4b9f      	ldr	r3, [pc, #636]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	0b1b      	lsrs	r3, r3, #12
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cee:	4b9c      	ldr	r3, [pc, #624]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	091b      	lsrs	r3, r3, #4
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006cfa:	4b99      	ldr	r3, [pc, #612]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8111 	beq.w	8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	f000 8083 	beq.w	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	f200 80a1 	bhi.w	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d056      	beq.n	8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d3a:	e099      	b.n	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3c:	4b88      	ldr	r3, [pc, #544]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02d      	beq.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d48:	4b85      	ldr	r3, [pc, #532]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	4a84      	ldr	r2, [pc, #528]	; (8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006da2:	e087      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db6:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006de6:	e065      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b59      	ldr	r3, [pc, #356]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e2a:	e043      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e6e:	e021      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006eb4:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	0a5b      	lsrs	r3, r3, #9
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eda:	ee17 2a90 	vmov	r2, s15
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006ee2:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f08:	ee17 2a90 	vmov	r2, s15
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006f10:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	0e1b      	lsrs	r3, r3, #24
 8006f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f36:	ee17 2a90 	vmov	r2, s15
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f3e:	e008      	b.n	8006f52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	3724      	adds	r7, #36	; 0x24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	03d09000 	.word	0x03d09000
 8006f68:	46000000 	.word	0x46000000
 8006f6c:	4c742400 	.word	0x4c742400
 8006f70:	4a742400 	.word	0x4a742400
 8006f74:	4af42400 	.word	0x4af42400

08006f78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f80:	4ba1      	ldr	r3, [pc, #644]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006f8a:	4b9f      	ldr	r3, [pc, #636]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	0d1b      	lsrs	r3, r3, #20
 8006f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f96:	4b9c      	ldr	r3, [pc, #624]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006fa2:	4b99      	ldr	r3, [pc, #612]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8111 	beq.w	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f000 8083 	beq.w	80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	f200 80a1 	bhi.w	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d056      	beq.n	8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fe2:	e099      	b.n	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe4:	4b88      	ldr	r3, [pc, #544]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d02d      	beq.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ff0:	4b85      	ldr	r3, [pc, #532]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	08db      	lsrs	r3, r3, #3
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	4a84      	ldr	r2, [pc, #528]	; (800720c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8007000:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b7b      	ldr	r3, [pc, #492]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800704a:	e087      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b6a      	ldr	r3, [pc, #424]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800708e:	e065      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b59      	ldr	r3, [pc, #356]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070d2:	e043      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800721c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b48      	ldr	r3, [pc, #288]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007116:	e021      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800715a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800715c:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	0a5b      	lsrs	r3, r3, #9
 8007162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007176:	edd7 6a07 	vldr	s13, [r7, #28]
 800717a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007182:	ee17 2a90 	vmov	r2, s15
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800718a:	4b1f      	ldr	r3, [pc, #124]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b0:	ee17 2a90 	vmov	r2, s15
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	0e1b      	lsrs	r3, r3, #24
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071de:	ee17 2a90 	vmov	r2, s15
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071e6:	e008      	b.n	80071fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
}
 80071fa:	bf00      	nop
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	46000000 	.word	0x46000000
 8007214:	4c742400 	.word	0x4c742400
 8007218:	4a742400 	.word	0x4a742400
 800721c:	4af42400 	.word	0x4af42400

08007220 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800722e:	4b53      	ldr	r3, [pc, #332]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d101      	bne.n	800723e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e099      	b.n	8007372 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800723e:	4b4f      	ldr	r3, [pc, #316]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a4e      	ldr	r2, [pc, #312]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007244:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800724a:	f7fa f9d3 	bl	80015f4 <HAL_GetTick>
 800724e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007250:	e008      	b.n	8007264 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007252:	f7fa f9cf 	bl	80015f4 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e086      	b.n	8007372 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007264:	4b45      	ldr	r3, [pc, #276]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1f0      	bne.n	8007252 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007270:	4b42      	ldr	r3, [pc, #264]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	493f      	ldr	r1, [pc, #252]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007280:	4313      	orrs	r3, r2
 8007282:	628b      	str	r3, [r1, #40]	; 0x28
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	3b01      	subs	r3, #1
 800728a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	b29b      	uxth	r3, r3
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	3b01      	subs	r3, #1
 80072a0:	041b      	lsls	r3, r3, #16
 80072a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072b4:	4931      	ldr	r1, [pc, #196]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072ba:	4b30      	ldr	r3, [pc, #192]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	492d      	ldr	r1, [pc, #180]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f023 0220 	bic.w	r2, r3, #32
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	4928      	ldr	r1, [pc, #160]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a26      	ldr	r2, [pc, #152]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f023 0310 	bic.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ea:	4b24      	ldr	r3, [pc, #144]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <RCCEx_PLL2_Config+0x160>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	69d2      	ldr	r2, [r2, #28]
 80072f6:	00d2      	lsls	r2, r2, #3
 80072f8:	4920      	ldr	r1, [pc, #128]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072fe:	4b1f      	ldr	r3, [pc, #124]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800731c:	e00f      	b.n	800733e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d106      	bne.n	8007332 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007324:	4b15      	ldr	r3, [pc, #84]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 800732a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800732e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007330:	e005      	b.n	800733e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4a11      	ldr	r2, [pc, #68]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800733c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a0e      	ldr	r2, [pc, #56]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734a:	f7fa f953 	bl	80015f4 <HAL_GetTick>
 800734e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007350:	e008      	b.n	8007364 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007352:	f7fa f94f 	bl	80015f4 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e006      	b.n	8007372 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <RCCEx_PLL2_Config+0x15c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	ffff0007 	.word	0xffff0007

08007384 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d101      	bne.n	80073a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e099      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073a2:	4b4f      	ldr	r3, [pc, #316]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a4e      	ldr	r2, [pc, #312]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ae:	f7fa f921 	bl	80015f4 <HAL_GetTick>
 80073b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80073b6:	f7fa f91d 	bl	80015f4 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e086      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073c8:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f0      	bne.n	80073b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	051b      	lsls	r3, r3, #20
 80073e2:	493f      	ldr	r1, [pc, #252]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	628b      	str	r3, [r1, #40]	; 0x28
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	025b      	lsls	r3, r3, #9
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	3b01      	subs	r3, #1
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007418:	4931      	ldr	r1, [pc, #196]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800741e:	4b30      	ldr	r3, [pc, #192]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	492d      	ldr	r1, [pc, #180]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800742c:	4313      	orrs	r3, r2
 800742e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007430:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4928      	ldr	r1, [pc, #160]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007442:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800744c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <RCCEx_PLL3_Config+0x160>)
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	69d2      	ldr	r2, [r2, #28]
 800745a:	00d2      	lsls	r2, r2, #3
 800745c:	4920      	ldr	r1, [pc, #128]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007462:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800747a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800747e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007480:	e00f      	b.n	80074a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800748e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007494:	e005      	b.n	80074a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a11      	ldr	r2, [pc, #68]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 800749c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fa f8a1 	bl	80015f4 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074b6:	f7fa f89d 	bl	80015f4 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e006      	b.n	80074d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <RCCEx_PLL3_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	ffff0007 	.word	0xffff0007

080074e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0f1      	b.n	80076de <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a78      	ldr	r2, [pc, #480]	; (80076e8 <HAL_SPI_Init+0x200>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00f      	beq.n	800752a <HAL_SPI_Init+0x42>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a77      	ldr	r2, [pc, #476]	; (80076ec <HAL_SPI_Init+0x204>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00a      	beq.n	800752a <HAL_SPI_Init+0x42>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a75      	ldr	r2, [pc, #468]	; (80076f0 <HAL_SPI_Init+0x208>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d005      	beq.n	800752a <HAL_SPI_Init+0x42>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2b0f      	cmp	r3, #15
 8007524:	d901      	bls.n	800752a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e0d9      	b.n	80076de <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fd38 	bl	8007fa0 <SPI_GetPacketSize>
 8007530:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a6c      	ldr	r2, [pc, #432]	; (80076e8 <HAL_SPI_Init+0x200>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00c      	beq.n	8007556 <HAL_SPI_Init+0x6e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a6a      	ldr	r2, [pc, #424]	; (80076ec <HAL_SPI_Init+0x204>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d007      	beq.n	8007556 <HAL_SPI_Init+0x6e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a69      	ldr	r2, [pc, #420]	; (80076f0 <HAL_SPI_Init+0x208>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d002      	beq.n	8007556 <HAL_SPI_Init+0x6e>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b08      	cmp	r3, #8
 8007554:	d811      	bhi.n	800757a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800755a:	4a63      	ldr	r2, [pc, #396]	; (80076e8 <HAL_SPI_Init+0x200>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a61      	ldr	r2, [pc, #388]	; (80076ec <HAL_SPI_Init+0x204>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_SPI_Init+0x8c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a60      	ldr	r2, [pc, #384]	; (80076f0 <HAL_SPI_Init+0x208>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d104      	bne.n	800757e <HAL_SPI_Init+0x96>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b10      	cmp	r3, #16
 8007578:	d901      	bls.n	800757e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e0af      	b.n	80076de <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7f9 fd7c 	bl	8001090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0201 	bic.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80075ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c4:	d119      	bne.n	80075fa <HAL_SPI_Init+0x112>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ce:	d103      	bne.n	80075d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075e8:	d107      	bne.n	80075fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	431a      	orrs	r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	ea42 0103 	orr.w	r1, r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765a:	ea42 0103 	orr.w	r1, r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d113      	bne.n	800769a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007684:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007698:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	40013000 	.word	0x40013000
 80076ec:	40003800 	.word	0x40003800
 80076f0:	40003c00 	.word	0x40003c00

080076f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_SPI_Transmit_DMA+0x20>
 8007710:	2302      	movs	r3, #2
 8007712:	e12c      	b.n	800796e <HAL_SPI_Transmit_DMA+0x27a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d007      	beq.n	8007738 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8007728:	2302      	movs	r3, #2
 800772a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	e11a      	b.n	800796e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_Transmit_DMA+0x50>
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	e10c      	b.n	800796e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2203      	movs	r2, #3
 8007758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	88fa      	ldrh	r2, [r7, #6]
 8007776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80077a4:	d107      	bne.n	80077b6 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077b4:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b0f      	cmp	r3, #15
 80077bc:	d905      	bls.n	80077ca <HAL_SPI_Transmit_DMA+0xd6>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c8:	d10f      	bne.n	80077ea <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80077ce:	2b07      	cmp	r3, #7
 80077d0:	d913      	bls.n	80077fa <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077dc:	d00d      	beq.n	80077fa <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80077e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e8:	d007      	beq.n	80077fa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	e0b9      	b.n	800796e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b07      	cmp	r3, #7
 8007800:	d820      	bhi.n	8007844 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780c:	d109      	bne.n	8007822 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007814:	b29b      	uxth	r3, r3
 8007816:	3301      	adds	r3, #1
 8007818:	105b      	asrs	r3, r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782c:	d11e      	bne.n	800786c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007834:	b29b      	uxth	r3, r3
 8007836:	3303      	adds	r3, #3
 8007838:	109b      	asrs	r3, r3, #2
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007842:	e013      	b.n	800786c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b0f      	cmp	r3, #15
 800784a:	d80f      	bhi.n	800786c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007856:	d109      	bne.n	800786c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800785e:	b29b      	uxth	r3, r3
 8007860:	3301      	adds	r3, #1
 8007862:	105b      	asrs	r3, r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007870:	4a41      	ldr	r2, [pc, #260]	; (8007978 <HAL_SPI_Transmit_DMA+0x284>)
 8007872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007878:	4a40      	ldr	r2, [pc, #256]	; (800797c <HAL_SPI_Transmit_DMA+0x288>)
 800787a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007880:	4a3f      	ldr	r2, [pc, #252]	; (8007980 <HAL_SPI_Transmit_DMA+0x28c>)
 8007882:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007888:	2200      	movs	r2, #0
 800788a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800789a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a4:	4619      	mov	r1, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3320      	adds	r3, #32
 80078ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80078b6:	f7fa fb59 	bl	8001f6c <HAL_DMA_Start_IT>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d013      	beq.n	80078e8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c6:	f043 0210 	orr.w	r2, r3, #16
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	e042      	b.n	800796e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d108      	bne.n	8007906 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6859      	ldr	r1, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b21      	ldr	r3, [pc, #132]	; (8007984 <HAL_SPI_Transmit_DMA+0x290>)
 8007900:	400b      	ands	r3, r1
 8007902:	6053      	str	r3, [r2, #4]
 8007904:	e009      	b.n	800791a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b1d      	ldr	r3, [pc, #116]	; (8007984 <HAL_SPI_Transmit_DMA+0x290>)
 800790e:	4013      	ands	r3, r2
 8007910:	88f9      	ldrh	r1, [r7, #6]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	430b      	orrs	r3, r1
 8007918:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007928:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8007938:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0201 	orr.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007952:	d107      	bne.n	8007964 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007962:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	08007dcb 	.word	0x08007dcb
 800797c:	08007d85 	.word	0x08007d85
 8007980:	08007de7 	.word	0x08007de7
 8007984:	ffff0000 	.word	0xffff0000

08007988 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80079a0:	6a3a      	ldr	r2, [r7, #32]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4013      	ands	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80079b0:	2300      	movs	r3, #0
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079ba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3330      	adds	r3, #48	; 0x30
 80079c2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d113      	bne.n	80079f6 <HAL_SPI_IRQHandler+0x6e>
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10e      	bne.n	80079f6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
    handled = 1UL;
 80079f2:	2301      	movs	r3, #1
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10f      	bne.n	8007a20 <HAL_SPI_IRQHandler+0x98>
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d105      	bne.n	8007a20 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
    handled = 1UL;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10f      	bne.n	8007a4a <HAL_SPI_IRQHandler+0xc2>
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
    handled = 1UL;
 8007a46:	2301      	movs	r3, #1
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 815a 	bne.w	8007d06 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 808b 	beq.w	8007b74 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0208 	orr.w	r2, r2, #8
 8007a6c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0210 	orr.w	r2, r2, #16
 8007a7c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699a      	ldr	r2, [r3, #24]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a8c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0208 	bic.w	r2, r2, #8
 8007a9c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d13d      	bne.n	8007b28 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007aac:	e036      	b.n	8007b1c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	d90b      	bls.n	8007ace <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007abe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ac0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	665a      	str	r2, [r3, #100]	; 0x64
 8007acc:	e01d      	b.n	8007b0a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	2b07      	cmp	r3, #7
 8007ad4:	d90b      	bls.n	8007aee <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	8812      	ldrh	r2, [r2, #0]
 8007ade:	b292      	uxth	r2, r2
 8007ae0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae6:	1c9a      	adds	r2, r3, #2
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	665a      	str	r2, [r3, #100]	; 0x64
 8007aec:	e00d      	b.n	8007b0a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1c2      	bne.n	8007aae <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f999 	bl	8007e60 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f915 	bl	8007d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007b46:	e0e3      	b.n	8007d10 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007b48:	7cfb      	ldrb	r3, [r7, #19]
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d103      	bne.n	8007b56 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8fa 	bl	8007d48 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007b54:	e0d9      	b.n	8007d0a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007b56:	7cfb      	ldrb	r3, [r7, #19]
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d103      	bne.n	8007b64 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8e9 	bl	8007d34 <HAL_SPI_RxCpltCallback>
    return;
 8007b62:	e0d2      	b.n	8007d0a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	f040 80cf 	bne.w	8007d0a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8d7 	bl	8007d20 <HAL_SPI_TxCpltCallback>
    return;
 8007b72:	e0ca      	b.n	8007d0a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <HAL_SPI_IRQHandler+0x212>
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b96:	619a      	str	r2, [r3, #24]

    return;
 8007b98:	e0ba      	b.n	8007d10 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80b5 	beq.w	8007d10 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00f      	beq.n	8007bfa <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be0:	f043 0201 	orr.w	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0a:	f043 0208 	orr.w	r2, r3, #8
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c22:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00f      	beq.n	8007c4e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0220 	orr.w	r2, r2, #32
 8007c4c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05a      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0201 	bic.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6919      	ldr	r1, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <HAL_SPI_IRQHandler+0x390>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c82:	d138      	bne.n	8007cf6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c92:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d013      	beq.n	8007cc4 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca0:	4a1e      	ldr	r2, [pc, #120]	; (8007d1c <HAL_SPI_IRQHandler+0x394>)
 8007ca2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fa fbc9 	bl	8002440 <HAL_DMA_Abort_IT>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d020      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd0:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <HAL_SPI_IRQHandler+0x394>)
 8007cd2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fa fbb1 	bl	8002440 <HAL_DMA_Abort_IT>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d014      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007cf4:	e00b      	b.n	8007d0e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f836 	bl	8007d70 <HAL_SPI_ErrorCallback>
    return;
 8007d04:	e003      	b.n	8007d0e <HAL_SPI_IRQHandler+0x386>
    return;
 8007d06:	bf00      	nop
 8007d08:	e002      	b.n	8007d10 <HAL_SPI_IRQHandler+0x388>
    return;
 8007d0a:	bf00      	nop
 8007d0c:	e000      	b.n	8007d10 <HAL_SPI_IRQHandler+0x388>
    return;
 8007d0e:	bf00      	nop
  }
}
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	fffffc94 	.word	0xfffffc94
 8007d1c:	08007e2d 	.word	0x08007e2d

08007d20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	d011      	beq.n	8007dc2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da8:	d103      	bne.n	8007db2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff ffb8 	bl	8007d20 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007db0:	e007      	b.n	8007dc2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0208 	orr.w	r2, r2, #8
 8007dc0:	611a      	str	r2, [r3, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff ffbf 	bl	8007d5c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fb fc93 	bl	8003720 <HAL_DMA_GetError>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d011      	beq.n	8007e24 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f82d 	bl	8007e60 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e0c:	f043 0210 	orr.w	r2, r3, #16
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ffa6 	bl	8007d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ff8c 	bl	8007d70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0210 	orr.w	r2, r2, #16
 8007e8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6919      	ldr	r1, [r3, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b3c      	ldr	r3, [pc, #240]	; (8007f9c <SPI_CloseTransfer+0x13c>)
 8007eac:	400b      	ands	r3, r1
 8007eae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007ebe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d014      	beq.n	8007ef6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00f      	beq.n	8007ef6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007edc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0220 	orr.w	r2, r2, #32
 8007ef4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d014      	beq.n	8007f2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00f      	beq.n	8007f2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f12:	f043 0204 	orr.w	r2, r3, #4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00f      	beq.n	8007f56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3c:	f043 0201 	orr.w	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00f      	beq.n	8007f80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f66:	f043 0208 	orr.w	r2, r3, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007f90:	bf00      	nop
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	fffffc90 	.word	0xfffffc90

08007fa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3307      	adds	r3, #7
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e042      	b.n	800806e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7f9 f91e 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2224      	movs	r2, #36	; 0x24
 8008004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f82d 	bl	8008078 <UART_SetConfig>
 800801e:	4603      	mov	r3, r0
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e022      	b.n	800806e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fd89 	bl	8008b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008044:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008054:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0201 	orr.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fe10 	bl	8008c8c <UART_CheckIdleState>
 800806c:	4603      	mov	r3, r0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800807c:	b092      	sub	sp, #72	; 0x48
 800807e:	af00      	add	r7, sp, #0
 8008080:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	431a      	orrs	r2, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	431a      	orrs	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	4313      	orrs	r3, r2
 800809e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4bbe      	ldr	r3, [pc, #760]	; (80083a0 <UART_SetConfig+0x328>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080b0:	430b      	orrs	r3, r1
 80080b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4ab3      	ldr	r2, [pc, #716]	; (80083a4 <UART_SetConfig+0x32c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080e0:	4313      	orrs	r3, r2
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	4baf      	ldr	r3, [pc, #700]	; (80083a8 <UART_SetConfig+0x330>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	f023 010f 	bic.w	r1, r3, #15
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4aa6      	ldr	r2, [pc, #664]	; (80083ac <UART_SetConfig+0x334>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d177      	bne.n	8008208 <UART_SetConfig+0x190>
 8008118:	4ba5      	ldr	r3, [pc, #660]	; (80083b0 <UART_SetConfig+0x338>)
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008120:	2b28      	cmp	r3, #40	; 0x28
 8008122:	d86d      	bhi.n	8008200 <UART_SetConfig+0x188>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0xb4>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	080081d1 	.word	0x080081d1
 8008130:	08008201 	.word	0x08008201
 8008134:	08008201 	.word	0x08008201
 8008138:	08008201 	.word	0x08008201
 800813c:	08008201 	.word	0x08008201
 8008140:	08008201 	.word	0x08008201
 8008144:	08008201 	.word	0x08008201
 8008148:	08008201 	.word	0x08008201
 800814c:	080081d9 	.word	0x080081d9
 8008150:	08008201 	.word	0x08008201
 8008154:	08008201 	.word	0x08008201
 8008158:	08008201 	.word	0x08008201
 800815c:	08008201 	.word	0x08008201
 8008160:	08008201 	.word	0x08008201
 8008164:	08008201 	.word	0x08008201
 8008168:	08008201 	.word	0x08008201
 800816c:	080081e1 	.word	0x080081e1
 8008170:	08008201 	.word	0x08008201
 8008174:	08008201 	.word	0x08008201
 8008178:	08008201 	.word	0x08008201
 800817c:	08008201 	.word	0x08008201
 8008180:	08008201 	.word	0x08008201
 8008184:	08008201 	.word	0x08008201
 8008188:	08008201 	.word	0x08008201
 800818c:	080081e9 	.word	0x080081e9
 8008190:	08008201 	.word	0x08008201
 8008194:	08008201 	.word	0x08008201
 8008198:	08008201 	.word	0x08008201
 800819c:	08008201 	.word	0x08008201
 80081a0:	08008201 	.word	0x08008201
 80081a4:	08008201 	.word	0x08008201
 80081a8:	08008201 	.word	0x08008201
 80081ac:	080081f1 	.word	0x080081f1
 80081b0:	08008201 	.word	0x08008201
 80081b4:	08008201 	.word	0x08008201
 80081b8:	08008201 	.word	0x08008201
 80081bc:	08008201 	.word	0x08008201
 80081c0:	08008201 	.word	0x08008201
 80081c4:	08008201 	.word	0x08008201
 80081c8:	08008201 	.word	0x08008201
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e222      	b.n	800861e <UART_SetConfig+0x5a6>
 80081d8:	2304      	movs	r3, #4
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e21e      	b.n	800861e <UART_SetConfig+0x5a6>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e21a      	b.n	800861e <UART_SetConfig+0x5a6>
 80081e8:	2310      	movs	r3, #16
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e216      	b.n	800861e <UART_SetConfig+0x5a6>
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e212      	b.n	800861e <UART_SetConfig+0x5a6>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e20e      	b.n	800861e <UART_SetConfig+0x5a6>
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e20a      	b.n	800861e <UART_SetConfig+0x5a6>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a69      	ldr	r2, [pc, #420]	; (80083b4 <UART_SetConfig+0x33c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d130      	bne.n	8008274 <UART_SetConfig+0x1fc>
 8008212:	4b67      	ldr	r3, [pc, #412]	; (80083b0 <UART_SetConfig+0x338>)
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b05      	cmp	r3, #5
 800821c:	d826      	bhi.n	800826c <UART_SetConfig+0x1f4>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x1ac>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008245 	.word	0x08008245
 800822c:	0800824d 	.word	0x0800824d
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	2300      	movs	r3, #0
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e1ec      	b.n	800861e <UART_SetConfig+0x5a6>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e1e8      	b.n	800861e <UART_SetConfig+0x5a6>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e1e4      	b.n	800861e <UART_SetConfig+0x5a6>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e1e0      	b.n	800861e <UART_SetConfig+0x5a6>
 800825c:	2320      	movs	r3, #32
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e1dc      	b.n	800861e <UART_SetConfig+0x5a6>
 8008264:	2340      	movs	r3, #64	; 0x40
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e1d8      	b.n	800861e <UART_SetConfig+0x5a6>
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e1d4      	b.n	800861e <UART_SetConfig+0x5a6>
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a4f      	ldr	r2, [pc, #316]	; (80083b8 <UART_SetConfig+0x340>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d130      	bne.n	80082e0 <UART_SetConfig+0x268>
 800827e:	4b4c      	ldr	r3, [pc, #304]	; (80083b0 <UART_SetConfig+0x338>)
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	2b05      	cmp	r3, #5
 8008288:	d826      	bhi.n	80082d8 <UART_SetConfig+0x260>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0x218>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a9 	.word	0x080082a9
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082b9 	.word	0x080082b9
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e1b6      	b.n	800861e <UART_SetConfig+0x5a6>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e1b2      	b.n	800861e <UART_SetConfig+0x5a6>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e1ae      	b.n	800861e <UART_SetConfig+0x5a6>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e1aa      	b.n	800861e <UART_SetConfig+0x5a6>
 80082c8:	2320      	movs	r3, #32
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e1a6      	b.n	800861e <UART_SetConfig+0x5a6>
 80082d0:	2340      	movs	r3, #64	; 0x40
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e1a2      	b.n	800861e <UART_SetConfig+0x5a6>
 80082d8:	2380      	movs	r3, #128	; 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e19e      	b.n	800861e <UART_SetConfig+0x5a6>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a35      	ldr	r2, [pc, #212]	; (80083bc <UART_SetConfig+0x344>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d130      	bne.n	800834c <UART_SetConfig+0x2d4>
 80082ea:	4b31      	ldr	r3, [pc, #196]	; (80083b0 <UART_SetConfig+0x338>)
 80082ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d826      	bhi.n	8008344 <UART_SetConfig+0x2cc>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <UART_SetConfig+0x284>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008315 	.word	0x08008315
 8008300:	0800831d 	.word	0x0800831d
 8008304:	08008325 	.word	0x08008325
 8008308:	0800832d 	.word	0x0800832d
 800830c:	08008335 	.word	0x08008335
 8008310:	0800833d 	.word	0x0800833d
 8008314:	2300      	movs	r3, #0
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e180      	b.n	800861e <UART_SetConfig+0x5a6>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e17c      	b.n	800861e <UART_SetConfig+0x5a6>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e178      	b.n	800861e <UART_SetConfig+0x5a6>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e174      	b.n	800861e <UART_SetConfig+0x5a6>
 8008334:	2320      	movs	r3, #32
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e170      	b.n	800861e <UART_SetConfig+0x5a6>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e16c      	b.n	800861e <UART_SetConfig+0x5a6>
 8008344:	2380      	movs	r3, #128	; 0x80
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e168      	b.n	800861e <UART_SetConfig+0x5a6>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <UART_SetConfig+0x348>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d142      	bne.n	80083dc <UART_SetConfig+0x364>
 8008356:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <UART_SetConfig+0x338>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b05      	cmp	r3, #5
 8008360:	d838      	bhi.n	80083d4 <UART_SetConfig+0x35c>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0x2f0>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008381 	.word	0x08008381
 800836c:	08008389 	.word	0x08008389
 8008370:	08008391 	.word	0x08008391
 8008374:	08008399 	.word	0x08008399
 8008378:	080083c5 	.word	0x080083c5
 800837c:	080083cd 	.word	0x080083cd
 8008380:	2300      	movs	r3, #0
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e14a      	b.n	800861e <UART_SetConfig+0x5a6>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e146      	b.n	800861e <UART_SetConfig+0x5a6>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e142      	b.n	800861e <UART_SetConfig+0x5a6>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e13e      	b.n	800861e <UART_SetConfig+0x5a6>
 80083a0:	cfff69f3 	.word	0xcfff69f3
 80083a4:	58000c00 	.word	0x58000c00
 80083a8:	11fff4ff 	.word	0x11fff4ff
 80083ac:	40011000 	.word	0x40011000
 80083b0:	58024400 	.word	0x58024400
 80083b4:	40004400 	.word	0x40004400
 80083b8:	40004800 	.word	0x40004800
 80083bc:	40004c00 	.word	0x40004c00
 80083c0:	40005000 	.word	0x40005000
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e128      	b.n	800861e <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e124      	b.n	800861e <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e120      	b.n	800861e <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4acb      	ldr	r2, [pc, #812]	; (8008710 <UART_SetConfig+0x698>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d176      	bne.n	80084d4 <UART_SetConfig+0x45c>
 80083e6:	4bcb      	ldr	r3, [pc, #812]	; (8008714 <UART_SetConfig+0x69c>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ee:	2b28      	cmp	r3, #40	; 0x28
 80083f0:	d86c      	bhi.n	80084cc <UART_SetConfig+0x454>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x380>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	080084cd 	.word	0x080084cd
 8008400:	080084cd 	.word	0x080084cd
 8008404:	080084cd 	.word	0x080084cd
 8008408:	080084cd 	.word	0x080084cd
 800840c:	080084cd 	.word	0x080084cd
 8008410:	080084cd 	.word	0x080084cd
 8008414:	080084cd 	.word	0x080084cd
 8008418:	080084a5 	.word	0x080084a5
 800841c:	080084cd 	.word	0x080084cd
 8008420:	080084cd 	.word	0x080084cd
 8008424:	080084cd 	.word	0x080084cd
 8008428:	080084cd 	.word	0x080084cd
 800842c:	080084cd 	.word	0x080084cd
 8008430:	080084cd 	.word	0x080084cd
 8008434:	080084cd 	.word	0x080084cd
 8008438:	080084ad 	.word	0x080084ad
 800843c:	080084cd 	.word	0x080084cd
 8008440:	080084cd 	.word	0x080084cd
 8008444:	080084cd 	.word	0x080084cd
 8008448:	080084cd 	.word	0x080084cd
 800844c:	080084cd 	.word	0x080084cd
 8008450:	080084cd 	.word	0x080084cd
 8008454:	080084cd 	.word	0x080084cd
 8008458:	080084b5 	.word	0x080084b5
 800845c:	080084cd 	.word	0x080084cd
 8008460:	080084cd 	.word	0x080084cd
 8008464:	080084cd 	.word	0x080084cd
 8008468:	080084cd 	.word	0x080084cd
 800846c:	080084cd 	.word	0x080084cd
 8008470:	080084cd 	.word	0x080084cd
 8008474:	080084cd 	.word	0x080084cd
 8008478:	080084bd 	.word	0x080084bd
 800847c:	080084cd 	.word	0x080084cd
 8008480:	080084cd 	.word	0x080084cd
 8008484:	080084cd 	.word	0x080084cd
 8008488:	080084cd 	.word	0x080084cd
 800848c:	080084cd 	.word	0x080084cd
 8008490:	080084cd 	.word	0x080084cd
 8008494:	080084cd 	.word	0x080084cd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2301      	movs	r3, #1
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e0bc      	b.n	800861e <UART_SetConfig+0x5a6>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e0b8      	b.n	800861e <UART_SetConfig+0x5a6>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e0b4      	b.n	800861e <UART_SetConfig+0x5a6>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e0b0      	b.n	800861e <UART_SetConfig+0x5a6>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e0ac      	b.n	800861e <UART_SetConfig+0x5a6>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e0a8      	b.n	800861e <UART_SetConfig+0x5a6>
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e0a4      	b.n	800861e <UART_SetConfig+0x5a6>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a8f      	ldr	r2, [pc, #572]	; (8008718 <UART_SetConfig+0x6a0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d130      	bne.n	8008540 <UART_SetConfig+0x4c8>
 80084de:	4b8d      	ldr	r3, [pc, #564]	; (8008714 <UART_SetConfig+0x69c>)
 80084e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d826      	bhi.n	8008538 <UART_SetConfig+0x4c0>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x478>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e086      	b.n	800861e <UART_SetConfig+0x5a6>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e082      	b.n	800861e <UART_SetConfig+0x5a6>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e07e      	b.n	800861e <UART_SetConfig+0x5a6>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e07a      	b.n	800861e <UART_SetConfig+0x5a6>
 8008528:	2320      	movs	r3, #32
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e076      	b.n	800861e <UART_SetConfig+0x5a6>
 8008530:	2340      	movs	r3, #64	; 0x40
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e072      	b.n	800861e <UART_SetConfig+0x5a6>
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e06e      	b.n	800861e <UART_SetConfig+0x5a6>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a75      	ldr	r2, [pc, #468]	; (800871c <UART_SetConfig+0x6a4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d130      	bne.n	80085ac <UART_SetConfig+0x534>
 800854a:	4b72      	ldr	r3, [pc, #456]	; (8008714 <UART_SetConfig+0x69c>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	2b05      	cmp	r3, #5
 8008554:	d826      	bhi.n	80085a4 <UART_SetConfig+0x52c>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <UART_SetConfig+0x4e4>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008575 	.word	0x08008575
 8008560:	0800857d 	.word	0x0800857d
 8008564:	08008585 	.word	0x08008585
 8008568:	0800858d 	.word	0x0800858d
 800856c:	08008595 	.word	0x08008595
 8008570:	0800859d 	.word	0x0800859d
 8008574:	2300      	movs	r3, #0
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857a:	e050      	b.n	800861e <UART_SetConfig+0x5a6>
 800857c:	2304      	movs	r3, #4
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008582:	e04c      	b.n	800861e <UART_SetConfig+0x5a6>
 8008584:	2308      	movs	r3, #8
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858a:	e048      	b.n	800861e <UART_SetConfig+0x5a6>
 800858c:	2310      	movs	r3, #16
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008592:	e044      	b.n	800861e <UART_SetConfig+0x5a6>
 8008594:	2320      	movs	r3, #32
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859a:	e040      	b.n	800861e <UART_SetConfig+0x5a6>
 800859c:	2340      	movs	r3, #64	; 0x40
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a2:	e03c      	b.n	800861e <UART_SetConfig+0x5a6>
 80085a4:	2380      	movs	r3, #128	; 0x80
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085aa:	e038      	b.n	800861e <UART_SetConfig+0x5a6>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a5b      	ldr	r2, [pc, #364]	; (8008720 <UART_SetConfig+0x6a8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d130      	bne.n	8008618 <UART_SetConfig+0x5a0>
 80085b6:	4b57      	ldr	r3, [pc, #348]	; (8008714 <UART_SetConfig+0x69c>)
 80085b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b05      	cmp	r3, #5
 80085c0:	d826      	bhi.n	8008610 <UART_SetConfig+0x598>
 80085c2:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <UART_SetConfig+0x550>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085e1 	.word	0x080085e1
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	080085f1 	.word	0x080085f1
 80085d4:	080085f9 	.word	0x080085f9
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008609 	.word	0x08008609
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e01a      	b.n	800861e <UART_SetConfig+0x5a6>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e016      	b.n	800861e <UART_SetConfig+0x5a6>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e012      	b.n	800861e <UART_SetConfig+0x5a6>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fe:	e00e      	b.n	800861e <UART_SetConfig+0x5a6>
 8008600:	2320      	movs	r3, #32
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008606:	e00a      	b.n	800861e <UART_SetConfig+0x5a6>
 8008608:	2340      	movs	r3, #64	; 0x40
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860e:	e006      	b.n	800861e <UART_SetConfig+0x5a6>
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e002      	b.n	800861e <UART_SetConfig+0x5a6>
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <UART_SetConfig+0x6a8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	f040 80f8 	bne.w	800881a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800862a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800862e:	2b20      	cmp	r3, #32
 8008630:	dc46      	bgt.n	80086c0 <UART_SetConfig+0x648>
 8008632:	2b02      	cmp	r3, #2
 8008634:	f2c0 8082 	blt.w	800873c <UART_SetConfig+0x6c4>
 8008638:	3b02      	subs	r3, #2
 800863a:	2b1e      	cmp	r3, #30
 800863c:	d87e      	bhi.n	800873c <UART_SetConfig+0x6c4>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <UART_SetConfig+0x5cc>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	080086c7 	.word	0x080086c7
 8008648:	0800873d 	.word	0x0800873d
 800864c:	080086cf 	.word	0x080086cf
 8008650:	0800873d 	.word	0x0800873d
 8008654:	0800873d 	.word	0x0800873d
 8008658:	0800873d 	.word	0x0800873d
 800865c:	080086df 	.word	0x080086df
 8008660:	0800873d 	.word	0x0800873d
 8008664:	0800873d 	.word	0x0800873d
 8008668:	0800873d 	.word	0x0800873d
 800866c:	0800873d 	.word	0x0800873d
 8008670:	0800873d 	.word	0x0800873d
 8008674:	0800873d 	.word	0x0800873d
 8008678:	0800873d 	.word	0x0800873d
 800867c:	080086ef 	.word	0x080086ef
 8008680:	0800873d 	.word	0x0800873d
 8008684:	0800873d 	.word	0x0800873d
 8008688:	0800873d 	.word	0x0800873d
 800868c:	0800873d 	.word	0x0800873d
 8008690:	0800873d 	.word	0x0800873d
 8008694:	0800873d 	.word	0x0800873d
 8008698:	0800873d 	.word	0x0800873d
 800869c:	0800873d 	.word	0x0800873d
 80086a0:	0800873d 	.word	0x0800873d
 80086a4:	0800873d 	.word	0x0800873d
 80086a8:	0800873d 	.word	0x0800873d
 80086ac:	0800873d 	.word	0x0800873d
 80086b0:	0800873d 	.word	0x0800873d
 80086b4:	0800873d 	.word	0x0800873d
 80086b8:	0800873d 	.word	0x0800873d
 80086bc:	0800872f 	.word	0x0800872f
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d037      	beq.n	8008734 <UART_SetConfig+0x6bc>
 80086c4:	e03a      	b.n	800873c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80086c6:	f7fe faed 	bl	8006ca4 <HAL_RCCEx_GetD3PCLK1Freq>
 80086ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086cc:	e03c      	b.n	8008748 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fafc 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086dc:	e034      	b.n	8008748 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fc48 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ec:	e02c      	b.n	8008748 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <UART_SetConfig+0x69c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d016      	beq.n	8008728 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <UART_SetConfig+0x69c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	4a07      	ldr	r2, [pc, #28]	; (8008724 <UART_SetConfig+0x6ac>)
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800870c:	e01c      	b.n	8008748 <UART_SetConfig+0x6d0>
 800870e:	bf00      	nop
 8008710:	40011400 	.word	0x40011400
 8008714:	58024400 	.word	0x58024400
 8008718:	40007800 	.word	0x40007800
 800871c:	40007c00 	.word	0x40007c00
 8008720:	58000c00 	.word	0x58000c00
 8008724:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008728:	4b9d      	ldr	r3, [pc, #628]	; (80089a0 <UART_SetConfig+0x928>)
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872c:	e00c      	b.n	8008748 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800872e:	4b9d      	ldr	r3, [pc, #628]	; (80089a4 <UART_SetConfig+0x92c>)
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008732:	e009      	b.n	8008748 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873a:	e005      	b.n	8008748 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008746:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 81de 	beq.w	8008b0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	4a94      	ldr	r2, [pc, #592]	; (80089a8 <UART_SetConfig+0x930>)
 8008756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875a:	461a      	mov	r2, r3
 800875c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008762:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4413      	add	r3, r2
 800876e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008770:	429a      	cmp	r2, r3
 8008772:	d305      	bcc.n	8008780 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800877a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877c:	429a      	cmp	r2, r3
 800877e:	d903      	bls.n	8008788 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008786:	e1c1      	b.n	8008b0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	2200      	movs	r2, #0
 800878c:	60bb      	str	r3, [r7, #8]
 800878e:	60fa      	str	r2, [r7, #12]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	4a84      	ldr	r2, [pc, #528]	; (80089a8 <UART_SetConfig+0x930>)
 8008796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879a:	b29b      	uxth	r3, r3
 800879c:	2200      	movs	r2, #0
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087aa:	f7f7 fd95 	bl	80002d8 <__aeabi_uldivmod>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4610      	mov	r0, r2
 80087b4:	4619      	mov	r1, r3
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	020b      	lsls	r3, r1, #8
 80087c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087c4:	0202      	lsls	r2, r0, #8
 80087c6:	6979      	ldr	r1, [r7, #20]
 80087c8:	6849      	ldr	r1, [r1, #4]
 80087ca:	0849      	lsrs	r1, r1, #1
 80087cc:	2000      	movs	r0, #0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4605      	mov	r5, r0
 80087d2:	eb12 0804 	adds.w	r8, r2, r4
 80087d6:	eb43 0905 	adc.w	r9, r3, r5
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	469a      	mov	sl, r3
 80087e2:	4693      	mov	fp, r2
 80087e4:	4652      	mov	r2, sl
 80087e6:	465b      	mov	r3, fp
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f7 fd74 	bl	80002d8 <__aeabi_uldivmod>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4613      	mov	r3, r2
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087fe:	d308      	bcc.n	8008812 <UART_SetConfig+0x79a>
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008806:	d204      	bcs.n	8008812 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800880e:	60da      	str	r2, [r3, #12]
 8008810:	e17c      	b.n	8008b0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008818:	e178      	b.n	8008b0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008822:	f040 80c5 	bne.w	80089b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008826:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800882a:	2b20      	cmp	r3, #32
 800882c:	dc48      	bgt.n	80088c0 <UART_SetConfig+0x848>
 800882e:	2b00      	cmp	r3, #0
 8008830:	db7b      	blt.n	800892a <UART_SetConfig+0x8b2>
 8008832:	2b20      	cmp	r3, #32
 8008834:	d879      	bhi.n	800892a <UART_SetConfig+0x8b2>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x7c4>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	080088c7 	.word	0x080088c7
 8008840:	080088cf 	.word	0x080088cf
 8008844:	0800892b 	.word	0x0800892b
 8008848:	0800892b 	.word	0x0800892b
 800884c:	080088d7 	.word	0x080088d7
 8008850:	0800892b 	.word	0x0800892b
 8008854:	0800892b 	.word	0x0800892b
 8008858:	0800892b 	.word	0x0800892b
 800885c:	080088e7 	.word	0x080088e7
 8008860:	0800892b 	.word	0x0800892b
 8008864:	0800892b 	.word	0x0800892b
 8008868:	0800892b 	.word	0x0800892b
 800886c:	0800892b 	.word	0x0800892b
 8008870:	0800892b 	.word	0x0800892b
 8008874:	0800892b 	.word	0x0800892b
 8008878:	0800892b 	.word	0x0800892b
 800887c:	080088f7 	.word	0x080088f7
 8008880:	0800892b 	.word	0x0800892b
 8008884:	0800892b 	.word	0x0800892b
 8008888:	0800892b 	.word	0x0800892b
 800888c:	0800892b 	.word	0x0800892b
 8008890:	0800892b 	.word	0x0800892b
 8008894:	0800892b 	.word	0x0800892b
 8008898:	0800892b 	.word	0x0800892b
 800889c:	0800892b 	.word	0x0800892b
 80088a0:	0800892b 	.word	0x0800892b
 80088a4:	0800892b 	.word	0x0800892b
 80088a8:	0800892b 	.word	0x0800892b
 80088ac:	0800892b 	.word	0x0800892b
 80088b0:	0800892b 	.word	0x0800892b
 80088b4:	0800892b 	.word	0x0800892b
 80088b8:	0800892b 	.word	0x0800892b
 80088bc:	0800891d 	.word	0x0800891d
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d02e      	beq.n	8008922 <UART_SetConfig+0x8aa>
 80088c4:	e031      	b.n	800892a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c6:	f7fd fa7b 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 80088ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088cc:	e033      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088ce:	f7fd fa8d 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 80088d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088d4:	e02f      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe f9f8 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e4:	e027      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fb44 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f4:	e01f      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f6:	4b2d      	ldr	r3, [pc, #180]	; (80089ac <UART_SetConfig+0x934>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008902:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <UART_SetConfig+0x934>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	08db      	lsrs	r3, r3, #3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	4a24      	ldr	r2, [pc, #144]	; (80089a0 <UART_SetConfig+0x928>)
 800890e:	fa22 f303 	lsr.w	r3, r2, r3
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008914:	e00f      	b.n	8008936 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008916:	4b22      	ldr	r3, [pc, #136]	; (80089a0 <UART_SetConfig+0x928>)
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800891a:	e00c      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800891c:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <UART_SetConfig+0x92c>)
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008920:	e009      	b.n	8008936 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008928:	e005      	b.n	8008936 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80e7 	beq.w	8008b0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	4a19      	ldr	r2, [pc, #100]	; (80089a8 <UART_SetConfig+0x930>)
 8008944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008948:	461a      	mov	r2, r3
 800894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008950:	005a      	lsls	r2, r3, #1
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	441a      	add	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	2b0f      	cmp	r3, #15
 8008968:	d916      	bls.n	8008998 <UART_SetConfig+0x920>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008970:	d212      	bcs.n	8008998 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 030f 	bic.w	r3, r3, #15
 800897a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	b29b      	uxth	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	b29a      	uxth	r2, r3
 8008988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800898a:	4313      	orrs	r3, r2
 800898c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	e0b9      	b.n	8008b0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800899e:	e0b5      	b.n	8008b0c <UART_SetConfig+0xa94>
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	08009a70 	.word	0x08009a70
 80089ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80089b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	dc49      	bgt.n	8008a4c <UART_SetConfig+0x9d4>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db7c      	blt.n	8008ab6 <UART_SetConfig+0xa3e>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d87a      	bhi.n	8008ab6 <UART_SetConfig+0xa3e>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x950>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	08008a53 	.word	0x08008a53
 80089cc:	08008a5b 	.word	0x08008a5b
 80089d0:	08008ab7 	.word	0x08008ab7
 80089d4:	08008ab7 	.word	0x08008ab7
 80089d8:	08008a63 	.word	0x08008a63
 80089dc:	08008ab7 	.word	0x08008ab7
 80089e0:	08008ab7 	.word	0x08008ab7
 80089e4:	08008ab7 	.word	0x08008ab7
 80089e8:	08008a73 	.word	0x08008a73
 80089ec:	08008ab7 	.word	0x08008ab7
 80089f0:	08008ab7 	.word	0x08008ab7
 80089f4:	08008ab7 	.word	0x08008ab7
 80089f8:	08008ab7 	.word	0x08008ab7
 80089fc:	08008ab7 	.word	0x08008ab7
 8008a00:	08008ab7 	.word	0x08008ab7
 8008a04:	08008ab7 	.word	0x08008ab7
 8008a08:	08008a83 	.word	0x08008a83
 8008a0c:	08008ab7 	.word	0x08008ab7
 8008a10:	08008ab7 	.word	0x08008ab7
 8008a14:	08008ab7 	.word	0x08008ab7
 8008a18:	08008ab7 	.word	0x08008ab7
 8008a1c:	08008ab7 	.word	0x08008ab7
 8008a20:	08008ab7 	.word	0x08008ab7
 8008a24:	08008ab7 	.word	0x08008ab7
 8008a28:	08008ab7 	.word	0x08008ab7
 8008a2c:	08008ab7 	.word	0x08008ab7
 8008a30:	08008ab7 	.word	0x08008ab7
 8008a34:	08008ab7 	.word	0x08008ab7
 8008a38:	08008ab7 	.word	0x08008ab7
 8008a3c:	08008ab7 	.word	0x08008ab7
 8008a40:	08008ab7 	.word	0x08008ab7
 8008a44:	08008ab7 	.word	0x08008ab7
 8008a48:	08008aa9 	.word	0x08008aa9
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	d02e      	beq.n	8008aae <UART_SetConfig+0xa36>
 8008a50:	e031      	b.n	8008ab6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a52:	f7fd f9b5 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8008a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a58:	e033      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a5a:	f7fd f9c7 	bl	8005dec <HAL_RCC_GetPCLK2Freq>
 8008a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a60:	e02f      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe f932 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a70:	e027      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a72:	f107 0318 	add.w	r3, r7, #24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fa7e 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a80:	e01f      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a82:	4b2d      	ldr	r3, [pc, #180]	; (8008b38 <UART_SetConfig+0xac0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d009      	beq.n	8008aa2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a8e:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <UART_SetConfig+0xac0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <UART_SetConfig+0xac4>)
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aa0:	e00f      	b.n	8008ac2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008aa2:	4b26      	ldr	r3, [pc, #152]	; (8008b3c <UART_SetConfig+0xac4>)
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa6:	e00c      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <UART_SetConfig+0xac8>)
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aac:	e009      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab4:	e005      	b.n	8008ac2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d021      	beq.n	8008b0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <UART_SetConfig+0xacc>)
 8008ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	085b      	lsrs	r3, r3, #1
 8008ae0:	441a      	add	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	d909      	bls.n	8008b06 <UART_SetConfig+0xa8e>
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af8:	d205      	bcs.n	8008b06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	e002      	b.n	8008b0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3748      	adds	r7, #72	; 0x48
 8008b30:	46bd      	mov	sp, r7
 8008b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	03d09000 	.word	0x03d09000
 8008b40:	003d0900 	.word	0x003d0900
 8008b44:	08009a70 	.word	0x08009a70

08008b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f003 0310 	and.w	r3, r3, #16
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01a      	beq.n	8008c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c46:	d10a      	bne.n	8008c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	605a      	str	r2, [r3, #4]
  }
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c9c:	f7f8 fcaa 	bl	80015f4 <HAL_GetTick>
 8008ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d10e      	bne.n	8008cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f82f 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e025      	b.n	8008d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d10e      	bne.n	8008cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f819 	bl	8008d22 <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e00f      	b.n	8008d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b09c      	sub	sp, #112	; 0x70
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d32:	e0a9      	b.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	f000 80a5 	beq.w	8008e88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7f8 fc59 	bl	80015f4 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d140      	bne.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d68:	667b      	str	r3, [r7, #100]	; 0x64
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e6      	bne.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	f023 0301 	bic.w	r3, r3, #1
 8008d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e069      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d051      	beq.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008df2:	d149      	bne.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e6      	bne.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3308      	adds	r3, #8
 8008e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f023 0301 	bic.w	r3, r3, #1
 8008e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e50:	623a      	str	r2, [r7, #32]
 8008e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	69f9      	ldr	r1, [r7, #28]
 8008e56:	6a3a      	ldr	r2, [r7, #32]
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e5      	bne.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2220      	movs	r2, #32
 8008e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e010      	b.n	8008eaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	69da      	ldr	r2, [r3, #28]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	4013      	ands	r3, r2
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	bf0c      	ite	eq
 8008e98:	2301      	moveq	r3, #1
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	f43f af46 	beq.w	8008d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3770      	adds	r7, #112	; 0x70
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e027      	b.n	8008f18 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2224      	movs	r2, #36	; 0x24
 8008ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ef6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e02d      	b.n	8008f98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2224      	movs	r2, #36	; 0x24
 8008f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f84f 	bl	800901c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e02d      	b.n	8009014 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2224      	movs	r2, #36	; 0x24
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f811 	bl	800901c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009028:	2b00      	cmp	r3, #0
 800902a:	d108      	bne.n	800903e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800903c:	e031      	b.n	80090a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800903e:	2310      	movs	r3, #16
 8009040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009042:	2310      	movs	r3, #16
 8009044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	0e5b      	lsrs	r3, r3, #25
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	0f5b      	lsrs	r3, r3, #29
 800905e:	b2db      	uxtb	r3, r3
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	7b3a      	ldrb	r2, [r7, #12]
 800906a:	4911      	ldr	r1, [pc, #68]	; (80090b0 <UARTEx_SetNbDataToProcess+0x94>)
 800906c:	5c8a      	ldrb	r2, [r1, r2]
 800906e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009072:	7b3a      	ldrb	r2, [r7, #12]
 8009074:	490f      	ldr	r1, [pc, #60]	; (80090b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009078:	fb93 f3f2 	sdiv	r3, r3, r2
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	7b7a      	ldrb	r2, [r7, #13]
 8009088:	4909      	ldr	r1, [pc, #36]	; (80090b0 <UARTEx_SetNbDataToProcess+0x94>)
 800908a:	5c8a      	ldrb	r2, [r1, r2]
 800908c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009090:	7b7a      	ldrb	r2, [r7, #13]
 8009092:	4908      	ldr	r1, [pc, #32]	; (80090b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009096:	fb93 f3f2 	sdiv	r3, r3, r2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090a2:	bf00      	nop
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	08009a88 	.word	0x08009a88
 80090b4:	08009a90 	.word	0x08009a90

080090b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090b8:	b084      	sub	sp, #16
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	f107 001c 	add.w	r0, r7, #28
 80090c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d120      	bne.n	8009112 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	4b2a      	ldr	r3, [pc, #168]	; (800918c <USB_CoreInit+0xd4>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 faac 	bl	8009664 <USB_CoreReset>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]
 8009110:	e01a      	b.n	8009148 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 faa0 	bl	8009664 <USB_CoreReset>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
 800913a:	e005      	b.n	8009148 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	2b01      	cmp	r3, #1
 800914c:	d116      	bne.n	800917c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009152:	b29a      	uxth	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800915c:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <USB_CoreInit+0xd8>)
 800915e:	4313      	orrs	r3, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f043 0206 	orr.w	r2, r3, #6
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f043 0220 	orr.w	r2, r3, #32
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009188:	b004      	add	sp, #16
 800918a:	4770      	bx	lr
 800918c:	ffbdffbf 	.word	0xffbdffbf
 8009190:	03ee0000 	.word	0x03ee0000

08009194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f023 0201 	bic.w	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d115      	bne.n	8009204 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091e4:	2001      	movs	r0, #1
 80091e6:	f7f8 fa11 	bl	800160c <HAL_Delay>
      ms++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fa29 	bl	8009648 <USB_GetMode>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d01e      	beq.n	800923a <USB_SetCurrentMode+0x84>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b31      	cmp	r3, #49	; 0x31
 8009200:	d9f0      	bls.n	80091e4 <USB_SetCurrentMode+0x2e>
 8009202:	e01a      	b.n	800923a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d115      	bne.n	8009236 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009216:	2001      	movs	r0, #1
 8009218:	f7f8 f9f8 	bl	800160c <HAL_Delay>
      ms++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa10 	bl	8009648 <USB_GetMode>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <USB_SetCurrentMode+0x84>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b31      	cmp	r3, #49	; 0x31
 8009232:	d9f0      	bls.n	8009216 <USB_SetCurrentMode+0x60>
 8009234:	e001      	b.n	800923a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e005      	b.n	8009246 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b32      	cmp	r3, #50	; 0x32
 800923e:	d101      	bne.n	8009244 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009250:	b084      	sub	sp, #16
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800925e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	e009      	b.n	8009284 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3340      	adds	r3, #64	; 0x40
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	2200      	movs	r2, #0
 800927c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	3301      	adds	r3, #1
 8009282:	613b      	str	r3, [r7, #16]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b0e      	cmp	r3, #14
 8009288:	d9f2      	bls.n	8009270 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800928a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11c      	bne.n	80092ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929e:	f043 0302 	orr.w	r3, r3, #2
 80092a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e005      	b.n	80092d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092dc:	461a      	mov	r2, r3
 80092de:	2300      	movs	r3, #0
 80092e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e8:	4619      	mov	r1, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f0:	461a      	mov	r2, r3
 80092f2:	680b      	ldr	r3, [r1, #0]
 80092f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d10c      	bne.n	8009316 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009302:	2100      	movs	r1, #0
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f965 	bl	80095d4 <USB_SetDevSpeed>
 800930a:	e008      	b.n	800931e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800930c:	2101      	movs	r1, #1
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f960 	bl	80095d4 <USB_SetDevSpeed>
 8009314:	e003      	b.n	800931e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009316:	2103      	movs	r1, #3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f95b 	bl	80095d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800931e:	2110      	movs	r1, #16
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f8f3 	bl	800950c <USB_FlushTxFifo>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f91f 	bl	8009574 <USB_FlushRxFifo>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009346:	461a      	mov	r2, r3
 8009348:	2300      	movs	r3, #0
 800934a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	461a      	mov	r2, r3
 8009354:	2300      	movs	r3, #0
 8009356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	461a      	mov	r2, r3
 8009360:	2300      	movs	r3, #0
 8009362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009364:	2300      	movs	r3, #0
 8009366:	613b      	str	r3, [r7, #16]
 8009368:	e043      	b.n	80093f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800937c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009380:	d118      	bne.n	80093b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	461a      	mov	r2, r3
 8009396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e013      	b.n	80093c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093aa:	461a      	mov	r2, r3
 80093ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e008      	b.n	80093c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	461a      	mov	r2, r3
 80093c2:	2300      	movs	r3, #0
 80093c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d2:	461a      	mov	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	461a      	mov	r2, r3
 80093e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	3301      	adds	r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d3b7      	bcc.n	800936a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093fa:	2300      	movs	r3, #0
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	e043      	b.n	8009488 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009416:	d118      	bne.n	800944a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942a:	461a      	mov	r2, r3
 800942c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	e013      	b.n	800945c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	461a      	mov	r2, r3
 8009442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	e008      	b.n	800945c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	461a      	mov	r2, r3
 8009458:	2300      	movs	r3, #0
 800945a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	461a      	mov	r2, r3
 800946a:	2300      	movs	r3, #0
 800946c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947a:	461a      	mov	r2, r3
 800947c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3301      	adds	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	d3b7      	bcc.n	8009400 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f043 0210 	orr.w	r2, r3, #16
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	4b0e      	ldr	r3, [pc, #56]	; (8009504 <USB_DevInit+0x2b4>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f043 0208 	orr.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d105      	bne.n	80094f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <USB_DevInit+0x2b8>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009500:	b004      	add	sp, #16
 8009502:	4770      	bx	lr
 8009504:	803c3800 	.word	0x803c3800
 8009508:	40000004 	.word	0x40000004

0800950c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a13      	ldr	r2, [pc, #76]	; (8009570 <USB_FlushTxFifo+0x64>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d901      	bls.n	800952c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e01b      	b.n	8009564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	daf2      	bge.n	800951a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	019b      	lsls	r3, r3, #6
 800953c:	f043 0220 	orr.w	r2, r3, #32
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a08      	ldr	r2, [pc, #32]	; (8009570 <USB_FlushTxFifo+0x64>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e006      	b.n	8009564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b20      	cmp	r3, #32
 8009560:	d0f0      	beq.n	8009544 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	00030d40 	.word	0x00030d40

08009574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4a11      	ldr	r2, [pc, #68]	; (80095d0 <USB_FlushRxFifo+0x5c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d901      	bls.n	8009592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e018      	b.n	80095c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	daf2      	bge.n	8009580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2210      	movs	r2, #16
 80095a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <USB_FlushRxFifo+0x5c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d901      	bls.n	80095b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e006      	b.n	80095c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b10      	cmp	r3, #16
 80095c0:	d0f0      	beq.n	80095a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	00030d40 	.word	0x00030d40

080095d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095f4:	4313      	orrs	r3, r2
 80095f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009620:	f023 0303 	bic.w	r3, r3, #3
 8009624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009634:	f043 0302 	orr.w	r3, r3, #2
 8009638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	f003 0301 	and.w	r3, r3, #1
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4a13      	ldr	r2, [pc, #76]	; (80096c8 <USB_CoreReset+0x64>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d901      	bls.n	8009682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e01b      	b.n	80096ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	daf2      	bge.n	8009670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f043 0201 	orr.w	r2, r3, #1
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3301      	adds	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4a09      	ldr	r2, [pc, #36]	; (80096c8 <USB_CoreReset+0x64>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d901      	bls.n	80096ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e006      	b.n	80096ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d0f0      	beq.n	800969a <USB_CoreReset+0x36>

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	00030d40 	.word	0x00030d40

080096cc <__libc_init_array>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	4d0d      	ldr	r5, [pc, #52]	; (8009704 <__libc_init_array+0x38>)
 80096d0:	4c0d      	ldr	r4, [pc, #52]	; (8009708 <__libc_init_array+0x3c>)
 80096d2:	1b64      	subs	r4, r4, r5
 80096d4:	10a4      	asrs	r4, r4, #2
 80096d6:	2600      	movs	r6, #0
 80096d8:	42a6      	cmp	r6, r4
 80096da:	d109      	bne.n	80096f0 <__libc_init_array+0x24>
 80096dc:	4d0b      	ldr	r5, [pc, #44]	; (800970c <__libc_init_array+0x40>)
 80096de:	4c0c      	ldr	r4, [pc, #48]	; (8009710 <__libc_init_array+0x44>)
 80096e0:	f000 f82e 	bl	8009740 <_init>
 80096e4:	1b64      	subs	r4, r4, r5
 80096e6:	10a4      	asrs	r4, r4, #2
 80096e8:	2600      	movs	r6, #0
 80096ea:	42a6      	cmp	r6, r4
 80096ec:	d105      	bne.n	80096fa <__libc_init_array+0x2e>
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f4:	4798      	blx	r3
 80096f6:	3601      	adds	r6, #1
 80096f8:	e7ee      	b.n	80096d8 <__libc_init_array+0xc>
 80096fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fe:	4798      	blx	r3
 8009700:	3601      	adds	r6, #1
 8009702:	e7f2      	b.n	80096ea <__libc_init_array+0x1e>
 8009704:	08009aa0 	.word	0x08009aa0
 8009708:	08009aa0 	.word	0x08009aa0
 800970c:	08009aa0 	.word	0x08009aa0
 8009710:	08009aa4 	.word	0x08009aa4

08009714 <memcpy>:
 8009714:	440a      	add	r2, r1
 8009716:	4291      	cmp	r1, r2
 8009718:	f100 33ff 	add.w	r3, r0, #4294967295
 800971c:	d100      	bne.n	8009720 <memcpy+0xc>
 800971e:	4770      	bx	lr
 8009720:	b510      	push	{r4, lr}
 8009722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800972a:	4291      	cmp	r1, r2
 800972c:	d1f9      	bne.n	8009722 <memcpy+0xe>
 800972e:	bd10      	pop	{r4, pc}

08009730 <memset>:
 8009730:	4402      	add	r2, r0
 8009732:	4603      	mov	r3, r0
 8009734:	4293      	cmp	r3, r2
 8009736:	d100      	bne.n	800973a <memset+0xa>
 8009738:	4770      	bx	lr
 800973a:	f803 1b01 	strb.w	r1, [r3], #1
 800973e:	e7f9      	b.n	8009734 <memset+0x4>

08009740 <_init>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr

0800974c <_fini>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr
