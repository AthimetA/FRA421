
FRA421_L010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000290c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a38  08002a38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a40  08002a40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002a54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002a54  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b1  00000000  00000000  000288c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103e4  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dcf  00000000  00000000  0003b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061e69  00000000  00000000  00044fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f4  00000000  00000000  000a6e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029b4 	.word	0x080029b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029b4 	.word	0x080029b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Check what is cause our system to reset
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) // this is press reset btn
 80004ac:	4b3a      	ldr	r3, [pc, #232]	; (8000598 <main+0xf0>)
 80004ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	04db      	lsls	r3, r3, #19
 80004b4:	4013      	ands	r3, r2
 80004b6:	d006      	beq.n	80004c6 <main+0x1e>
	{
		// do something about error
		__HAL_RCC_CLEAR_RESET_FLAGS(); // Clear Flag
 80004b8:	4b37      	ldr	r3, [pc, #220]	; (8000598 <main+0xf0>)
 80004ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004bc:	4b36      	ldr	r3, [pc, #216]	; (8000598 <main+0xf0>)
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0409      	lsls	r1, r1, #16
 80004c2:	430a      	orrs	r2, r1
 80004c4:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fad5 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f86d 	bl	80005a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80004ce:	f000 f951 	bl	8000774 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fde5 	bl	80010aa <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004e0:	23fa      	movs	r3, #250	; 0xfa
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fb35 	bl	8000b54 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fdd9 	bl	80010aa <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004f8:	23fa      	movs	r3, #250	; 0xfa
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fb29 	bl	8000b54 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f937 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8e3 	bl	80006d0 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 800050a:	f000 f8c1 	bl	8000690 <MX_IWDG_Init>
  MX_WWDG_Init();
 800050e:	f000 f90f 	bl	8000730 <MX_WWDG_Init>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET)
 8000512:	23a0      	movs	r3, #160	; 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2101      	movs	r1, #1
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fda9 	bl	8001070 <HAL_GPIO_ReadPin>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d107      	bne.n	8000532 <main+0x8a>
	  {
		  // WWGD window timeout
		  // (1/32000000)*4096*8*(63+1) == 0.065s
		  // Refresh at 70ms - MCU should reset
		  HAL_Delay(70);
 8000522:	2046      	movs	r0, #70	; 0x46
 8000524:	f000 fb16 	bl	8000b54 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <main+0xf4>)
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fa07 	bl	800293e <HAL_WWDG_Refresh>
 8000530:	e02d      	b.n	800058e <main+0xe6>
	  }
	  else if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == GPIO_PIN_RESET)
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2102      	movs	r1, #2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fd99 	bl	8001070 <HAL_GPIO_ReadPin>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d107      	bne.n	8000552 <main+0xaa>
	  {
		  // WWGD window window time
		  // (1/32000000)*4096*8*(36+1) == 0.038s
		  // Refresh at 20ms - MCU should reset
		  HAL_Delay(20);
 8000542:	2014      	movs	r0, #20
 8000544:	f000 fb06 	bl	8000b54 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0xf4>)
 800054a:	0018      	movs	r0, r3
 800054c:	f002 f9f7 	bl	800293e <HAL_WWDG_Refresh>
 8000550:	e01d      	b.n	800058e <main+0xe6>
	  }
	  else if(HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin) == GPIO_PIN_RESET)
 8000552:	23a0      	movs	r3, #160	; 0xa0
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2110      	movs	r1, #16
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fd89 	bl	8001070 <HAL_GPIO_ReadPin>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d10e      	bne.n	8000580 <main+0xd8>
	  {
		  // Stop main clock
		  HAL_SuspendTick();
 8000562:	f000 fb1b 	bl	8000b9c <HAL_SuspendTick>
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <main+0xf8>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <main+0xf8>)
 800056c:	2104      	movs	r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VOLTAGE_SCALE1, PWR_STOPENTRY_WFE);
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	2102      	movs	r1, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fe3b 	bl	80011f4 <HAL_PWR_EnterSTOPMode>
 800057e:	e006      	b.n	800058e <main+0xe6>
	  }
	  else
	  {
		  // Refresh at 50ms - MCU should continuous running
		  HAL_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fae7 	bl	8000b54 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <main+0xf4>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 f9d8 	bl	800293e <HAL_WWDG_Refresh>
	  }
	  // Refresh IWDG
	  // Window time out
	  // (1/37000)*64*4096 = 7s
	  HAL_IWDG_Refresh(&hiwdg);
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <main+0xfc>)
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fe1f 	bl	80011d4 <HAL_IWDG_Refresh>
	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET)
 8000596:	e7bc      	b.n	8000512 <main+0x6a>
 8000598:	40021000 	.word	0x40021000
 800059c:	200000bc 	.word	0x200000bc
 80005a0:	40007000 	.word	0x40007000
 80005a4:	20000028 	.word	0x20000028

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b099      	sub	sp, #100	; 0x64
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	242c      	movs	r4, #44	; 0x2c
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2334      	movs	r3, #52	; 0x34
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f002 f9f3 	bl	80029a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	2318      	movs	r3, #24
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f9eb 	bl	80029a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ce:	003b      	movs	r3, r7
 80005d0:	0018      	movs	r0, r3
 80005d2:	2318      	movs	r3, #24
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 f9e4 	bl	80029a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2a      	ldr	r2, [pc, #168]	; (800068c <SystemClock_Config+0xe4>)
 80005e2:	401a      	ands	r2, r3
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xe0>)
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0109      	lsls	r1, r1, #4
 80005ea:	430a      	orrs	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2209      	movs	r2, #9
 80005f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	22a0      	movs	r2, #160	; 0xa0
 80005f8:	02d2      	lsls	r2, r2, #11
 80005fa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fc:	0021      	movs	r1, r4
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2202      	movs	r2, #2
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	0312      	lsls	r2, r2, #12
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	03d2      	lsls	r2, r2, #15
 8000620:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	187b      	adds	r3, r7, r1
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fe41 	bl	80012ac <HAL_RCC_OscConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800062e:	f000 f943 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	2118      	movs	r1, #24
 8000634:	187b      	adds	r3, r7, r1
 8000636:	220f      	movs	r2, #15
 8000638:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2203      	movs	r2, #3
 800063e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2101      	movs	r1, #1
 8000656:	0018      	movs	r0, r3
 8000658:	f001 f9a4 	bl	80019a4 <HAL_RCC_ClockConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000660:	f000 f92a 	bl	80008b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000664:	003b      	movs	r3, r7
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	003b      	movs	r3, r7
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fbba 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800067c:	f000 f91c 	bl	80008b8 <Error_Handler>
  }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b019      	add	sp, #100	; 0x64
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40007000 	.word	0x40007000
 800068c:	ffffe7ff 	.word	0xffffe7ff

08000690 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_IWDG_Init+0x34>)
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <MX_IWDG_Init+0x38>)
 8000698:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_IWDG_Init+0x34>)
 800069c:	2204      	movs	r2, #4
 800069e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <MX_IWDG_Init+0x3c>)
 80006a4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_IWDG_Init+0x3c>)
 80006aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_IWDG_Init+0x34>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fd3e 	bl	8001130 <HAL_IWDG_Init>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80006b8:	f000 f8fe 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40003000 	.word	0x40003000
 80006cc:	00000fff 	.word	0x00000fff

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART2_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006dc:	22e1      	movs	r2, #225	; 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fc8f 	bl	8002038 <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f8cb 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000038 	.word	0x20000038
 800072c:	40004400 	.word	0x40004400

08000730 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_WWDG_Init+0x3c>)
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_WWDG_Init+0x40>)
 8000738:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_WWDG_Init+0x3c>)
 800073c:	22c0      	movs	r2, #192	; 0xc0
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 100;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_WWDG_Init+0x3c>)
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_WWDG_Init+0x3c>)
 800074a:	227f      	movs	r2, #127	; 0x7f
 800074c:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_WWDG_Init+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_WWDG_Init+0x3c>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f8cc 	bl	80028f4 <HAL_WWDG_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000760:	f000 f8aa 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000bc 	.word	0x200000bc
 8000770:	40002c00 	.word	0x40002c00

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	2414      	movs	r4, #20
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2314      	movs	r3, #20
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f002 f90d 	bl	80029a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b48      	ldr	r3, [pc, #288]	; (80008ac <MX_GPIO_Init+0x138>)
 800078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078e:	4b47      	ldr	r3, [pc, #284]	; (80008ac <MX_GPIO_Init+0x138>)
 8000790:	2104      	movs	r1, #4
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_GPIO_Init+0x138>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	2204      	movs	r2, #4
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <MX_GPIO_Init+0x138>)
 80007a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_GPIO_Init+0x138>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	430a      	orrs	r2, r1
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_GPIO_Init+0x138>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_GPIO_Init+0x138>)
 80007bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_GPIO_Init+0x138>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_GPIO_Init+0x138>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_GPIO_Init+0x138>)
 80007d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <MX_GPIO_Init+0x138>)
 80007d8:	2102      	movs	r1, #2
 80007da:	430a      	orrs	r2, r1
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_GPIO_Init+0x138>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	2202      	movs	r2, #2
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fc59 	bl	80010aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x13c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	2138      	movs	r1, #56	; 0x38
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fc53 	bl	80010aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	0192      	lsls	r2, r2, #6
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2284      	movs	r2, #132	; 0x84
 8000810:	0392      	lsls	r2, r2, #14
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081a:	193b      	adds	r3, r7, r4
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <MX_GPIO_Init+0x140>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f000 faa7 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2213      	movs	r2, #19
 800082a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	193a      	adds	r2, r7, r4
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fa97 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2220      	movs	r2, #32
 800084a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2201      	movs	r2, #1
 8000850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085e:	193a      	adds	r2, r7, r4
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fa84 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2238      	movs	r2, #56	; 0x38
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	187b      	adds	r3, r7, r1
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x13c>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fa71 	bl	8000d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2102      	movs	r1, #2
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fa3a 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800089c:	2007      	movs	r0, #7
 800089e:	f000 fa4c 	bl	8000d3a <HAL_NVIC_EnableIRQ>

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b00b      	add	sp, #44	; 0x2c
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000
 80008b0:	50000400 	.word	0x50000400
 80008b4:	50000800 	.word	0x50000800

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_MspInit+0x24>)
 80008ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x24>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	430a      	orrs	r2, r1
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <HAL_MspInit+0x24>)
 80008d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_MspInit+0x24>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0549      	lsls	r1, r1, #21
 80008de:	430a      	orrs	r2, r1
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	240c      	movs	r4, #12
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f002 f850 	bl	80029a4 <memset>
  if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_UART_MspInit+0x80>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d129      	bne.n	8000962 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x84>)
 8000910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0x84>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x84>)
 800091e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_UART_MspInit+0x84>)
 8000922:	2101      	movs	r1, #1
 8000924:	430a      	orrs	r2, r1
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0x84>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	2201      	movs	r2, #1
 800092e:	4013      	ands	r3, r2
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000934:	0021      	movs	r1, r4
 8000936:	187b      	adds	r3, r7, r1
 8000938:	220c      	movs	r2, #12
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2204      	movs	r2, #4
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	187a      	adds	r2, r7, r1
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fa09 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b009      	add	sp, #36	; 0x24
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_WWDG_MspInit+0x28>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_WWDG_MspInit+0x2c>)
 8000988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_WWDG_MspInit+0x2c>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0109      	lsls	r1, r1, #4
 8000990:	430a      	orrs	r2, r1
 8000992:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40002c00 	.word	0x40002c00
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8a8 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fb82 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <LoopForever+0x6>)
    LDR R1, [R0]
 80009f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <LoopForever+0xa>)
    CMP R1, R2
 80009fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009fe:	d105      	bne.n	8000a0c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a02:	4913      	ldr	r1, [pc, #76]	; (8000a50 <LoopForever+0x12>)
    STR R1, [R0]
 8000a04:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a08:	4913      	ldr	r1, [pc, #76]	; (8000a58 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a0a:	6001      	str	r1, [r0, #0]

08000a0c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a0e:	4914      	ldr	r1, [pc, #80]	; (8000a60 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a10:	4a14      	ldr	r2, [pc, #80]	; (8000a64 <LoopForever+0x26>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a24:	4c11      	ldr	r4, [pc, #68]	; (8000a6c <LoopForever+0x2e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a32:	f7ff ffd8 	bl	80009e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f001 ff91 	bl	800295c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3a:	f7ff fd35 	bl	80004a8 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
   ldr   r0, =_estack
 8000a40:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a44:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a48:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a4c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a50:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a54:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a58:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08002a48 	.word	0x08002a48
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_IRQHandler>
	...

08000a74 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x3c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_Init+0x3c>)
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 f811 	bl	8000ab4 <HAL_InitTick>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e001      	b.n	8000aa2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9e:	f7ff ff11 	bl	80008c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x5c>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x60>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	0098      	lsls	r0, r3, #2
 8000aca:	f7ff fb1d 	bl	8000108 <__udivsi3>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	f7ff fb18 	bl	8000108 <__udivsi3>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f93d 	bl	8000d5a <HAL_SYSTICK_Config>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e00f      	b.n	8000b08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d80b      	bhi.n	8000b06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2301      	movs	r3, #1
 8000af2:	425b      	negs	r3, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f90a 	bl	8000d10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_InitTick+0x64>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b003      	add	sp, #12
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	001a      	movs	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	18d2      	adds	r2, r2, r3
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200000d0 	.word	0x200000d0

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	0003      	movs	r3, r0
 8000b62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	001a      	movs	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	0002      	movs	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_SuspendTick+0x18>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_SuspendTick+0x18>)
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d809      	bhi.n	8000be0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	231f      	movs	r3, #31
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_EnableIRQ+0x30>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4091      	lsls	r1, r2
 8000bdc:	000a      	movs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000c00:	d828      	bhi.n	8000c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c02:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	33c0      	adds	r3, #192	; 0xc0
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	589b      	ldr	r3, [r3, r2]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <__NVIC_SetPriority+0xd4>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	33c0      	adds	r3, #192	; 0xc0
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c52:	e031      	b.n	8000cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	400b      	ands	r3, r1
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3306      	adds	r3, #6
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <__NVIC_SetPriority+0xd8>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	3b08      	subs	r3, #8
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	430a      	orrs	r2, r1
 8000cae:	3306      	adds	r3, #6
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	18c3      	adds	r3, r0, r3
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	1e5a      	subs	r2, r3, #1
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	045b      	lsls	r3, r3, #17
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d301      	bcc.n	8000ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e010      	b.n	8000d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <SysTick_Config+0x44>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
 8000cec:	2103      	movs	r1, #3
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff ff7c 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x44>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	0002      	movs	r2, r0
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff33 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ffaf 	bl	8000cc8 <SysTick_Config>
 8000d6a:	0003      	movs	r3, r0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d8a:	e155      	b.n	8001038 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_Init+0x30>
 8000da2:	e146      	b.n	8001032 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2203      	movs	r2, #3
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	2201      	movs	r2, #1
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	58d3      	ldr	r3, [r2, r3]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2207      	movs	r2, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2107      	movs	r1, #7
 8000e92:	400b      	ands	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	6939      	ldr	r1, [r7, #16]
 8000eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2203      	movs	r2, #3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	029b      	lsls	r3, r3, #10
 8000eea:	4013      	ands	r3, r2
 8000eec:	d100      	bne.n	8000ef0 <HAL_GPIO_Init+0x17c>
 8000eee:	e0a0      	b.n	8001032 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efc:	4a55      	ldr	r2, [pc, #340]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	589b      	ldr	r3, [r3, r2]
 8000f08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d01f      	beq.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x1f2>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x1ea>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2f0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x1e6>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2f4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x1f8>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	2103      	movs	r1, #3
 8000f70:	400a      	ands	r2, r1
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	035b      	lsls	r3, r3, #13
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_GPIO_Init+0x2f8>)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_GPIO_Init+0x2f8>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_GPIO_Init+0x2f8>)
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	40da      	lsrs	r2, r3
 8001040:	1e13      	subs	r3, r2, #0
 8001042:	d000      	beq.n	8001046 <HAL_GPIO_Init+0x2d2>
 8001044:	e6a2      	b.n	8000d8c <HAL_GPIO_Init+0x18>
  }
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	50000400 	.word	0x50000400
 800105c:	50000800 	.word	0x50000800
 8001060:	50000c00 	.word	0x50000c00
 8001064:	50001000 	.word	0x50001000
 8001068:	50001c00 	.word	0x50001c00
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	000a      	movs	r2, r1
 800107a:	1cbb      	adds	r3, r7, #2
 800107c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	1cba      	adds	r2, r7, #2
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	4013      	ands	r3, r2
 8001088:	d004      	beq.n	8001094 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e003      	b.n	800109c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	781b      	ldrb	r3, [r3, #0]
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	0008      	movs	r0, r1
 80010b4:	0011      	movs	r1, r2
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	1c02      	adds	r2, r0, #0
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	1c7b      	adds	r3, r7, #1
 80010be:	1c0a      	adds	r2, r1, #0
 80010c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c2:	1c7b      	adds	r3, r7, #1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	0002      	movs	r2, r0
 80010ec:	1dbb      	adds	r3, r7, #6
 80010ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	1dba      	adds	r2, r7, #6
 80010f6:	8812      	ldrh	r2, [r2, #0]
 80010f8:	4013      	ands	r3, r2
 80010fa:	d008      	beq.n	800110e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010fe:	1dba      	adds	r2, r7, #6
 8001100:	8812      	ldrh	r2, [r2, #0]
 8001102:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f807 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e03d      	b.n	80011be <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <HAL_IWDG_Init+0x98>)
 8001148:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_IWDG_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6852      	ldr	r2, [r2, #4]
 800115a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6892      	ldr	r2, [r2, #8]
 8001164:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001166:	f7ff fceb 	bl	8000b40 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800116e:	e00e      	b.n	800118e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001170:	f7ff fce6 	bl	8000b40 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b2a      	cmp	r3, #42	; 0x2a
 800117c:	d907      	bls.n	800118e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2207      	movs	r2, #7
 8001186:	4013      	ands	r3, r2
 8001188:	d001      	beq.n	800118e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e017      	b.n	80011be <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2207      	movs	r2, #7
 8001196:	4013      	ands	r3, r2
 8001198:	d1ea      	bne.n	8001170 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d005      	beq.n	80011b4 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68d2      	ldr	r2, [r2, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	e003      	b.n	80011bc <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <HAL_IWDG_Init+0xa0>)
 80011ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	0000cccc 	.word	0x0000cccc
 80011cc:	00005555 	.word	0x00005555
 80011d0:	0000aaaa 	.word	0x0000aaaa

080011d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_IWDG_Refresh+0x1c>)
 80011e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	0000aaaa 	.word	0x0000aaaa

080011f4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	000a      	movs	r2, r1
 80011fe:	1cfb      	adds	r3, r7, #3
 8001200:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_PWR_EnterSTOPMode+0xac>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2201      	movs	r2, #1
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <HAL_PWR_EnterSTOPMode+0x40>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 800122e:	491d      	ldr	r1, [pc, #116]	; (80012a4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001230:	400a      	ands	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2203      	movs	r2, #3
 800123e:	4393      	bics	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4313      	orrs	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001256:	2104      	movs	r1, #4
 8001258:	430a      	orrs	r2, r1
 800125a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800125c:	1cfb      	adds	r3, r7, #3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001264:	bf30      	wfi
 8001266:	e002      	b.n	800126e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001268:	bf40      	sev
    __WFE();
 800126a:	bf20      	wfe
    __WFE();
 800126c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001274:	2104      	movs	r1, #4
 8001276:	438a      	bics	r2, r1
 8001278:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <HAL_PWR_EnterSTOPMode+0xa0>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_PWR_EnterSTOPMode+0xa8>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0089      	lsls	r1, r1, #2
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40007000 	.word	0x40007000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	fffffdff 	.word	0xfffffdff
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f000 fb6c 	bl	8001998 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c0:	4bc8      	ldr	r3, [pc, #800]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ca:	4bc6      	ldr	r3, [pc, #792]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80012cc:	68da      	ldr	r2, [r3, #12]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2201      	movs	r2, #1
 80012dc:	4013      	ands	r3, r2
 80012de:	d100      	bne.n	80012e2 <HAL_RCC_OscConfig+0x36>
 80012e0:	e07d      	b.n	80013de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d007      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x68>
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	025b      	lsls	r3, r3, #9
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10d      	bne.n	8001314 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	4bba      	ldr	r3, [pc, #744]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x5a>
 8001304:	e06a      	b.n	80013dc <HAL_RCC_OscConfig+0x130>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d166      	bne.n	80013dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f000 fb42 	bl	8001998 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	429a      	cmp	r2, r3
 800131e:	d107      	bne.n	8001330 <HAL_RCC_OscConfig+0x84>
 8001320:	4bb0      	ldr	r3, [pc, #704]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4baf      	ldr	r3, [pc, #700]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	0249      	lsls	r1, r1, #9
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e027      	b.n	8001380 <HAL_RCC_OscConfig+0xd4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	02db      	lsls	r3, r3, #11
 8001338:	429a      	cmp	r2, r3
 800133a:	d10e      	bne.n	800135a <HAL_RCC_OscConfig+0xae>
 800133c:	4ba9      	ldr	r3, [pc, #676]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4ba8      	ldr	r3, [pc, #672]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	02c9      	lsls	r1, r1, #11
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4ba6      	ldr	r3, [pc, #664]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4ba5      	ldr	r3, [pc, #660]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0249      	lsls	r1, r1, #9
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e012      	b.n	8001380 <HAL_RCC_OscConfig+0xd4>
 800135a:	4ba2      	ldr	r3, [pc, #648]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4ba1      	ldr	r3, [pc, #644]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001360:	49a1      	ldr	r1, [pc, #644]	; (80015e8 <HAL_RCC_OscConfig+0x33c>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4b9f      	ldr	r3, [pc, #636]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4b9b      	ldr	r3, [pc, #620]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b9a      	ldr	r3, [pc, #616]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800137a:	499c      	ldr	r1, [pc, #624]	; (80015ec <HAL_RCC_OscConfig+0x340>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fbda 	bl	8000b40 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff fbd5 	bl	8000b40 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2f9      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a4:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0xe6>
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fbc5 	bl	8000b40 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fbc0 	bl	8000b40 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e2e4      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x110>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x13e>
 80013e8:	e099      	b.n	800151e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2220      	movs	r2, #32
 80013f4:	4013      	ands	r3, r2
 80013f6:	d009      	beq.n	800140c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013f8:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80013fe:	2120      	movs	r1, #32
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	2220      	movs	r2, #32
 8001408:	4393      	bics	r3, r2
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d13e      	bne.n	8001496 <HAL_RCC_OscConfig+0x1ea>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d13b      	bne.n	8001496 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800141e:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d004      	beq.n	8001432 <HAL_RCC_OscConfig+0x186>
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e2b2      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x344>)
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	021a      	lsls	r2, r3, #8
 8001442:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2209      	movs	r2, #9
 800144e:	4393      	bics	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145a:	f000 fbeb 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 800145e:	0001      	movs	r1, r0
 8001460:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	220f      	movs	r2, #15
 8001468:	4013      	ands	r3, r2
 800146a:	4a62      	ldr	r2, [pc, #392]	; (80015f4 <HAL_RCC_OscConfig+0x348>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	000a      	movs	r2, r1
 8001470:	40da      	lsrs	r2, r3
 8001472:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x34c>)
 8001474:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x350>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2513      	movs	r5, #19
 800147c:	197c      	adds	r4, r7, r5
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fb18 	bl	8000ab4 <HAL_InitTick>
 8001484:	0003      	movs	r3, r0
 8001486:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001488:	197b      	adds	r3, r7, r5
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d046      	beq.n	800151e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001490:	197b      	adds	r3, r7, r5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	e280      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d027      	beq.n	80014ec <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2209      	movs	r2, #9
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb47 	bl	8000b40 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb42 	bl	8000b40 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e266      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ca:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f1      	beq.n	80014b8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a45      	ldr	r2, [pc, #276]	; (80015f0 <HAL_RCC_OscConfig+0x344>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	021a      	lsls	r2, r3, #8
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	e018      	b.n	800151e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb22 	bl	8000b40 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fb1d 	bl	8000b40 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e241      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2204      	movs	r2, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d1f1      	bne.n	8001502 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2210      	movs	r2, #16
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x27e>
 8001528:	e0a1      	b.n	800166e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d140      	bne.n	80015b2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x29c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e227      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <HAL_RCC_OscConfig+0x354>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001558:	430a      	orrs	r2, r1
 800155a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	0a19      	lsrs	r1, r3, #8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	061a      	lsls	r2, r3, #24
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	0b5b      	lsrs	r3, r3, #13
 8001576:	3301      	adds	r3, #1
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	0212      	lsls	r2, r2, #8
 800157c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	210f      	movs	r1, #15
 8001586:	400b      	ands	r3, r1
 8001588:	491a      	ldr	r1, [pc, #104]	; (80015f4 <HAL_RCC_OscConfig+0x348>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_RCC_OscConfig+0x34c>)
 8001590:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x350>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2513      	movs	r5, #19
 8001598:	197c      	adds	r4, r7, r5
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fa8a 	bl	8000ab4 <HAL_InitTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015a4:	197b      	adds	r3, r7, r5
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d060      	beq.n	800166e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015ac:	197b      	adds	r3, r7, r5
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	e1f2      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03f      	beq.n	800163a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x338>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0049      	lsls	r1, r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff faba 	bl	8000b40 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d2:	f7ff fab5 	bl	8000b40 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d911      	bls.n	8001604 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1d9      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
 80015e4:	40021000 	.word	0x40021000
 80015e8:	fffeffff 	.word	0xfffeffff
 80015ec:	fffbffff 	.word	0xfffbffff
 80015f0:	ffffe0ff 	.word	0xffffe0ff
 80015f4:	080029cc 	.word	0x080029cc
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004
 8001600:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001604:	4bc9      	ldr	r3, [pc, #804]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d0e0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001610:	4bc6      	ldr	r3, [pc, #792]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4ac6      	ldr	r2, [pc, #792]	; (8001930 <HAL_RCC_OscConfig+0x684>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4bc3      	ldr	r3, [pc, #780]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001624:	4bc1      	ldr	r3, [pc, #772]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	0a19      	lsrs	r1, r3, #8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	061a      	lsls	r2, r3, #24
 8001632:	4bbe      	ldr	r3, [pc, #760]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001634:	430a      	orrs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	e019      	b.n	800166e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163a:	4bbc      	ldr	r3, [pc, #752]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4bbb      	ldr	r3, [pc, #748]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001640:	49bc      	ldr	r1, [pc, #752]	; (8001934 <HAL_RCC_OscConfig+0x688>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fa7b 	bl	8000b40 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001650:	f7ff fa76 	bl	8000b40 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e19a      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001662:	4bb2      	ldr	r3, [pc, #712]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2208      	movs	r2, #8
 8001674:	4013      	ands	r3, r2
 8001676:	d036      	beq.n	80016e6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d019      	beq.n	80016b4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001680:	4baa      	ldr	r3, [pc, #680]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001684:	4ba9      	ldr	r3, [pc, #676]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fa58 	bl	8000b40 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fa53 	bl	8000b40 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e177      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016a8:	4ba0      	ldr	r3, [pc, #640]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80016aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0f1      	beq.n	8001696 <HAL_RCC_OscConfig+0x3ea>
 80016b2:	e018      	b.n	80016e6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b9d      	ldr	r3, [pc, #628]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	4b9c      	ldr	r3, [pc, #624]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa3e 	bl	8000b40 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fa39 	bl	8000b40 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e15d      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016dc:	4b93      	ldr	r3, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80016de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f1      	bne.n	80016ca <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4013      	ands	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x446>
 80016f0:	e0ae      	b.n	8001850 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2023      	movs	r0, #35	; 0x23
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80016fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	055b      	lsls	r3, r3, #21
 8001702:	4013      	ands	r3, r2
 8001704:	d109      	bne.n	800171a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0549      	lsls	r1, r1, #21
 8001710:	430a      	orrs	r2, r1
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001714:	183b      	adds	r3, r7, r0
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b87      	ldr	r3, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x68c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4013      	ands	r3, r2
 8001724:	d11a      	bne.n	800175c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b84      	ldr	r3, [pc, #528]	; (8001938 <HAL_RCC_OscConfig+0x68c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x68c>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0049      	lsls	r1, r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001734:	f7ff fa04 	bl	8000b40 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff f9ff 	bl	8000b40 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e123      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <HAL_RCC_OscConfig+0x68c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4013      	ands	r3, r2
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x4cc>
 8001768:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	0049      	lsls	r1, r1, #1
 8001772:	430a      	orrs	r2, r1
 8001774:	651a      	str	r2, [r3, #80]	; 0x50
 8001776:	e031      	b.n	80017dc <HAL_RCC_OscConfig+0x530>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x4ee>
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001786:	496b      	ldr	r1, [pc, #428]	; (8001934 <HAL_RCC_OscConfig+0x688>)
 8001788:	400a      	ands	r2, r1
 800178a:	651a      	str	r2, [r3, #80]	; 0x50
 800178c:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800178e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001790:	4b66      	ldr	r3, [pc, #408]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001792:	496a      	ldr	r1, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x690>)
 8001794:	400a      	ands	r2, r1
 8001796:	651a      	str	r2, [r3, #80]	; 0x50
 8001798:	e020      	b.n	80017dc <HAL_RCC_OscConfig+0x530>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	23a0      	movs	r3, #160	; 0xa0
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10e      	bne.n	80017c4 <HAL_RCC_OscConfig+0x518>
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	00c9      	lsls	r1, r1, #3
 80017b0:	430a      	orrs	r2, r1
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50
 80017b4:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b8:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0049      	lsls	r1, r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	651a      	str	r2, [r3, #80]	; 0x50
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x530>
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c8:	4b58      	ldr	r3, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017ca:	495a      	ldr	r1, [pc, #360]	; (8001934 <HAL_RCC_OscConfig+0x688>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
 80017d0:	4b56      	ldr	r3, [pc, #344]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d4:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80017d6:	4959      	ldr	r1, [pc, #356]	; (800193c <HAL_RCC_OscConfig+0x690>)
 80017d8:	400a      	ands	r2, r1
 80017da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff f9ac 	bl	8000b40 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f9a7 	bl	8000b40 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_RCC_OscConfig+0x694>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0ca      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d0ef      	beq.n	80017ee <HAL_RCC_OscConfig+0x542>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff f996 	bl	8000b40 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff f991 	bl	8000b40 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4a46      	ldr	r2, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x694>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0b4      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d1ef      	bne.n	800181a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800183a:	2323      	movs	r3, #35	; 0x23
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800184a:	493e      	ldr	r1, [pc, #248]	; (8001944 <HAL_RCC_OscConfig+0x698>)
 800184c:	400a      	ands	r2, r1
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x5ae>
 8001858:	e09d      	b.n	8001996 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x5b6>
 8001860:	e076      	b.n	8001950 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2b02      	cmp	r3, #2
 8001868:	d145      	bne.n	80018f6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_RCC_OscConfig+0x680>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001870:	4935      	ldr	r1, [pc, #212]	; (8001948 <HAL_RCC_OscConfig+0x69c>)
 8001872:	400a      	ands	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff f963 	bl	8000b40 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f95e 	bl	8000b40 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e082      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	049b      	lsls	r3, r3, #18
 800189a:	4013      	ands	r3, r2
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a2a      	ldr	r2, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0x6a0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	431a      	orrs	r2, r3
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0449      	lsls	r1, r1, #17
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff f938 	bl	8000b40 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f933 	bl	8000b40 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e057      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	049b      	lsls	r3, r3, #18
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x62a>
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x680>)
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <HAL_RCC_OscConfig+0x69c>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f91d 	bl	8000b40 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f918 	bl	8000b40 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e03c      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800191e:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x680>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x660>
 800192a:	e034      	b.n	8001996 <HAL_RCC_OscConfig+0x6ea>
 800192c:	40021000 	.word	0x40021000
 8001930:	ffff1fff 	.word	0xffff1fff
 8001934:	fffffeff 	.word	0xfffffeff
 8001938:	40007000 	.word	0x40007000
 800193c:	fffffbff 	.word	0xfffffbff
 8001940:	00001388 	.word	0x00001388
 8001944:	efffffff 	.word	0xefffffff
 8001948:	feffffff 	.word	0xfeffffff
 800194c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x6f4>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	429a      	cmp	r2, r3
 8001970:	d10f      	bne.n	8001992 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	23f0      	movs	r3, #240	; 0xf0
 8001976:	039b      	lsls	r3, r3, #14
 8001978:	401a      	ands	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b00a      	add	sp, #40	; 0x28
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e128      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d91e      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f8b2 	bl	8000b40 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	e009      	b.n	80019f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e2:	f7ff f8ad 	bl	8000b40 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	4a8a      	ldr	r2, [pc, #552]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e109      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b87      	ldr	r3, [pc, #540]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0e:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	22f0      	movs	r2, #240	; 0xf0
 8001a14:	4393      	bics	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
 8001a2c:	e089      	b.n	8001b42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a36:	4b79      	ldr	r3, [pc, #484]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	029b      	lsls	r3, r3, #10
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d120      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0e1      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	049b      	lsls	r3, r3, #18
 8001a56:	4013      	ands	r3, r2
 8001a58:	d114      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0d5      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a66:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d109      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0ca      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a74:	4b69      	ldr	r3, [pc, #420]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c2      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a84:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4b62      	ldr	r3, [pc, #392]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f852 	bl	8000b40 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff f849 	bl	8000b40 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0a5      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001abe:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_ClockConfig+0x106>
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f7ff f833 	bl	8000b40 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e08f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	220c      	movs	r2, #12
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d1ef      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x132>
 8001af6:	e024      	b.n	8001b42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d11b      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7ff f81d 	bl	8000b40 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	4a42      	ldr	r2, [pc, #264]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e079      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d1ef      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x15e>
 8001b22:	e00e      	b.n	8001b42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f80c 	bl	8000b40 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e068      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d21e      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b62:	f7fe ffed 	bl	8000b40 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7fe ffe8 	bl	8000b40 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_RCC_ClockConfig+0x274>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e044      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x27c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_RCC_ClockConfig+0x280>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00da      	lsls	r2, r3, #3
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bcc:	f000 f832 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	220f      	movs	r2, #15
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x284>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_ClockConfig+0x288>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_ClockConfig+0x28c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	250b      	movs	r5, #11
 8001bee:	197c      	adds	r4, r7, r5
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe ff5f 	bl	8000ab4 <HAL_InitTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bfa:	197b      	adds	r3, r7, r5
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c02:	197b      	adds	r3, r7, r5
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40022000 	.word	0x40022000
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	fffff8ff 	.word	0xfffff8ff
 8001c24:	ffffc7ff 	.word	0xffffc7ff
 8001c28:	080029cc 	.word	0x080029cc
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b08e      	sub	sp, #56	; 0x38
 8001c38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	230c      	movs	r3, #12
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d014      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4a:	d900      	bls.n	8001c4e <HAL_RCC_GetSysClockFreq+0x1a>
 8001c4c:	e07b      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x112>
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x24>
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e076      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c58:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c66:	e07c      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c6c:	e079      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c72:	e076      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	0c9a      	lsrs	r2, r3, #18
 8001c78:	230f      	movs	r3, #15
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x148>)
 8001c7e:	5c9b      	ldrb	r3, [r3, r2]
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	0d9a      	lsrs	r2, r3, #22
 8001c86:	2303      	movs	r3, #3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	025b      	lsls	r3, r3, #9
 8001c96:	4013      	ands	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	4a35      	ldr	r2, [pc, #212]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	69b8      	ldr	r0, [r7, #24]
 8001ca8:	69f9      	ldr	r1, [r7, #28]
 8001caa:	f7fe fad9 	bl	8000260 <__aeabi_lmul>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f7fe faad 	bl	8000220 <__aeabi_uldivmod>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	000b      	movs	r3, r1
 8001cca:	0013      	movs	r3, r2
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d01a      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	f7fe fab9 	bl	8000260 <__aeabi_lmul>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	000b      	movs	r3, r1
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f7fe fa8d 	bl	8000220 <__aeabi_uldivmod>
 8001d06:	0002      	movs	r2, r0
 8001d08:	000b      	movs	r3, r1
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0e:	e017      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	0018      	movs	r0, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	0019      	movs	r1, r3
 8001d18:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f7fe faa0 	bl	8000260 <__aeabi_lmul>
 8001d20:	0002      	movs	r2, r0
 8001d22:	000b      	movs	r3, r1
 8001d24:	0010      	movs	r0, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	001c      	movs	r4, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	001d      	movs	r5, r3
 8001d30:	0022      	movs	r2, r4
 8001d32:	002b      	movs	r3, r5
 8001d34:	f7fe fa74 	bl	8000220 <__aeabi_uldivmod>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	000b      	movs	r3, r1
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	e00d      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	4013      	ands	r3, r2
 8001d50:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	3301      	adds	r3, #1
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	0212      	lsls	r2, r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d60:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b00e      	add	sp, #56	; 0x38
 8001d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	003d0900 	.word	0x003d0900
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200
 8001d7c:	080029e4 	.word	0x080029e4

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff2 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	2207      	movs	r2, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	000b      	movs	r3, r1
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	080029dc 	.word	0x080029dc

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc4:	f7ff ffdc 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dc8:	0001      	movs	r1, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	40d9      	lsrs	r1, r3
 8001dda:	000b      	movs	r3, r1
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080029dc 	.word	0x080029dc

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001df4:	2017      	movs	r0, #23
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	4013      	ands	r3, r2
 8001e04:	d100      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001e06:	e0c2      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	055b      	lsls	r3, r3, #21
 8001e10:	4013      	ands	r3, r2
 8001e12:	d109      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e18:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0549      	lsls	r1, r1, #21
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d11a      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0049      	lsls	r1, r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fe7d 	bl	8000b40 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4a:	e008      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7fe fe78 	bl	8000b40 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0d4      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e6a:	4b69      	ldr	r3, [pc, #420]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	039b      	lsls	r3, r3, #14
 8001e72:	4013      	ands	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	039b      	lsls	r3, r3, #14
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d013      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	23c0      	movs	r3, #192	; 0xc0
 8001e8c:	029b      	lsls	r3, r3, #10
 8001e8e:	401a      	ands	r2, r3
 8001e90:	23c0      	movs	r3, #192	; 0xc0
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10a      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e98:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d101      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0ac      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001eae:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03b      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	23c0      	movs	r3, #192	; 0xc0
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d033      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d02e      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0309      	lsls	r1, r1, #12
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef8:	4948      	ldr	r1, [pc, #288]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d014      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fe17 	bl	8000b40 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f16:	e009      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7fe fe12 	bl	8000b40 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4a3f      	ldr	r2, [pc, #252]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e06d      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	401a      	ands	r2, r3
 8001f42:	23c0      	movs	r3, #192	; 0xc0
 8001f44:	029b      	lsls	r3, r3, #10
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a35      	ldr	r2, [pc, #212]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	039b      	lsls	r3, r3, #14
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f66:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	23c0      	movs	r3, #192	; 0xc0
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	401a      	ands	r2, r3
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f78:	2317      	movs	r3, #23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f88:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	220c      	movs	r2, #12
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002002:	430a      	orrs	r2, r1
 8002004:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b006      	add	sp, #24
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	fffcffff 	.word	0xfffcffff
 800201c:	fff7ffff 	.word	0xfff7ffff
 8002020:	00001388 	.word	0x00001388
 8002024:	ffcfffff 	.word	0xffcfffff
 8002028:	efffffff 	.word	0xefffffff
 800202c:	fffff3ff 	.word	0xfffff3ff
 8002030:	ffffcfff 	.word	0xffffcfff
 8002034:	fff3ffff 	.word	0xfff3ffff

08002038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e044      	b.n	80020d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800204e:	2b00      	cmp	r3, #0
 8002050:	d107      	bne.n	8002062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2274      	movs	r2, #116	; 0x74
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe fc45 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2224      	movs	r2, #36	; 0x24
 8002066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	438a      	bics	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f830 	bl	80020e0 <UART_SetConfig>
 8002080:	0003      	movs	r3, r0
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e024      	b.n	80020d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 fa6d 	bl	8002574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	490d      	ldr	r1, [pc, #52]	; (80020dc <HAL_UART_Init+0xa4>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	212a      	movs	r1, #42	; 0x2a
 80020b6:	438a      	bics	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 fb05 	bl	80026dc <UART_CheckIdleState>
 80020d2:	0003      	movs	r3, r0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	ffffb7ff 	.word	0xffffb7ff

080020e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b08e      	sub	sp, #56	; 0x38
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020e8:	231a      	movs	r3, #26
 80020ea:	2218      	movs	r2, #24
 80020ec:	189b      	adds	r3, r3, r2
 80020ee:	19db      	adds	r3, r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4313      	orrs	r3, r2
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4ab4      	ldr	r2, [pc, #720]	; (80023e4 <UART_SetConfig+0x304>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4aaf      	ldr	r2, [pc, #700]	; (80023e8 <UART_SetConfig+0x308>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4aa9      	ldr	r2, [pc, #676]	; (80023ec <UART_SetConfig+0x30c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002150:	4313      	orrs	r3, r2
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4aa5      	ldr	r2, [pc, #660]	; (80023f0 <UART_SetConfig+0x310>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4aa1      	ldr	r2, [pc, #644]	; (80023f4 <UART_SetConfig+0x314>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d131      	bne.n	80021d8 <UART_SetConfig+0xf8>
 8002174:	4ba0      	ldr	r3, [pc, #640]	; (80023f8 <UART_SetConfig+0x318>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	220c      	movs	r2, #12
 800217a:	4013      	ands	r3, r2
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d01d      	beq.n	80021bc <UART_SetConfig+0xdc>
 8002180:	d823      	bhi.n	80021ca <UART_SetConfig+0xea>
 8002182:	2b08      	cmp	r3, #8
 8002184:	d00c      	beq.n	80021a0 <UART_SetConfig+0xc0>
 8002186:	d820      	bhi.n	80021ca <UART_SetConfig+0xea>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <UART_SetConfig+0xb2>
 800218c:	2b04      	cmp	r3, #4
 800218e:	d00e      	beq.n	80021ae <UART_SetConfig+0xce>
 8002190:	e01b      	b.n	80021ca <UART_SetConfig+0xea>
 8002192:	231b      	movs	r3, #27
 8002194:	2218      	movs	r2, #24
 8002196:	189b      	adds	r3, r3, r2
 8002198:	19db      	adds	r3, r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e065      	b.n	800226c <UART_SetConfig+0x18c>
 80021a0:	231b      	movs	r3, #27
 80021a2:	2218      	movs	r2, #24
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	19db      	adds	r3, r3, r7
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e05e      	b.n	800226c <UART_SetConfig+0x18c>
 80021ae:	231b      	movs	r3, #27
 80021b0:	2218      	movs	r2, #24
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	19db      	adds	r3, r3, r7
 80021b6:	2204      	movs	r2, #4
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e057      	b.n	800226c <UART_SetConfig+0x18c>
 80021bc:	231b      	movs	r3, #27
 80021be:	2218      	movs	r2, #24
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	19db      	adds	r3, r3, r7
 80021c4:	2208      	movs	r2, #8
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e050      	b.n	800226c <UART_SetConfig+0x18c>
 80021ca:	231b      	movs	r3, #27
 80021cc:	2218      	movs	r2, #24
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	19db      	adds	r3, r3, r7
 80021d2:	2210      	movs	r2, #16
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e049      	b.n	800226c <UART_SetConfig+0x18c>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a83      	ldr	r2, [pc, #524]	; (80023ec <UART_SetConfig+0x30c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d13e      	bne.n	8002260 <UART_SetConfig+0x180>
 80021e2:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <UART_SetConfig+0x318>)
 80021e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	22c0      	movs	r2, #192	; 0xc0
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d027      	beq.n	8002244 <UART_SetConfig+0x164>
 80021f4:	22c0      	movs	r2, #192	; 0xc0
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d82a      	bhi.n	8002252 <UART_SetConfig+0x172>
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	4293      	cmp	r3, r2
 8002202:	d011      	beq.n	8002228 <UART_SetConfig+0x148>
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	4293      	cmp	r3, r2
 800220a:	d822      	bhi.n	8002252 <UART_SetConfig+0x172>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <UART_SetConfig+0x13a>
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	00d2      	lsls	r2, r2, #3
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <UART_SetConfig+0x156>
 8002218:	e01b      	b.n	8002252 <UART_SetConfig+0x172>
 800221a:	231b      	movs	r3, #27
 800221c:	2218      	movs	r2, #24
 800221e:	189b      	adds	r3, r3, r2
 8002220:	19db      	adds	r3, r3, r7
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e021      	b.n	800226c <UART_SetConfig+0x18c>
 8002228:	231b      	movs	r3, #27
 800222a:	2218      	movs	r2, #24
 800222c:	189b      	adds	r3, r3, r2
 800222e:	19db      	adds	r3, r3, r7
 8002230:	2202      	movs	r2, #2
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e01a      	b.n	800226c <UART_SetConfig+0x18c>
 8002236:	231b      	movs	r3, #27
 8002238:	2218      	movs	r2, #24
 800223a:	189b      	adds	r3, r3, r2
 800223c:	19db      	adds	r3, r3, r7
 800223e:	2204      	movs	r2, #4
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e013      	b.n	800226c <UART_SetConfig+0x18c>
 8002244:	231b      	movs	r3, #27
 8002246:	2218      	movs	r2, #24
 8002248:	189b      	adds	r3, r3, r2
 800224a:	19db      	adds	r3, r3, r7
 800224c:	2208      	movs	r2, #8
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e00c      	b.n	800226c <UART_SetConfig+0x18c>
 8002252:	231b      	movs	r3, #27
 8002254:	2218      	movs	r2, #24
 8002256:	189b      	adds	r3, r3, r2
 8002258:	19db      	adds	r3, r3, r7
 800225a:	2210      	movs	r2, #16
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e005      	b.n	800226c <UART_SetConfig+0x18c>
 8002260:	231b      	movs	r3, #27
 8002262:	2218      	movs	r2, #24
 8002264:	189b      	adds	r3, r3, r2
 8002266:	19db      	adds	r3, r3, r7
 8002268:	2210      	movs	r2, #16
 800226a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <UART_SetConfig+0x30c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d000      	beq.n	8002278 <UART_SetConfig+0x198>
 8002276:	e084      	b.n	8002382 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002278:	231b      	movs	r3, #27
 800227a:	2218      	movs	r2, #24
 800227c:	189b      	adds	r3, r3, r2
 800227e:	19db      	adds	r3, r3, r7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d01d      	beq.n	80022c2 <UART_SetConfig+0x1e2>
 8002286:	dc20      	bgt.n	80022ca <UART_SetConfig+0x1ea>
 8002288:	2b04      	cmp	r3, #4
 800228a:	d015      	beq.n	80022b8 <UART_SetConfig+0x1d8>
 800228c:	dc1d      	bgt.n	80022ca <UART_SetConfig+0x1ea>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <UART_SetConfig+0x1b8>
 8002292:	2b02      	cmp	r3, #2
 8002294:	d005      	beq.n	80022a2 <UART_SetConfig+0x1c2>
 8002296:	e018      	b.n	80022ca <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002298:	f7ff fd7c 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 800229c:	0003      	movs	r3, r0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022a0:	e01c      	b.n	80022dc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <UART_SetConfig+0x318>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	4013      	ands	r3, r2
 80022aa:	d002      	beq.n	80022b2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022ac:	4b53      	ldr	r3, [pc, #332]	; (80023fc <UART_SetConfig+0x31c>)
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022b0:	e014      	b.n	80022dc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80022b2:	4b53      	ldr	r3, [pc, #332]	; (8002400 <UART_SetConfig+0x320>)
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b6:	e011      	b.n	80022dc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022b8:	f7ff fcbc 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80022bc:	0003      	movs	r3, r0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022c0:	e00c      	b.n	80022dc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022c8:	e008      	b.n	80022dc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022ce:	231a      	movs	r3, #26
 80022d0:	2218      	movs	r2, #24
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	19db      	adds	r3, r3, r7
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
        break;
 80022da:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d100      	bne.n	80022e4 <UART_SetConfig+0x204>
 80022e2:	e130      	b.n	8002546 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	0013      	movs	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d305      	bcc.n	8002300 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d906      	bls.n	800230e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002300:	231a      	movs	r3, #26
 8002302:	2218      	movs	r2, #24
 8002304:	189b      	adds	r3, r3, r2
 8002306:	19db      	adds	r3, r3, r7
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e11b      	b.n	8002546 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	000b      	movs	r3, r1
 800231c:	0e1b      	lsrs	r3, r3, #24
 800231e:	0010      	movs	r0, r2
 8002320:	0205      	lsls	r5, r0, #8
 8002322:	431d      	orrs	r5, r3
 8002324:	000b      	movs	r3, r1
 8002326:	021c      	lsls	r4, r3, #8
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	1900      	adds	r0, r0, r4
 800233a:	4169      	adcs	r1, r5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f7fd ff69 	bl	8000220 <__aeabi_uldivmod>
 800234e:	0002      	movs	r2, r0
 8002350:	000b      	movs	r3, r1
 8002352:	0013      	movs	r3, r2
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d309      	bcc.n	8002374 <UART_SetConfig+0x294>
 8002360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	035b      	lsls	r3, r3, #13
 8002366:	429a      	cmp	r2, r3
 8002368:	d204      	bcs.n	8002374 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	e0e8      	b.n	8002546 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002374:	231a      	movs	r3, #26
 8002376:	2218      	movs	r2, #24
 8002378:	189b      	adds	r3, r3, r2
 800237a:	19db      	adds	r3, r3, r7
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e0e1      	b.n	8002546 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	429a      	cmp	r2, r3
 800238c:	d000      	beq.n	8002390 <UART_SetConfig+0x2b0>
 800238e:	e083      	b.n	8002498 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002390:	231b      	movs	r3, #27
 8002392:	2218      	movs	r2, #24
 8002394:	189b      	adds	r3, r3, r2
 8002396:	19db      	adds	r3, r3, r7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b08      	cmp	r3, #8
 800239c:	d834      	bhi.n	8002408 <UART_SetConfig+0x328>
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <UART_SetConfig+0x324>)
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023a8:	f7ff fcf4 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80023ac:	0003      	movs	r3, r0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b0:	e033      	b.n	800241a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023b2:	f7ff fd05 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 80023b6:	0003      	movs	r3, r0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ba:	e02e      	b.n	800241a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <UART_SetConfig+0x318>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2210      	movs	r2, #16
 80023c2:	4013      	ands	r3, r2
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <UART_SetConfig+0x31c>)
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023ca:	e026      	b.n	800241a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <UART_SetConfig+0x320>)
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023d0:	e023      	b.n	800241a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d2:	f7ff fc2f 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80023d6:	0003      	movs	r3, r0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023da:	e01e      	b.n	800241a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023e2:	e01a      	b.n	800241a <UART_SetConfig+0x33a>
 80023e4:	efff69f3 	.word	0xefff69f3
 80023e8:	ffffcfff 	.word	0xffffcfff
 80023ec:	40004800 	.word	0x40004800
 80023f0:	fffff4ff 	.word	0xfffff4ff
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	003d0900 	.word	0x003d0900
 8002400:	00f42400 	.word	0x00f42400
 8002404:	080029f0 	.word	0x080029f0
      default:
        pclk = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800240c:	231a      	movs	r3, #26
 800240e:	2218      	movs	r2, #24
 8002410:	189b      	adds	r3, r3, r2
 8002412:	19db      	adds	r3, r3, r7
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
        break;
 8002418:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d100      	bne.n	8002422 <UART_SetConfig+0x342>
 8002420:	e091      	b.n	8002546 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	005a      	lsls	r2, r3, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	18d2      	adds	r2, r2, r3
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0019      	movs	r1, r3
 8002434:	0010      	movs	r0, r2
 8002436:	f7fd fe67 	bl	8000108 <__udivsi3>
 800243a:	0003      	movs	r3, r0
 800243c:	b29b      	uxth	r3, r3
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d921      	bls.n	800248a <UART_SetConfig+0x3aa>
 8002446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	429a      	cmp	r2, r3
 800244e:	d21c      	bcs.n	800248a <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	b29a      	uxth	r2, r3
 8002454:	200e      	movs	r0, #14
 8002456:	2418      	movs	r4, #24
 8002458:	1903      	adds	r3, r0, r4
 800245a:	19db      	adds	r3, r3, r7
 800245c:	210f      	movs	r1, #15
 800245e:	438a      	bics	r2, r1
 8002460:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	2207      	movs	r2, #7
 800246a:	4013      	ands	r3, r2
 800246c:	b299      	uxth	r1, r3
 800246e:	1903      	adds	r3, r0, r4
 8002470:	19db      	adds	r3, r3, r7
 8002472:	1902      	adds	r2, r0, r4
 8002474:	19d2      	adds	r2, r2, r7
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1902      	adds	r2, r0, r4
 8002482:	19d2      	adds	r2, r2, r7
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	e05d      	b.n	8002546 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800248a:	231a      	movs	r3, #26
 800248c:	2218      	movs	r2, #24
 800248e:	189b      	adds	r3, r3, r2
 8002490:	19db      	adds	r3, r3, r7
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e056      	b.n	8002546 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002498:	231b      	movs	r3, #27
 800249a:	2218      	movs	r2, #24
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d822      	bhi.n	80024ec <UART_SetConfig+0x40c>
 80024a6:	009a      	lsls	r2, r3, #2
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <UART_SetConfig+0x484>)
 80024aa:	18d3      	adds	r3, r2, r3
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b0:	f7ff fc70 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80024b4:	0003      	movs	r3, r0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024b8:	e021      	b.n	80024fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024ba:	f7ff fc81 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 80024be:	0003      	movs	r3, r0
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024c2:	e01c      	b.n	80024fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <UART_SetConfig+0x488>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2210      	movs	r2, #16
 80024ca:	4013      	ands	r3, r2
 80024cc:	d002      	beq.n	80024d4 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <UART_SetConfig+0x48c>)
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024d2:	e014      	b.n	80024fe <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <UART_SetConfig+0x490>)
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024d8:	e011      	b.n	80024fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024da:	f7ff fbab 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80024de:	0003      	movs	r3, r0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024e2:	e00c      	b.n	80024fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024ea:	e008      	b.n	80024fe <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80024f0:	231a      	movs	r3, #26
 80024f2:	2218      	movs	r2, #24
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	19db      	adds	r3, r3, r7
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
        break;
 80024fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	085a      	lsrs	r2, r3, #1
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	18d2      	adds	r2, r2, r3
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f7fd fdf7 	bl	8000108 <__udivsi3>
 800251a:	0003      	movs	r3, r0
 800251c:	b29b      	uxth	r3, r3
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d909      	bls.n	800253a <UART_SetConfig+0x45a>
 8002526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	429a      	cmp	r2, r3
 800252e:	d204      	bcs.n	800253a <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	e005      	b.n	8002546 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800253a:	231a      	movs	r3, #26
 800253c:	2218      	movs	r2, #24
 800253e:	189b      	adds	r3, r3, r2
 8002540:	19db      	adds	r3, r3, r7
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2200      	movs	r2, #0
 800254a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2200      	movs	r2, #0
 8002550:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002552:	231a      	movs	r3, #26
 8002554:	2218      	movs	r2, #24
 8002556:	189b      	adds	r3, r3, r2
 8002558:	19db      	adds	r3, r3, r7
 800255a:	781b      	ldrb	r3, [r3, #0]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b00e      	add	sp, #56	; 0x38
 8002562:	bdb0      	pop	{r4, r5, r7, pc}
 8002564:	08002a14 	.word	0x08002a14
 8002568:	40021000 	.word	0x40021000
 800256c:	003d0900 	.word	0x003d0900
 8002570:	00f42400 	.word	0x00f42400

08002574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	d00b      	beq.n	800259e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <UART_AdvFeatureConfig+0x144>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a43      	ldr	r2, [pc, #268]	; (80026bc <UART_AdvFeatureConfig+0x148>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2204      	movs	r2, #4
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00b      	beq.n	80025e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a3b      	ldr	r2, [pc, #236]	; (80026c0 <UART_AdvFeatureConfig+0x14c>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2208      	movs	r2, #8
 80025e8:	4013      	ands	r3, r2
 80025ea:	d00b      	beq.n	8002604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <UART_AdvFeatureConfig+0x150>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2210      	movs	r2, #16
 800260a:	4013      	ands	r3, r2
 800260c:	d00b      	beq.n	8002626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <UART_AdvFeatureConfig+0x154>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2220      	movs	r2, #32
 800262c:	4013      	ands	r3, r2
 800262e:	d00b      	beq.n	8002648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <UART_AdvFeatureConfig+0x158>)
 8002638:	4013      	ands	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	4013      	ands	r3, r2
 8002650:	d01d      	beq.n	800268e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <UART_AdvFeatureConfig+0x15c>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	035b      	lsls	r3, r3, #13
 8002672:	429a      	cmp	r2, r3
 8002674:	d10b      	bne.n	800268e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <UART_AdvFeatureConfig+0x160>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	4013      	ands	r3, r2
 8002696:	d00b      	beq.n	80026b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <UART_AdvFeatureConfig+0x164>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	0019      	movs	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  }
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	fffdffff 	.word	0xfffdffff
 80026bc:	fffeffff 	.word	0xfffeffff
 80026c0:	fffbffff 	.word	0xfffbffff
 80026c4:	ffff7fff 	.word	0xffff7fff
 80026c8:	ffffefff 	.word	0xffffefff
 80026cc:	ffffdfff 	.word	0xffffdfff
 80026d0:	ffefffff 	.word	0xffefffff
 80026d4:	ff9fffff 	.word	0xff9fffff
 80026d8:	fff7ffff 	.word	0xfff7ffff

080026dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	2100      	movs	r1, #0
 80026ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026ec:	f7fe fa28 	bl	8000b40 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2208      	movs	r2, #8
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d10c      	bne.n	800271c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0391      	lsls	r1, r2, #14
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <UART_CheckIdleState+0x8c>)
 800270c:	9200      	str	r2, [sp, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	f000 f82c 	bl	800276c <UART_WaitOnFlagUntilTimeout>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d001      	beq.n	800271c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e021      	b.n	8002760 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	2b04      	cmp	r3, #4
 8002728:	d10c      	bne.n	8002744 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	03d1      	lsls	r1, r2, #15
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <UART_CheckIdleState+0x8c>)
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	f000 f818 	bl	800276c <UART_WaitOnFlagUntilTimeout>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e00d      	b.n	8002760 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2274      	movs	r2, #116	; 0x74
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	01ffffff 	.word	0x01ffffff

0800276c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b094      	sub	sp, #80	; 0x50
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277c:	e0a3      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002780:	3301      	adds	r3, #1
 8002782:	d100      	bne.n	8002786 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002784:	e09f      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe f9db 	bl	8000b40 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <UART_WaitOnFlagUntilTimeout+0x30>
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	2b00      	cmp	r3, #0
 800279a:	d13d      	bne.n	8002818 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279c:	f3ef 8310 	mrs	r3, PRIMASK
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
 80027a6:	2301      	movs	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	494c      	ldr	r1, [pc, #304]	; (80028f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80027be:	400a      	ands	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ce:	f3ef 8310 	mrs	r3, PRIMASK
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
 80027d8:	2301      	movs	r3, #1
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fa:	f383 8810 	msr	PRIMASK, r3
}
 80027fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2274      	movs	r2, #116	; 0x74
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e067      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2204      	movs	r2, #4
 8002820:	4013      	ands	r3, r2
 8002822:	d050      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	401a      	ands	r2, r3
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	429a      	cmp	r2, r3
 8002836:	d146      	bne.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002842:	f3ef 8310 	mrs	r3, PRIMASK
 8002846:	613b      	str	r3, [r7, #16]
  return(result);
 8002848:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800284a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800284c:	2301      	movs	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4923      	ldr	r1, [pc, #140]	; (80028f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002864:	400a      	ands	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f383 8810 	msr	PRIMASK, r3
}
 8002872:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002874:	f3ef 8310 	mrs	r3, PRIMASK
 8002878:	61fb      	str	r3, [r7, #28]
  return(result);
 800287a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
 800287e:	2301      	movs	r3, #1
 8002880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f383 8810 	msr	PRIMASK, r3
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	438a      	bics	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f383 8810 	msr	PRIMASK, r3
}
 80028a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	2120      	movs	r1, #32
 80028b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2274      	movs	r2, #116	; 0x74
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e010      	b.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	425a      	negs	r2, r3
 80028d6:	4153      	adcs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	001a      	movs	r2, r3
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d100      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80028e4:	e74b      	b.n	800277e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b014      	add	sp, #80	; 0x50
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	fffffe5f 	.word	0xfffffe5f

080028f4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e017      	b.n	8002936 <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f7fe f833 	bl	8000974 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	0011      	movs	r1, r2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <__libc_init_array>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	2600      	movs	r6, #0
 8002960:	4d0c      	ldr	r5, [pc, #48]	; (8002994 <__libc_init_array+0x38>)
 8002962:	4c0d      	ldr	r4, [pc, #52]	; (8002998 <__libc_init_array+0x3c>)
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	42a6      	cmp	r6, r4
 800296a:	d109      	bne.n	8002980 <__libc_init_array+0x24>
 800296c:	2600      	movs	r6, #0
 800296e:	f000 f821 	bl	80029b4 <_init>
 8002972:	4d0a      	ldr	r5, [pc, #40]	; (800299c <__libc_init_array+0x40>)
 8002974:	4c0a      	ldr	r4, [pc, #40]	; (80029a0 <__libc_init_array+0x44>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	42a6      	cmp	r6, r4
 800297c:	d105      	bne.n	800298a <__libc_init_array+0x2e>
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	00b3      	lsls	r3, r6, #2
 8002982:	58eb      	ldr	r3, [r5, r3]
 8002984:	4798      	blx	r3
 8002986:	3601      	adds	r6, #1
 8002988:	e7ee      	b.n	8002968 <__libc_init_array+0xc>
 800298a:	00b3      	lsls	r3, r6, #2
 800298c:	58eb      	ldr	r3, [r5, r3]
 800298e:	4798      	blx	r3
 8002990:	3601      	adds	r6, #1
 8002992:	e7f2      	b.n	800297a <__libc_init_array+0x1e>
 8002994:	08002a40 	.word	0x08002a40
 8002998:	08002a40 	.word	0x08002a40
 800299c:	08002a40 	.word	0x08002a40
 80029a0:	08002a44 	.word	0x08002a44

080029a4 <memset>:
 80029a4:	0003      	movs	r3, r0
 80029a6:	1882      	adds	r2, r0, r2
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d100      	bne.n	80029ae <memset+0xa>
 80029ac:	4770      	bx	lr
 80029ae:	7019      	strb	r1, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	e7f9      	b.n	80029a8 <memset+0x4>

080029b4 <_init>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr

080029c0 <_fini>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr
