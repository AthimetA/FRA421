
FRA421_L010.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a24  08002a24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a28  08002a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002a38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002a38  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b1  00000000  00000000  000288c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  0002a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000103e4  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dc8  00000000  00000000  0003b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061e47  00000000  00000000  00044fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f4  00000000  00000000  000a6e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002998 	.word	0x08002998

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002998 	.word	0x08002998

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fad4 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f86c 	bl	800058c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80004b4:	f000 f950 	bl	8000758 <MX_GPIO_Init>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fde4 	bl	800108e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fb34 	bl	8000b38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2120      	movs	r1, #32
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fdd8 	bl	800108e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fb28 	bl	8000b38 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f936 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8e2 	bl	80006b4 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80004f0:	f000 f8c0 	bl	8000674 <MX_IWDG_Init>
  MX_WWDG_Init();
 80004f4:	f000 f90e 	bl	8000714 <MX_WWDG_Init>
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET)
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2101      	movs	r1, #1
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fda8 	bl	8001054 <HAL_GPIO_ReadPin>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d107      	bne.n	8000518 <main+0x70>
	  {
		  // WWGD window timeout
		  // (1/32000000)*4096*8*(63+1) == 0.065s
		  // Refresh at 70ms - MCU should reset
		  HAL_Delay(70);
 8000508:	2046      	movs	r0, #70	; 0x46
 800050a:	f000 fb15 	bl	8000b38 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0xd8>)
 8000510:	0018      	movs	r0, r3
 8000512:	f002 fa06 	bl	8002922 <HAL_WWDG_Refresh>
 8000516:	e02d      	b.n	8000574 <main+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == GPIO_PIN_RESET)
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2102      	movs	r1, #2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fd98 	bl	8001054 <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d107      	bne.n	8000538 <main+0x90>
	  {
		  // WWGD window window time
		  // (1/32000000)*4096*8*(36+1) == 0.038s
		  // Refresh at 20ms - MCU should reset
		  HAL_Delay(20);
 8000528:	2014      	movs	r0, #20
 800052a:	f000 fb05 	bl	8000b38 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <main+0xd8>)
 8000530:	0018      	movs	r0, r3
 8000532:	f002 f9f6 	bl	8002922 <HAL_WWDG_Refresh>
 8000536:	e01d      	b.n	8000574 <main+0xcc>
	  }
	  else if(HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin) == GPIO_PIN_RESET)
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2110      	movs	r1, #16
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fd88 	bl	8001054 <HAL_GPIO_ReadPin>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d10e      	bne.n	8000566 <main+0xbe>
	  {
		  // Stop main clock
		  HAL_SuspendTick();
 8000548:	f000 fb1a 	bl	8000b80 <HAL_SuspendTick>
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <main+0xdc>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0xdc>)
 8000552:	2104      	movs	r1, #4
 8000554:	430a      	orrs	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode(PWR_REGULATOR_VOLTAGE_SCALE1, PWR_STOPENTRY_WFE);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	2102      	movs	r1, #2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fe3a 	bl	80011d8 <HAL_PWR_EnterSTOPMode>
 8000564:	e006      	b.n	8000574 <main+0xcc>
	  }
	  else
	  {
		  // Refresh at 50ms - MCU should continuous running
		  HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f000 fae6 	bl	8000b38 <HAL_Delay>
		  HAL_WWDG_Refresh(&hwwdg);
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <main+0xd8>)
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f9d7 	bl	8002922 <HAL_WWDG_Refresh>
	  }
	  // Refresh IWDG
	  // Window time out
	  // (1/37000)*64*4096 = 7s
	  HAL_IWDG_Refresh(&hiwdg);
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0xe0>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fe1e 	bl	80011b8 <HAL_IWDG_Refresh>
	  if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET)
 800057c:	e7bc      	b.n	80004f8 <main+0x50>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	200000bc 	.word	0x200000bc
 8000584:	40007000 	.word	0x40007000
 8000588:	20000028 	.word	0x20000028

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b099      	sub	sp, #100	; 0x64
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	242c      	movs	r4, #44	; 0x2c
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2334      	movs	r3, #52	; 0x34
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 f9f3 	bl	8002988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	2318      	movs	r3, #24
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f002 f9eb 	bl	8002988 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2318      	movs	r3, #24
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 f9e4 	bl	8002988 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <SystemClock_Config+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <SystemClock_Config+0xe4>)
 80005c6:	401a      	ands	r2, r3
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xe0>)
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	0109      	lsls	r1, r1, #4
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2209      	movs	r2, #9
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	22a0      	movs	r2, #160	; 0xa0
 80005dc:	02d2      	lsls	r2, r2, #11
 80005de:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e0:	0021      	movs	r1, r4
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2202      	movs	r2, #2
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0252      	lsls	r2, r2, #9
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	22c0      	movs	r2, #192	; 0xc0
 80005fa:	0312      	lsls	r2, r2, #12
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	03d2      	lsls	r2, r2, #15
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	187b      	adds	r3, r7, r1
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fe41 	bl	8001290 <HAL_RCC_OscConfig>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000612:	f000 f943 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	2118      	movs	r1, #24
 8000618:	187b      	adds	r3, r7, r1
 800061a:	220f      	movs	r2, #15
 800061c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2203      	movs	r2, #3
 8000622:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2101      	movs	r1, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f001 f9a4 	bl	8001988 <HAL_RCC_ClockConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000644:	f000 f92a 	bl	800089c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000648:	003b      	movs	r3, r7
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064e:	003b      	movs	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	003b      	movs	r3, r7
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fbba 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000660:	f000 f91c 	bl	800089c <Error_Handler>
  }
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b019      	add	sp, #100	; 0x64
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40007000 	.word	0x40007000
 8000670:	ffffe7ff 	.word	0xffffe7ff

08000674 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_IWDG_Init+0x34>)
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MX_IWDG_Init+0x38>)
 800067c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000680:	2204      	movs	r2, #4
 8000682:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <MX_IWDG_Init+0x3c>)
 8000688:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_IWDG_Init+0x34>)
 800068c:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <MX_IWDG_Init+0x3c>)
 800068e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_IWDG_Init+0x34>)
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fd3e 	bl	8001114 <HAL_IWDG_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800069c:	f000 f8fe 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40003000 	.word	0x40003000
 80006b0:	00000fff 	.word	0x00000fff

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	0252      	lsls	r2, r2, #9
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fc8f 	bl	800201c <HAL_UART_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f8cb 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000038 	.word	0x20000038
 8000710:	40004400 	.word	0x40004400

08000714 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_WWDG_Init+0x3c>)
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <MX_WWDG_Init+0x40>)
 800071c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000720:	22c0      	movs	r2, #192	; 0xc0
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 100;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000728:	2264      	movs	r2, #100	; 0x64
 800072a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_WWDG_Init+0x3c>)
 800072e:	227f      	movs	r2, #127	; 0x7f
 8000730:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_WWDG_Init+0x3c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <MX_WWDG_Init+0x3c>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 f8cc 	bl	80028d8 <HAL_WWDG_Init>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000744:	f000 f8aa 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	200000bc 	.word	0x200000bc
 8000754:	40002c00 	.word	0x40002c00

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	; 0x2c
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	2414      	movs	r4, #20
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2314      	movs	r3, #20
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f002 f90d 	bl	8002988 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <MX_GPIO_Init+0x138>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b47      	ldr	r3, [pc, #284]	; (8000890 <MX_GPIO_Init+0x138>)
 8000774:	2104      	movs	r1, #4
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <MX_GPIO_Init+0x138>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2204      	movs	r2, #4
 8000780:	4013      	ands	r3, r2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b42      	ldr	r3, [pc, #264]	; (8000890 <MX_GPIO_Init+0x138>)
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_GPIO_Init+0x138>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	430a      	orrs	r2, r1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
 8000792:	4b3f      	ldr	r3, [pc, #252]	; (8000890 <MX_GPIO_Init+0x138>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b3c      	ldr	r3, [pc, #240]	; (8000890 <MX_GPIO_Init+0x138>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <MX_GPIO_Init+0x138>)
 80007a4:	2101      	movs	r1, #1
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <MX_GPIO_Init+0x138>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2201      	movs	r2, #1
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <MX_GPIO_Init+0x138>)
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <MX_GPIO_Init+0x138>)
 80007bc:	2102      	movs	r1, #2
 80007be:	430a      	orrs	r2, r1
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_GPIO_Init+0x138>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	2202      	movs	r2, #2
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fc59 	bl	800108e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x13c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	2138      	movs	r1, #56	; 0x38
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fc53 	bl	800108e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0192      	lsls	r2, r2, #6
 80007ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2284      	movs	r2, #132	; 0x84
 80007f4:	0392      	lsls	r2, r2, #14
 80007f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0x140>)
 8000802:	0019      	movs	r1, r3
 8000804:	0010      	movs	r0, r2
 8000806:	f000 faa7 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2213      	movs	r2, #19
 800080e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	193a      	adds	r2, r7, r4
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fa97 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2220      	movs	r2, #32
 800082e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000842:	193a      	adds	r2, r7, r4
 8000844:	23a0      	movs	r3, #160	; 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fa84 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2238      	movs	r2, #56	; 0x38
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	187b      	adds	r3, r7, r1
 800086c:	4a09      	ldr	r2, [pc, #36]	; (8000894 <MX_GPIO_Init+0x13c>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f000 fa71 	bl	8000d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2102      	movs	r1, #2
 800087a:	2007      	movs	r0, #7
 800087c:	f000 fa3a 	bl	8000cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000880:	2007      	movs	r0, #7
 8000882:	f000 fa4c 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00b      	add	sp, #44	; 0x2c
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000
 8000894:	50000400 	.word	0x50000400
 8000898:	50000800 	.word	0x50000800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <HAL_MspInit+0x24>)
 80008ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_MspInit+0x24>)
 80008b2:	2101      	movs	r1, #1
 80008b4:	430a      	orrs	r2, r1
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_MspInit+0x24>)
 80008ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_MspInit+0x24>)
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	0549      	lsls	r1, r1, #21
 80008c2:	430a      	orrs	r2, r1
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	240c      	movs	r4, #12
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 f850 	bl	8002988 <memset>
  if(huart->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <HAL_UART_MspInit+0x80>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d129      	bne.n	8000946 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x84>)
 80008f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x84>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0289      	lsls	r1, r1, #10
 80008fc:	430a      	orrs	r2, r1
 80008fe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0x84>)
 8000902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_UART_MspInit+0x84>)
 8000906:	2101      	movs	r1, #1
 8000908:	430a      	orrs	r2, r1
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x84>)
 800090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000910:	2201      	movs	r2, #1
 8000912:	4013      	ands	r3, r2
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000918:	0021      	movs	r1, r4
 800091a:	187b      	adds	r3, r7, r1
 800091c:	220c      	movs	r2, #12
 800091e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2203      	movs	r2, #3
 8000930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2204      	movs	r2, #4
 8000936:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	187a      	adds	r2, r7, r1
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fa09 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b009      	add	sp, #36	; 0x24
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_WWDG_MspInit+0x28>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <HAL_WWDG_MspInit+0x20>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_WWDG_MspInit+0x2c>)
 800096c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_WWDG_MspInit+0x2c>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0109      	lsls	r1, r1, #4
 8000974:	430a      	orrs	r2, r1
 8000976:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40002c00 	.word	0x40002c00
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8a8 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	019b      	lsls	r3, r3, #6
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fb82 	bl	80010c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <LoopForever+0x6>)
    LDR R1, [R0]
 80009da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <LoopForever+0xa>)
    CMP R1, R2
 80009e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009e2:	d105      	bne.n	80009f0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <LoopForever+0x12>)
    STR R1, [R0]
 80009e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009ec:	4913      	ldr	r1, [pc, #76]	; (8000a3c <LoopForever+0x1a>)
    STR R1, [R0]
 80009ee:	6001      	str	r1, [r0, #0]

080009f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009f2:	4914      	ldr	r1, [pc, #80]	; (8000a44 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <LoopForever+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a08:	4c11      	ldr	r4, [pc, #68]	; (8000a50 <LoopForever+0x2e>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a16:	f7ff ffd8 	bl	80009ca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f001 ff91 	bl	8002940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1e:	f7ff fd43 	bl	80004a8 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
   ldr   r0, =_estack
 8000a24:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000a28:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a2c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a30:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a34:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a38:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a3c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08002a2c 	.word	0x08002a2c
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_IRQHandler>
	...

08000a58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x3c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Init+0x3c>)
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f811 	bl	8000a98 <HAL_InitTick>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	e001      	b.n	8000a86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a82:	f7ff ff11 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
}
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x5c>)
 8000aa2:	681c      	ldr	r4, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	23fa      	movs	r3, #250	; 0xfa
 8000aac:	0098      	lsls	r0, r3, #2
 8000aae:	f7ff fb2b 	bl	8000108 <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fb26 	bl	8000108 <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f93d 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ac4:	1e03      	subs	r3, r0, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e00f      	b.n	8000aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d80b      	bhi.n	8000aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f90a 	bl	8000cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_InitTick+0x64>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	18d2      	adds	r2, r2, r3
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200000d0 	.word	0x200000d0

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	200000d0 	.word	0x200000d0

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff0 	bl	8000b24 <HAL_GetTick>
 8000b44:	0003      	movs	r3, r0
 8000b46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	001a      	movs	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	189b      	adds	r3, r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	f7ff ffe0 	bl	8000b24 <HAL_GetTick>
 8000b64:	0002      	movs	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_SuspendTick+0x18>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_SuspendTick+0x18>)
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b7f      	cmp	r3, #127	; 0x7f
 8000bae:	d809      	bhi.n	8000bc4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	401a      	ands	r2, r3
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_EnableIRQ+0x30>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
  }
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b7f      	cmp	r3, #127	; 0x7f
 8000be4:	d828      	bhi.n	8000c38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	589b      	ldr	r3, [r3, r2]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c36:	e031      	b.n	8000c9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	230f      	movs	r3, #15
 8000c42:	400b      	ands	r3, r1
 8000c44:	3b08      	subs	r3, #8
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3306      	adds	r3, #6
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	0011      	movs	r1, r2
 8000c58:	2203      	movs	r2, #3
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	21ff      	movs	r1, #255	; 0xff
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	401a      	ands	r2, r3
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001c      	movs	r4, r3
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	430a      	orrs	r2, r1
 8000c92:	3306      	adds	r3, #6
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	18c3      	adds	r3, r0, r3
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	045b      	lsls	r3, r3, #17
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d301      	bcc.n	8000cc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e010      	b.n	8000ce6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SysTick_Config+0x44>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425b      	negs	r3, r3
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff ff7c 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x44>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	210f      	movs	r1, #15
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	0002      	movs	r2, r0
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff33 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ffaf 	bl	8000cac <SysTick_Config>
 8000d4e:	0003      	movs	r3, r0
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d6e:	e155      	b.n	800101c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <HAL_GPIO_Init+0x30>
 8000d86:	e146      	b.n	8001016 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d005      	beq.n	8000da0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d130      	bne.n	8000e02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	2201      	movs	r2, #1
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2203      	movs	r2, #3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d017      	beq.n	8000e3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d123      	bne.n	8000e92 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	58d3      	ldr	r3, [r2, r3]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2107      	movs	r1, #7
 8000e76:	400b      	ands	r3, r1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	6939      	ldr	r1, [r7, #16]
 8000e90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	23c0      	movs	r3, #192	; 0xc0
 8000ecc:	029b      	lsls	r3, r3, #10
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d100      	bne.n	8000ed4 <HAL_GPIO_Init+0x17c>
 8000ed2:	e0a0      	b.n	8001016 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_GPIO_Init+0x2dc>)
 8000ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed8:	4b56      	ldr	r3, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x2dc>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee0:	4a55      	ldr	r2, [pc, #340]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	589b      	ldr	r3, [r3, r2]
 8000eec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	0013      	movs	r3, r2
 8000efc:	43da      	mvns	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x1f6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4a      	ldr	r2, [pc, #296]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x1f2>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a49      	ldr	r2, [pc, #292]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1ee>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1ea>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a47      	ldr	r2, [pc, #284]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1e6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_Init+0x2f4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1e2>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	2103      	movs	r1, #3
 8000f54:	400a      	ands	r2, r1
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_GPIO_Init+0x2e0>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	4013      	ands	r3, r2
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	029b      	lsls	r3, r3, #10
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	035b      	lsls	r3, r3, #13
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	039b      	lsls	r3, r3, #14
 8001004:	4013      	ands	r3, r2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	40da      	lsrs	r2, r3
 8001024:	1e13      	subs	r3, r2, #0
 8001026:	d000      	beq.n	800102a <HAL_GPIO_Init+0x2d2>
 8001028:	e6a2      	b.n	8000d70 <HAL_GPIO_Init+0x18>
  }
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b006      	add	sp, #24
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000
 800103c:	50000400 	.word	0x50000400
 8001040:	50000800 	.word	0x50000800
 8001044:	50000c00 	.word	0x50000c00
 8001048:	50001000 	.word	0x50001000
 800104c:	50001c00 	.word	0x50001c00
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	000a      	movs	r2, r1
 800105e:	1cbb      	adds	r3, r7, #2
 8001060:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	1cba      	adds	r2, r7, #2
 8001068:	8812      	ldrh	r2, [r2, #0]
 800106a:	4013      	ands	r3, r2
 800106c:	d004      	beq.n	8001078 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800106e:	230f      	movs	r3, #15
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e003      	b.n	8001080 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	781b      	ldrb	r3, [r3, #0]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b004      	add	sp, #16
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	0008      	movs	r0, r1
 8001098:	0011      	movs	r1, r2
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	1c02      	adds	r2, r0, #0
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	1c0a      	adds	r2, r1, #0
 80010a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	1cbb      	adds	r3, r7, #2
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010b6:	e003      	b.n	80010c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	1dba      	adds	r2, r7, #6
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	4013      	ands	r3, r2
 80010de:	d008      	beq.n	80010f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010e2:	1dba      	adds	r2, r7, #6
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f807 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	0002      	movs	r2, r0
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e03d      	b.n	80011a2 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_IWDG_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_IWDG_Init+0x9c>)
 8001134:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6852      	ldr	r2, [r2, #4]
 800113e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6892      	ldr	r2, [r2, #8]
 8001148:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800114a:	f7ff fceb 	bl	8000b24 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001152:	e00e      	b.n	8001172 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001154:	f7ff fce6 	bl	8000b24 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b2a      	cmp	r3, #42	; 0x2a
 8001160:	d907      	bls.n	8001172 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2207      	movs	r2, #7
 800116a:	4013      	ands	r3, r2
 800116c:	d001      	beq.n	8001172 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e017      	b.n	80011a2 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2207      	movs	r2, #7
 800117a:	4013      	ands	r3, r2
 800117c:	d1ea      	bne.n	8001154 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d005      	beq.n	8001198 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	68d2      	ldr	r2, [r2, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	e003      	b.n	80011a0 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_IWDG_Init+0xa0>)
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	0000cccc 	.word	0x0000cccc
 80011b0:	00005555 	.word	0x00005555
 80011b4:	0000aaaa 	.word	0x0000aaaa

080011b8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IWDG_Refresh+0x1c>)
 80011c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	0000aaaa 	.word	0x0000aaaa

080011d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	000a      	movs	r2, r1
 80011e2:	1cfb      	adds	r3, r7, #3
 80011e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_PWR_EnterSTOPMode+0xac>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <HAL_PWR_EnterSTOPMode+0x40>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001212:	491d      	ldr	r1, [pc, #116]	; (8001288 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2203      	movs	r2, #3
 8001222:	4393      	bics	r3, r2
 8001224:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_PWR_EnterSTOPMode+0xb4>)
 800123a:	2104      	movs	r1, #4
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001240:	1cfb      	adds	r3, r7, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001248:	bf30      	wfi
 800124a:	e002      	b.n	8001252 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800124c:	bf40      	sev
    __WFE();
 800124e:	bf20      	wfe
    __WFE();
 8001250:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_PWR_EnterSTOPMode+0xb4>)
 8001258:	2104      	movs	r1, #4
 800125a:	438a      	bics	r2, r1
 800125c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d009      	beq.n	8001278 <HAL_PWR_EnterSTOPMode+0xa0>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	0089      	lsls	r1, r1, #2
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
  }
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b006      	add	sp, #24
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40007000 	.word	0x40007000
 8001284:	40010000 	.word	0x40010000
 8001288:	fffffdff 	.word	0xfffffdff
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 fb6c 	bl	800197c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a4:	4bc8      	ldr	r3, [pc, #800]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	220c      	movs	r2, #12
 80012aa:	4013      	ands	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ae:	4bc6      	ldr	r3, [pc, #792]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d100      	bne.n	80012c6 <HAL_RCC_OscConfig+0x36>
 80012c4:	e07d      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d007      	beq.n	80012dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0c      	cmp	r3, #12
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x68>
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	429a      	cmp	r2, r3
 80012da:	d10d      	bne.n	80012f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4bba      	ldr	r3, [pc, #744]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x5a>
 80012e8:	e06a      	b.n	80013c0 <HAL_RCC_OscConfig+0x130>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d166      	bne.n	80013c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f000 fb42 	bl	800197c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	025b      	lsls	r3, r3, #9
 8001300:	429a      	cmp	r2, r3
 8001302:	d107      	bne.n	8001314 <HAL_RCC_OscConfig+0x84>
 8001304:	4bb0      	ldr	r3, [pc, #704]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4baf      	ldr	r3, [pc, #700]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	0249      	lsls	r1, r1, #9
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e027      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	23a0      	movs	r3, #160	; 0xa0
 800131a:	02db      	lsls	r3, r3, #11
 800131c:	429a      	cmp	r2, r3
 800131e:	d10e      	bne.n	800133e <HAL_RCC_OscConfig+0xae>
 8001320:	4ba9      	ldr	r3, [pc, #676]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4ba8      	ldr	r3, [pc, #672]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	02c9      	lsls	r1, r1, #11
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4ba6      	ldr	r3, [pc, #664]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4ba5      	ldr	r3, [pc, #660]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0249      	lsls	r1, r1, #9
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e012      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 800133e:	4ba2      	ldr	r3, [pc, #648]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4ba1      	ldr	r3, [pc, #644]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001344:	49a1      	ldr	r1, [pc, #644]	; (80015cc <HAL_RCC_OscConfig+0x33c>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4b9f      	ldr	r3, [pc, #636]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	4013      	ands	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4b9b      	ldr	r3, [pc, #620]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b9a      	ldr	r3, [pc, #616]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800135e:	499c      	ldr	r1, [pc, #624]	; (80015d0 <HAL_RCC_OscConfig+0x340>)
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d014      	beq.n	8001396 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fbda 	bl	8000b24 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fbd5 	bl	8000b24 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e2f9      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001388:	4b8f      	ldr	r3, [pc, #572]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	029b      	lsls	r3, r3, #10
 8001390:	4013      	ands	r3, r2
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0xe6>
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fbc5 	bl	8000b24 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbc0 	bl	8000b24 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e2e4      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	029b      	lsls	r3, r3, #10
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x110>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x13e>
 80013cc:	e099      	b.n	8001502 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	2220      	movs	r2, #32
 80013d8:	4013      	ands	r3, r2
 80013da:	d009      	beq.n	80013f0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013dc:	4b7a      	ldr	r3, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80013e2:	2120      	movs	r1, #32
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2220      	movs	r2, #32
 80013ec:	4393      	bics	r3, r2
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	d13e      	bne.n	800147a <HAL_RCC_OscConfig+0x1ea>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d13b      	bne.n	800147a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2204      	movs	r2, #4
 8001408:	4013      	ands	r3, r2
 800140a:	d004      	beq.n	8001416 <HAL_RCC_OscConfig+0x186>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e2b2      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <HAL_RCC_OscConfig+0x344>)
 800141c:	4013      	ands	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	021a      	lsls	r2, r3, #8
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800142c:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2209      	movs	r2, #9
 8001432:	4393      	bics	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800143e:	f000 fbeb 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001442:	0001      	movs	r1, r0
 8001444:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	220f      	movs	r2, #15
 800144c:	4013      	ands	r3, r2
 800144e:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x348>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	000a      	movs	r2, r1
 8001454:	40da      	lsrs	r2, r3
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_RCC_OscConfig+0x34c>)
 8001458:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800145a:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <HAL_RCC_OscConfig+0x350>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2513      	movs	r5, #19
 8001460:	197c      	adds	r4, r7, r5
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fb18 	bl	8000a98 <HAL_InitTick>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800146c:	197b      	adds	r3, r7, r5
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d046      	beq.n	8001502 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001474:	197b      	adds	r3, r7, r5
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	e280      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	2b00      	cmp	r3, #0
 800147e:	d027      	beq.n	80014d0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2209      	movs	r2, #9
 8001486:	4393      	bics	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb47 	bl	8000b24 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fb42 	bl	8000b24 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e266      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2204      	movs	r2, #4
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f1      	beq.n	800149c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <HAL_RCC_OscConfig+0x344>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	021a      	lsls	r2, r3, #8
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb22 	bl	8000b24 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb1d 	bl	8000b24 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e241      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f1      	bne.n	80014e6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2210      	movs	r2, #16
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x27e>
 800150c:	e0a1      	b.n	8001652 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d140      	bne.n	8001596 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x29c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e227      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <HAL_RCC_OscConfig+0x354>)
 8001532:	4013      	ands	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	0a19      	lsrs	r1, r3, #8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	061a      	lsls	r2, r3, #24
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	0b5b      	lsrs	r3, r3, #13
 800155a:	3301      	adds	r3, #1
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	0212      	lsls	r2, r2, #8
 8001560:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	210f      	movs	r1, #15
 800156a:	400b      	ands	r3, r1
 800156c:	491a      	ldr	r1, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x348>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_RCC_OscConfig+0x34c>)
 8001574:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <HAL_RCC_OscConfig+0x350>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2513      	movs	r5, #19
 800157c:	197c      	adds	r4, r7, r5
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff fa8a 	bl	8000a98 <HAL_InitTick>
 8001584:	0003      	movs	r3, r0
 8001586:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001588:	197b      	adds	r3, r7, r5
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d060      	beq.n	8001652 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001590:	197b      	adds	r3, r7, r5
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	e1f2      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d03f      	beq.n	800161e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_OscConfig+0x338>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0049      	lsls	r1, r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff faba 	bl	8000b24 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b6:	f7ff fab5 	bl	8000b24 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d911      	bls.n	80015e8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e1d9      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
 80015c8:	40021000 	.word	0x40021000
 80015cc:	fffeffff 	.word	0xfffeffff
 80015d0:	fffbffff 	.word	0xfffbffff
 80015d4:	ffffe0ff 	.word	0xffffe0ff
 80015d8:	080029b0 	.word	0x080029b0
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004
 80015e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015e8:	4bc9      	ldr	r3, [pc, #804]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0e0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f4:	4bc6      	ldr	r3, [pc, #792]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4ac6      	ldr	r2, [pc, #792]	; (8001914 <HAL_RCC_OscConfig+0x684>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	4bc3      	ldr	r3, [pc, #780]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001608:	4bc1      	ldr	r3, [pc, #772]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	0a19      	lsrs	r1, r3, #8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	061a      	lsls	r2, r3, #24
 8001616:	4bbe      	ldr	r3, [pc, #760]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	e019      	b.n	8001652 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800161e:	4bbc      	ldr	r3, [pc, #752]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4bbb      	ldr	r3, [pc, #748]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001624:	49bc      	ldr	r1, [pc, #752]	; (8001918 <HAL_RCC_OscConfig+0x688>)
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fa7b 	bl	8000b24 <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fa76 	bl	8000b24 <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e19a      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001646:	4bb2      	ldr	r3, [pc, #712]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2208      	movs	r2, #8
 8001658:	4013      	ands	r3, r2
 800165a:	d036      	beq.n	80016ca <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d019      	beq.n	8001698 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001664:	4baa      	ldr	r3, [pc, #680]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001668:	4ba9      	ldr	r3, [pc, #676]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fa58 	bl	8000b24 <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fa53 	bl	8000b24 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e177      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800168c:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800168e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001690:	2202      	movs	r2, #2
 8001692:	4013      	ands	r3, r2
 8001694:	d0f1      	beq.n	800167a <HAL_RCC_OscConfig+0x3ea>
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001698:	4b9d      	ldr	r3, [pc, #628]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800169a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169c:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa3e 	bl	8000b24 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fa39 	bl	8000b24 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e15d      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016c0:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80016c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x446>
 80016d4:	e0ae      	b.n	8001834 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2023      	movs	r0, #35	; 0x23
 80016d8:	183b      	adds	r3, r7, r0
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80016e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	055b      	lsls	r3, r3, #21
 80016e6:	4013      	ands	r3, r2
 80016e8:	d109      	bne.n	80016fe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80016ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0549      	lsls	r1, r1, #21
 80016f4:	430a      	orrs	r2, r1
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b87      	ldr	r3, [pc, #540]	; (800191c <HAL_RCC_OscConfig+0x68c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d11a      	bne.n	8001740 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0x68c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <HAL_RCC_OscConfig+0x68c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001718:	f7ff fa04 	bl	8000b24 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff f9ff 	bl	8000b24 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e123      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b79      	ldr	r3, [pc, #484]	; (800191c <HAL_RCC_OscConfig+0x68c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	429a      	cmp	r2, r3
 800174a:	d107      	bne.n	800175c <HAL_RCC_OscConfig+0x4cc>
 800174c:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800174e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001750:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0049      	lsls	r1, r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	651a      	str	r2, [r3, #80]	; 0x50
 800175a:	e031      	b.n	80017c0 <HAL_RCC_OscConfig+0x530>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x4ee>
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001768:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800176a:	496b      	ldr	r1, [pc, #428]	; (8001918 <HAL_RCC_OscConfig+0x688>)
 800176c:	400a      	ands	r2, r1
 800176e:	651a      	str	r2, [r3, #80]	; 0x50
 8001770:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001774:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001776:	496a      	ldr	r1, [pc, #424]	; (8001920 <HAL_RCC_OscConfig+0x690>)
 8001778:	400a      	ands	r2, r1
 800177a:	651a      	str	r2, [r3, #80]	; 0x50
 800177c:	e020      	b.n	80017c0 <HAL_RCC_OscConfig+0x530>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	23a0      	movs	r3, #160	; 0xa0
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	429a      	cmp	r2, r3
 8001788:	d10e      	bne.n	80017a8 <HAL_RCC_OscConfig+0x518>
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800178c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178e:	4b60      	ldr	r3, [pc, #384]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	430a      	orrs	r2, r1
 8001796:	651a      	str	r2, [r3, #80]	; 0x50
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800179a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800179c:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0049      	lsls	r1, r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	651a      	str	r2, [r3, #80]	; 0x50
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x530>
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80017ae:	495a      	ldr	r1, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x688>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80017b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80017ba:	4959      	ldr	r1, [pc, #356]	; (8001920 <HAL_RCC_OscConfig+0x690>)
 80017bc:	400a      	ands	r2, r1
 80017be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d015      	beq.n	80017f4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f9ac 	bl	8000b24 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f9a7 	bl	8000b24 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a51      	ldr	r2, [pc, #324]	; (8001924 <HAL_RCC_OscConfig+0x694>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0ca      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80017e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d0ef      	beq.n	80017d2 <HAL_RCC_OscConfig+0x542>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff f996 	bl	8000b24 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f991 	bl	8000b24 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a46      	ldr	r2, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x694>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0b4      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800181e:	2323      	movs	r3, #35	; 0x23
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800182a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800182e:	493e      	ldr	r1, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x698>)
 8001830:	400a      	ands	r2, r1
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	2b00      	cmp	r3, #0
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x5ae>
 800183c:	e09d      	b.n	800197a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	d100      	bne.n	8001846 <HAL_RCC_OscConfig+0x5b6>
 8001844:	e076      	b.n	8001934 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	2b02      	cmp	r3, #2
 800184c:	d145      	bne.n	80018da <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_RCC_OscConfig+0x69c>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff f963 	bl	8000b24 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f95e 	bl	8000b24 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e082      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x6a0>)
 8001888:	4013      	ands	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	431a      	orrs	r2, r3
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0449      	lsls	r1, r1, #17
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff f938 	bl	8000b24 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f933 	bl	8000b24 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e057      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	049b      	lsls	r3, r3, #18
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x62a>
 80018d8:	e04f      	b.n	800197a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 80018e0:	4912      	ldr	r1, [pc, #72]	; (800192c <HAL_RCC_OscConfig+0x69c>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f91d 	bl	8000b24 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f918 	bl	8000b24 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e03c      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_RCC_OscConfig+0x680>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	049b      	lsls	r3, r3, #18
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x660>
 800190e:	e034      	b.n	800197a <HAL_RCC_OscConfig+0x6ea>
 8001910:	40021000 	.word	0x40021000
 8001914:	ffff1fff 	.word	0xffff1fff
 8001918:	fffffeff 	.word	0xfffffeff
 800191c:	40007000 	.word	0x40007000
 8001920:	fffffbff 	.word	0xfffffbff
 8001924:	00001388 	.word	0x00001388
 8001928:	efffffff 	.word	0xefffffff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_RCC_OscConfig+0x6f4>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	025b      	lsls	r3, r3, #9
 800194c:	401a      	ands	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	429a      	cmp	r2, r3
 8001954:	d10f      	bne.n	8001976 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	23f0      	movs	r3, #240	; 0xf0
 800195a:	039b      	lsls	r3, r3, #14
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	23c0      	movs	r3, #192	; 0xc0
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b00a      	add	sp, #40	; 0x28
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e128      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d91e      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4393      	bics	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	4b90      	ldr	r3, [pc, #576]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019bc:	f7ff f8b2 	bl	8000b24 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c4:	e009      	b.n	80019da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c6:	f7ff f8ad 	bl	8000b24 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e109      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2202      	movs	r2, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f2:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	22f0      	movs	r2, #240	; 0xf0
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
 8001a10:	e089      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1a:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d120      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0e1      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d114      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0d5      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d109      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0ca      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a58:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0c2      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4393      	bics	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f852 	bl	8000b24 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7ff f849 	bl	8000b24 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0a5      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d1ef      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x106>
 8001aae:	e03a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d111      	bne.n	8001adc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aba:	f7ff f833 	bl	8000b24 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e08f      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_ClockConfig+0x132>
 8001ada:	e024      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d11b      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae6:	f7ff f81d 	bl	8000b24 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e079      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	220c      	movs	r2, #12
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x15e>
 8001b06:	e00e      	b.n	8001b26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f80c 	bl	8000b24 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e068      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	220c      	movs	r2, #12
 8001b22:	4013      	ands	r3, r2
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d21e      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b46:	f7fe ffed 	bl	8000b24 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7fe ffe8 	bl	8000b24 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_RCC_ClockConfig+0x274>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e044      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_ClockConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x27c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	4013      	ands	r3, r2
 8001b98:	d00a      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_RCC_ClockConfig+0x280>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00da      	lsls	r2, r3, #3
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb0:	f000 f832 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <HAL_RCC_ClockConfig+0x284>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	000a      	movs	r2, r1
 8001bc6:	40da      	lsrs	r2, r3
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_ClockConfig+0x288>)
 8001bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x28c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	250b      	movs	r5, #11
 8001bd2:	197c      	adds	r4, r7, r5
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7fe ff5f 	bl	8000a98 <HAL_InitTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001be6:	197b      	adds	r3, r7, r5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	e000      	b.n	8001bee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b004      	add	sp, #16
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffff8ff 	.word	0xfffff8ff
 8001c08:	ffffc7ff 	.word	0xffffc7ff
 8001c0c:	080029b0 	.word	0x080029b0
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	230c      	movs	r3, #12
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d014      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2e:	d900      	bls.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c30:	e07b      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x112>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x24>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e076      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	4013      	ands	r3, r2
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c4a:	e07c      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c50:	e079      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c56:	e076      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	0c9a      	lsrs	r2, r3, #18
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	401a      	ands	r2, r3
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	0d9a      	lsrs	r2, r3, #22
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	3301      	adds	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	025b      	lsls	r3, r3, #9
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	4a35      	ldr	r2, [pc, #212]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	69b8      	ldr	r0, [r7, #24]
 8001c8c:	69f9      	ldr	r1, [r7, #28]
 8001c8e:	f7fe fae7 	bl	8000260 <__aeabi_lmul>
 8001c92:	0002      	movs	r2, r0
 8001c94:	000b      	movs	r3, r1
 8001c96:	0010      	movs	r0, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f7fe fabb 	bl	8000220 <__aeabi_uldivmod>
 8001caa:	0002      	movs	r2, r0
 8001cac:	000b      	movs	r3, r1
 8001cae:	0013      	movs	r3, r2
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb2:	e037      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	68b8      	ldr	r0, [r7, #8]
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	f7fe fac7 	bl	8000260 <__aeabi_lmul>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f7fe fa9b 	bl	8000220 <__aeabi_uldivmod>
 8001cea:	0002      	movs	r2, r0
 8001cec:	000b      	movs	r3, r1
 8001cee:	0013      	movs	r3, r2
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf2:	e017      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f7fe faae 	bl	8000260 <__aeabi_lmul>
 8001d04:	0002      	movs	r2, r0
 8001d06:	000b      	movs	r3, r1
 8001d08:	0010      	movs	r0, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	001c      	movs	r4, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	001d      	movs	r5, r3
 8001d14:	0022      	movs	r2, r4
 8001d16:	002b      	movs	r3, r5
 8001d18:	f7fe fa82 	bl	8000220 <__aeabi_uldivmod>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	000b      	movs	r3, r1
 8001d20:	0013      	movs	r3, r2
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d28:	e00d      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0b5b      	lsrs	r3, r3, #13
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	0212      	lsls	r2, r2, #8
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b00e      	add	sp, #56	; 0x38
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	003d0900 	.word	0x003d0900
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	080029c8 	.word	0x080029c8

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	40d9      	lsrs	r1, r3
 8001d92:	000b      	movs	r3, r1
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	080029c0 	.word	0x080029c0

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da8:	f7ff ffdc 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001dac:	0001      	movs	r1, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	000b      	movs	r3, r1
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	080029c0 	.word	0x080029c0

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001dd8:	2017      	movs	r0, #23
 8001dda:	183b      	adds	r3, r7, r0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	4013      	ands	r3, r2
 8001de8:	d100      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001dea:	e0c2      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dec:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	055b      	lsls	r3, r3, #21
 8001df4:	4013      	ands	r3, r2
 8001df6:	d109      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0549      	lsls	r1, r1, #21
 8001e02:	430a      	orrs	r2, r1
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b7a      	ldr	r3, [pc, #488]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d11a      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e18:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0049      	lsls	r1, r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fe7d 	bl	8000b24 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	e008      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7fe fe78 	bl	8000b24 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0d4      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e4e:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	039b      	lsls	r3, r3, #14
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	23c0      	movs	r3, #192	; 0xc0
 8001e60:	039b      	lsls	r3, r3, #14
 8001e62:	4013      	ands	r3, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d013      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	23c0      	movs	r3, #192	; 0xc0
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	401a      	ands	r2, r3
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10a      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	401a      	ands	r2, r3
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0ac      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e92:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d03b      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	4013      	ands	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d033      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d02e      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ecc:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0309      	lsls	r1, r1, #12
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001edc:	4948      	ldr	r1, [pc, #288]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d014      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fe17 	bl	8000b24 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001efa:	e009      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7fe fe12 	bl	8000b24 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e06d      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	23c0      	movs	r3, #192	; 0xc0
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	401a      	ands	r2, r3
 8001f26:	23c0      	movs	r3, #192	; 0xc0
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a35      	ldr	r2, [pc, #212]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	23c0      	movs	r3, #192	; 0xc0
 8001f3e:	039b      	lsls	r3, r3, #14
 8001f40:	401a      	ands	r2, r3
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	401a      	ands	r2, r3
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f5c:	2317      	movs	r3, #23
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f6c:	4927      	ldr	r1, [pc, #156]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	220c      	movs	r2, #12
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2204      	movs	r2, #4
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	fffcffff 	.word	0xfffcffff
 8002000:	fff7ffff 	.word	0xfff7ffff
 8002004:	00001388 	.word	0x00001388
 8002008:	ffcfffff 	.word	0xffcfffff
 800200c:	efffffff 	.word	0xefffffff
 8002010:	fffff3ff 	.word	0xfffff3ff
 8002014:	ffffcfff 	.word	0xffffcfff
 8002018:	fff3ffff 	.word	0xfff3ffff

0800201c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e044      	b.n	80020b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002032:	2b00      	cmp	r3, #0
 8002034:	d107      	bne.n	8002046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2274      	movs	r2, #116	; 0x74
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe fc45 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2224      	movs	r2, #36	; 0x24
 800204a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	438a      	bics	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f830 	bl	80020c4 <UART_SetConfig>
 8002064:	0003      	movs	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e024      	b.n	80020b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f000 fa6d 	bl	8002558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	490d      	ldr	r1, [pc, #52]	; (80020c0 <HAL_UART_Init+0xa4>)
 800208a:	400a      	ands	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	212a      	movs	r1, #42	; 0x2a
 800209a:	438a      	bics	r2, r1
 800209c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 fb05 	bl	80026c0 <UART_CheckIdleState>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	ffffb7ff 	.word	0xffffb7ff

080020c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b08e      	sub	sp, #56	; 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020cc:	231a      	movs	r3, #26
 80020ce:	2218      	movs	r2, #24
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	19db      	adds	r3, r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4ab4      	ldr	r2, [pc, #720]	; (80023c8 <UART_SetConfig+0x304>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4aaf      	ldr	r2, [pc, #700]	; (80023cc <UART_SetConfig+0x308>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4aa9      	ldr	r2, [pc, #676]	; (80023d0 <UART_SetConfig+0x30c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002134:	4313      	orrs	r3, r2
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4aa5      	ldr	r2, [pc, #660]	; (80023d4 <UART_SetConfig+0x310>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4aa1      	ldr	r2, [pc, #644]	; (80023d8 <UART_SetConfig+0x314>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d131      	bne.n	80021bc <UART_SetConfig+0xf8>
 8002158:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <UART_SetConfig+0x318>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	220c      	movs	r2, #12
 800215e:	4013      	ands	r3, r2
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d01d      	beq.n	80021a0 <UART_SetConfig+0xdc>
 8002164:	d823      	bhi.n	80021ae <UART_SetConfig+0xea>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d00c      	beq.n	8002184 <UART_SetConfig+0xc0>
 800216a:	d820      	bhi.n	80021ae <UART_SetConfig+0xea>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <UART_SetConfig+0xb2>
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00e      	beq.n	8002192 <UART_SetConfig+0xce>
 8002174:	e01b      	b.n	80021ae <UART_SetConfig+0xea>
 8002176:	231b      	movs	r3, #27
 8002178:	2218      	movs	r2, #24
 800217a:	189b      	adds	r3, r3, r2
 800217c:	19db      	adds	r3, r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e065      	b.n	8002250 <UART_SetConfig+0x18c>
 8002184:	231b      	movs	r3, #27
 8002186:	2218      	movs	r2, #24
 8002188:	189b      	adds	r3, r3, r2
 800218a:	19db      	adds	r3, r3, r7
 800218c:	2202      	movs	r2, #2
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e05e      	b.n	8002250 <UART_SetConfig+0x18c>
 8002192:	231b      	movs	r3, #27
 8002194:	2218      	movs	r2, #24
 8002196:	189b      	adds	r3, r3, r2
 8002198:	19db      	adds	r3, r3, r7
 800219a:	2204      	movs	r2, #4
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e057      	b.n	8002250 <UART_SetConfig+0x18c>
 80021a0:	231b      	movs	r3, #27
 80021a2:	2218      	movs	r2, #24
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	19db      	adds	r3, r3, r7
 80021a8:	2208      	movs	r2, #8
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e050      	b.n	8002250 <UART_SetConfig+0x18c>
 80021ae:	231b      	movs	r3, #27
 80021b0:	2218      	movs	r2, #24
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	19db      	adds	r3, r3, r7
 80021b6:	2210      	movs	r2, #16
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e049      	b.n	8002250 <UART_SetConfig+0x18c>
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a83      	ldr	r2, [pc, #524]	; (80023d0 <UART_SetConfig+0x30c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d13e      	bne.n	8002244 <UART_SetConfig+0x180>
 80021c6:	4b85      	ldr	r3, [pc, #532]	; (80023dc <UART_SetConfig+0x318>)
 80021c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	22c0      	movs	r2, #192	; 0xc0
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d027      	beq.n	8002228 <UART_SetConfig+0x164>
 80021d8:	22c0      	movs	r2, #192	; 0xc0
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	4293      	cmp	r3, r2
 80021de:	d82a      	bhi.n	8002236 <UART_SetConfig+0x172>
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d011      	beq.n	800220c <UART_SetConfig+0x148>
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d822      	bhi.n	8002236 <UART_SetConfig+0x172>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <UART_SetConfig+0x13a>
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	00d2      	lsls	r2, r2, #3
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <UART_SetConfig+0x156>
 80021fc:	e01b      	b.n	8002236 <UART_SetConfig+0x172>
 80021fe:	231b      	movs	r3, #27
 8002200:	2218      	movs	r2, #24
 8002202:	189b      	adds	r3, r3, r2
 8002204:	19db      	adds	r3, r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e021      	b.n	8002250 <UART_SetConfig+0x18c>
 800220c:	231b      	movs	r3, #27
 800220e:	2218      	movs	r2, #24
 8002210:	189b      	adds	r3, r3, r2
 8002212:	19db      	adds	r3, r3, r7
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e01a      	b.n	8002250 <UART_SetConfig+0x18c>
 800221a:	231b      	movs	r3, #27
 800221c:	2218      	movs	r2, #24
 800221e:	189b      	adds	r3, r3, r2
 8002220:	19db      	adds	r3, r3, r7
 8002222:	2204      	movs	r2, #4
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e013      	b.n	8002250 <UART_SetConfig+0x18c>
 8002228:	231b      	movs	r3, #27
 800222a:	2218      	movs	r2, #24
 800222c:	189b      	adds	r3, r3, r2
 800222e:	19db      	adds	r3, r3, r7
 8002230:	2208      	movs	r2, #8
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e00c      	b.n	8002250 <UART_SetConfig+0x18c>
 8002236:	231b      	movs	r3, #27
 8002238:	2218      	movs	r2, #24
 800223a:	189b      	adds	r3, r3, r2
 800223c:	19db      	adds	r3, r3, r7
 800223e:	2210      	movs	r2, #16
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e005      	b.n	8002250 <UART_SetConfig+0x18c>
 8002244:	231b      	movs	r3, #27
 8002246:	2218      	movs	r2, #24
 8002248:	189b      	adds	r3, r3, r2
 800224a:	19db      	adds	r3, r3, r7
 800224c:	2210      	movs	r2, #16
 800224e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5e      	ldr	r2, [pc, #376]	; (80023d0 <UART_SetConfig+0x30c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d000      	beq.n	800225c <UART_SetConfig+0x198>
 800225a:	e084      	b.n	8002366 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800225c:	231b      	movs	r3, #27
 800225e:	2218      	movs	r2, #24
 8002260:	189b      	adds	r3, r3, r2
 8002262:	19db      	adds	r3, r3, r7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d01d      	beq.n	80022a6 <UART_SetConfig+0x1e2>
 800226a:	dc20      	bgt.n	80022ae <UART_SetConfig+0x1ea>
 800226c:	2b04      	cmp	r3, #4
 800226e:	d015      	beq.n	800229c <UART_SetConfig+0x1d8>
 8002270:	dc1d      	bgt.n	80022ae <UART_SetConfig+0x1ea>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <UART_SetConfig+0x1b8>
 8002276:	2b02      	cmp	r3, #2
 8002278:	d005      	beq.n	8002286 <UART_SetConfig+0x1c2>
 800227a:	e018      	b.n	80022ae <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800227c:	f7ff fd7c 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002280:	0003      	movs	r3, r0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002284:	e01c      	b.n	80022c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002286:	4b55      	ldr	r3, [pc, #340]	; (80023dc <UART_SetConfig+0x318>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2210      	movs	r2, #16
 800228c:	4013      	ands	r3, r2
 800228e:	d002      	beq.n	8002296 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002290:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <UART_SetConfig+0x31c>)
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002294:	e014      	b.n	80022c0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002296:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <UART_SetConfig+0x320>)
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800229a:	e011      	b.n	80022c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800229c:	f7ff fcbc 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80022a0:	0003      	movs	r3, r0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022a4:	e00c      	b.n	80022c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ac:	e008      	b.n	80022c0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022b2:	231a      	movs	r3, #26
 80022b4:	2218      	movs	r2, #24
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	19db      	adds	r3, r3, r7
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
        break;
 80022be:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <UART_SetConfig+0x204>
 80022c6:	e130      	b.n	800252a <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	0013      	movs	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d305      	bcc.n	80022e4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d906      	bls.n	80022f2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80022e4:	231a      	movs	r3, #26
 80022e6:	2218      	movs	r2, #24
 80022e8:	189b      	adds	r3, r3, r2
 80022ea:	19db      	adds	r3, r3, r7
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e11b      	b.n	800252a <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	6939      	ldr	r1, [r7, #16]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	000b      	movs	r3, r1
 8002300:	0e1b      	lsrs	r3, r3, #24
 8002302:	0010      	movs	r0, r2
 8002304:	0205      	lsls	r5, r0, #8
 8002306:	431d      	orrs	r5, r3
 8002308:	000b      	movs	r3, r1
 800230a:	021c      	lsls	r4, r3, #8
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68b8      	ldr	r0, [r7, #8]
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	1900      	adds	r0, r0, r4
 800231e:	4169      	adcs	r1, r5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f7fd ff77 	bl	8000220 <__aeabi_uldivmod>
 8002332:	0002      	movs	r2, r0
 8002334:	000b      	movs	r3, r1
 8002336:	0013      	movs	r3, r2
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800233a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233c:	23c0      	movs	r3, #192	; 0xc0
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d309      	bcc.n	8002358 <UART_SetConfig+0x294>
 8002344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	035b      	lsls	r3, r3, #13
 800234a:	429a      	cmp	r2, r3
 800234c:	d204      	bcs.n	8002358 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	e0e8      	b.n	800252a <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002358:	231a      	movs	r3, #26
 800235a:	2218      	movs	r2, #24
 800235c:	189b      	adds	r3, r3, r2
 800235e:	19db      	adds	r3, r3, r7
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e0e1      	b.n	800252a <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	429a      	cmp	r2, r3
 8002370:	d000      	beq.n	8002374 <UART_SetConfig+0x2b0>
 8002372:	e083      	b.n	800247c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002374:	231b      	movs	r3, #27
 8002376:	2218      	movs	r2, #24
 8002378:	189b      	adds	r3, r3, r2
 800237a:	19db      	adds	r3, r3, r7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b08      	cmp	r3, #8
 8002380:	d834      	bhi.n	80023ec <UART_SetConfig+0x328>
 8002382:	009a      	lsls	r2, r3, #2
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <UART_SetConfig+0x324>)
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800238c:	f7ff fcf4 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002390:	0003      	movs	r3, r0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002394:	e033      	b.n	80023fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002396:	f7ff fd05 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 800239a:	0003      	movs	r3, r0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800239e:	e02e      	b.n	80023fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <UART_SetConfig+0x318>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d002      	beq.n	80023b0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <UART_SetConfig+0x31c>)
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023ae:	e026      	b.n	80023fe <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <UART_SetConfig+0x320>)
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b4:	e023      	b.n	80023fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023b6:	f7ff fc2f 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80023ba:	0003      	movs	r3, r0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023be:	e01e      	b.n	80023fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023c6:	e01a      	b.n	80023fe <UART_SetConfig+0x33a>
 80023c8:	efff69f3 	.word	0xefff69f3
 80023cc:	ffffcfff 	.word	0xffffcfff
 80023d0:	40004800 	.word	0x40004800
 80023d4:	fffff4ff 	.word	0xfffff4ff
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	080029d4 	.word	0x080029d4
      default:
        pclk = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80023f0:	231a      	movs	r3, #26
 80023f2:	2218      	movs	r2, #24
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	19db      	adds	r3, r3, r7
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
        break;
 80023fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d100      	bne.n	8002406 <UART_SetConfig+0x342>
 8002404:	e091      	b.n	800252a <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	005a      	lsls	r2, r3, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	18d2      	adds	r2, r2, r3
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0019      	movs	r1, r3
 8002418:	0010      	movs	r0, r2
 800241a:	f7fd fe75 	bl	8000108 <__udivsi3>
 800241e:	0003      	movs	r3, r0
 8002420:	b29b      	uxth	r3, r3
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d921      	bls.n	800246e <UART_SetConfig+0x3aa>
 800242a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	025b      	lsls	r3, r3, #9
 8002430:	429a      	cmp	r2, r3
 8002432:	d21c      	bcs.n	800246e <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	b29a      	uxth	r2, r3
 8002438:	200e      	movs	r0, #14
 800243a:	2418      	movs	r4, #24
 800243c:	1903      	adds	r3, r0, r4
 800243e:	19db      	adds	r3, r3, r7
 8002440:	210f      	movs	r1, #15
 8002442:	438a      	bics	r2, r1
 8002444:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	b299      	uxth	r1, r3
 8002452:	1903      	adds	r3, r0, r4
 8002454:	19db      	adds	r3, r3, r7
 8002456:	1902      	adds	r2, r0, r4
 8002458:	19d2      	adds	r2, r2, r7
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1902      	adds	r2, r0, r4
 8002466:	19d2      	adds	r2, r2, r7
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	e05d      	b.n	800252a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800246e:	231a      	movs	r3, #26
 8002470:	2218      	movs	r2, #24
 8002472:	189b      	adds	r3, r3, r2
 8002474:	19db      	adds	r3, r3, r7
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e056      	b.n	800252a <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 800247c:	231b      	movs	r3, #27
 800247e:	2218      	movs	r2, #24
 8002480:	189b      	adds	r3, r3, r2
 8002482:	19db      	adds	r3, r3, r7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b08      	cmp	r3, #8
 8002488:	d822      	bhi.n	80024d0 <UART_SetConfig+0x40c>
 800248a:	009a      	lsls	r2, r3, #2
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <UART_SetConfig+0x484>)
 800248e:	18d3      	adds	r3, r2, r3
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002494:	f7ff fc70 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002498:	0003      	movs	r3, r0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800249c:	e021      	b.n	80024e2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800249e:	f7ff fc81 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 80024a2:	0003      	movs	r3, r0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024a6:	e01c      	b.n	80024e2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <UART_SetConfig+0x488>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	4013      	ands	r3, r2
 80024b0:	d002      	beq.n	80024b8 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <UART_SetConfig+0x48c>)
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80024b6:	e014      	b.n	80024e2 <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <UART_SetConfig+0x490>)
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024bc:	e011      	b.n	80024e2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024be:	f7ff fbab 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024c6:	e00c      	b.n	80024e2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024ce:	e008      	b.n	80024e2 <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80024d4:	231a      	movs	r3, #26
 80024d6:	2218      	movs	r2, #24
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	19db      	adds	r3, r3, r7
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
        break;
 80024e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	085a      	lsrs	r2, r3, #1
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	18d2      	adds	r2, r2, r3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f7fd fe05 	bl	8000108 <__udivsi3>
 80024fe:	0003      	movs	r3, r0
 8002500:	b29b      	uxth	r3, r3
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d909      	bls.n	800251e <UART_SetConfig+0x45a>
 800250a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	429a      	cmp	r2, r3
 8002512:	d204      	bcs.n	800251e <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	e005      	b.n	800252a <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 800251e:	231a      	movs	r3, #26
 8002520:	2218      	movs	r2, #24
 8002522:	189b      	adds	r3, r3, r2
 8002524:	19db      	adds	r3, r3, r7
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2200      	movs	r2, #0
 800252e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2200      	movs	r2, #0
 8002534:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002536:	231a      	movs	r3, #26
 8002538:	2218      	movs	r2, #24
 800253a:	189b      	adds	r3, r3, r2
 800253c:	19db      	adds	r3, r3, r7
 800253e:	781b      	ldrb	r3, [r3, #0]
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b00e      	add	sp, #56	; 0x38
 8002546:	bdb0      	pop	{r4, r5, r7, pc}
 8002548:	080029f8 	.word	0x080029f8
 800254c:	40021000 	.word	0x40021000
 8002550:	003d0900 	.word	0x003d0900
 8002554:	00f42400 	.word	0x00f42400

08002558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d00b      	beq.n	8002582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <UART_AdvFeatureConfig+0x144>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2202      	movs	r2, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d00b      	beq.n	80025a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a43      	ldr	r2, [pc, #268]	; (80026a0 <UART_AdvFeatureConfig+0x148>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <UART_AdvFeatureConfig+0x14c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2208      	movs	r2, #8
 80025cc:	4013      	ands	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <UART_AdvFeatureConfig+0x150>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2210      	movs	r2, #16
 80025ee:	4013      	ands	r3, r2
 80025f0:	d00b      	beq.n	800260a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <UART_AdvFeatureConfig+0x154>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <UART_AdvFeatureConfig+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	4013      	ands	r3, r2
 8002634:	d01d      	beq.n	8002672 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <UART_AdvFeatureConfig+0x15c>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	035b      	lsls	r3, r3, #13
 8002656:	429a      	cmp	r2, r3
 8002658:	d10b      	bne.n	8002672 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <UART_AdvFeatureConfig+0x160>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	4013      	ands	r3, r2
 800267a:	d00b      	beq.n	8002694 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <UART_AdvFeatureConfig+0x164>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
  }
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	fffdffff 	.word	0xfffdffff
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	fffbffff 	.word	0xfffbffff
 80026a8:	ffff7fff 	.word	0xffff7fff
 80026ac:	ffffefff 	.word	0xffffefff
 80026b0:	ffffdfff 	.word	0xffffdfff
 80026b4:	ffefffff 	.word	0xffefffff
 80026b8:	ff9fffff 	.word	0xff9fffff
 80026bc:	fff7ffff 	.word	0xfff7ffff

080026c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	2100      	movs	r1, #0
 80026ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026d0:	f7fe fa28 	bl	8000b24 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d10c      	bne.n	8002700 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0391      	lsls	r1, r2, #14
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <UART_CheckIdleState+0x8c>)
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f000 f82c 	bl	8002750 <UART_WaitOnFlagUntilTimeout>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e021      	b.n	8002744 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2204      	movs	r2, #4
 8002708:	4013      	ands	r3, r2
 800270a:	2b04      	cmp	r3, #4
 800270c:	d10c      	bne.n	8002728 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	03d1      	lsls	r1, r2, #15
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <UART_CheckIdleState+0x8c>)
 8002718:	9200      	str	r2, [sp, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	f000 f818 	bl	8002750 <UART_WaitOnFlagUntilTimeout>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e00d      	b.n	8002744 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2274      	movs	r2, #116	; 0x74
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	01ffffff 	.word	0x01ffffff

08002750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b094      	sub	sp, #80	; 0x50
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002760:	e0a3      	b.n	80028aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002764:	3301      	adds	r3, #1
 8002766:	d100      	bne.n	800276a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002768:	e09f      	b.n	80028aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7fe f9db 	bl	8000b24 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002776:	429a      	cmp	r2, r3
 8002778:	d302      	bcc.n	8002780 <UART_WaitOnFlagUntilTimeout+0x30>
 800277a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277c:	2b00      	cmp	r3, #0
 800277e:	d13d      	bne.n	80027fc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002780:	f3ef 8310 	mrs	r3, PRIMASK
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
 800278a:	2301      	movs	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	f383 8810 	msr	PRIMASK, r3
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	494c      	ldr	r1, [pc, #304]	; (80028d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
 80027bc:	2301      	movs	r3, #1
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	438a      	bics	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2274      	movs	r2, #116	; 0x74
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e067      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2204      	movs	r2, #4
 8002804:	4013      	ands	r3, r2
 8002806:	d050      	beq.n	80028aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	401a      	ands	r2, r3
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	429a      	cmp	r2, r3
 800281a:	d146      	bne.n	80028aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8310 	mrs	r3, PRIMASK
 800282a:	613b      	str	r3, [r7, #16]
  return(result);
 800282c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002830:	2301      	movs	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4923      	ldr	r1, [pc, #140]	; (80028d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002858:	f3ef 8310 	mrs	r3, PRIMASK
 800285c:	61fb      	str	r3, [r7, #28]
  return(result);
 800285e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
 8002862:	2301      	movs	r3, #1
 8002864:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f383 8810 	msr	PRIMASK, r3
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	438a      	bics	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f383 8810 	msr	PRIMASK, r3
}
 8002888:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	2120      	movs	r1, #32
 800289c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2274      	movs	r2, #116	; 0x74
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e010      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	4013      	ands	r3, r2
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	425a      	negs	r2, r3
 80028ba:	4153      	adcs	r3, r2
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	001a      	movs	r2, r3
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d100      	bne.n	80028ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80028c8:	e74b      	b.n	8002762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b014      	add	sp, #80	; 0x50
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	fffffe5f 	.word	0xfffffe5f

080028d8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e017      	b.n	800291a <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe f833 	bl	8000958 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	431a      	orrs	r2, r3
 800290a:	0011      	movs	r1, r2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <__libc_init_array>:
 8002940:	b570      	push	{r4, r5, r6, lr}
 8002942:	2600      	movs	r6, #0
 8002944:	4d0c      	ldr	r5, [pc, #48]	; (8002978 <__libc_init_array+0x38>)
 8002946:	4c0d      	ldr	r4, [pc, #52]	; (800297c <__libc_init_array+0x3c>)
 8002948:	1b64      	subs	r4, r4, r5
 800294a:	10a4      	asrs	r4, r4, #2
 800294c:	42a6      	cmp	r6, r4
 800294e:	d109      	bne.n	8002964 <__libc_init_array+0x24>
 8002950:	2600      	movs	r6, #0
 8002952:	f000 f821 	bl	8002998 <_init>
 8002956:	4d0a      	ldr	r5, [pc, #40]	; (8002980 <__libc_init_array+0x40>)
 8002958:	4c0a      	ldr	r4, [pc, #40]	; (8002984 <__libc_init_array+0x44>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	42a6      	cmp	r6, r4
 8002960:	d105      	bne.n	800296e <__libc_init_array+0x2e>
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	00b3      	lsls	r3, r6, #2
 8002966:	58eb      	ldr	r3, [r5, r3]
 8002968:	4798      	blx	r3
 800296a:	3601      	adds	r6, #1
 800296c:	e7ee      	b.n	800294c <__libc_init_array+0xc>
 800296e:	00b3      	lsls	r3, r6, #2
 8002970:	58eb      	ldr	r3, [r5, r3]
 8002972:	4798      	blx	r3
 8002974:	3601      	adds	r6, #1
 8002976:	e7f2      	b.n	800295e <__libc_init_array+0x1e>
 8002978:	08002a24 	.word	0x08002a24
 800297c:	08002a24 	.word	0x08002a24
 8002980:	08002a24 	.word	0x08002a24
 8002984:	08002a28 	.word	0x08002a28

08002988 <memset>:
 8002988:	0003      	movs	r3, r0
 800298a:	1882      	adds	r2, r0, r2
 800298c:	4293      	cmp	r3, r2
 800298e:	d100      	bne.n	8002992 <memset+0xa>
 8002990:	4770      	bx	lr
 8002992:	7019      	strb	r1, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	e7f9      	b.n	800298c <memset+0x4>

08002998 <_init>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr

080029a4 <_fini>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr
