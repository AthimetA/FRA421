
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea7c  0800ea7c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea7c  0800ea7c  0001ea7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea84  0800ea84  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea88  0800ea88  0001ea88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800ea8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800eb14  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800eb74  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d78  24000148  0800ebd4  00020148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec0  0800ebd4  00020ec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025bbb  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bdc  00000000  00000000  00045d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00049910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001948  00000000  00000000  0004b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0004cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022705  00000000  00000000  0008a6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019368c  00000000  00000000  000acdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024045c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007544  00000000  00000000  002404ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d350 	.word	0x0800d350

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800d350 	.word	0x0800d350

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3318      	adds	r3, #24
 800077e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d126      	bne.n	80007de <Player_Reading_Card+0x8a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8aa 	bl	80008ea <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000796:	6979      	ldr	r1, [r7, #20]
 8000798:	69b8      	ldr	r0, [r7, #24]
 800079a:	f7ff ff73 	bl	8000684 <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	799a      	ldrb	r2, [r3, #6]
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <Player_Reading_Card+0x94>)
 80007a4:	fba3 1302 	umull	r1, r3, r3, r2
 80007a8:	0899      	lsrs	r1, r3, #2
 80007aa:	460b      	mov	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2200      	movs	r2, #0
 80007be:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		ptrYugiohCard_dst->actionPoint_Eff = 1;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2201      	movs	r2, #1
 80007c4:	725a      	strb	r2, [r3, #9]
		RFID_Clear_Card_Bufffer(ptrRFID);
 80007c6:	69f8      	ldr	r0, [r7, #28]
 80007c8:	f7ff ffa8 	bl	800071c <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	2200      	movs	r2, #0
 80007d0:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	701a      	strb	r2, [r3, #0]
	}
}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	aaaaaaab 	.word	0xaaaaaaab

080007ec <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000808:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800080a:	2300      	movs	r3, #0
 800080c:	76fb      	strb	r3, [r7, #27]
 800080e:	e00b      	b.n	8000828 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	69f9      	ldr	r1, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff34 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	3310      	adds	r3, #16
 8000820:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000822:	7efb      	ldrb	r3, [r7, #27]
 8000824:	3301      	adds	r3, #1
 8000826:	76fb      	strb	r3, [r7, #27]
 8000828:	7efb      	ldrb	r3, [r7, #27]
 800082a:	2b05      	cmp	r3, #5
 800082c:	d9f0      	bls.n	8000810 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000854:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000856:	2300      	movs	r3, #0
 8000858:	76fb      	strb	r3, [r7, #27]
 800085a:	e00b      	b.n	8000874 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	69f9      	ldr	r1, [r7, #28]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff0e 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	3310      	adds	r3, #16
 800086c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800086e:	7efb      	ldrb	r3, [r7, #27]
 8000870:	3301      	adds	r3, #1
 8000872:	76fb      	strb	r3, [r7, #27]
 8000874:	7efb      	ldrb	r3, [r7, #27]
 8000876:	2b05      	cmp	r3, #5
 8000878:	d9f0      	bls.n	800085c <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3368      	adds	r3, #104	; 0x68
 800087e:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000880:	2300      	movs	r3, #0
 8000882:	76bb      	strb	r3, [r7, #26]
 8000884:	e00b      	b.n	800089e <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	69f9      	ldr	r1, [r7, #28]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fef9 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3310      	adds	r3, #16
 8000896:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000898:	7ebb      	ldrb	r3, [r7, #26]
 800089a:	3301      	adds	r3, #1
 800089c:	76bb      	strb	r3, [r7, #26]
 800089e:	7ebb      	ldrb	r3, [r7, #26]
 80008a0:	2b13      	cmp	r3, #19
 80008a2:	d9f0      	bls.n	8000886 <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3308      	adds	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008aa:	2300      	movs	r3, #0
 80008ac:	767b      	strb	r3, [r7, #25]
 80008ae:	e00b      	b.n	80008c8 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	69f9      	ldr	r1, [r7, #28]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fee4 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	3310      	adds	r3, #16
 80008c0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008c2:	7e7b      	ldrb	r3, [r7, #25]
 80008c4:	3301      	adds	r3, #1
 80008c6:	767b      	strb	r3, [r7, #25]
 80008c8:	7e7b      	ldrb	r3, [r7, #25]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d9f0      	bls.n	80008b0 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80008d4:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	69f9      	ldr	r1, [r7, #28]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fed1 	bl	8000684 <YUGIOH_card_copy>
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80008f8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000900:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000908:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000910:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000912:	2306      	movs	r3, #6
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e00c      	b.n	8000932 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000918:	6939      	ldr	r1, [r7, #16]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff feb2 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3b10      	subs	r3, #16
 8000924:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	3b10      	subs	r3, #16
 800092a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3b01      	subs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	dcef      	bgt.n	8000918 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000950:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000958:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000960:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000968:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800096a:	2306      	movs	r3, #6
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e02c      	b.n	80009ca <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff fe86 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3b02      	subs	r3, #2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	1e50      	subs	r0, r2, #1
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3b02      	subs	r3, #2
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	1e50      	subs	r0, r2, #1
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3b10      	subs	r3, #16
 80009bc:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	3b10      	subs	r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dccf      	bgt.n	8000970 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08a      	sub	sp, #40	; 0x28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3368      	adds	r3, #104	; 0x68
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3368      	adds	r3, #104	; 0x68
 8000a04:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a0c:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a0e:	2314      	movs	r3, #20
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e00c      	b.n	8000a2e <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a14:	6a39      	ldr	r1, [r7, #32]
 8000a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a18:	f7ff fe34 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3b10      	subs	r3, #16
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	3b10      	subs	r3, #16
 8000a26:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dcef      	bgt.n	8000a14 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3368      	adds	r3, #104	; 0x68
 8000a3c:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a3e:	6a39      	ldr	r1, [r7, #32]
 8000a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a42:	f7ff fe1f 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a4e:	6a38      	ldr	r0, [r7, #32]
 8000a50:	f7ff fe18 	bl	8000684 <YUGIOH_card_copy>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3304      	adds	r3, #4
 8000a76:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a7e:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->displayNSS = 1;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	48ad      	ldr	r0, [pc, #692]	; (8000d44 <GAME_PLAY_Management+0x2e8>)
 8000a90:	f006 fb06 	bl	80070a0 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	48aa      	ldr	r0, [pc, #680]	; (8000d48 <GAME_PLAY_Management+0x2ec>)
 8000aa0:	f006 fafe 	bl	80070a0 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000aac:	2104      	movs	r1, #4
 8000aae:	48a5      	ldr	r0, [pc, #660]	; (8000d44 <GAME_PLAY_Management+0x2e8>)
 8000ab0:	f006 faf6 	bl	80070a0 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	48a2      	ldr	r0, [pc, #648]	; (8000d4c <GAME_PLAY_Management+0x2f0>)
 8000ac2:	f006 faed 	bl	80070a0 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000ad4:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	f200 82a6 	bhi.w	8001036 <GAME_PLAY_Management+0x5da>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <GAME_PLAY_Management+0x94>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000d81 	.word	0x08000d81
 8000af8:	08000edf 	.word	0x08000edf
 8000afc:	08000f51 	.word	0x08000f51
 8000b00:	08000fc3 	.word	0x08000fc3
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b04:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	9202      	str	r2, [sp, #8]
 8000b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	9200      	str	r2, [sp, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a8f      	ldr	r2, [pc, #572]	; (8000d54 <GAME_PLAY_Management+0x2f8>)
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f002 fafd 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	9202      	str	r2, [sp, #8]
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	9201      	str	r2, [sp, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	9200      	str	r2, [sp, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a89      	ldr	r2, [pc, #548]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000b34:	210f      	movs	r1, #15
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 faef 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b3c:	4b87      	ldr	r3, [pc, #540]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	9202      	str	r2, [sp, #8]
 8000b42:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a84      	ldr	r2, [pc, #528]	; (8000d60 <GAME_PLAY_Management+0x304>)
 8000b50:	2123      	movs	r1, #35	; 0x23
 8000b52:	2008      	movs	r0, #8
 8000b54:	f002 fae1 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b58:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	9202      	str	r2, [sp, #8]
 8000b5e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a7e      	ldr	r2, [pc, #504]	; (8000d64 <GAME_PLAY_Management+0x308>)
 8000b6c:	213c      	movs	r1, #60	; 0x3c
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f002 fad3 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b74:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	9202      	str	r2, [sp, #8]
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	9200      	str	r2, [sp, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a74      	ldr	r2, [pc, #464]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000b88:	214b      	movs	r1, #75	; 0x4b
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f002 fac5 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	9202      	str	r2, [sp, #8]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a71      	ldr	r2, [pc, #452]	; (8000d68 <GAME_PLAY_Management+0x30c>)
 8000ba4:	215a      	movs	r1, #90	; 0x5a
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f002 fab7 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a6b      	ldr	r2, [pc, #428]	; (8000d6c <GAME_PLAY_Management+0x310>)
 8000bc0:	215a      	movs	r1, #90	; 0x5a
 8000bc2:	205d      	movs	r0, #93	; 0x5d
 8000bc4:	f002 faa9 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bc8:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	9202      	str	r2, [sp, #8]
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a65      	ldr	r2, [pc, #404]	; (8000d70 <GAME_PLAY_Management+0x314>)
 8000bdc:	2169      	movs	r1, #105	; 0x69
 8000bde:	2000      	movs	r0, #0
 8000be0:	f002 fa9b 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000be4:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	9202      	str	r2, [sp, #8]
 8000bea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bee:	9201      	str	r2, [sp, #4]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a5f      	ldr	r2, [pc, #380]	; (8000d74 <GAME_PLAY_Management+0x318>)
 8000bf8:	2169      	movs	r1, #105	; 0x69
 8000bfa:	2064      	movs	r0, #100	; 0x64
 8000bfc:	f002 fa8d 	bl	800311a <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c00:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	9202      	str	r2, [sp, #8]
 8000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	9200      	str	r2, [sp, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a59      	ldr	r2, [pc, #356]	; (8000d78 <GAME_PLAY_Management+0x31c>)
 8000c14:	2105      	movs	r1, #5
 8000c16:	2005      	movs	r0, #5
 8000c18:	f002 fac9 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	9202      	str	r2, [sp, #8]
 8000c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c26:	9201      	str	r2, [sp, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000c30:	210f      	movs	r1, #15
 8000c32:	2000      	movs	r0, #0
 8000c34:	f002 fabb 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c38:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	9202      	str	r2, [sp, #8]
 8000c3e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <GAME_PLAY_Management+0x304>)
 8000c4c:	2123      	movs	r1, #35	; 0x23
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f002 faad 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	9202      	str	r2, [sp, #8]
 8000c5a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <GAME_PLAY_Management+0x308>)
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	2014      	movs	r0, #20
 8000c6c:	f002 fa9f 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c70:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9202      	str	r2, [sp, #8]
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000c84:	214b      	movs	r1, #75	; 0x4b
 8000c86:	2000      	movs	r0, #0
 8000c88:	f002 fa91 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	9202      	str	r2, [sp, #8]
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	9200      	str	r2, [sp, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <GAME_PLAY_Management+0x30c>)
 8000ca0:	215a      	movs	r1, #90	; 0x5a
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f002 fa83 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	9202      	str	r2, [sp, #8]
 8000cae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cb2:	9201      	str	r2, [sp, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <GAME_PLAY_Management+0x310>)
 8000cbc:	215a      	movs	r1, #90	; 0x5a
 8000cbe:	205d      	movs	r0, #93	; 0x5d
 8000cc0:	f002 fa75 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	9202      	str	r2, [sp, #8]
 8000cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <GAME_PLAY_Management+0x314>)
 8000cd8:	2169      	movs	r1, #105	; 0x69
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f002 fa67 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <GAME_PLAY_Management+0x318>)
 8000cf4:	2169      	movs	r1, #105	; 0x69
 8000cf6:	2064      	movs	r0, #100	; 0x64
 8000cf8:	f002 fa59 	bl	80031ae <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	481f      	ldr	r0, [pc, #124]	; (8000d7c <GAME_PLAY_Management+0x320>)
 8000d00:	f006 f9ce 	bl	80070a0 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10a      	bne.n	8000d20 <GAME_PLAY_Management+0x2c4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f002 fc6c 	bl	80035e8 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f002 fc7a 	bl	800360a <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000d1e:	e18a      	b.n	8001036 <GAME_PLAY_Management+0x5da>
			state_game->PlyerAction_State = PS_AFK;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000d40:	e179      	b.n	8001036 <GAME_PLAY_Management+0x5da>
 8000d42:	bf00      	nop
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58021400 	.word	0x58021400
 8000d50:	2400000c 	.word	0x2400000c
 8000d54:	0800d368 	.word	0x0800d368
 8000d58:	0800d374 	.word	0x0800d374
 8000d5c:	24000014 	.word	0x24000014
 8000d60:	0800d388 	.word	0x0800d388
 8000d64:	0800d394 	.word	0x0800d394
 8000d68:	0800d39c 	.word	0x0800d39c
 8000d6c:	0800d3ac 	.word	0x0800d3ac
 8000d70:	0800d3b4 	.word	0x0800d3b4
 8000d74:	0800d3c4 	.word	0x0800d3c4
 8000d78:	0800d3c8 	.word	0x0800d3c8
 8000d7c:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d80:	4baf      	ldr	r3, [pc, #700]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	9202      	str	r2, [sp, #8]
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	9200      	str	r2, [sp, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4aac      	ldr	r2, [pc, #688]	; (8001044 <GAME_PLAY_Management+0x5e8>)
 8000d94:	2105      	movs	r1, #5
 8000d96:	2005      	movs	r0, #5
 8000d98:	f002 f9bf 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d9c:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	9202      	str	r2, [sp, #8]
 8000da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4aa6      	ldr	r2, [pc, #664]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000db0:	210f      	movs	r1, #15
 8000db2:	2000      	movs	r0, #0
 8000db4:	f002 f9b1 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000db8:	4ba4      	ldr	r3, [pc, #656]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	9202      	str	r2, [sp, #8]
 8000dbe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000dc2:	9201      	str	r2, [sp, #4]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4aa1      	ldr	r2, [pc, #644]	; (8001050 <GAME_PLAY_Management+0x5f4>)
 8000dcc:	2123      	movs	r1, #35	; 0x23
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f002 f9a3 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000dd4:	4b9d      	ldr	r3, [pc, #628]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	9202      	str	r2, [sp, #8]
 8000dda:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dde:	9201      	str	r2, [sp, #4]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a9b      	ldr	r2, [pc, #620]	; (8001054 <GAME_PLAY_Management+0x5f8>)
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	2021      	movs	r0, #33	; 0x21
 8000dec:	f002 f995 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000df0:	4b93      	ldr	r3, [pc, #588]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	9202      	str	r2, [sp, #8]
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a91      	ldr	r2, [pc, #580]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e04:	214b      	movs	r1, #75	; 0x4b
 8000e06:	2000      	movs	r0, #0
 8000e08:	f002 f987 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	9202      	str	r2, [sp, #8]
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a8e      	ldr	r2, [pc, #568]	; (8001058 <GAME_PLAY_Management+0x5fc>)
 8000e20:	2105      	movs	r1, #5
 8000e22:	2005      	movs	r0, #5
 8000e24:	f002 f9c3 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e28:	4b85      	ldr	r3, [pc, #532]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	9202      	str	r2, [sp, #8]
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a83      	ldr	r2, [pc, #524]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f002 f9b5 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000e44:	4b81      	ldr	r3, [pc, #516]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7e      	ldr	r2, [pc, #504]	; (8001050 <GAME_PLAY_Management+0x5f4>)
 8000e58:	2123      	movs	r1, #35	; 0x23
 8000e5a:	2019      	movs	r0, #25
 8000e5c:	f002 f9a7 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000e60:	4b7a      	ldr	r3, [pc, #488]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7a      	ldr	r2, [pc, #488]	; (800105c <GAME_PLAY_Management+0x600>)
 8000e74:	213c      	movs	r1, #60	; 0x3c
 8000e76:	2025      	movs	r0, #37	; 0x25
 8000e78:	f002 f999 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e7c:	4b70      	ldr	r3, [pc, #448]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	9202      	str	r2, [sp, #8]
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e90:	214b      	movs	r1, #75	; 0x4b
 8000e92:	2000      	movs	r0, #0
 8000e94:	f002 f98b 	bl	80031ae <ST7735_WriteString1>
		HAL_Delay(3000);
 8000e98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e9c:	f002 ffb2 	bl	8003e04 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f002 fba1 	bl	80035e8 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f002 fbaf 	bl	800360a <ST7735_FillScreen1>
		MainGUI();
 8000eac:	f001 f986 	bl	80021bc <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000eb6:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ebe:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000ec0:	69f8      	ldr	r0, [r7, #28]
 8000ec2:	f7ff fcb9 	bl	8000838 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000ec6:	69b8      	ldr	r0, [r7, #24]
 8000ec8:	f7ff fcb6 	bl	8000838 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000edc:	e0ab      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case first_player:
		if (state_game -> F_flag == 0){
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d125      	bne.n	8000f34 <GAME_PLAY_Management+0x4d8>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	9202      	str	r2, [sp, #8]
 8000eee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ef2:	9201      	str	r2, [sp, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <GAME_PLAY_Management+0x604>)
 8000efc:	215a      	movs	r1, #90	; 0x5a
 8000efe:	200f      	movs	r0, #15
 8000f00:	f002 f955 	bl	80031ae <ST7735_WriteString1>
			HAL_Delay(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f002 ff7c 	bl	8003e04 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2326      	movs	r3, #38	; 0x26
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	215a      	movs	r1, #90	; 0x5a
 8000f16:	2000      	movs	r0, #0
 8000f18:	f002 fa68 	bl	80033ec <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
		}
		ptrPlayerAtk = &state_game->player[0];
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	3304      	adds	r3, #4
 8000f38:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f40:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f88f 	bl	800106c <GAME_PLAY_Phase_Management>
		break;
 8000f4e:	e072      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case second_player:
		if (state_game -> S_flag == 0){
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d125      	bne.n	8000fa6 <GAME_PLAY_Management+0x54a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	9202      	str	r2, [sp, #8]
 8000f60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a3c      	ldr	r2, [pc, #240]	; (8001060 <GAME_PLAY_Management+0x604>)
 8000f6e:	215a      	movs	r1, #90	; 0x5a
 8000f70:	200f      	movs	r0, #15
 8000f72:	f002 f8d2 	bl	800311a <ST7735_WriteString>
			HAL_Delay(2000);
 8000f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7a:	f002 ff43 	bl	8003e04 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2326      	movs	r3, #38	; 0x26
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	215a      	movs	r1, #90	; 0x5a
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f002 f9bb 	bl	8003304 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
		}
		ptrPlayerAtk = &state_game->player[1];
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000fac:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f856 	bl	800106c <GAME_PLAY_Phase_Management>
		break;
 8000fc0:	e039      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2326      	movs	r3, #38	; 0x26
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	215a      	movs	r1, #90	; 0x5a
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f002 fa7f 	bl	80034d4 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2326      	movs	r3, #38	; 0x26
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	215a      	movs	r1, #90	; 0x5a
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f002 fa75 	bl	80034d4 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f002 ff0a 	bl	8003e04 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	9202      	str	r2, [sp, #8]
 8000ffa:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <GAME_PLAY_Management+0x608>)
 8001008:	215a      	movs	r1, #90	; 0x5a
 800100a:	2014      	movs	r0, #20
 800100c:	f002 f919 	bl	8003242 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8001012:	2200      	movs	r2, #0
 8001014:	9203      	str	r2, [sp, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	9202      	str	r2, [sp, #8]
 800101a:	221f      	movs	r2, #31
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <GAME_PLAY_Management+0x60c>)
 8001026:	215a      	movs	r1, #90	; 0x5a
 8001028:	200f      	movs	r0, #15
 800102a:	f002 f90a 	bl	8003242 <ST7735_WriteStringNSS>
		HAL_Delay(200);
 800102e:	20c8      	movs	r0, #200	; 0xc8
 8001030:	f002 fee8 	bl	8003e04 <HAL_Delay>
		break;
 8001034:	bf00      	nop
	}
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400000c 	.word	0x2400000c
 8001044:	0800d368 	.word	0x0800d368
 8001048:	0800d374 	.word	0x0800d374
 800104c:	24000014 	.word	0x24000014
 8001050:	0800d3d4 	.word	0x0800d3d4
 8001054:	0800d3dc 	.word	0x0800d3dc
 8001058:	0800d3c8 	.word	0x0800d3c8
 800105c:	0800d3e4 	.word	0x0800d3e4
 8001060:	0800d3ec 	.word	0x0800d3ec
 8001064:	0800d3f8 	.word	0x0800d3f8
 8001068:	0800d400 	.word	0x0800d400

0800106c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	; 0x40
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001094:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b03      	cmp	r3, #3
 800109e:	f200 86f7 	bhi.w	8001e90 <GAME_PLAY_Phase_Management+0xe24>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <GAME_PLAY_Phase_Management+0x3c>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001e83 	.word	0x08001e83
 80010ac:	080010b9 	.word	0x080010b9
 80010b0:	08001185 	.word	0x08001185
 80010b4:	080019c5 	.word	0x080019c5
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80010b8:	48a4      	ldr	r0, [pc, #656]	; (800134c <GAME_PLAY_Phase_Management+0x2e0>)
 80010ba:	f009 f977 	bl	800a3ac <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 f91b 	bl	80022fc <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010c6:	4ba2      	ldr	r3, [pc, #648]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	9202      	str	r2, [sp, #8]
 80010cc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a9e      	ldr	r2, [pc, #632]	; (8001354 <GAME_PLAY_Phase_Management+0x2e8>)
 80010da:	2123      	movs	r1, #35	; 0x23
 80010dc:	203c      	movs	r0, #60	; 0x3c
 80010de:	f002 f81c 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010e2:	4b9b      	ldr	r3, [pc, #620]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a97      	ldr	r2, [pc, #604]	; (8001354 <GAME_PLAY_Phase_Management+0x2e8>)
 80010f6:	2123      	movs	r1, #35	; 0x23
 80010f8:	203c      	movs	r0, #60	; 0x3c
 80010fa:	f002 f858 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b93      	ldr	r3, [pc, #588]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	9201      	str	r2, [sp, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a90      	ldr	r2, [pc, #576]	; (8001358 <GAME_PLAY_Phase_Management+0x2ec>)
 8001118:	215a      	movs	r1, #90	; 0x5a
 800111a:	2005      	movs	r0, #5
 800111c:	f002 f891 	bl	8003242 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	4b8a      	ldr	r3, [pc, #552]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 8001126:	9203      	str	r2, [sp, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	9201      	str	r2, [sp, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a88      	ldr	r2, [pc, #544]	; (800135c <GAME_PLAY_Phase_Management+0x2f0>)
 800113a:	215a      	movs	r1, #90	; 0x5a
 800113c:	2005      	movs	r0, #5
 800113e:	f002 f880 	bl	8003242 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001142:	2101      	movs	r1, #1
 8001144:	4886      	ldr	r0, [pc, #536]	; (8001360 <GAME_PLAY_Phase_Management+0x2f4>)
 8001146:	f005 ffab 	bl	80070a0 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 869a 	bne.w	8001e86 <GAME_PLAY_Phase_Management+0xe1a>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001152:	2000      	movs	r0, #0
 8001154:	f002 fa48 	bl	80035e8 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001158:	2000      	movs	r0, #0
 800115a:	f002 fa56 	bl	800360a <ST7735_FillScreen1>
			MainGUI();
 800115e:	f001 f82d 	bl	80021bc <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8001178:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800117c:	f002 fe42 	bl	8003e04 <HAL_Delay>
		}
		break;
 8001180:	f000 be81 	b.w	8001e86 <GAME_PLAY_Phase_Management+0xe1a>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f8b8 	bl	80022fc <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 800118e:	2200      	movs	r2, #0
 8001190:	9202      	str	r2, [sp, #8]
 8001192:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a71      	ldr	r2, [pc, #452]	; (8001364 <GAME_PLAY_Phase_Management+0x2f8>)
 80011a0:	2123      	movs	r1, #35	; 0x23
 80011a2:	203c      	movs	r0, #60	; 0x3c
 80011a4:	f001 ffb9 	bl	800311a <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	9202      	str	r2, [sp, #8]
 80011ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	9200      	str	r2, [sp, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <GAME_PLAY_Phase_Management+0x2f8>)
 80011bc:	2123      	movs	r1, #35	; 0x23
 80011be:	203c      	movs	r0, #60	; 0x3c
 80011c0:	f001 fff5 	bl	80031ae <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011ca:	9203      	str	r2, [sp, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	9202      	str	r2, [sp, #8]
 80011d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d4:	9201      	str	r2, [sp, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <GAME_PLAY_Phase_Management+0x2ec>)
 80011de:	215a      	movs	r1, #90	; 0x5a
 80011e0:	2005      	movs	r0, #5
 80011e2:	f002 f82e 	bl	8003242 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011ec:	9203      	str	r2, [sp, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	9202      	str	r2, [sp, #8]
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	9201      	str	r2, [sp, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <GAME_PLAY_Phase_Management+0x2fc>)
 8001200:	215a      	movs	r1, #90	; 0x5a
 8001202:	2005      	movs	r0, #5
 8001204:	f002 f81d 	bl	8003242 <ST7735_WriteStringNSS>

		switch (PMS)
 8001208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120c:	2b07      	cmp	r3, #7
 800120e:	f200 863c 	bhi.w	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <GAME_PLAY_Phase_Management+0x1ac>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	080019a5 	.word	0x080019a5
 800121c:	08001239 	.word	0x08001239
 8001220:	080012c3 	.word	0x080012c3
 8001224:	08001371 	.word	0x08001371
 8001228:	08001521 	.word	0x08001521
 800122c:	08001729 	.word	0x08001729
 8001230:	080016a7 	.word	0x080016a7
 8001234:	08001623 	.word	0x08001623
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d127      	bne.n	8001290 <GAME_PLAY_Phase_Management+0x224>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001240:	2101      	movs	r1, #1
 8001242:	4847      	ldr	r0, [pc, #284]	; (8001360 <GAME_PLAY_Phase_Management+0x2f4>)
 8001244:	f005 ff2c 	bl	80070a0 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11a      	bne.n	8001284 <GAME_PLAY_Phase_Management+0x218>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800124e:	2000      	movs	r0, #0
 8001250:	f002 f9ca 	bl	80035e8 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001254:	2000      	movs	r0, #0
 8001256:	f002 f9d8 	bl	800360a <ST7735_FillScreen1>
					MainGUI();
 800125a:	f000 ffaf 	bl	80021bc <MainGUI>
					state_game->action = 50;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2232      	movs	r2, #50	; 0x32
 8001262:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2203      	movs	r2, #3
 8001270:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 800127c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001280:	f002 fdc0 	bl	8003e04 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff fa63 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 800128e:	e38b      	b.n	80019a8 <GAME_PLAY_Phase_Management+0x93c>
			else if (state_game->action == 1)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8387 	bne.w	80019a8 <GAME_PLAY_Phase_Management+0x93c>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2326      	movs	r3, #38	; 0x26
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	215a      	movs	r1, #90	; 0x5a
 80012aa:	2000      	movs	r0, #0
 80012ac:	f002 f912 	bl	80034d4 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80012c0:	e372      	b.n	80019a8 <GAME_PLAY_Phase_Management+0x93c>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80012c8:	9203      	str	r2, [sp, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <GAME_PLAY_Phase_Management+0x300>)
 80012dc:	215a      	movs	r1, #90	; 0x5a
 80012de:	2005      	movs	r0, #5
 80012e0:	f001 ffaf 	bl	8003242 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80012ea:	623b      	str	r3, [r7, #32]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (state_game->action == 1)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d116      	bne.n	800132a <GAME_PLAY_Phase_Management+0x2be>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <GAME_PLAY_Phase_Management+0x2a6>
					ptrYugiohCard_src->cardState = 0;
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	2200      	movs	r2, #0
 8001308:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001310:	e34c      	b.n	80019ac <GAME_PLAY_Phase_Management+0x940>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 8348 	bne.w	80019ac <GAME_PLAY_Phase_Management+0x940>
					ptrYugiohCard_src->cardState = 1;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	2201      	movs	r2, #1
 8001320:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
			break;
 8001328:	e340      	b.n	80019ac <GAME_PLAY_Phase_Management+0x940>
			else if (state_game->action == 2)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	f040 833c 	bne.w	80019ac <GAME_PLAY_Phase_Management+0x940>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001336:	6a38      	ldr	r0, [r7, #32]
 8001338:	f7ff f9a4 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2203      	movs	r2, #3
 8001340:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800134a:	e32f      	b.n	80019ac <GAME_PLAY_Phase_Management+0x940>
 800134c:	240002e4 	.word	0x240002e4
 8001350:	2400000c 	.word	0x2400000c
 8001354:	0800d40c 	.word	0x0800d40c
 8001358:	0800d418 	.word	0x0800d418
 800135c:	0800d428 	.word	0x0800d428
 8001360:	58020800 	.word	0x58020800
 8001364:	0800d434 	.word	0x0800d434
 8001368:	0800d440 	.word	0x0800d440
 800136c:	0800d450 	.word	0x0800d450
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001376:	623b      	str	r3, [r7, #32]

			if (state_game->action == 3)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b03      	cmp	r3, #3
 800137e:	f040 8317 	bne.w	80019b0 <GAME_PLAY_Phase_Management+0x944>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d127      	bne.n	80013da <GAME_PLAY_Phase_Management+0x36e>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	799a      	ldrb	r2, [r3, #6]
 800138e:	4baf      	ldr	r3, [pc, #700]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 8001390:	fba3 1302 	umull	r1, r3, r3, r2
 8001394:	0899      	lsrs	r1, r3, #2
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	743b      	strb	r3, [r7, #16]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80013a2:	7c3b      	ldrb	r3, [r7, #16]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	3308      	adds	r3, #8
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f7ff f967 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fa18 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80013c2:	6a39      	ldr	r1, [r7, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f95d 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80013d8:	e2ea      	b.n	80019b0 <GAME_PLAY_Phase_Management+0x944>
				else if (ptrYugiohCard_src->cardType == 2)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d15a      	bne.n	8001498 <GAME_PLAY_Phase_Management+0x42c>
					state_game->count_chain = 1;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2201      	movs	r2, #1
 80013e6:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d12b      	bne.n	8001448 <GAME_PLAY_Phase_Management+0x3dc>
						state_game->action = 4;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2204      	movs	r2, #4
 80013f4:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff faa3 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001402:	4619      	mov	r1, r3
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f7ff f93d 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f9de 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001436:	6a39      	ldr	r1, [r7, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f923 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2207      	movs	r2, #7
 8001442:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001446:	e2b3      	b.n	80019b0 <GAME_PLAY_Phase_Management+0x944>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	799a      	ldrb	r2, [r3, #6]
 800144c:	4b7f      	ldr	r3, [pc, #508]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 800144e:	fba3 1302 	umull	r1, r3, r3, r2
 8001452:	0899      	lsrs	r1, r3, #2
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	747b      	strb	r3, [r7, #17]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001460:	7c7b      	ldrb	r3, [r7, #17]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	3308      	adds	r3, #8
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800146c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	f7ff f908 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff f9b9 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001480:	6a39      	ldr	r1, [r7, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f8fe 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001496:	e28b      	b.n	80019b0 <GAME_PLAY_Phase_Management+0x944>
				else if (ptrYugiohCard_src->cardType == 1)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 8287 	bne.w	80019b0 <GAME_PLAY_Phase_Management+0x944>
					state_game->test = 2;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d82b      	bhi.n	800150a <GAME_PLAY_Phase_Management+0x49e>
						state_game->test = 1;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	799a      	ldrb	r2, [r3, #6]
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 80014c0:	fba3 1302 	umull	r1, r3, r3, r2
 80014c4:	0899      	lsrs	r1, r3, #2
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80014d2:	7cbb      	ldrb	r3, [r7, #18]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	3308      	adds	r3, #8
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80014de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014e0:	6a38      	ldr	r0, [r7, #32]
 80014e2:	f7ff f8cf 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff f980 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f8c5 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001508:	e252      	b.n	80019b0 <GAME_PLAY_Phase_Management+0x944>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff f96e 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2204      	movs	r2, #4
 8001514:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2204      	movs	r2, #4
 800151a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800151e:	e247      	b.n	80019b0 <GAME_PLAY_Phase_Management+0x944>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001526:	623b      	str	r3, [r7, #32]

			if (state_game->action == 4)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d105      	bne.n	800153c <GAME_PLAY_Phase_Management+0x4d0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f90d 	bl	8000754 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 800153a:	e23b      	b.n	80019b4 <GAME_PLAY_Phase_Management+0x948>
			else if (state_game->action == 5)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d105      	bne.n	8001550 <GAME_PLAY_Phase_Management+0x4e4>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff f903 	bl	8000754 <Player_Reading_Card>
			break;
 800154e:	e231      	b.n	80019b4 <GAME_PLAY_Phase_Management+0x948>
			else if (state_game->action == 6)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b06      	cmp	r3, #6
 8001556:	f040 822d 	bne.w	80019b4 <GAME_PLAY_Phase_Management+0x948>
				uint8_t monsterflag = 0 ;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	78db      	ldrb	r3, [r3, #3]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d804      	bhi.n	800157a <GAME_PLAY_Phase_Management+0x50e>
					monsterflag += 1;
 8001570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001574:	3301      	adds	r3, #1
 8001576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst++;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	3310      	adds	r3, #16
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d804      	bhi.n	8001592 <GAME_PLAY_Phase_Management+0x526>
					monsterflag += 1;
 8001588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800158c:	3301      	adds	r3, #1
 800158e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (monsterflag == 2)
 8001592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001596:	2b02      	cmp	r3, #2
 8001598:	d135      	bne.n	8001606 <GAME_PLAY_Phase_Management+0x59a>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	799a      	ldrb	r2, [r3, #6]
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 80015a0:	fba3 1302 	umull	r1, r3, r3, r2
 80015a4:	0899      	lsrs	r1, r3, #2
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80015b2:	7cfb      	ldrb	r3, [r7, #19]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	3308      	adds	r3, #8
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f7ff f85f 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fa03 	bl	80009da <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f9fc 	bl	80009da <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f902 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015ee:	6a39      	ldr	r1, [r7, #32]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f847 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001604:	e1d6      	b.n	80019b4 <GAME_PLAY_Phase_Management+0x948>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f8f0 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff f832 	bl	8000684 <YUGIOH_card_copy>
			break;
 8001620:	e1c8      	b.n	80019b4 <GAME_PLAY_Phase_Management+0x948>
		case chaining_main_DEF:

			// Current state_game->action = 4

			if(state_game->action == 4)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d112      	bne.n	8001650 <GAME_PLAY_Phase_Management+0x5e4>
			{
				if (playerDef->noBTN == GPIO_PIN_RESET){
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <GAME_PLAY_Phase_Management+0x5d4>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2200      	movs	r2, #0
 800163e:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff f885 	bl	8000754 <Player_Reading_Card>
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 800164a:	e1b5      	b.n	80019b8 <GAME_PLAY_Phase_Management+0x94c>
 800164c:	aaaaaaab 	.word	0xaaaaaaab
			else if ((state_game->action == 5 )){
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b05      	cmp	r3, #5
 8001656:	f040 81af 	bne.w	80019b8 <GAME_PLAY_Phase_Management+0x94c>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001660:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f7ff f96d 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800166e:	4619      	mov	r1, r3
 8001670:	6a38      	ldr	r0, [r7, #32]
 8001672:	f7ff f807 	bl	8000684 <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerDef;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerAtk;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2206      	movs	r2, #6
 800169a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2204      	movs	r2, #4
 80016a2:	701a      	strb	r2, [r3, #0]
			break;
 80016a4:	e188      	b.n	80019b8 <GAME_PLAY_Phase_Management+0x94c>
		case chaining_main_ATK:
			if(state_game->action == 4)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d111      	bne.n	80016d2 <GAME_PLAY_Phase_Management+0x666>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff f84e 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 817d 	bne.w	80019bc <GAME_PLAY_Phase_Management+0x950>
					state_game->PlyerAction_Main_Substate = activate_effect;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2200      	movs	r2, #0
 80016ce:	705a      	strb	r2, [r3, #1]
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80016d0:	e174      	b.n	80019bc <GAME_PLAY_Phase_Management+0x950>
			else if ((state_game->action == 5 )){
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	f040 8170 	bne.w	80019bc <GAME_PLAY_Phase_Management+0x950>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80016e2:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7ff f92c 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80016f0:	4619      	mov	r1, r3
 80016f2:	6a38      	ldr	r0, [r7, #32]
 80016f4:	f7fe ffc6 	bl	8000684 <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerAtk;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerDef;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2207      	movs	r2, #7
 800171c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2204      	movs	r2, #4
 8001724:	701a      	strb	r2, [r3, #0]
			break;
 8001726:	e149      	b.n	80019bc <GAME_PLAY_Phase_Management+0x950>
		case activate_effect:
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	617b      	str	r3, [r7, #20]

			if(state_game->action == 4)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d179      	bne.n	8001848 <GAME_PLAY_Phase_Management+0x7dc>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	785a      	ldrb	r2, [r3, #1]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800175e:	429a      	cmp	r2, r3
 8001760:	d26a      	bcs.n	8001838 <GAME_PLAY_Phase_Management+0x7cc>
				{
					state_game->test = 165;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	22a5      	movs	r2, #165	; 0xa5
 8001766:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	3344      	adds	r3, #68	; 0x44
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	623b      	str	r3, [r7, #32]

					if (ptrYugiohCard_src->cardSignature == 11)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b0b      	cmp	r3, #11
 8001780:	d10b      	bne.n	800179a <GAME_PLAY_Phase_Management+0x72e>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fb9e 	bl	8001ec8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						state_game->count_chain++;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	3301      	adds	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	705a      	strb	r2, [r3, #1]
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
					state_game->action = 4;
					state_game->count_chain++;
				}
			}
			break;
 8001798:	e112      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if (ptrYugiohCard_src->cardSignature == 12)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d10e      	bne.n	80017c0 <GAME_PLAY_Phase_Management+0x754>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f000 fbab 	bl	8001f08 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						state_game->count_chain++;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	705a      	strb	r2, [r3, #1]
			break;
 80017be:	e0ff      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b0d      	cmp	r3, #13
 80017c6:	d107      	bne.n	80017d8 <GAME_PLAY_Phase_Management+0x76c>
						state_game->test = 166;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	22a6      	movs	r2, #166	; 0xa6
 80017cc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2205      	movs	r2, #5
 80017d4:	701a      	strb	r2, [r3, #0]
			break;
 80017d6:	e0f3      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b0e      	cmp	r3, #14
 80017de:	d003      	beq.n	80017e8 <GAME_PLAY_Phase_Management+0x77c>
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d112      	bne.n	800180e <GAME_PLAY_Phase_Management+0x7a2>
						state_game->test = 133;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2285      	movs	r2, #133	; 0x85
 80017ec:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 fc58 	bl	80020b0 <YUGIOH_Gift_of_the_Mystical_Elf>
						state_game->count_chain++;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	3301      	adds	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	705a      	strb	r2, [r3, #1]
			break;
 800180c:	e0d8      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if(ptrYugiohCard_src->cardSignature == 16)
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b10      	cmp	r3, #16
 8001814:	d107      	bne.n	8001826 <GAME_PLAY_Phase_Management+0x7ba>
						state_game->test = 124;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	227c      	movs	r2, #124	; 0x7c
 800181a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2205      	movs	r2, #5
 8001822:	701a      	strb	r2, [r3, #0]
			break;
 8001824:	e0cc      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b11      	cmp	r3, #17
 800182c:	f040 80c8 	bne.w	80019c0 <GAME_PLAY_Phase_Management+0x954>
						state_game->action = 5;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2205      	movs	r2, #5
 8001834:	701a      	strb	r2, [r3, #0]
			break;
 8001836:	e0c3      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					state_game->action = 0;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001846:	e0bb      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
			else if (state_game->action == 5)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d10b      	bne.n	8001868 <GAME_PLAY_Phase_Management+0x7fc>
				state_game->test = 167;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	22a7      	movs	r2, #167	; 0xa7
 8001854:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7fe ff77 	bl	8000754 <Player_Reading_Card>
			break;
 8001866:	e0ab      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
			else if (state_game->action == 6)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b06      	cmp	r3, #6
 800186e:	f040 80a7 	bne.w	80019c0 <GAME_PLAY_Phase_Management+0x954>
				state_game->test = 169;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	22a9      	movs	r2, #169	; 0xa9
 8001876:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	3344      	adds	r3, #68	; 0x44
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	623b      	str	r3, [r7, #32]
				if (ptrYugiohCard_src->cardSignature == 13)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b0d      	cmp	r3, #13
 8001890:	d15f      	bne.n	8001952 <GAME_PLAY_Phase_Management+0x8e6>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d12a      	bne.n	80018f2 <GAME_PLAY_Phase_Management+0x886>
						state_game->test = 170;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	22aa      	movs	r2, #170	; 0xaa
 80018a0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 0;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	2200      	movs	r2, #0
 80018b2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018bc:	4619      	mov	r1, r3
 80018be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018c0:	f7fe fee0 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fb5b 	bl	8001f84 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f000 fadd 	bl	8001e98 <Test_EFF>
						state_game->action = 4;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2204      	movs	r2, #4
 80018e2:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	705a      	strb	r2, [r3, #1]
			break;
 80018f0:	e066      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d161      	bne.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
						state_game->test = 171;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	22ab      	movs	r2, #171	; 0xab
 8001900:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 1;
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	2201      	movs	r2, #1
 8001912:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800191c:	4619      	mov	r1, r3
 800191e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001920:	f7fe feb0 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fb2b 	bl	8001f84 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f000 faad 	bl	8001e98 <Test_EFF>
						state_game->action = 4;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2204      	movs	r2, #4
 8001942:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	785b      	ldrb	r3, [r3, #1]
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	705a      	strb	r2, [r3, #1]
			break;
 8001950:	e036      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b10      	cmp	r3, #16
 8001958:	d10e      	bne.n	8001978 <GAME_PLAY_Phase_Management+0x90c>
					YUGIOH_Ancient_Rules(*ptrUser);
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fb7a 	bl	8002058 <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2204      	movs	r2, #4
 8001968:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	3301      	adds	r3, #1
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	705a      	strb	r2, [r3, #1]
			break;
 8001976:	e023      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b11      	cmp	r3, #17
 800197e:	d11f      	bne.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f000 fbe0 	bl	8002150 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2204      	movs	r2, #4
 8001994:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	705a      	strb	r2, [r3, #1]
			break;
 80019a2:	e00d      	b.n	80019c0 <GAME_PLAY_Phase_Management+0x954>
			break;
 80019a4:	bf00      	nop
 80019a6:	e270      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019a8:	bf00      	nop
 80019aa:	e26e      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019ac:	bf00      	nop
 80019ae:	e26c      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019b0:	bf00      	nop
 80019b2:	e26a      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019b4:	bf00      	nop
 80019b6:	e268      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019b8:	bf00      	nop
 80019ba:	e266      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019bc:	bf00      	nop
 80019be:	e264      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
			break;
 80019c0:	bf00      	nop
		}
		break;
 80019c2:	e262      	b.n	8001e8a <GAME_PLAY_Phase_Management+0xe1e>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fc98 	bl	80022fc <LCDvalue>
			ST7735_WriteString(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80019cc:	4bad      	ldr	r3, [pc, #692]	; (8001c84 <GAME_PLAY_Phase_Management+0xc18>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	9202      	str	r2, [sp, #8]
 80019d2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80019d6:	9201      	str	r2, [sp, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4aaa      	ldr	r2, [pc, #680]	; (8001c88 <GAME_PLAY_Phase_Management+0xc1c>)
 80019e0:	2123      	movs	r1, #35	; 0x23
 80019e2:	203c      	movs	r0, #60	; 0x3c
 80019e4:	f001 fb99 	bl	800311a <ST7735_WriteString>
			ST7735_WriteString1(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80019e8:	4ba6      	ldr	r3, [pc, #664]	; (8001c84 <GAME_PLAY_Phase_Management+0xc18>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	9202      	str	r2, [sp, #8]
 80019ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4aa3      	ldr	r2, [pc, #652]	; (8001c88 <GAME_PLAY_Phase_Management+0xc1c>)
 80019fc:	2123      	movs	r1, #35	; 0x23
 80019fe:	203c      	movs	r0, #60	; 0x3c
 8001a00:	f001 fbd5 	bl	80031ae <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b9e      	ldr	r3, [pc, #632]	; (8001c84 <GAME_PLAY_Phase_Management+0xc18>)
 8001a0a:	9203      	str	r2, [sp, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	9202      	str	r2, [sp, #8]
 8001a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	9200      	str	r2, [sp, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <GAME_PLAY_Phase_Management+0xc20>)
 8001a1e:	215a      	movs	r1, #90	; 0x5a
 8001a20:	2005      	movs	r0, #5
 8001a22:	f001 fc0e 	bl	8003242 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b96      	ldr	r3, [pc, #600]	; (8001c84 <GAME_PLAY_Phase_Management+0xc18>)
 8001a2c:	9203      	str	r2, [sp, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	9202      	str	r2, [sp, #8]
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <GAME_PLAY_Phase_Management+0xc24>)
 8001a40:	215a      	movs	r1, #90	; 0x5a
 8001a42:	2005      	movs	r0, #5
 8001a44:	f001 fbfd 	bl	8003242 <ST7735_WriteStringNSS>

			switch(PBS){
 8001a48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	f200 821e 	bhi.w	8001e8e <GAME_PLAY_Phase_Management+0xe22>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <GAME_PLAY_Phase_Management+0x9ec>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001e6f 	.word	0x08001e6f
 8001a5c:	08001a75 	.word	0x08001a75
 8001a60:	08001c5d 	.word	0x08001c5d
 8001a64:	08001c11 	.word	0x08001c11
 8001a68:	08001e6f 	.word	0x08001e6f
 8001a6c:	08001ccf 	.word	0x08001ccf
 8001a70:	08001e33 	.word	0x08001e33
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b32      	cmp	r3, #50	; 0x32
 8001a7a:	d162      	bne.n	8001b42 <GAME_PLAY_Phase_Management+0xad6>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7fe fe67 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001a86:	2101      	movs	r1, #1
 8001a88:	4882      	ldr	r0, [pc, #520]	; (8001c94 <GAME_PLAY_Phase_Management+0xc28>)
 8001a8a:	f005 fb09 	bl	80070a0 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 81ee 	bne.w	8001e72 <GAME_PLAY_Phase_Management+0xe06>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001a96:	4880      	ldr	r0, [pc, #512]	; (8001c98 <GAME_PLAY_Phase_Management+0xc2c>)
 8001a98:	f008 fd00 	bl	800a49c <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8001a9c:	497f      	ldr	r1, [pc, #508]	; (8001c9c <GAME_PLAY_Phase_Management+0xc30>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2326      	movs	r3, #38	; 0x26
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	215a      	movs	r1, #90	; 0x5a
 8001aba:	2000      	movs	r0, #0
 8001abc:	f001 fd0a 	bl	80034d4 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <GAME_PLAY_Phase_Management+0xc34>)
 8001ac6:	9203      	str	r2, [sp, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	9202      	str	r2, [sp, #8]
 8001acc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ad0:	9201      	str	r2, [sp, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <GAME_PLAY_Phase_Management+0xc38>)
 8001ada:	215a      	movs	r1, #90	; 0x5a
 8001adc:	200f      	movs	r0, #15
 8001ade:	f001 fbb0 	bl	8003242 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8001ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ae6:	f002 f98d 	bl	8003e04 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2326      	movs	r3, #38	; 0x26
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	215a      	movs	r1, #90	; 0x5a
 8001afa:	2000      	movs	r0, #0
 8001afc:	f001 fcea 	bl	80034d4 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2326      	movs	r3, #38	; 0x26
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	215a      	movs	r1, #90	; 0x5a
 8001b10:	2000      	movs	r0, #0
 8001b12:	f001 fcdf 	bl	80034d4 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d104      	bne.n	8001b30 <GAME_PLAY_Phase_Management+0xac4>
							state_game->MainGame_State = second_player;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8001b2e:	e003      	b.n	8001b38 <GAME_PLAY_Phase_Management+0xacc>
						}
						else{
							state_game->MainGame_State = first_player;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
							break;
						}
						ptrYugiohCard_dst++;
					}
				}
				break;
 8001b40:	e197      	b.n	8001e72 <GAME_PLAY_Phase_Management+0xe06>
				else if(state_game->action == 51){
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b33      	cmp	r3, #51	; 0x33
 8001b48:	f040 8193 	bne.w	8001e72 <GAME_PLAY_Phase_Management+0xe06>
					uint8_t check_def_mon = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					ptrYugiohCard_src = &playerDef->cardOnBoard[3];
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3338      	adds	r3, #56	; 0x38
 8001b56:	623b      	str	r3, [r7, #32]
					for(uint8_t i = 0;i < 3; ++i){
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b5e:	e00d      	b.n	8001b7c <GAME_PLAY_Phase_Management+0xb10>
						if(ptrYugiohCard_src->cardData == 0){
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <GAME_PLAY_Phase_Management+0xb06>
							check_def_mon++;
 8001b68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					for(uint8_t i = 0;i < 3; ++i){
 8001b72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b76:	3301      	adds	r3, #1
 8001b78:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b7c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d9ed      	bls.n	8001b60 <GAME_PLAY_Phase_Management+0xaf4>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001b8a:	623b      	str	r3, [r7, #32]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3338      	adds	r3, #56	; 0x38
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001b98:	e033      	b.n	8001c02 <GAME_PLAY_Phase_Management+0xb96>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d125      	bne.n	8001bf2 <GAME_PLAY_Phase_Management+0xb86>
							if(ptrYugiohCard_dst->cardState == 1){
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d12e      	bne.n	8001c0c <GAME_PLAY_Phase_Management+0xba0>
								YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bb8:	f7fe fd64 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
								if(check_def_mon == 3){
 8001bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d103      	bne.n	8001bd4 <GAME_PLAY_Phase_Management+0xb68>
									ptrYugiohCard_dst->targetPosition = 99;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	2263      	movs	r2, #99	; 0x63
 8001bd0:	71da      	strb	r2, [r3, #7]
 8001bd2:	e003      	b.n	8001bdc <GAME_PLAY_Phase_Management+0xb70>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	799a      	ldrb	r2, [r3, #6]
 8001bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bda:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7fe fe05 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2234      	movs	r2, #52	; 0x34
 8001be6:	701a      	strb	r2, [r3, #0]
								state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							break;
 8001bf0:	e00c      	b.n	8001c0c <GAME_PLAY_Phase_Management+0xba0>
						ptrYugiohCard_dst++;
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 8001bf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d9c7      	bls.n	8001b9a <GAME_PLAY_Phase_Management+0xb2e>
				break;
 8001c0a:	e132      	b.n	8001e72 <GAME_PLAY_Phase_Management+0xe06>
							break;
 8001c0c:	bf00      	nop
				break;
 8001c0e:	e130      	b.n	8001e72 <GAME_PLAY_Phase_Management+0xe06>
			case counter_DEF:
				//action 52
				//				state_game->test = 34;
				if(state_game->action == 52)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b34      	cmp	r3, #52	; 0x34
 8001c16:	d10e      	bne.n	8001c36 <GAME_PLAY_Phase_Management+0xbca>
				{
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7fe fd99 	bl	8000754 <Player_Reading_Card>
					//					state_game->test = 35;
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 8125 	bne.w	8001e76 <GAME_PLAY_Phase_Management+0xe0a>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}
				break;
 8001c34:	e11f      	b.n	8001e76 <GAME_PLAY_Phase_Management+0xe0a>
				else if ((state_game->action == 53 )){
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b35      	cmp	r3, #53	; 0x35
 8001c3c:	f040 811b 	bne.w	8001e76 <GAME_PLAY_Phase_Management+0xe0a>
					state_game->count_chain += 1;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	785b      	ldrb	r3, [r3, #1]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2236      	movs	r2, #54	; 0x36
 8001c58:	701a      	strb	r2, [r3, #0]
				break;
 8001c5a:	e10c      	b.n	8001e76 <GAME_PLAY_Phase_Management+0xe0a>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b36      	cmp	r3, #54	; 0x36
 8001c62:	d121      	bne.n	8001ca8 <GAME_PLAY_Phase_Management+0xc3c>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7fe fd73 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	789b      	ldrb	r3, [r3, #2]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8101 	bne.w	8001e7a <GAME_PLAY_Phase_Management+0xe0e>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2205      	movs	r2, #5
 8001c7c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 52;
				}
				break;
 8001c80:	e0fb      	b.n	8001e7a <GAME_PLAY_Phase_Management+0xe0e>
 8001c82:	bf00      	nop
 8001c84:	2400000c 	.word	0x2400000c
 8001c88:	0800d460 	.word	0x0800d460
 8001c8c:	0800d46c 	.word	0x0800d46c
 8001c90:	0800d47c 	.word	0x0800d47c
 8001c94:	58020800 	.word	0x58020800
 8001c98:	240002e4 	.word	0x240002e4
 8001c9c:	24000e98 	.word	0x24000e98
 8001ca0:	24000014 	.word	0x24000014
 8001ca4:	0800d48c 	.word	0x0800d48c
				else if ((state_game->action == 55 )){
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b37      	cmp	r3, #55	; 0x37
 8001cae:	f040 80e4 	bne.w	8001e7a <GAME_PLAY_Phase_Management+0xe0e>
					state_game->count_chain += 1;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 52;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2234      	movs	r2, #52	; 0x34
 8001cca:	701a      	strb	r2, [r3, #0]
				break;
 8001ccc:	e0d5      	b.n	8001e7a <GAME_PLAY_Phase_Management+0xe0e>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd4:	623b      	str	r3, [r7, #32]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	791b      	ldrb	r3, [r3, #4]
 8001cda:	77fb      	strb	r3, [r7, #31]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	79db      	ldrb	r3, [r3, #7]
 8001ce0:	2b63      	cmp	r3, #99	; 0x63
 8001ce2:	d114      	bne.n	8001d0e <GAME_PLAY_Phase_Management+0xca2>
					playerDef->life_point -= atk*100;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	889a      	ldrh	r2, [r3, #4]
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	0249      	lsls	r1, r1, #9
 8001cf0:	1ac9      	subs	r1, r1, r3
 8001cf2:	0089      	lsls	r1, r1, #2
 8001cf4:	4419      	add	r1, r3
 8001cf6:	00c9      	lsls	r1, r1, #3
 8001cf8:	1acb      	subs	r3, r1, r3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2206      	movs	r2, #6
 8001d0a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3308      	adds	r3, #8
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	799b      	ldrb	r3, [r3, #6]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c

				state_game->test = 54;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2236      	movs	r2, #54	; 0x36
 8001d26:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				if(ptrYugiohCard_dst->cardState == 0){
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d12c      	bne.n	8001d8c <GAME_PLAY_Phase_Management+0xd20>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	795b      	ldrb	r3, [r3, #5]
 8001d36:	777b      	strb	r3, [r7, #29]
					if(atk < def){
 8001d38:	7ffa      	ldrb	r2, [r7, #31]
 8001d3a:	7f7b      	ldrb	r3, [r7, #29]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d217      	bcs.n	8001d70 <GAME_PLAY_Phase_Management+0xd04>
						playerAtk->life_point -= (def-atk)*100;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	889a      	ldrh	r2, [r3, #4]
 8001d44:	7f79      	ldrb	r1, [r7, #29]
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	1acb      	subs	r3, r1, r3
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	0249      	lsls	r1, r1, #9
 8001d50:	1ac9      	subs	r1, r1, r3
 8001d52:	0089      	lsls	r1, r1, #2
 8001d54:	4419      	add	r1, r3
 8001d56:	00c9      	lsls	r1, r1, #3
 8001d58:	1acb      	subs	r3, r1, r3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2206      	movs	r2, #6
 8001d6a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 8001d6e:	e086      	b.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
					else if(atk > def){
 8001d70:	7ffa      	ldrb	r2, [r7, #31]
 8001d72:	7f7b      	ldrb	r3, [r7, #29]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f240 8082 	bls.w	8001e7e <GAME_PLAY_Phase_Management+0xe12>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7fe fe2c 	bl	80009da <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2206      	movs	r2, #6
 8001d86:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001d8a:	e078      	b.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
				else if(ptrYugiohCard_dst->cardState == 1){
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d174      	bne.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	791b      	ldrb	r3, [r3, #4]
 8001d98:	77bb      	strb	r3, [r7, #30]
					state_game->test = 60;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	223c      	movs	r2, #60	; 0x3c
 8001d9e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(atk < atk2){
 8001da2:	7ffa      	ldrb	r2, [r7, #31]
 8001da4:	7fbb      	ldrb	r3, [r7, #30]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d21f      	bcs.n	8001dea <GAME_PLAY_Phase_Management+0xd7e>
						state_game->test = 61;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	223d      	movs	r2, #61	; 0x3d
 8001dae:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						playerAtk->life_point -= (atk2-atk)*100;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	889a      	ldrh	r2, [r3, #4]
 8001db6:	7fb9      	ldrb	r1, [r7, #30]
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	1acb      	subs	r3, r1, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	0249      	lsls	r1, r1, #9
 8001dc2:	1ac9      	subs	r1, r1, r3
 8001dc4:	0089      	lsls	r1, r1, #2
 8001dc6:	4419      	add	r1, r3
 8001dc8:	00c9      	lsls	r1, r1, #3
 8001dca:	1acb      	subs	r3, r1, r3
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 8001dd8:	6a39      	ldr	r1, [r7, #32]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fdfd 	bl	80009da <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2206      	movs	r2, #6
 8001de4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001de8:	e049      	b.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
					else if(atk > atk2){
 8001dea:	7ffa      	ldrb	r2, [r7, #31]
 8001dec:	7fbb      	ldrb	r3, [r7, #30]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d945      	bls.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
						state_game->test = 70;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2246      	movs	r2, #70	; 0x46
 8001df6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f7fe fdec 	bl	80009da <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	889a      	ldrh	r2, [r3, #4]
 8001e06:	7ff9      	ldrb	r1, [r7, #31]
 8001e08:	7fbb      	ldrb	r3, [r7, #30]
 8001e0a:	1acb      	subs	r3, r1, r3
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	0249      	lsls	r1, r1, #9
 8001e12:	1ac9      	subs	r1, r1, r3
 8001e14:	0089      	lsls	r1, r1, #2
 8001e16:	4419      	add	r1, r3
 8001e18:	00c9      	lsls	r1, r1, #3
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001e30:	e025      	b.n	8001e7e <GAME_PLAY_Phase_Management+0xe12>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e38:	623b      	str	r3, [r7, #32]
				YUGIOH_card_clear(ptrYugiohCard_src);
 8001e3a:	6a38      	ldr	r0, [r7, #32]
 8001e3c:	f7fe fc59 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <GAME_PLAY_Phase_Management+0xde8>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	889b      	ldrh	r3, [r3, #4]
 8001e4c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d904      	bls.n	8001e5e <GAME_PLAY_Phase_Management+0xdf2>
					state_game->MainGame_State = Game_Ended;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2204      	movs	r2, #4
 8001e58:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8001e5c:	e010      	b.n	8001e80 <GAME_PLAY_Phase_Management+0xe14>
					state_game->action = 50;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2232      	movs	r2, #50	; 0x32
 8001e62:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001e6c:	e008      	b.n	8001e80 <GAME_PLAY_Phase_Management+0xe14>
				break;
 8001e6e:	bf00      	nop
 8001e70:	e00d      	b.n	8001e8e <GAME_PLAY_Phase_Management+0xe22>
				break;
 8001e72:	bf00      	nop
 8001e74:	e00b      	b.n	8001e8e <GAME_PLAY_Phase_Management+0xe22>
				break;
 8001e76:	bf00      	nop
 8001e78:	e009      	b.n	8001e8e <GAME_PLAY_Phase_Management+0xe22>
				break;
 8001e7a:	bf00      	nop
 8001e7c:	e007      	b.n	8001e8e <GAME_PLAY_Phase_Management+0xe22>
				break;
 8001e7e:	bf00      	nop
			}
			break;
 8001e80:	e005      	b.n	8001e8e <GAME_PLAY_Phase_Management+0xe22>
		break;
 8001e82:	bf00      	nop
 8001e84:	e004      	b.n	8001e90 <GAME_PLAY_Phase_Management+0xe24>
		break;
 8001e86:	bf00      	nop
 8001e88:	e002      	b.n	8001e90 <GAME_PLAY_Phase_Management+0xe24>
		break;
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <GAME_PLAY_Phase_Management+0xe24>
			break;
 8001e8e:	bf00      	nop

	}
}
 8001e90:	bf00      	nop
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	889b      	ldrh	r3, [r3, #4]
 8001ea6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	3b64      	subs	r3, #100	; 0x64
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	809a      	strh	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3338      	adds	r3, #56	; 0x38
 8001ed4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	72fb      	strb	r3, [r7, #11]
 8001eda:	e00d      	b.n	8001ef8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fd77 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3310      	adds	r3, #16
 8001ef0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	72fb      	strb	r3, [r7, #11]
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d9ee      	bls.n	8001edc <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3308      	adds	r3, #8
 8001f16:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3338      	adds	r3, #56	; 0x38
 8001f1c:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	3308      	adds	r3, #8
 8001f22:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	3338      	adds	r3, #56	; 0x38
 8001f28:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e00d      	b.n	8001f4c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fd4d 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3310      	adds	r3, #16
 8001f44:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d9ee      	bls.n	8001f30 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001f52:	2300      	movs	r3, #0
 8001f54:	73bb      	strb	r3, [r7, #14]
 8001f56:	e00d      	b.n	8001f74 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f7fe fd39 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73bb      	strb	r3, [r7, #14]
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d9ee      	bls.n	8001f58 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f9a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3368      	adds	r3, #104	; 0x68
 8001fa0:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3368      	adds	r3, #104	; 0x68
 8001fa6:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74fb      	strb	r3, [r7, #19]
 8001fac:	e010      	b.n	8001fd0 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d104      	bne.n	8001fc4 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	77bb      	strb	r3, [r7, #30]
			break;
 8001fc2:	e008      	b.n	8001fd6 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	74fb      	strb	r3, [r7, #19]
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b13      	cmp	r3, #19
 8001fd4:	d9eb      	bls.n	8001fae <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d134      	bne.n	800204c <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	799a      	ldrb	r2, [r3, #6]
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <YUGIOH_Reborn+0xd0>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	0899      	lsrs	r1, r3, #2
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	3308      	adds	r3, #8
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	4619      	mov	r1, r3
 8002006:	69b8      	ldr	r0, [r7, #24]
 8002008:	f7fe fb3c 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 800200c:	7fbb      	ldrb	r3, [r7, #30]
 800200e:	3301      	adds	r3, #1
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	3368      	adds	r3, #104	; 0x68
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 800201a:	7fbb      	ldrb	r3, [r7, #30]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	3368      	adds	r3, #104	; 0x68
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8002026:	7fbb      	ldrb	r3, [r7, #30]
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e00c      	b.n	8002046 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800202c:	6979      	ldr	r1, [r7, #20]
 800202e:	69b8      	ldr	r0, [r7, #24]
 8002030:	f7fe fb28 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	3310      	adds	r3, #16
 8002038:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3310      	adds	r3, #16
 800203e:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3301      	adds	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b13      	cmp	r3, #19
 800204a:	ddef      	ble.n	800202c <YUGIOH_Reborn+0xa8>
		}


	}
}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	aaaaaaab 	.word	0xaaaaaaab

08002058 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002066:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800206e:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	799a      	ldrb	r2, [r3, #6]
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <YUGIOH_Ancient_Rules+0x54>)
 8002076:	fba3 1302 	umull	r1, r3, r3, r2
 800207a:	0899      	lsrs	r1, r3, #2
 800207c:	460b      	mov	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3308      	adds	r3, #8
 800208c:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	3308      	adds	r3, #8
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f7fe faf1 	bl	8000684 <YUGIOH_card_copy>

}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	aaaaaaab 	.word	0xaaaaaaab

080020b0 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3308      	adds	r3, #8
 80020be:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3338      	adds	r3, #56	; 0x38
 80020c4:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3308      	adds	r3, #8
 80020ca:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020d6:	2300      	movs	r3, #0
 80020d8:	73bb      	strb	r3, [r7, #14]
 80020da:	e00c      	b.n	80020f6 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3310      	adds	r3, #16
 80020ee:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73bb      	strb	r3, [r7, #14]
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d9ef      	bls.n	80020dc <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	737b      	strb	r3, [r7, #13]
 8002100:	e00c      	b.n	800211c <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3310      	adds	r3, #16
 8002114:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002116:	7b7b      	ldrb	r3, [r7, #13]
 8002118:	3301      	adds	r3, #1
 800211a:	737b      	strb	r3, [r7, #13]
 800211c:	7b7b      	ldrb	r3, [r7, #13]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d9ef      	bls.n	8002102 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	889a      	ldrh	r2, [r3, #4]
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	0089      	lsls	r1, r1, #2
 800212e:	440b      	add	r3, r1
 8002130:	4619      	mov	r1, r3
 8002132:	0109      	lsls	r1, r1, #4
 8002134:	1acb      	subs	r3, r1, r3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	809a      	strh	r2, [r3, #4]

}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002160:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002168:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	799a      	ldrb	r2, [r3, #6]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <YUGIOH_Stop_Defense+0x68>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	0899      	lsrs	r1, r3, #2
 8002176:	460b      	mov	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3308      	adds	r3, #8
 8002186:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	3308      	adds	r3, #8
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	789b      	ldrb	r3, [r3, #2]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <YUGIOH_Stop_Defense+0x5a>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	709a      	strb	r2, [r3, #2]
	}

}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	aaaaaaab 	.word	0xaaaaaaab

080021bc <MainGUI>:

//void YUGIOH_Pot_Of_Greed(Player *player){
//
//}

void MainGUI(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <MainGUI+0x124>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	9202      	str	r2, [sp, #8]
 80021c8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80021cc:	9201      	str	r2, [sp, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <MainGUI+0x128>)
 80021d6:	2105      	movs	r1, #5
 80021d8:	2005      	movs	r0, #5
 80021da:	f000 ffe8 	bl	80031ae <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <MainGUI+0x124>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	9202      	str	r2, [sp, #8]
 80021e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e8:	9201      	str	r2, [sp, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <MainGUI+0x12c>)
 80021f2:	2114      	movs	r1, #20
 80021f4:	2005      	movs	r0, #5
 80021f6:	f000 ffda 	bl	80031ae <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021fa:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <MainGUI+0x124>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a37      	ldr	r2, [pc, #220]	; (80022ec <MainGUI+0x130>)
 800220e:	2123      	movs	r1, #35	; 0x23
 8002210:	2005      	movs	r0, #5
 8002212:	f000 ffcc 	bl	80031ae <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002216:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <MainGUI+0x124>)
 8002218:	2200      	movs	r2, #0
 800221a:	9202      	str	r2, [sp, #8]
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	9201      	str	r2, [sp, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	9200      	str	r2, [sp, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a31      	ldr	r2, [pc, #196]	; (80022f0 <MainGUI+0x134>)
 800222a:	2132      	movs	r1, #50	; 0x32
 800222c:	2000      	movs	r0, #0
 800222e:	f000 ffbe 	bl	80031ae <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002232:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <MainGUI+0x124>)
 8002234:	2200      	movs	r2, #0
 8002236:	9202      	str	r2, [sp, #8]
 8002238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223c:	9201      	str	r2, [sp, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	9200      	str	r2, [sp, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <MainGUI+0x138>)
 8002246:	213c      	movs	r1, #60	; 0x3c
 8002248:	2000      	movs	r0, #0
 800224a:	f000 ffb0 	bl	80031ae <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MainGUI+0x124>)
 8002250:	2200      	movs	r2, #0
 8002252:	9202      	str	r2, [sp, #8]
 8002254:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002258:	9201      	str	r2, [sp, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	9200      	str	r2, [sp, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <MainGUI+0x13c>)
 8002262:	2105      	movs	r1, #5
 8002264:	2005      	movs	r0, #5
 8002266:	f000 ff58 	bl	800311a <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MainGUI+0x124>)
 800226c:	2200      	movs	r2, #0
 800226e:	9202      	str	r2, [sp, #8]
 8002270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002274:	9201      	str	r2, [sp, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	9200      	str	r2, [sp, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <MainGUI+0x12c>)
 800227e:	2114      	movs	r1, #20
 8002280:	2005      	movs	r0, #5
 8002282:	f000 ff4a 	bl	800311a <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MainGUI+0x124>)
 8002288:	2200      	movs	r2, #0
 800228a:	9202      	str	r2, [sp, #8]
 800228c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <MainGUI+0x130>)
 800229a:	2123      	movs	r1, #35	; 0x23
 800229c:	2005      	movs	r0, #5
 800229e:	f000 ff3c 	bl	800311a <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MainGUI+0x124>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	9202      	str	r2, [sp, #8]
 80022a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ac:	9201      	str	r2, [sp, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	9200      	str	r2, [sp, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <MainGUI+0x134>)
 80022b6:	2132      	movs	r1, #50	; 0x32
 80022b8:	2000      	movs	r0, #0
 80022ba:	f000 ff2e 	bl	800311a <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MainGUI+0x124>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	9202      	str	r2, [sp, #8]
 80022c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c8:	9201      	str	r2, [sp, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	9200      	str	r2, [sp, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <MainGUI+0x138>)
 80022d2:	213c      	movs	r1, #60	; 0x3c
 80022d4:	2000      	movs	r0, #0
 80022d6:	f000 ff20 	bl	800311a <ST7735_WriteString>
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2400000c 	.word	0x2400000c
 80022e4:	0800d3c8 	.word	0x0800d3c8
 80022e8:	0800d498 	.word	0x0800d498
 80022ec:	0800d4a8 	.word	0x0800d4a8
 80022f0:	0800d4b0 	.word	0x0800d4b0
 80022f4:	0800d374 	.word	0x0800d374
 80022f8:	0800d368 	.word	0x0800d368

080022fc <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af04      	add	r7, sp, #16
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8002306:	2300      	movs	r3, #0
 8002308:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <LCDvalue+0x188>)
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <LCDvalue+0x18c>)
 8002310:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8002312:	4b5e      	ldr	r3, [pc, #376]	; (800248c <LCDvalue+0x190>)
 8002314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <LCDvalue+0x194>)
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f7fe f82f 	bl	8000380 <__aeabi_uldivmod>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4613      	mov	r3, r2
 8002328:	817b      	strh	r3, [r7, #10]
	time -= a;
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <LCDvalue+0x18c>)
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b54      	ldr	r3, [pc, #336]	; (8002488 <LCDvalue+0x18c>)
 8002336:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <LCDvalue+0x18c>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4955      	ldr	r1, [pc, #340]	; (8002494 <LCDvalue+0x198>)
 8002340:	4855      	ldr	r0, [pc, #340]	; (8002498 <LCDvalue+0x19c>)
 8002342:	f00a fc87 	bl	800cc54 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e012      	b.n	8002372 <LCDvalue+0x76>
		if(t_c[i] == 0){
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <LCDvalue+0x19c>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <LCDvalue+0x70>
			t_c[i] = 32;
 8002358:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <LCDvalue+0x19c>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	2220      	movs	r2, #32
 8002360:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3301      	adds	r3, #1
 8002366:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <LCDvalue+0x19c>)
 8002368:	2120      	movs	r1, #32
 800236a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3301      	adds	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	dde9      	ble.n	800234c <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <LCDvalue+0x18c>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <LCDvalue+0x90>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002380:	4846      	ldr	r0, [pc, #280]	; (800249c <LCDvalue+0x1a0>)
 8002382:	f008 f88b 	bl	800a49c <HAL_TIM_Base_Stop_IT>
		time = 0;
 8002386:	4b40      	ldr	r3, [pc, #256]	; (8002488 <LCDvalue+0x18c>)
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	461a      	mov	r2, r3
 8002392:	4940      	ldr	r1, [pc, #256]	; (8002494 <LCDvalue+0x198>)
 8002394:	4842      	ldr	r0, [pc, #264]	; (80024a0 <LCDvalue+0x1a4>)
 8002396:	f00a fc5d 	bl	800cc54 <siprintf>
	if(C_LP_ATK[3] == 0){
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <LCDvalue+0x1a4>)
 800239c:	78db      	ldrb	r3, [r3, #3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10e      	bne.n	80023c0 <LCDvalue+0xc4>
		C_LP_ATK[3] = C_LP_ATK[2];
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <LCDvalue+0x1a4>)
 80023a4:	789a      	ldrb	r2, [r3, #2]
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <LCDvalue+0x1a4>)
 80023a8:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <LCDvalue+0x1a4>)
 80023ac:	785a      	ldrb	r2, [r3, #1]
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <LCDvalue+0x1a4>)
 80023b0:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <LCDvalue+0x1a4>)
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <LCDvalue+0x1a4>)
 80023b8:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <LCDvalue+0x1a4>)
 80023bc:	2220      	movs	r2, #32
 80023be:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <LCDvalue+0x1a8>)
 80023c6:	9203      	str	r2, [sp, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	9202      	str	r2, [sp, #8]
 80023cc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <LCDvalue+0x1a4>)
 80023da:	2114      	movs	r1, #20
 80023dc:	205a      	movs	r0, #90	; 0x5a
 80023de:	f000 ff30 	bl	8003242 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <LCDvalue+0x1a8>)
 80023e8:	9203      	str	r2, [sp, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	9202      	str	r2, [sp, #8]
 80023ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023f2:	9201      	str	r2, [sp, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a27      	ldr	r2, [pc, #156]	; (8002498 <LCDvalue+0x19c>)
 80023fc:	2132      	movs	r1, #50	; 0x32
 80023fe:	2069      	movs	r0, #105	; 0x69
 8002400:	f000 ff1f 	bl	8003242 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	889b      	ldrh	r3, [r3, #4]
 8002408:	461a      	mov	r2, r3
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <LCDvalue+0x198>)
 800240c:	4826      	ldr	r0, [pc, #152]	; (80024a8 <LCDvalue+0x1ac>)
 800240e:	f00a fc21 	bl	800cc54 <siprintf>
	if(C_LP_DEF[3] == 0){
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <LCDvalue+0x1ac>)
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <LCDvalue+0x13c>
		C_LP_DEF[3] = C_LP_DEF[2];
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <LCDvalue+0x1ac>)
 800241c:	789a      	ldrb	r2, [r3, #2]
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <LCDvalue+0x1ac>)
 8002420:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <LCDvalue+0x1ac>)
 8002424:	785a      	ldrb	r2, [r3, #1]
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <LCDvalue+0x1ac>)
 8002428:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <LCDvalue+0x1ac>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <LCDvalue+0x1ac>)
 8002430:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <LCDvalue+0x1ac>)
 8002434:	2220      	movs	r2, #32
 8002436:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <LCDvalue+0x1a8>)
 800243e:	9203      	str	r2, [sp, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	9202      	str	r2, [sp, #8]
 8002444:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002448:	9201      	str	r2, [sp, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <LCDvalue+0x1ac>)
 8002452:	2114      	movs	r1, #20
 8002454:	205a      	movs	r0, #90	; 0x5a
 8002456:	f000 fef4 	bl	8003242 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <LCDvalue+0x1a8>)
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	9202      	str	r2, [sp, #8]
 8002466:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <LCDvalue+0x1b0>)
 8002474:	2132      	movs	r1, #50	; 0x32
 8002476:	2069      	movs	r0, #105	; 0x69
 8002478:	f000 fee3 	bl	8003242 <ST7735_WriteStringNSS>

}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	24000000 	.word	0x24000000
 8002488:	2400016c 	.word	0x2400016c
 800248c:	24000e98 	.word	0x24000e98
 8002490:	000f4240 	.word	0x000f4240
 8002494:	0800d4c4 	.word	0x0800d4c4
 8002498:	24000170 	.word	0x24000170
 800249c:	240002e4 	.word	0x240002e4
 80024a0:	24000164 	.word	0x24000164
 80024a4:	2400000c 	.word	0x2400000c
 80024a8:	24000168 	.word	0x24000168
 80024ac:	0800d3c4 	.word	0x0800d3c4

080024b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <SystemInit+0xfc>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <SystemInit+0xfc>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <SystemInit+0xfc>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4a38      	ldr	r2, [pc, #224]	; (80025ac <SystemInit+0xfc>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <SystemInit+0x100>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d807      	bhi.n	80024ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <SystemInit+0x100>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 030f 	bic.w	r3, r3, #15
 80024e4:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <SystemInit+0x100>)
 80024e6:	f043 0307 	orr.w	r3, r3, #7
 80024ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <SystemInit+0x104>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <SystemInit+0x104>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <SystemInit+0x104>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <SystemInit+0x104>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	492c      	ldr	r1, [pc, #176]	; (80025b4 <SystemInit+0x104>)
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <SystemInit+0x108>)
 8002506:	4013      	ands	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <SystemInit+0x100>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <SystemInit+0x100>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 030f 	bic.w	r3, r3, #15
 800251e:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <SystemInit+0x100>)
 8002520:	f043 0307 	orr.w	r3, r3, #7
 8002524:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <SystemInit+0x104>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <SystemInit+0x104>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <SystemInit+0x104>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <SystemInit+0x104>)
 800253a:	4a20      	ldr	r2, [pc, #128]	; (80025bc <SystemInit+0x10c>)
 800253c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <SystemInit+0x104>)
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <SystemInit+0x110>)
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <SystemInit+0x104>)
 8002546:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <SystemInit+0x114>)
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <SystemInit+0x104>)
 800254c:	2200      	movs	r2, #0
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <SystemInit+0x104>)
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <SystemInit+0x114>)
 8002554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <SystemInit+0x104>)
 8002558:	2200      	movs	r2, #0
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <SystemInit+0x104>)
 800255e:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <SystemInit+0x114>)
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <SystemInit+0x104>)
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <SystemInit+0x104>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <SystemInit+0x104>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <SystemInit+0x104>)
 8002576:	2200      	movs	r2, #0
 8002578:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <SystemInit+0x118>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <SystemInit+0x118>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <SystemInit+0x11c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <SystemInit+0x120>)
 800258c:	4013      	ands	r3, r2
 800258e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002592:	d202      	bcs.n	800259a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <SystemInit+0x124>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <SystemInit+0x128>)
 800259c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025a0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	52002000 	.word	0x52002000
 80025b4:	58024400 	.word	0x58024400
 80025b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80025bc:	02020200 	.word	0x02020200
 80025c0:	01ff0000 	.word	0x01ff0000
 80025c4:	01010280 	.word	0x01010280
 80025c8:	580000c0 	.word	0x580000c0
 80025cc:	5c001000 	.word	0x5c001000
 80025d0:	ffff0000 	.word	0xffff0000
 80025d4:	51008108 	.word	0x51008108
 80025d8:	52004000 	.word	0x52004000

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80025e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80025e8:	bf00      	nop
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <main+0xec>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <main+0x24>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dcf4      	bgt.n	80025ea <main+0xe>
	if ( timeout < 0 )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da01      	bge.n	800260a <main+0x2e>
	{
		Error_Handler();
 8002606:	f000 fbeb 	bl	8002de0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800260a:	f001 fb69 	bl	8003ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800260e:	f000 f863 	bl	80026d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002612:	f000 f8e5 	bl	80027e0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <main+0xec>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261c:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <main+0xec>)
 800261e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002626:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <main+0xec>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002634:	2000      	movs	r0, #0
 8002636:	f004 fd7f 	bl	8007138 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800263a:	2100      	movs	r1, #0
 800263c:	2000      	movs	r0, #0
 800263e:	f004 fd95 	bl	800716c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002648:	bf00      	nop
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <main+0xec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <main+0x84>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	dcf4      	bgt.n	800264a <main+0x6e>
	if ( timeout < 0 )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da01      	bge.n	800266a <main+0x8e>
	{
		Error_Handler();
 8002666:	f000 fbbb 	bl	8002de0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800266a:	f000 fa6d 	bl	8002b48 <MX_GPIO_Init>
  MX_ETH_Init();
 800266e:	f000 f8e9 	bl	8002844 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002672:	f000 f9c1 	bl	80029f8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8002676:	f000 fa3f 	bl	8002af8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800267a:	f000 fa0b 	bl	8002a94 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800267e:	f000 f92d 	bl	80028dc <MX_SPI3_Init>
  MX_TIM7_Init();
 8002682:	f000 f983 	bl	800298c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8002686:	f000 fcb3 	bl	8002ff0 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800268a:	2000      	movs	r0, #0
 800268c:	f000 ffbd 	bl	800360a <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8002690:	2000      	movs	r0, #0
 8002692:	f000 ffa9 	bl	80035e8 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8002696:	f001 fba9 	bl	8003dec <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <main+0xf0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2bc8      	cmp	r3, #200	; 0xc8
 80026a4:	d9f7      	bls.n	8002696 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 80026a6:	f001 fba1 	bl	8003dec <HAL_GetTick>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <main+0xf0>)
 80026ae:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80026b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b4:	4806      	ldr	r0, [pc, #24]	; (80026d0 <main+0xf4>)
 80026b6:	f004 fd24 	bl	8007102 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80026ba:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80026be:	4905      	ldr	r1, [pc, #20]	; (80026d4 <main+0xf8>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe f9cb 	bl	8000a5c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80026c6:	e7e6      	b.n	8002696 <main+0xba>
 80026c8:	58024400 	.word	0x58024400
 80026cc:	24000e94 	.word	0x24000e94
 80026d0:	58020400 	.word	0x58020400
 80026d4:	240009bc 	.word	0x240009bc

080026d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b09c      	sub	sp, #112	; 0x70
 80026dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e2:	224c      	movs	r2, #76	; 0x4c
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a f9bc 	bl	800ca64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2220      	movs	r2, #32
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00a f9b6 	bl	800ca64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80026f8:	2004      	movs	r0, #4
 80026fa:	f004 fe93 	bl	8007424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <SystemClock_Config+0xfc>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <SystemClock_Config+0xfc>)
 8002708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800270c:	6193      	str	r3, [r2, #24]
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <SystemClock_Config+0xfc>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <SystemClock_Config+0x100>)
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <SystemClock_Config+0x100>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <SystemClock_Config+0x100>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002730:	bf00      	nop
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <SystemClock_Config+0xfc>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273e:	d1f8      	bne.n	8002732 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <SystemClock_Config+0x104>)
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f023 0303 	bic.w	r3, r3, #3
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <SystemClock_Config+0x104>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002750:	2301      	movs	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002754:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275a:	2302      	movs	r3, #2
 800275c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800275e:	2302      	movs	r3, #2
 8002760:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002766:	2378      	movs	r3, #120	; 0x78
 8002768:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800276a:	2302      	movs	r3, #2
 800276c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800276e:	2302      	movs	r3, #2
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002776:	230c      	movs	r3, #12
 8002778:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800277a:	2300      	movs	r3, #0
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f004 feb6 	bl	80074f8 <HAL_RCC_OscConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002792:	f000 fb25 	bl	8002de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002796:	233f      	movs	r3, #63	; 0x3f
 8002798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279a:	2303      	movs	r3, #3
 800279c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80027a2:	2308      	movs	r3, #8
 80027a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80027a6:	2340      	movs	r3, #64	; 0x40
 80027a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80027ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80027b4:	2340      	movs	r3, #64	; 0x40
 80027b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	2104      	movs	r1, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fac9 	bl	8007d54 <HAL_RCC_ClockConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80027c8:	f000 fb0a 	bl	8002de0 <Error_Handler>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3770      	adds	r7, #112	; 0x70
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58024800 	.word	0x58024800
 80027d8:	58000400 	.word	0x58000400
 80027dc:	58024400 	.word	0x58024400

080027e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0b0      	sub	sp, #192	; 0xc0
 80027e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	22bc      	movs	r2, #188	; 0xbc
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f00a f939 	bl	800ca64 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80027f2:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80027f6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80027fc:	2318      	movs	r3, #24
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002800:	2302      	movs	r3, #2
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002804:	2304      	movs	r3, #4
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002808:	2302      	movs	r3, #2
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800280c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002810:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002812:	2300      	movs	r3, #0
 8002814:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800281a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800281e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f005 fe1e 	bl	800846c <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8002836:	f000 fad3 	bl	8002de0 <Error_Handler>
  }
}
 800283a:	bf00      	nop
 800283c:	37c0      	adds	r7, #192	; 0xc0
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <MX_ETH_Init+0x80>)
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <MX_ETH_Init+0x84>)
 800284c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <MX_ETH_Init+0x88>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <MX_ETH_Init+0x88>)
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <MX_ETH_Init+0x88>)
 800285c:	22e1      	movs	r2, #225	; 0xe1
 800285e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <MX_ETH_Init+0x88>)
 8002862:	2200      	movs	r2, #0
 8002864:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <MX_ETH_Init+0x88>)
 8002868:	2200      	movs	r2, #0
 800286a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <MX_ETH_Init+0x88>)
 800286e:	2200      	movs	r2, #0
 8002870:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_ETH_Init+0x80>)
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <MX_ETH_Init+0x88>)
 8002876:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_ETH_Init+0x80>)
 800287a:	2201      	movs	r2, #1
 800287c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_ETH_Init+0x80>)
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <MX_ETH_Init+0x8c>)
 8002882:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_ETH_Init+0x80>)
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <MX_ETH_Init+0x90>)
 8002888:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_ETH_Init+0x80>)
 800288c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002890:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002892:	480c      	ldr	r0, [pc, #48]	; (80028c4 <MX_ETH_Init+0x80>)
 8002894:	f003 fe30 	bl	80064f8 <HAL_ETH_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800289e:	f000 fa9f 	bl	8002de0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80028a2:	2238      	movs	r2, #56	; 0x38
 80028a4:	2100      	movs	r1, #0
 80028a6:	480c      	ldr	r0, [pc, #48]	; (80028d8 <MX_ETH_Init+0x94>)
 80028a8:	f00a f8dc 	bl	800ca64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <MX_ETH_Init+0x94>)
 80028ae:	2221      	movs	r2, #33	; 0x21
 80028b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_ETH_Init+0x94>)
 80028b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <MX_ETH_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	240001ac 	.word	0x240001ac
 80028c8:	40028000 	.word	0x40028000
 80028cc:	24000ea0 	.word	0x24000ea0
 80028d0:	240000e8 	.word	0x240000e8
 80028d4:	24000088 	.word	0x24000088
 80028d8:	24000174 	.word	0x24000174

080028dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <MX_SPI3_Init+0xa8>)
 80028e2:	4a29      	ldr	r2, [pc, #164]	; (8002988 <MX_SPI3_Init+0xac>)
 80028e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <MX_SPI3_Init+0xa8>)
 80028e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <MX_SPI3_Init+0xa8>)
 80028f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <MX_SPI3_Init+0xa8>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <MX_SPI3_Init+0xa8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002904:	2200      	movs	r2, #0
 8002906:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <MX_SPI3_Init+0xa8>)
 800290a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800290e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002916:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MX_SPI3_Init+0xa8>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <MX_SPI3_Init+0xa8>)
 800292c:	2200      	movs	r2, #0
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <MX_SPI3_Init+0xa8>)
 800293a:	2200      	movs	r2, #0
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002940:	2200      	movs	r2, #0
 8002942:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002946:	2200      	movs	r2, #0
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_SPI3_Init+0xa8>)
 800294c:	2200      	movs	r2, #0
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002952:	2200      	movs	r2, #0
 8002954:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002958:	2200      	movs	r2, #0
 800295a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_SPI3_Init+0xa8>)
 800295e:	2200      	movs	r2, #0
 8002960:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_SPI3_Init+0xa8>)
 800296a:	2200      	movs	r2, #0
 800296c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_SPI3_Init+0xa8>)
 8002970:	f007 f8e4 	bl	8009b3c <HAL_SPI_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800297a:	f000 fa31 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2400025c 	.word	0x2400025c
 8002988:	40003c00 	.word	0x40003c00

0800298c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_TIM7_Init+0x64>)
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <MX_TIM7_Init+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029a4:	22ef      	movs	r2, #239	; 0xef
 80029a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029be:	f007 fc9e 	bl	800a2fe <HAL_TIM_Base_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80029c8:	f000 fa0a 	bl	8002de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_TIM7_Init+0x64>)
 80029da:	f007 ff6f 	bl	800a8bc <HAL_TIMEx_MasterConfigSynchronization>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80029e4:	f000 f9fc 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	240002e4 	.word	0x240002e4
 80029f4:	40001400 	.word	0x40001400

080029f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 80029fe:	4a23      	ldr	r2, [pc, #140]	; (8002a8c <MX_USART3_UART_Init+0x94>)
 8002a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <MX_USART3_UART_Init+0x98>)
 8002a06:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a3e:	4812      	ldr	r0, [pc, #72]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a40:	f007 ffe8 	bl	800aa14 <HAL_UART_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002a4a:	f000 f9c9 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a52:	f009 fc09 	bl	800c268 <HAL_UARTEx_SetTxFifoThreshold>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002a5c:	f000 f9c0 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a60:	2100      	movs	r1, #0
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a64:	f009 fc3e 	bl	800c2e4 <HAL_UARTEx_SetRxFifoThreshold>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002a6e:	f000 f9b7 	bl	8002de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a72:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a74:	f009 fbbf 	bl	800c1f6 <HAL_UARTEx_DisableFifoMode>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002a7e:	f000 f9af 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	24000330 	.word	0x24000330
 8002a8c:	40004800 	.word	0x40004800
 8002a90:	0005dc00 	.word	0x0005dc00

08002a94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aa0:	2209      	movs	r2, #9
 8002aa2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002adc:	f004 fb5a 	bl	8007194 <HAL_PCD_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002ae6:	f000 f97b 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	240004b0 	.word	0x240004b0
 8002af4:	40080000 	.word	0x40080000

08002af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_DMA_Init+0x4c>)
 8002b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <MX_DMA_Init+0x4c>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <MX_DMA_Init+0x4c>)
 8002b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	200c      	movs	r0, #12
 8002b22:	f001 fa8e 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b26:	200c      	movs	r0, #12
 8002b28:	f001 faa5 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	200f      	movs	r0, #15
 8002b32:	f001 fa86 	bl	8004042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f001 fa9d 	bl	8004076 <HAL_NVIC_EnableIRQ>

}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	58024400 	.word	0x58024400

08002b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b8a      	ldr	r3, [pc, #552]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b64:	4a88      	ldr	r2, [pc, #544]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b6e:	4b86      	ldr	r3, [pc, #536]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b7c:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b82:	4a81      	ldr	r2, [pc, #516]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8c:	4b7e      	ldr	r3, [pc, #504]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	4a79      	ldr	r2, [pc, #484]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002baa:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bbe:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be6:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfa:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c04:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	4a5b      	ldr	r2, [pc, #364]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c22:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c30:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c36:	4a54      	ldr	r2, [pc, #336]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c40:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <MX_GPIO_Init+0x240>)
 8002c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002c54:	484d      	ldr	r0, [pc, #308]	; (8002d8c <MX_GPIO_Init+0x244>)
 8002c56:	f004 fa3b 	bl	80070d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c60:	484a      	ldr	r0, [pc, #296]	; (8002d8c <MX_GPIO_Init+0x244>)
 8002c62:	f004 fa35 	bl	80070d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002c66:	2200      	movs	r2, #0
 8002c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c6c:	4848      	ldr	r0, [pc, #288]	; (8002d90 <MX_GPIO_Init+0x248>)
 8002c6e:	f004 fa2f 	bl	80070d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c78:	4846      	ldr	r0, [pc, #280]	; (8002d94 <MX_GPIO_Init+0x24c>)
 8002c7a:	f004 fa29 	bl	80070d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c84:	4844      	ldr	r0, [pc, #272]	; (8002d98 <MX_GPIO_Init+0x250>)
 8002c86:	f004 fa23 	bl	80070d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8002c8a:	230d      	movs	r3, #13
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	483f      	ldr	r0, [pc, #252]	; (8002d9c <MX_GPIO_Init+0x254>)
 8002c9e:	f004 f84f 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	483a      	ldr	r0, [pc, #232]	; (8002da0 <MX_GPIO_Init+0x258>)
 8002cb6:	f004 f843 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4830      	ldr	r0, [pc, #192]	; (8002d90 <MX_GPIO_Init+0x248>)
 8002cce:	f004 f837 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	482f      	ldr	r0, [pc, #188]	; (8002da4 <MX_GPIO_Init+0x25c>)
 8002ce8:	f004 f82a 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002cec:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	4619      	mov	r1, r3
 8002d04:	4821      	ldr	r0, [pc, #132]	; (8002d8c <MX_GPIO_Init+0x244>)
 8002d06:	f004 f81b 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	481b      	ldr	r0, [pc, #108]	; (8002d90 <MX_GPIO_Init+0x248>)
 8002d24:	f004 f80c 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4814      	ldr	r0, [pc, #80]	; (8002d94 <MX_GPIO_Init+0x24c>)
 8002d42:	f003 fffd 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480f      	ldr	r0, [pc, #60]	; (8002d98 <MX_GPIO_Init+0x250>)
 8002d5c:	f003 fff0 	bl	8006d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4807      	ldr	r0, [pc, #28]	; (8002d98 <MX_GPIO_Init+0x250>)
 8002d7a:	f003 ffe1 	bl	8006d40 <HAL_GPIO_Init>

}
 8002d7e:	bf00      	nop
 8002d80:	3738      	adds	r7, #56	; 0x38
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58021000 	.word	0x58021000
 8002d90:	58020400 	.word	0x58020400
 8002d94:	58020c00 	.word	0x58020c00
 8002d98:	58021800 	.word	0x58021800
 8002d9c:	58020800 	.word	0x58020800
 8002da0:	58020000 	.word	0x58020000
 8002da4:	58021400 	.word	0x58021400

08002da8 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002da8:	b4b0      	push	{r4, r5, r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10a      	bne.n	8002dce <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dc2:	1854      	adds	r4, r2, r1
 8002dc4:	f143 0500 	adc.w	r5, r3, #0
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002dca:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bcb0      	pop	{r4, r5, r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	240002e4 	.word	0x240002e4
 8002ddc:	24000e98 	.word	0x24000e98

08002de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de4:	b672      	cpsid	i
}
 8002de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002de8:	e7fe      	b.n	8002de8 <Error_Handler+0x8>
	...

08002dec <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df6:	4802      	ldr	r0, [pc, #8]	; (8002e00 <ST7735_Select+0x14>)
 8002df8:	f004 f96a 	bl	80070d0 <HAL_GPIO_WritePin>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	58021000 	.word	0x58021000

08002e04 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <ST7735_Unselect+0x14>)
 8002e10:	f004 f95e 	bl	80070d0 <HAL_GPIO_WritePin>
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	58021000 	.word	0x58021000

08002e1c <ST7735_Select1>:
static void ST7735_Select1() {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e26:	4802      	ldr	r0, [pc, #8]	; (8002e30 <ST7735_Select1+0x14>)
 8002e28:	f004 f952 	bl	80070d0 <HAL_GPIO_WritePin>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	58021000 	.word	0x58021000

08002e34 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e3e:	4802      	ldr	r0, [pc, #8]	; (8002e48 <ST7735_Unselect1+0x14>)
 8002e40:	f004 f946 	bl	80070d0 <HAL_GPIO_WritePin>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	58021000 	.word	0x58021000

08002e4c <ST7735_Reset>:

static void ST7735_Reset() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <ST7735_Reset+0x28>)
 8002e58:	f004 f93a 	bl	80070d0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002e5c:	2005      	movs	r0, #5
 8002e5e:	f000 ffd1 	bl	8003e04 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002e62:	2201      	movs	r2, #1
 8002e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <ST7735_Reset+0x28>)
 8002e6a:	f004 f931 	bl	80070d0 <HAL_GPIO_WritePin>
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	58021000 	.word	0x58021000

08002e78 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <ST7735_WriteCommand+0x2c>)
 8002e8a:	f004 f921 	bl	80070d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002e8e:	1df9      	adds	r1, r7, #7
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	2201      	movs	r2, #1
 8002e96:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <ST7735_WriteCommand+0x30>)
 8002e98:	f006 ff56 	bl	8009d48 <HAL_SPI_Transmit>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58021800 	.word	0x58021800
 8002ea8:	2400025c 	.word	0x2400025c

08002eac <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ebc:	4807      	ldr	r0, [pc, #28]	; (8002edc <ST7735_WriteData+0x30>)
 8002ebe:	f004 f907 	bl	80070d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <ST7735_WriteData+0x34>)
 8002ece:	f006 ff3b 	bl	8009d48 <HAL_SPI_Transmit>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	58021800 	.word	0x58021800
 8002ee0:	2400025c 	.word	0x2400025c

08002ee4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8002ef6:	e034      	b.n	8002f62 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ffb7 	bl	8002e78 <ST7735_WriteCommand>

		numArgs = *addr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8002f14:	7abb      	ldrb	r3, [r7, #10]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8002f1e:	7abb      	ldrb	r3, [r7, #10]
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8002f26:	7abb      	ldrb	r3, [r7, #10]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8002f2c:	7abb      	ldrb	r3, [r7, #10]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ffbb 	bl	8002eac <ST7735_WriteData>
			addr += numArgs;
 8002f36:	7abb      	ldrb	r3, [r7, #10]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8002f3e:	89bb      	ldrh	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8002f4e:	89bb      	ldrh	r3, [r7, #12]
 8002f50:	2bff      	cmp	r3, #255	; 0xff
 8002f52:	d102      	bne.n	8002f5a <ST7735_ExecuteCommandList+0x76>
 8002f54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f58:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8002f5a:	89bb      	ldrh	r3, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 ff51 	bl	8003e04 <HAL_Delay>
	while(numCommands--) {
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	1e5a      	subs	r2, r3, #1
 8002f66:	73fa      	strb	r2, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1c5      	bne.n	8002ef8 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4608      	mov	r0, r1
 8002f80:	4611      	mov	r1, r2
 8002f82:	461a      	mov	r2, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	71fb      	strb	r3, [r7, #7]
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71bb      	strb	r3, [r7, #6]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	717b      	strb	r3, [r7, #5]
 8002f90:	4613      	mov	r3, r2
 8002f92:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8002f94:	202a      	movs	r0, #42	; 0x2a
 8002f96:	f7ff ff6f 	bl	8002e78 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	733b      	strb	r3, [r7, #12]
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	737b      	strb	r3, [r7, #13]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73bb      	strb	r3, [r7, #14]
 8002faa:	797b      	ldrb	r3, [r7, #5]
 8002fac:	3302      	adds	r3, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff77 	bl	8002eac <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8002fbe:	202b      	movs	r0, #43	; 0x2b
 8002fc0:	f7ff ff5a 	bl	8002e78 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8002fcc:	793b      	ldrb	r3, [r7, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	2104      	movs	r1, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff66 	bl	8002eac <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8002fe0:	202c      	movs	r0, #44	; 0x2c
 8002fe2:	f7ff ff49 	bl	8002e78 <ST7735_WriteCommand>
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
	...

08002ff0 <ST7735_Init>:

void ST7735_Init() {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	ST7735_Select();
 8002ff4:	f7ff fefa 	bl	8002dec <ST7735_Select>
	ST7735_Select1();
 8002ff8:	f7ff ff10 	bl	8002e1c <ST7735_Select1>
	ST7735_Reset();
 8002ffc:	f7ff ff26 	bl	8002e4c <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8003000:	4807      	ldr	r0, [pc, #28]	; (8003020 <ST7735_Init+0x30>)
 8003002:	f7ff ff6f 	bl	8002ee4 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8003006:	4807      	ldr	r0, [pc, #28]	; (8003024 <ST7735_Init+0x34>)
 8003008:	f7ff ff6c 	bl	8002ee4 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 800300c:	4806      	ldr	r0, [pc, #24]	; (8003028 <ST7735_Init+0x38>)
 800300e:	f7ff ff69 	bl	8002ee4 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8003012:	f7ff fef7 	bl	8002e04 <ST7735_Unselect>
	ST7735_Unselect1();
 8003016:	f7ff ff0d 	bl	8002e34 <ST7735_Unselect1>
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	0800e9a0 	.word	0x0800e9a0
 8003024:	0800e9dc 	.word	0x0800e9dc
 8003028:	0800e9ec 	.word	0x0800e9ec

0800302c <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800302c:	b082      	sub	sp, #8
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b089      	sub	sp, #36	; 0x24
 8003032:	af00      	add	r7, sp, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
 800303a:	460b      	mov	r3, r1
 800303c:	80bb      	strh	r3, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	b2d8      	uxtb	r0, r3
 8003046:	88bb      	ldrh	r3, [r7, #4]
 8003048:	b2d9      	uxtb	r1, r3
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003052:	4413      	add	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b2dc      	uxtb	r4, r3
 800305a:	88bb      	ldrh	r3, [r7, #4]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003062:	4413      	add	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4622      	mov	r2, r4
 800306c:	f7ff ff83 	bl	8002f76 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e043      	b.n	80030fe <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8003076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	3b20      	subs	r3, #32
 800307c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4619      	mov	r1, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	440b      	add	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e029      	b.n	80030ec <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 80030a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	743b      	strb	r3, [r7, #16]
 80030b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fef4 	bl	8002eac <ST7735_WriteData>
 80030c4:	e00f      	b.n	80030e6 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80030c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	733b      	strb	r3, [r7, #12]
 80030d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fee3 	bl	8002eac <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80030f0:	461a      	mov	r2, r3
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d3cf      	bcc.n	8003098 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003102:	461a      	mov	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4293      	cmp	r3, r2
 8003108:	d3b5      	bcc.n	8003076 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	3724      	adds	r7, #36	; 0x24
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003116:	b002      	add	sp, #8
 8003118:	4770      	bx	lr

0800311a <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800311a:	b082      	sub	sp, #8
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af04      	add	r7, sp, #16
 8003122:	603a      	str	r2, [r7, #0]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
 800312a:	460b      	mov	r3, r1
 800312c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 800312e:	f7ff fe5d 	bl	8002dec <ST7735_Select>

	while(*str) {
 8003132:	e02d      	b.n	8003190 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	7d3a      	ldrb	r2, [r7, #20]
 8003138:	4413      	add	r3, r2
 800313a:	2b7f      	cmp	r3, #127	; 0x7f
 800313c:	dd13      	ble.n	8003166 <ST7735_WriteString+0x4c>
			x = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003142:	7d7b      	ldrb	r3, [r7, #21]
 8003144:	b29a      	uxth	r2, r3
 8003146:	88bb      	ldrh	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	7d7a      	ldrb	r2, [r7, #21]
 8003150:	4413      	add	r3, r2
 8003152:	2b7f      	cmp	r3, #127	; 0x7f
 8003154:	dc21      	bgt.n	800319a <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b20      	cmp	r3, #32
 800315c:	d103      	bne.n	8003166 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	603b      	str	r3, [r7, #0]
				continue;
 8003164:	e014      	b.n	8003190 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	88b9      	ldrh	r1, [r7, #4]
 800316c:	88f8      	ldrh	r0, [r7, #6]
 800316e:	8c3b      	ldrh	r3, [r7, #32]
 8003170:	9302      	str	r3, [sp, #8]
 8003172:	8bbb      	ldrh	r3, [r7, #28]
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f7ff ff56 	bl	800302c <ST7735_WriteChar>
		x += font.width;
 8003180:	7d3b      	ldrb	r3, [r7, #20]
 8003182:	b29a      	uxth	r2, r3
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	4413      	add	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
		str++;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1cd      	bne.n	8003134 <ST7735_WriteString+0x1a>
 8003198:	e000      	b.n	800319c <ST7735_WriteString+0x82>
				break;
 800319a:	bf00      	nop
	}

	ST7735_Unselect();
 800319c:	f7ff fe32 	bl	8002e04 <ST7735_Unselect>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031aa:	b002      	add	sp, #8
 80031ac:	4770      	bx	lr

080031ae <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80031ae:	b082      	sub	sp, #8
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af04      	add	r7, sp, #16
 80031b6:	603a      	str	r2, [r7, #0]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 80031c2:	f7ff fe2b 	bl	8002e1c <ST7735_Select1>

	while(*str) {
 80031c6:	e02d      	b.n	8003224 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	7d3a      	ldrb	r2, [r7, #20]
 80031cc:	4413      	add	r3, r2
 80031ce:	2b7f      	cmp	r3, #127	; 0x7f
 80031d0:	dd13      	ble.n	80031fa <ST7735_WriteString1+0x4c>
			x = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80031d6:	7d7b      	ldrb	r3, [r7, #21]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80031e0:	88bb      	ldrh	r3, [r7, #4]
 80031e2:	7d7a      	ldrb	r2, [r7, #21]
 80031e4:	4413      	add	r3, r2
 80031e6:	2b7f      	cmp	r3, #127	; 0x7f
 80031e8:	dc21      	bgt.n	800322e <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d103      	bne.n	80031fa <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	603b      	str	r3, [r7, #0]
				continue;
 80031f8:	e014      	b.n	8003224 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	88b9      	ldrh	r1, [r7, #4]
 8003200:	88f8      	ldrh	r0, [r7, #6]
 8003202:	8c3b      	ldrh	r3, [r7, #32]
 8003204:	9302      	str	r3, [sp, #8]
 8003206:	8bbb      	ldrh	r3, [r7, #28]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f7ff ff0c 	bl	800302c <ST7735_WriteChar>
		x += font.width;
 8003214:	7d3b      	ldrb	r3, [r7, #20]
 8003216:	b29a      	uxth	r2, r3
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4413      	add	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
		str++;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1cd      	bne.n	80031c8 <ST7735_WriteString1+0x1a>
 800322c:	e000      	b.n	8003230 <ST7735_WriteString1+0x82>
				break;
 800322e:	bf00      	nop
	}

	ST7735_Unselect1();
 8003230:	f7ff fe00 	bl	8002e34 <ST7735_Unselect1>
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800323e:	b002      	add	sp, #8
 8003240:	4770      	bx	lr

08003242 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8003242:	b082      	sub	sp, #8
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af04      	add	r7, sp, #16
 800324a:	603a      	str	r2, [r7, #0]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
 8003252:	460b      	mov	r3, r1
 8003254:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8003256:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 800325e:	f7ff fdc5 	bl	8002dec <ST7735_Select>
 8003262:	e034      	b.n	80032ce <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8003264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003268:	2b01      	cmp	r3, #1
 800326a:	d130      	bne.n	80032ce <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 800326c:	f7ff fdd6 	bl	8002e1c <ST7735_Select1>

	}


	while(*str) {
 8003270:	e02d      	b.n	80032ce <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	7d3a      	ldrb	r2, [r7, #20]
 8003276:	4413      	add	r3, r2
 8003278:	2b7f      	cmp	r3, #127	; 0x7f
 800327a:	dd13      	ble.n	80032a4 <ST7735_WriteStringNSS+0x62>
			x = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003280:	7d7b      	ldrb	r3, [r7, #21]
 8003282:	b29a      	uxth	r2, r3
 8003284:	88bb      	ldrh	r3, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800328a:	88bb      	ldrh	r3, [r7, #4]
 800328c:	7d7a      	ldrb	r2, [r7, #21]
 800328e:	4413      	add	r3, r2
 8003290:	2b7f      	cmp	r3, #127	; 0x7f
 8003292:	dc21      	bgt.n	80032d8 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b20      	cmp	r3, #32
 800329a:	d103      	bne.n	80032a4 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	603b      	str	r3, [r7, #0]
				continue;
 80032a2:	e014      	b.n	80032ce <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	88b9      	ldrh	r1, [r7, #4]
 80032aa:	88f8      	ldrh	r0, [r7, #6]
 80032ac:	8c3b      	ldrh	r3, [r7, #32]
 80032ae:	9302      	str	r3, [sp, #8]
 80032b0:	8bbb      	ldrh	r3, [r7, #28]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f7ff feb7 	bl	800302c <ST7735_WriteChar>
		x += font.width;
 80032be:	7d3b      	ldrb	r3, [r7, #20]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4413      	add	r3, r2
 80032c6:	80fb      	strh	r3, [r7, #6]
		str++;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	603b      	str	r3, [r7, #0]
	while(*str) {
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cd      	bne.n	8003272 <ST7735_WriteStringNSS+0x30>
 80032d6:	e000      	b.n	80032da <ST7735_WriteStringNSS+0x98>
				break;
 80032d8:	bf00      	nop
	}
	if(NSS == 0){
 80032da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 80032e2:	f7ff fd8f 	bl	8002e04 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80032e6:	e005      	b.n	80032f4 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80032e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80032f0:	f7ff fda0 	bl	8002e34 <ST7735_Unselect1>
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032fe:	b002      	add	sp, #8
 8003300:	4770      	bx	lr
	...

08003304 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4623      	mov	r3, r4
 8003314:	80fb      	strh	r3, [r7, #6]
 8003316:	4603      	mov	r3, r0
 8003318:	80bb      	strh	r3, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	807b      	strh	r3, [r7, #2]
 800331e:	4613      	mov	r3, r2
 8003320:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b7f      	cmp	r3, #127	; 0x7f
 8003326:	d858      	bhi.n	80033da <ST7735_FillRectangle+0xd6>
 8003328:	88bb      	ldrh	r3, [r7, #4]
 800332a:	2b7f      	cmp	r3, #127	; 0x7f
 800332c:	d855      	bhi.n	80033da <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4413      	add	r3, r2
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	dd03      	ble.n	8003340 <ST7735_FillRectangle+0x3c>
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800333e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003340:	88ba      	ldrh	r2, [r7, #4]
 8003342:	883b      	ldrh	r3, [r7, #0]
 8003344:	4413      	add	r3, r2
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	dd03      	ble.n	8003352 <ST7735_FillRectangle+0x4e>
 800334a:	88bb      	ldrh	r3, [r7, #4]
 800334c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003350:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8003352:	f7ff fd4b 	bl	8002dec <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	b2d8      	uxtb	r0, r3
 800335a:	88bb      	ldrh	r3, [r7, #4]
 800335c:	b2d9      	uxtb	r1, r3
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4413      	add	r3, r2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b2dc      	uxtb	r4, r3
 800336e:	88bb      	ldrh	r3, [r7, #4]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	883b      	ldrh	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4413      	add	r3, r2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4622      	mov	r2, r4
 8003380:	f7ff fdf9 	bl	8002f76 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003384:	8c3b      	ldrh	r3, [r7, #32]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	b29b      	uxth	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	733b      	strb	r3, [r7, #12]
 800338e:	8c3b      	ldrh	r3, [r7, #32]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800339a:	4812      	ldr	r0, [pc, #72]	; (80033e4 <ST7735_FillRectangle+0xe0>)
 800339c:	f003 fe98 	bl	80070d0 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 80033a0:	883b      	ldrh	r3, [r7, #0]
 80033a2:	80bb      	strh	r3, [r7, #4]
 80033a4:	e013      	b.n	80033ce <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	80fb      	strh	r3, [r7, #6]
 80033aa:	e00a      	b.n	80033c2 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80033ac:	f107 010c 	add.w	r1, r7, #12
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
 80033b4:	2202      	movs	r2, #2
 80033b6:	480c      	ldr	r0, [pc, #48]	; (80033e8 <ST7735_FillRectangle+0xe4>)
 80033b8:	f006 fcc6 	bl	8009d48 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	3b01      	subs	r3, #1
 80033c0:	80fb      	strh	r3, [r7, #6]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 80033c8:	88bb      	ldrh	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	80bb      	strh	r3, [r7, #4]
 80033ce:	88bb      	ldrh	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e8      	bne.n	80033a6 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 80033d4:	f7ff fd16 	bl	8002e04 <ST7735_Unselect>
 80033d8:	e000      	b.n	80033dc <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80033da:	bf00      	nop
}
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	58021800 	.word	0x58021800
 80033e8:	2400025c 	.word	0x2400025c

080033ec <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4604      	mov	r4, r0
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	80fb      	strh	r3, [r7, #6]
 80033fe:	4603      	mov	r3, r0
 8003400:	80bb      	strh	r3, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	807b      	strh	r3, [r7, #2]
 8003406:	4613      	mov	r3, r2
 8003408:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b7f      	cmp	r3, #127	; 0x7f
 800340e:	d858      	bhi.n	80034c2 <ST7735_FillRectangle1+0xd6>
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	2b7f      	cmp	r3, #127	; 0x7f
 8003414:	d855      	bhi.n	80034c2 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	4413      	add	r3, r2
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	dd03      	ble.n	8003428 <ST7735_FillRectangle1+0x3c>
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003426:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003428:	88ba      	ldrh	r2, [r7, #4]
 800342a:	883b      	ldrh	r3, [r7, #0]
 800342c:	4413      	add	r3, r2
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	dd03      	ble.n	800343a <ST7735_FillRectangle1+0x4e>
 8003432:	88bb      	ldrh	r3, [r7, #4]
 8003434:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003438:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 800343a:	f7ff fcef 	bl	8002e1c <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	b2d8      	uxtb	r0, r3
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	b2d9      	uxtb	r1, r3
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	887b      	ldrh	r3, [r7, #2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	4413      	add	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b2dc      	uxtb	r4, r3
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	4413      	add	r3, r2
 8003460:	b2db      	uxtb	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	4622      	mov	r2, r4
 8003468:	f7ff fd85 	bl	8002f76 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800346c:	8c3b      	ldrh	r3, [r7, #32]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	733b      	strb	r3, [r7, #12]
 8003476:	8c3b      	ldrh	r3, [r7, #32]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800347c:	2201      	movs	r2, #1
 800347e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003482:	4812      	ldr	r0, [pc, #72]	; (80034cc <ST7735_FillRectangle1+0xe0>)
 8003484:	f003 fe24 	bl	80070d0 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003488:	883b      	ldrh	r3, [r7, #0]
 800348a:	80bb      	strh	r3, [r7, #4]
 800348c:	e013      	b.n	80034b6 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	80fb      	strh	r3, [r7, #6]
 8003492:	e00a      	b.n	80034aa <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003494:	f107 010c 	add.w	r1, r7, #12
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
 800349c:	2202      	movs	r2, #2
 800349e:	480c      	ldr	r0, [pc, #48]	; (80034d0 <ST7735_FillRectangle1+0xe4>)
 80034a0:	f006 fc52 	bl	8009d48 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	80fb      	strh	r3, [r7, #6]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f1      	bne.n	8003494 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 80034b0:	88bb      	ldrh	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	80bb      	strh	r3, [r7, #4]
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 80034bc:	f7ff fcba 	bl	8002e34 <ST7735_Unselect1>
 80034c0:	e000      	b.n	80034c4 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80034c2:	bf00      	nop
}
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	58021800 	.word	0x58021800
 80034d0:	2400025c 	.word	0x2400025c

080034d4 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4604      	mov	r4, r0
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	80fb      	strh	r3, [r7, #6]
 80034e6:	4603      	mov	r3, r0
 80034e8:	80bb      	strh	r3, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]
 80034ee:	4613      	mov	r3, r2
 80034f0:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b7f      	cmp	r3, #127	; 0x7f
 80034f6:	d86e      	bhi.n	80035d6 <ST7735_FillRectangleNSS+0x102>
 80034f8:	88bb      	ldrh	r3, [r7, #4]
 80034fa:	2b7f      	cmp	r3, #127	; 0x7f
 80034fc:	d86b      	bhi.n	80035d6 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	4413      	add	r3, r2
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	dd03      	ble.n	8003510 <ST7735_FillRectangleNSS+0x3c>
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800350e:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003510:	88ba      	ldrh	r2, [r7, #4]
 8003512:	883b      	ldrh	r3, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	dd03      	ble.n	8003522 <ST7735_FillRectangleNSS+0x4e>
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003520:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8003522:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 800352a:	f7ff fc5f 	bl	8002dec <ST7735_Select>
 800352e:	e005      	b.n	800353c <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8003530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8003538:	f7ff fc70 	bl	8002e1c <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	b2d8      	uxtb	r0, r3
 8003540:	88bb      	ldrh	r3, [r7, #4]
 8003542:	b2d9      	uxtb	r1, r3
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4413      	add	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b2dc      	uxtb	r4, r3
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	883b      	ldrh	r3, [r7, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4413      	add	r3, r2
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4622      	mov	r2, r4
 8003566:	f7ff fd06 	bl	8002f76 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800356a:	8c3b      	ldrh	r3, [r7, #32]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	b29b      	uxth	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	733b      	strb	r3, [r7, #12]
 8003574:	8c3b      	ldrh	r3, [r7, #32]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800357a:	2201      	movs	r2, #1
 800357c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003580:	4817      	ldr	r0, [pc, #92]	; (80035e0 <ST7735_FillRectangleNSS+0x10c>)
 8003582:	f003 fda5 	bl	80070d0 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003586:	883b      	ldrh	r3, [r7, #0]
 8003588:	80bb      	strh	r3, [r7, #4]
 800358a:	e013      	b.n	80035b4 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	80fb      	strh	r3, [r7, #6]
 8003590:	e00a      	b.n	80035a8 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003592:	f107 010c 	add.w	r1, r7, #12
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	2202      	movs	r2, #2
 800359c:	4811      	ldr	r0, [pc, #68]	; (80035e4 <ST7735_FillRectangleNSS+0x110>)
 800359e:	f006 fbd3 	bl	8009d48 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	80fb      	strh	r3, [r7, #6]
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f1      	bne.n	8003592 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 80035ae:	88bb      	ldrh	r3, [r7, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	80bb      	strh	r3, [r7, #4]
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e8      	bne.n	800358c <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 80035ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 80035c2:	f7ff fc1f 	bl	8002e04 <ST7735_Unselect>
 80035c6:	e007      	b.n	80035d8 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 80035c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d103      	bne.n	80035d8 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 80035d0:	f7ff fc30 	bl	8002e34 <ST7735_Unselect1>
 80035d4:	e000      	b.n	80035d8 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80035d6:	bf00      	nop
	}
}
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	58021800 	.word	0x58021800
 80035e4:	2400025c 	.word	0x2400025c

080035e8 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	4603      	mov	r3, r0
 80035f0:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	2100      	movs	r1, #0
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7ff fe81 	bl	8003304 <ST7735_FillRectangle>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af02      	add	r7, sp, #8
 8003610:	4603      	mov	r3, r0
 8003612:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	2100      	movs	r1, #0
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff fee4 	bl	80033ec <ST7735_FillRectangle1>
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_MspInit+0x30>)
 8003634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003638:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x30>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x30>)
 8003644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	58024400 	.word	0x58024400

08003660 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_ETH_MspInit+0x184>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f040 80ab 	bne.w	80037da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 8003686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800368a:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800368c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003690:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003694:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 8003696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800369a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80036a2:	4b51      	ldr	r3, [pc, #324]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036a8:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036c6:	4a48      	ldr	r2, [pc, #288]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e4:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	4b3a      	ldr	r3, [pc, #232]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 80036fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003702:	4a39      	ldr	r2, [pc, #228]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800370c:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800370e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003720:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800372c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800373a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 8003740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_ETH_MspInit+0x188>)
 800374a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003756:	2332      	movs	r3, #50	; 0x32
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	2300      	movs	r3, #0
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003766:	230b      	movs	r3, #11
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376e:	4619      	mov	r1, r3
 8003770:	481e      	ldr	r0, [pc, #120]	; (80037ec <HAL_ETH_MspInit+0x18c>)
 8003772:	f003 fae5 	bl	8006d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003776:	2386      	movs	r3, #134	; 0x86
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003786:	230b      	movs	r3, #11
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	4817      	ldr	r0, [pc, #92]	; (80037f0 <HAL_ETH_MspInit+0x190>)
 8003792:	f003 fad5 	bl	8006d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037a8:	230b      	movs	r3, #11
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b0:	4619      	mov	r1, r3
 80037b2:	4810      	ldr	r0, [pc, #64]	; (80037f4 <HAL_ETH_MspInit+0x194>)
 80037b4:	f003 fac4 	bl	8006d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80037b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037ca:	230b      	movs	r3, #11
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d2:	4619      	mov	r1, r3
 80037d4:	4808      	ldr	r0, [pc, #32]	; (80037f8 <HAL_ETH_MspInit+0x198>)
 80037d6:	f003 fab3 	bl	8006d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	3738      	adds	r7, #56	; 0x38
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40028000 	.word	0x40028000
 80037e8:	58024400 	.word	0x58024400
 80037ec:	58020800 	.word	0x58020800
 80037f0:	58020000 	.word	0x58020000
 80037f4:	58020400 	.word	0x58020400
 80037f8:	58021800 	.word	0x58021800

080037fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <HAL_SPI_MspInit+0xc8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d14d      	bne.n	80038ba <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800381e:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 8003820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003824:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 8003830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 800384e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <HAL_SPI_MspInit+0xcc>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003878:	2304      	movs	r3, #4
 800387a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003880:	2302      	movs	r3, #2
 8003882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003888:	2307      	movs	r3, #7
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4619      	mov	r1, r3
 8003892:	480e      	ldr	r0, [pc, #56]	; (80038cc <HAL_SPI_MspInit+0xd0>)
 8003894:	f003 fa54 	bl	8006d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038a2:	2302      	movs	r3, #2
 80038a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038aa:	2306      	movs	r3, #6
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4619      	mov	r1, r3
 80038b4:	4806      	ldr	r0, [pc, #24]	; (80038d0 <HAL_SPI_MspInit+0xd4>)
 80038b6:	f003 fa43 	bl	8006d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40003c00 	.word	0x40003c00
 80038c8:	58024400 	.word	0x58024400
 80038cc:	58020400 	.word	0x58020400
 80038d0:	58020800 	.word	0x58020800

080038d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_TIM_Base_MspInit+0x48>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d116      	bne.n	8003914 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_TIM_Base_MspInit+0x4c>)
 80038e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_TIM_Base_MspInit+0x4c>)
 80038ee:	f043 0320 	orr.w	r3, r3, #32
 80038f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_TIM_Base_MspInit+0x4c>)
 80038f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	2037      	movs	r0, #55	; 0x37
 800390a:	f000 fb9a 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800390e:	2037      	movs	r0, #55	; 0x37
 8003910:	f000 fbb1 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40001400 	.word	0x40001400
 8003920:	58024400 	.word	0x58024400

08003924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0b8      	sub	sp, #224	; 0xe0
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800393c:	f107 0310 	add.w	r3, r7, #16
 8003940:	22bc      	movs	r2, #188	; 0xbc
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f009 f88d 	bl	800ca64 <memset>
  if(huart->Instance==USART3)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_UART_MspInit+0x188>)
 8003950:	4293      	cmp	r3, r2
 8003952:	f040 80a6 	bne.w	8003aa2 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003956:	2302      	movs	r3, #2
 8003958:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	4618      	mov	r0, r3
 8003966:	f004 fd81 	bl	800846c <HAL_RCCEx_PeriphCLKConfig>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003970:	f7ff fa36 	bl	8002de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 8003976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800397a:	4a4d      	ldr	r2, [pc, #308]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 8003986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 8003994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003998:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_UART_MspInit+0x18c>)
 80039a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80039b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039ca:	2307      	movs	r3, #7
 80039cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039d4:	4619      	mov	r1, r3
 80039d6:	4837      	ldr	r0, [pc, #220]	; (8003ab4 <HAL_UART_MspInit+0x190>)
 80039d8:	f003 f9b2 	bl	8006d40 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039de:	4a37      	ldr	r2, [pc, #220]	; (8003abc <HAL_UART_MspInit+0x198>)
 80039e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039e4:	222d      	movs	r2, #45	; 0x2d
 80039e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a02:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a10:	4b29      	ldr	r3, [pc, #164]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a1c:	4826      	ldr	r0, [pc, #152]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a1e:	f000 fb45 	bl	80040ac <HAL_DMA_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003a28:	f7ff f9da 	bl	8002de0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a32:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <HAL_UART_MspInit+0x194>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_UART_MspInit+0x1a0>)
 8003a3c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a40:	222e      	movs	r2, #46	; 0x2e
 8003a42:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a46:	2240      	movs	r2, #64	; 0x40
 8003a48:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a56:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a70:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003a76:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a78:	f000 fb18 	bl	80040ac <HAL_DMA_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003a82:	f7ff f9ad 	bl	8002de0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a8a:	679a      	str	r2, [r3, #120]	; 0x78
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_UART_MspInit+0x19c>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	2027      	movs	r0, #39	; 0x27
 8003a98:	f000 fad3 	bl	8004042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a9c:	2027      	movs	r0, #39	; 0x27
 8003a9e:	f000 faea 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003aa2:	bf00      	nop
 8003aa4:	37e0      	adds	r7, #224	; 0xe0
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	58020c00 	.word	0x58020c00
 8003ab8:	240003c0 	.word	0x240003c0
 8003abc:	40020028 	.word	0x40020028
 8003ac0:	24000438 	.word	0x24000438
 8003ac4:	40020070 	.word	0x40020070

08003ac8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_PCD_MspInit+0xa8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d13d      	bne.n	8003b66 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003aea:	f003 fcf5 	bl	80074d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003b0c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003b1e:	230a      	movs	r3, #10
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	4813      	ldr	r0, [pc, #76]	; (8003b78 <HAL_PCD_MspInit+0xb0>)
 8003b2a:	f003 f909 	bl	8006d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	480d      	ldr	r0, [pc, #52]	; (8003b78 <HAL_PCD_MspInit+0xb0>)
 8003b44:	f003 f8fc 	bl	8006d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_PCD_MspInit+0xac>)
 8003b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	; 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40080000 	.word	0x40080000
 8003b74:	58024400 	.word	0x58024400
 8003b78:	58020000 	.word	0x58020000

08003b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b80:	e7fe      	b.n	8003b80 <NMI_Handler+0x4>

08003b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b86:	e7fe      	b.n	8003b86 <HardFault_Handler+0x4>

08003b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b8c:	e7fe      	b.n	8003b8c <MemManage_Handler+0x4>

08003b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <BusFault_Handler+0x4>

08003b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <UsageFault_Handler+0x4>

08003b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc8:	f000 f8fc 	bl	8003dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Stream1_IRQHandler+0x10>)
 8003bd6:	f001 fb29 	bl	800522c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	240003c0 	.word	0x240003c0

08003be4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <DMA1_Stream4_IRQHandler+0x10>)
 8003bea:	f001 fb1f 	bl	800522c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	24000438 	.word	0x24000438

08003bf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <USART3_IRQHandler+0x10>)
 8003bfe:	f006 ff59 	bl	800aab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	24000330 	.word	0x24000330

08003c0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <TIM7_IRQHandler+0x10>)
 8003c12:	f006 fc72 	bl	800a4fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	240002e4 	.word	0x240002e4

08003c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <_sbrk+0x5c>)
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <_sbrk+0x60>)
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <_sbrk+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <_sbrk+0x64>)
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <_sbrk+0x68>)
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <_sbrk+0x64>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d207      	bcs.n	8003c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c50:	f008 fede 	bl	800ca10 <__errno>
 8003c54:	4603      	mov	r3, r0
 8003c56:	220c      	movs	r2, #12
 8003c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e009      	b.n	8003c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <_sbrk+0x64>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <_sbrk+0x64>)
 8003c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	24080000 	.word	0x24080000
 8003c80:	00000400 	.word	0x00000400
 8003c84:	24000ea8 	.word	0x24000ea8
 8003c88:	24000ec0 	.word	0x24000ec0

08003c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c90:	f7fe fc0e 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c94:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c96:	490d      	ldr	r1, [pc, #52]	; (8003ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c9c:	e002      	b.n	8003ca4 <LoopCopyDataInit>

08003c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ca2:	3304      	adds	r3, #4

08003ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ca8:	d3f9      	bcc.n	8003c9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cac:	4c0a      	ldr	r4, [pc, #40]	; (8003cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb0:	e001      	b.n	8003cb6 <LoopFillZerobss>

08003cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb4:	3204      	adds	r2, #4

08003cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cb8:	d3fb      	bcc.n	8003cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cba:	f008 feaf 	bl	800ca1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cbe:	f7fe fc8d 	bl	80025dc <main>
  bx  lr
 8003cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003cc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ccc:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8003cd0:	0800ea8c 	.word	0x0800ea8c
  ldr r2, =_sbss
 8003cd4:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8003cd8:	24000ec0 	.word	0x24000ec0

08003cdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cdc:	e7fe      	b.n	8003cdc <ADC3_IRQHandler>
	...

08003ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce6:	2003      	movs	r0, #3
 8003ce8:	f000 f9a0 	bl	800402c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cec:	f004 f9e8 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_Init+0x68>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	4913      	ldr	r1, [pc, #76]	; (8003d4c <HAL_Init+0x6c>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_Init+0x68>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <HAL_Init+0x6c>)
 8003d14:	5cd3      	ldrb	r3, [r2, r3]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <HAL_Init+0x70>)
 8003d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_Init+0x74>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f000 f814 	bl	8003d58 <HAL_InitTick>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e002      	b.n	8003d40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3a:	f7ff fc77 	bl	800362c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	0800d4c8 	.word	0x0800d4c8
 8003d50:	24000008 	.word	0x24000008
 8003d54:	24000004 	.word	0x24000004

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_InitTick+0x60>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e021      	b.n	8003db0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_InitTick+0x64>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <HAL_InitTick+0x60>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f985 	bl	8004092 <HAL_SYSTICK_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00e      	b.n	8003db0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d80a      	bhi.n	8003dae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f000 f94f 	bl	8004042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <HAL_InitTick+0x68>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	24000020 	.word	0x24000020
 8003dbc:	24000004 	.word	0x24000004
 8003dc0:	2400001c 	.word	0x2400001c

08003dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_IncTick+0x20>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_IncTick+0x24>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_IncTick+0x24>)
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	24000020 	.word	0x24000020
 8003de8:	24000eac 	.word	0x24000eac

08003dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return uwTick;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_GetTick+0x14>)
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	24000eac 	.word	0x24000eac

08003e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff ffee 	bl	8003dec <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d005      	beq.n	8003e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_Delay+0x44>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e2a:	bf00      	nop
 8003e2c:	f7ff ffde 	bl	8003dec <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d8f7      	bhi.n	8003e2c <HAL_Delay+0x28>
  {
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	24000020 	.word	0x24000020

08003e4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_GetREVID+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0c1b      	lsrs	r3, r3, #16
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	5c001000 	.word	0x5c001000

08003e64 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	58000400 	.word	0x58000400

08003e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <__NVIC_SetPriorityGrouping+0x40>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <__NVIC_SetPriorityGrouping+0x40>)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	60d3      	str	r3, [r2, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00
 8003ed0:	05fa0000 	.word	0x05fa0000

08003ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <__NVIC_GetPriorityGrouping+0x18>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	f003 0307 	and.w	r3, r3, #7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff8:	d301      	bcc.n	8003ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00f      	b.n	800401e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <SysTick_Config+0x40>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004006:	210f      	movs	r1, #15
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f7ff ff8e 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <SysTick_Config+0x40>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <SysTick_Config+0x40>)
 8004018:	2207      	movs	r2, #7
 800401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	e000e010 	.word	0xe000e010

0800402c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff29 	bl	8003e8c <__NVIC_SetPriorityGrouping>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	4603      	mov	r3, r0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004050:	f7ff ff40 	bl	8003ed4 <__NVIC_GetPriorityGrouping>
 8004054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f7ff ff90 	bl	8003f80 <NVIC_EncodePriority>
 8004060:	4602      	mov	r2, r0
 8004062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff5f 	bl	8003f2c <__NVIC_SetPriority>
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff33 	bl	8003ef0 <__NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffa4 	bl	8003fe8 <SysTick_Config>
 80040a0:	4603      	mov	r3, r0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff fe9a 	bl	8003dec <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e316      	b.n	80046f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a66      	ldr	r2, [pc, #408]	; (8004264 <HAL_DMA_Init+0x1b8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04a      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	; (8004268 <HAL_DMA_Init+0x1bc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d045      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a63      	ldr	r2, [pc, #396]	; (800426c <HAL_DMA_Init+0x1c0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d040      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a62      	ldr	r2, [pc, #392]	; (8004270 <HAL_DMA_Init+0x1c4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d03b      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a60      	ldr	r2, [pc, #384]	; (8004274 <HAL_DMA_Init+0x1c8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d036      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5f      	ldr	r2, [pc, #380]	; (8004278 <HAL_DMA_Init+0x1cc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d031      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5d      	ldr	r2, [pc, #372]	; (800427c <HAL_DMA_Init+0x1d0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02c      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5c      	ldr	r2, [pc, #368]	; (8004280 <HAL_DMA_Init+0x1d4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d027      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5a      	ldr	r2, [pc, #360]	; (8004284 <HAL_DMA_Init+0x1d8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a59      	ldr	r2, [pc, #356]	; (8004288 <HAL_DMA_Init+0x1dc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a57      	ldr	r2, [pc, #348]	; (800428c <HAL_DMA_Init+0x1e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a56      	ldr	r2, [pc, #344]	; (8004290 <HAL_DMA_Init+0x1e4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a54      	ldr	r2, [pc, #336]	; (8004294 <HAL_DMA_Init+0x1e8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a53      	ldr	r2, [pc, #332]	; (8004298 <HAL_DMA_Init+0x1ec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_DMA_Init+0x1f0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_DMA_Init+0xb8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_DMA_Init+0x1f4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_DMA_Init+0xbc>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_DMA_Init+0xbe>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 813b 	beq.w	80043e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a37      	ldr	r2, [pc, #220]	; (8004264 <HAL_DMA_Init+0x1b8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d04a      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a36      	ldr	r2, [pc, #216]	; (8004268 <HAL_DMA_Init+0x1bc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d045      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a34      	ldr	r2, [pc, #208]	; (800426c <HAL_DMA_Init+0x1c0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d040      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a33      	ldr	r2, [pc, #204]	; (8004270 <HAL_DMA_Init+0x1c4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d03b      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_DMA_Init+0x1c8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d036      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a30      	ldr	r2, [pc, #192]	; (8004278 <HAL_DMA_Init+0x1cc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d031      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	; (800427c <HAL_DMA_Init+0x1d0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02c      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <HAL_DMA_Init+0x1d4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d027      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <HAL_DMA_Init+0x1d8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d022      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_DMA_Init+0x1dc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01d      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a28      	ldr	r2, [pc, #160]	; (800428c <HAL_DMA_Init+0x1e0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d018      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a27      	ldr	r2, [pc, #156]	; (8004290 <HAL_DMA_Init+0x1e4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_DMA_Init+0x174>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <HAL_DMA_Init+0x1e8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a24      	ldr	r2, [pc, #144]	; (8004298 <HAL_DMA_Init+0x1ec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d009      	beq.n	8004220 <HAL_DMA_Init+0x174>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_DMA_Init+0x1f0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_DMA_Init+0x174>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_DMA_Init+0x1f4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d108      	bne.n	8004232 <HAL_DMA_Init+0x186>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e007      	b.n	8004242 <HAL_DMA_Init+0x196>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004242:	e02f      	b.n	80042a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004244:	f7ff fdd2 	bl	8003dec <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b05      	cmp	r3, #5
 8004250:	d928      	bls.n	80042a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e246      	b.n	80046f2 <HAL_DMA_Init+0x646>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1c8      	bne.n	8004244 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4b83      	ldr	r3, [pc, #524]	; (80044cc <HAL_DMA_Init+0x420>)
 80042be:	4013      	ands	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d107      	bne.n	8004308 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	4313      	orrs	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004308:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_DMA_Init+0x424>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <HAL_DMA_Init+0x428>)
 800430e:	4013      	ands	r3, r2
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004314:	d328      	bcc.n	8004368 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b28      	cmp	r3, #40	; 0x28
 800431c:	d903      	bls.n	8004326 <HAL_DMA_Init+0x27a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b2e      	cmp	r3, #46	; 0x2e
 8004324:	d917      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b3e      	cmp	r3, #62	; 0x3e
 800432c:	d903      	bls.n	8004336 <HAL_DMA_Init+0x28a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b42      	cmp	r3, #66	; 0x42
 8004334:	d90f      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b46      	cmp	r3, #70	; 0x46
 800433c:	d903      	bls.n	8004346 <HAL_DMA_Init+0x29a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b48      	cmp	r3, #72	; 0x48
 8004344:	d907      	bls.n	8004356 <HAL_DMA_Init+0x2aa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b4e      	cmp	r3, #78	; 0x4e
 800434c:	d905      	bls.n	800435a <HAL_DMA_Init+0x2ae>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b52      	cmp	r3, #82	; 0x52
 8004354:	d801      	bhi.n	800435a <HAL_DMA_Init+0x2ae>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_DMA_Init+0x2b0>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004366:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b04      	cmp	r3, #4
 8004390:	d117      	bne.n	80043c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 ff1d 	bl	80061e4 <DMA_CheckFifoParam>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e197      	b.n	80046f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f001 fe58 	bl	8006080 <DMA_CalcBaseAndBitshift>
 80043d0:	4603      	mov	r3, r0
 80043d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	223f      	movs	r2, #63	; 0x3f
 80043de:	409a      	lsls	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	e0cd      	b.n	8004582 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3b      	ldr	r2, [pc, #236]	; (80044d8 <HAL_DMA_Init+0x42c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a39      	ldr	r2, [pc, #228]	; (80044dc <HAL_DMA_Init+0x430>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <HAL_DMA_Init+0x434>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d018      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a36      	ldr	r2, [pc, #216]	; (80044e4 <HAL_DMA_Init+0x438>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <HAL_DMA_Init+0x43c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a33      	ldr	r2, [pc, #204]	; (80044ec <HAL_DMA_Init+0x440>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a32      	ldr	r2, [pc, #200]	; (80044f0 <HAL_DMA_Init+0x444>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_Init+0x38a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_DMA_Init+0x448>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <HAL_DMA_Init+0x38e>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_DMA_Init+0x390>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8097 	beq.w	8004570 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <HAL_DMA_Init+0x42c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d021      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <HAL_DMA_Init+0x430>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01c      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <HAL_DMA_Init+0x434>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d017      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_DMA_Init+0x438>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d012      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_DMA_Init+0x43c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00d      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_DMA_Init+0x440>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d008      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_DMA_Init+0x444>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <HAL_DMA_Init+0x3e4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_DMA_Init+0x448>)
 800448e:	4293      	cmp	r3, r2
 8004490:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_DMA_Init+0x44c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d020      	beq.n	80044fc <HAL_DMA_Init+0x450>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d102      	bne.n	80044c8 <HAL_DMA_Init+0x41c>
 80044c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044c6:	e01a      	b.n	80044fe <HAL_DMA_Init+0x452>
 80044c8:	2300      	movs	r3, #0
 80044ca:	e018      	b.n	80044fe <HAL_DMA_Init+0x452>
 80044cc:	fe10803f 	.word	0xfe10803f
 80044d0:	5c001000 	.word	0x5c001000
 80044d4:	ffff0000 	.word	0xffff0000
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494
 80044f8:	fffe000f 	.word	0xfffe000f
 80044fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800450c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004514:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800451c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800452c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <HAL_DMA_Init+0x650>)
 8004544:	4413      	add	r3, r2
 8004546:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_DMA_Init+0x654>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	009a      	lsls	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 fd93 	bl	8006080 <DMA_CalcBaseAndBitshift>
 800455a:	4603      	mov	r3, r0
 800455c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e008      	b.n	8004582 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0b7      	b.n	80046f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5f      	ldr	r2, [pc, #380]	; (8004704 <HAL_DMA_Init+0x658>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d072      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_DMA_Init+0x65c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d06d      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5c      	ldr	r2, [pc, #368]	; (800470c <HAL_DMA_Init+0x660>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d068      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5a      	ldr	r2, [pc, #360]	; (8004710 <HAL_DMA_Init+0x664>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d063      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a59      	ldr	r2, [pc, #356]	; (8004714 <HAL_DMA_Init+0x668>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d05e      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_DMA_Init+0x66c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d059      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a56      	ldr	r2, [pc, #344]	; (800471c <HAL_DMA_Init+0x670>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d054      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a54      	ldr	r2, [pc, #336]	; (8004720 <HAL_DMA_Init+0x674>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d04f      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a53      	ldr	r2, [pc, #332]	; (8004724 <HAL_DMA_Init+0x678>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a51      	ldr	r2, [pc, #324]	; (8004728 <HAL_DMA_Init+0x67c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a50      	ldr	r2, [pc, #320]	; (800472c <HAL_DMA_Init+0x680>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a4e      	ldr	r2, [pc, #312]	; (8004730 <HAL_DMA_Init+0x684>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_DMA_Init+0x688>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_DMA_Init+0x68c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4a      	ldr	r2, [pc, #296]	; (800473c <HAL_DMA_Init+0x690>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a48      	ldr	r2, [pc, #288]	; (8004740 <HAL_DMA_Init+0x694>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a47      	ldr	r2, [pc, #284]	; (8004744 <HAL_DMA_Init+0x698>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a45      	ldr	r2, [pc, #276]	; (8004748 <HAL_DMA_Init+0x69c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a44      	ldr	r2, [pc, #272]	; (800474c <HAL_DMA_Init+0x6a0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a42      	ldr	r2, [pc, #264]	; (8004750 <HAL_DMA_Init+0x6a4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a41      	ldr	r2, [pc, #260]	; (8004754 <HAL_DMA_Init+0x6a8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3f      	ldr	r2, [pc, #252]	; (8004758 <HAL_DMA_Init+0x6ac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3e      	ldr	r2, [pc, #248]	; (800475c <HAL_DMA_Init+0x6b0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_Init+0x5c6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <HAL_DMA_Init+0x6b4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Init+0x5ca>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_DMA_Init+0x5cc>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d032      	beq.n	80046e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 fe2d 	bl	80062dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d102      	bne.n	8004690 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_DMA_Init+0x624>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d80c      	bhi.n	80046d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 feaa 	bl	8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	e008      	b.n	80046e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	a7fdabf8 	.word	0xa7fdabf8
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
 8004744:	58025408 	.word	0x58025408
 8004748:	5802541c 	.word	0x5802541c
 800474c:	58025430 	.word	0x58025430
 8004750:	58025444 	.word	0x58025444
 8004754:	58025458 	.word	0x58025458
 8004758:	5802546c 	.word	0x5802546c
 800475c:	58025480 	.word	0x58025480
 8004760:	58025494 	.word	0x58025494

08004764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800476c:	f7ff fb3e 	bl	8003dec <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e2dc      	b.n	8004d36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d008      	beq.n	800479a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e2cd      	b.n	8004d36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a76      	ldr	r2, [pc, #472]	; (8004978 <HAL_DMA_Abort+0x214>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a74      	ldr	r2, [pc, #464]	; (800497c <HAL_DMA_Abort+0x218>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a73      	ldr	r2, [pc, #460]	; (8004980 <HAL_DMA_Abort+0x21c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a71      	ldr	r2, [pc, #452]	; (8004984 <HAL_DMA_Abort+0x220>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a70      	ldr	r2, [pc, #448]	; (8004988 <HAL_DMA_Abort+0x224>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6e      	ldr	r2, [pc, #440]	; (800498c <HAL_DMA_Abort+0x228>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6d      	ldr	r2, [pc, #436]	; (8004990 <HAL_DMA_Abort+0x22c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6b      	ldr	r2, [pc, #428]	; (8004994 <HAL_DMA_Abort+0x230>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_DMA_Abort+0x234>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a68      	ldr	r2, [pc, #416]	; (800499c <HAL_DMA_Abort+0x238>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a67      	ldr	r2, [pc, #412]	; (80049a0 <HAL_DMA_Abort+0x23c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a65      	ldr	r2, [pc, #404]	; (80049a4 <HAL_DMA_Abort+0x240>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a64      	ldr	r2, [pc, #400]	; (80049a8 <HAL_DMA_Abort+0x244>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a62      	ldr	r2, [pc, #392]	; (80049ac <HAL_DMA_Abort+0x248>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <HAL_DMA_Abort+0x24c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_Abort+0xd6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a5f      	ldr	r2, [pc, #380]	; (80049b4 <HAL_DMA_Abort+0x250>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_DMA_Abort+0xda>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_DMA_Abort+0xdc>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 021e 	bic.w	r2, r2, #30
 8004852:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004862:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e00a      	b.n	8004882 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 020e 	bic.w	r2, r2, #14
 800487a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3c      	ldr	r2, [pc, #240]	; (8004978 <HAL_DMA_Abort+0x214>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d072      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3a      	ldr	r2, [pc, #232]	; (800497c <HAL_DMA_Abort+0x218>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d06d      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a39      	ldr	r2, [pc, #228]	; (8004980 <HAL_DMA_Abort+0x21c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d068      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a37      	ldr	r2, [pc, #220]	; (8004984 <HAL_DMA_Abort+0x220>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d063      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a36      	ldr	r2, [pc, #216]	; (8004988 <HAL_DMA_Abort+0x224>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d05e      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a34      	ldr	r2, [pc, #208]	; (800498c <HAL_DMA_Abort+0x228>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d059      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a33      	ldr	r2, [pc, #204]	; (8004990 <HAL_DMA_Abort+0x22c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d054      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a31      	ldr	r2, [pc, #196]	; (8004994 <HAL_DMA_Abort+0x230>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d04f      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_DMA_Abort+0x234>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_DMA_Abort+0x238>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <HAL_DMA_Abort+0x23c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_DMA_Abort+0x240>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <HAL_DMA_Abort+0x244>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_DMA_Abort+0x248>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <HAL_DMA_Abort+0x24c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <HAL_DMA_Abort+0x250>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <HAL_DMA_Abort+0x254>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a22      	ldr	r2, [pc, #136]	; (80049bc <HAL_DMA_Abort+0x258>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <HAL_DMA_Abort+0x25c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <HAL_DMA_Abort+0x260>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_DMA_Abort+0x264>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_DMA_Abort+0x268>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <HAL_DMA_Abort+0x26c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_Abort+0x20e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_DMA_Abort+0x270>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d132      	bne.n	80049d8 <HAL_DMA_Abort+0x274>
 8004972:	2301      	movs	r3, #1
 8004974:	e031      	b.n	80049da <HAL_DMA_Abort+0x276>
 8004976:	bf00      	nop
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	58025408 	.word	0x58025408
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025430 	.word	0x58025430
 80049c4:	58025444 	.word	0x58025444
 80049c8:	58025458 	.word	0x58025458
 80049cc:	5802546c 	.word	0x5802546c
 80049d0:	58025480 	.word	0x58025480
 80049d4:	58025494 	.word	0x58025494
 80049d8:	2300      	movs	r3, #0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6d      	ldr	r2, [pc, #436]	; (8004ba8 <HAL_DMA_Abort+0x444>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d04a      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6b      	ldr	r2, [pc, #428]	; (8004bac <HAL_DMA_Abort+0x448>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d045      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_DMA_Abort+0x44c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d040      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_DMA_Abort+0x450>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d03b      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a67      	ldr	r2, [pc, #412]	; (8004bb8 <HAL_DMA_Abort+0x454>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d036      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a65      	ldr	r2, [pc, #404]	; (8004bbc <HAL_DMA_Abort+0x458>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d031      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <HAL_DMA_Abort+0x45c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d02c      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a62      	ldr	r2, [pc, #392]	; (8004bc4 <HAL_DMA_Abort+0x460>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a61      	ldr	r2, [pc, #388]	; (8004bc8 <HAL_DMA_Abort+0x464>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d022      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a5f      	ldr	r2, [pc, #380]	; (8004bcc <HAL_DMA_Abort+0x468>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_DMA_Abort+0x46c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5c      	ldr	r2, [pc, #368]	; (8004bd4 <HAL_DMA_Abort+0x470>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5b      	ldr	r2, [pc, #364]	; (8004bd8 <HAL_DMA_Abort+0x474>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a59      	ldr	r2, [pc, #356]	; (8004bdc <HAL_DMA_Abort+0x478>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d009      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a58      	ldr	r2, [pc, #352]	; (8004be0 <HAL_DMA_Abort+0x47c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_DMA_Abort+0x32a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a56      	ldr	r2, [pc, #344]	; (8004be4 <HAL_DMA_Abort+0x480>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <HAL_DMA_Abort+0x33c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e007      	b.n	8004ab0 <HAL_DMA_Abort+0x34c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ab0:	e013      	b.n	8004ada <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ab2:	f7ff f99b 	bl	8003dec <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d90c      	bls.n	8004ada <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e12d      	b.n	8004d36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <HAL_DMA_Abort+0x444>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d04a      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <HAL_DMA_Abort+0x448>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d045      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <HAL_DMA_Abort+0x44c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d040      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_DMA_Abort+0x450>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d03b      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <HAL_DMA_Abort+0x454>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d036      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_DMA_Abort+0x458>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d031      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <HAL_DMA_Abort+0x45c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d02c      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <HAL_DMA_Abort+0x460>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d027      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <HAL_DMA_Abort+0x464>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_DMA_Abort+0x468>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a20      	ldr	r2, [pc, #128]	; (8004bd0 <HAL_DMA_Abort+0x46c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d018      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <HAL_DMA_Abort+0x470>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_DMA_Abort+0x474>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_DMA_Abort+0x478>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <HAL_DMA_Abort+0x47c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_DMA_Abort+0x422>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_DMA_Abort+0x480>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_DMA_Abort+0x426>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_DMA_Abort+0x428>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02b      	beq.n	8004be8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	223f      	movs	r2, #63	; 0x3f
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	609a      	str	r2, [r3, #8]
 8004ba6:	e02a      	b.n	8004bfe <HAL_DMA_Abort+0x49a>
 8004ba8:	40020010 	.word	0x40020010
 8004bac:	40020028 	.word	0x40020028
 8004bb0:	40020040 	.word	0x40020040
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	40020070 	.word	0x40020070
 8004bbc:	40020088 	.word	0x40020088
 8004bc0:	400200a0 	.word	0x400200a0
 8004bc4:	400200b8 	.word	0x400200b8
 8004bc8:	40020410 	.word	0x40020410
 8004bcc:	40020428 	.word	0x40020428
 8004bd0:	40020440 	.word	0x40020440
 8004bd4:	40020458 	.word	0x40020458
 8004bd8:	40020470 	.word	0x40020470
 8004bdc:	40020488 	.word	0x40020488
 8004be0:	400204a0 	.word	0x400204a0
 8004be4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4f      	ldr	r2, [pc, #316]	; (8004d40 <HAL_DMA_Abort+0x5dc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d072      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4d      	ldr	r2, [pc, #308]	; (8004d44 <HAL_DMA_Abort+0x5e0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d06d      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <HAL_DMA_Abort+0x5e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d068      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <HAL_DMA_Abort+0x5e8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d063      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a49      	ldr	r2, [pc, #292]	; (8004d50 <HAL_DMA_Abort+0x5ec>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d05e      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <HAL_DMA_Abort+0x5f0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d059      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a46      	ldr	r2, [pc, #280]	; (8004d58 <HAL_DMA_Abort+0x5f4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d054      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a44      	ldr	r2, [pc, #272]	; (8004d5c <HAL_DMA_Abort+0x5f8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d04f      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a43      	ldr	r2, [pc, #268]	; (8004d60 <HAL_DMA_Abort+0x5fc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d04a      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <HAL_DMA_Abort+0x600>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d045      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a40      	ldr	r2, [pc, #256]	; (8004d68 <HAL_DMA_Abort+0x604>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d040      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3e      	ldr	r2, [pc, #248]	; (8004d6c <HAL_DMA_Abort+0x608>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d03b      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <HAL_DMA_Abort+0x60c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d036      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <HAL_DMA_Abort+0x610>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d031      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3a      	ldr	r2, [pc, #232]	; (8004d78 <HAL_DMA_Abort+0x614>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d02c      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <HAL_DMA_Abort+0x618>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d027      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a37      	ldr	r2, [pc, #220]	; (8004d80 <HAL_DMA_Abort+0x61c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d022      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <HAL_DMA_Abort+0x620>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01d      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a34      	ldr	r2, [pc, #208]	; (8004d88 <HAL_DMA_Abort+0x624>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a32      	ldr	r2, [pc, #200]	; (8004d8c <HAL_DMA_Abort+0x628>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a31      	ldr	r2, [pc, #196]	; (8004d90 <HAL_DMA_Abort+0x62c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00e      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <HAL_DMA_Abort+0x630>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2e      	ldr	r2, [pc, #184]	; (8004d98 <HAL_DMA_Abort+0x634>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_DMA_Abort+0x58a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_DMA_Abort+0x638>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_DMA_Abort+0x58e>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_DMA_Abort+0x590>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40020010 	.word	0x40020010
 8004d44:	40020028 	.word	0x40020028
 8004d48:	40020040 	.word	0x40020040
 8004d4c:	40020058 	.word	0x40020058
 8004d50:	40020070 	.word	0x40020070
 8004d54:	40020088 	.word	0x40020088
 8004d58:	400200a0 	.word	0x400200a0
 8004d5c:	400200b8 	.word	0x400200b8
 8004d60:	40020410 	.word	0x40020410
 8004d64:	40020428 	.word	0x40020428
 8004d68:	40020440 	.word	0x40020440
 8004d6c:	40020458 	.word	0x40020458
 8004d70:	40020470 	.word	0x40020470
 8004d74:	40020488 	.word	0x40020488
 8004d78:	400204a0 	.word	0x400204a0
 8004d7c:	400204b8 	.word	0x400204b8
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494

08004da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e237      	b.n	8005222 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e22c      	b.n	8005222 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5c      	ldr	r2, [pc, #368]	; (8004f40 <HAL_DMA_Abort_IT+0x1a0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04a      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5b      	ldr	r2, [pc, #364]	; (8004f44 <HAL_DMA_Abort_IT+0x1a4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d045      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a59      	ldr	r2, [pc, #356]	; (8004f48 <HAL_DMA_Abort_IT+0x1a8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d040      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a58      	ldr	r2, [pc, #352]	; (8004f4c <HAL_DMA_Abort_IT+0x1ac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d03b      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a56      	ldr	r2, [pc, #344]	; (8004f50 <HAL_DMA_Abort_IT+0x1b0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d036      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a55      	ldr	r2, [pc, #340]	; (8004f54 <HAL_DMA_Abort_IT+0x1b4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d031      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a53      	ldr	r2, [pc, #332]	; (8004f58 <HAL_DMA_Abort_IT+0x1b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02c      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_DMA_Abort_IT+0x1bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d027      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a50      	ldr	r2, [pc, #320]	; (8004f60 <HAL_DMA_Abort_IT+0x1c0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a4f      	ldr	r2, [pc, #316]	; (8004f64 <HAL_DMA_Abort_IT+0x1c4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d01d      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a4d      	ldr	r2, [pc, #308]	; (8004f68 <HAL_DMA_Abort_IT+0x1c8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a4c      	ldr	r2, [pc, #304]	; (8004f6c <HAL_DMA_Abort_IT+0x1cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a4a      	ldr	r2, [pc, #296]	; (8004f70 <HAL_DMA_Abort_IT+0x1d0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a49      	ldr	r2, [pc, #292]	; (8004f74 <HAL_DMA_Abort_IT+0x1d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a47      	ldr	r2, [pc, #284]	; (8004f78 <HAL_DMA_Abort_IT+0x1d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_DMA_Abort_IT+0xc8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a46      	ldr	r2, [pc, #280]	; (8004f7c <HAL_DMA_Abort_IT+0x1dc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_DMA_Abort_IT+0xcc>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_DMA_Abort_IT+0xce>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8086 	beq.w	8004f80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <HAL_DMA_Abort_IT+0x1a0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d04a      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <HAL_DMA_Abort_IT+0x1a4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d045      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <HAL_DMA_Abort_IT+0x1a8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d040      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_DMA_Abort_IT+0x1ac>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d03b      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <HAL_DMA_Abort_IT+0x1b0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d036      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <HAL_DMA_Abort_IT+0x1b4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d031      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <HAL_DMA_Abort_IT+0x1b8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02c      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_DMA_Abort_IT+0x1bc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d027      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_DMA_Abort_IT+0x1c0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d022      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_DMA_Abort_IT+0x1c4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d01d      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_DMA_Abort_IT+0x1c8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d018      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_DMA_Abort_IT+0x1cc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_DMA_Abort_IT+0x1d0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00e      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <HAL_DMA_Abort_IT+0x1d4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_DMA_Abort_IT+0x1d8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_DMA_Abort_IT+0x17c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <HAL_DMA_Abort_IT+0x1dc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <HAL_DMA_Abort_IT+0x18e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e178      	b.n	8005220 <HAL_DMA_Abort_IT+0x480>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e16f      	b.n	8005220 <HAL_DMA_Abort_IT+0x480>
 8004f40:	40020010 	.word	0x40020010
 8004f44:	40020028 	.word	0x40020028
 8004f48:	40020040 	.word	0x40020040
 8004f4c:	40020058 	.word	0x40020058
 8004f50:	40020070 	.word	0x40020070
 8004f54:	40020088 	.word	0x40020088
 8004f58:	400200a0 	.word	0x400200a0
 8004f5c:	400200b8 	.word	0x400200b8
 8004f60:	40020410 	.word	0x40020410
 8004f64:	40020428 	.word	0x40020428
 8004f68:	40020440 	.word	0x40020440
 8004f6c:	40020458 	.word	0x40020458
 8004f70:	40020470 	.word	0x40020470
 8004f74:	40020488 	.word	0x40020488
 8004f78:	400204a0 	.word	0x400204a0
 8004f7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 020e 	bic.w	r2, r2, #14
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6c      	ldr	r2, [pc, #432]	; (8005148 <HAL_DMA_Abort_IT+0x3a8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04a      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6b      	ldr	r2, [pc, #428]	; (800514c <HAL_DMA_Abort_IT+0x3ac>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d045      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a69      	ldr	r2, [pc, #420]	; (8005150 <HAL_DMA_Abort_IT+0x3b0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d040      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a68      	ldr	r2, [pc, #416]	; (8005154 <HAL_DMA_Abort_IT+0x3b4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d03b      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_DMA_Abort_IT+0x3b8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d036      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a65      	ldr	r2, [pc, #404]	; (800515c <HAL_DMA_Abort_IT+0x3bc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d031      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a63      	ldr	r2, [pc, #396]	; (8005160 <HAL_DMA_Abort_IT+0x3c0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02c      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a62      	ldr	r2, [pc, #392]	; (8005164 <HAL_DMA_Abort_IT+0x3c4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d027      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a60      	ldr	r2, [pc, #384]	; (8005168 <HAL_DMA_Abort_IT+0x3c8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a5f      	ldr	r2, [pc, #380]	; (800516c <HAL_DMA_Abort_IT+0x3cc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_DMA_Abort_IT+0x3d0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5c      	ldr	r2, [pc, #368]	; (8005174 <HAL_DMA_Abort_IT+0x3d4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5a      	ldr	r2, [pc, #360]	; (8005178 <HAL_DMA_Abort_IT+0x3d8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a59      	ldr	r2, [pc, #356]	; (800517c <HAL_DMA_Abort_IT+0x3dc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a57      	ldr	r2, [pc, #348]	; (8005180 <HAL_DMA_Abort_IT+0x3e0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_DMA_Abort_IT+0x290>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a56      	ldr	r2, [pc, #344]	; (8005184 <HAL_DMA_Abort_IT+0x3e4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <HAL_DMA_Abort_IT+0x2a2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e007      	b.n	8005052 <HAL_DMA_Abort_IT+0x2b2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <HAL_DMA_Abort_IT+0x3a8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d072      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_DMA_Abort_IT+0x3ac>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d06d      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a39      	ldr	r2, [pc, #228]	; (8005150 <HAL_DMA_Abort_IT+0x3b0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d068      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a37      	ldr	r2, [pc, #220]	; (8005154 <HAL_DMA_Abort_IT+0x3b4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d063      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a36      	ldr	r2, [pc, #216]	; (8005158 <HAL_DMA_Abort_IT+0x3b8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d05e      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a34      	ldr	r2, [pc, #208]	; (800515c <HAL_DMA_Abort_IT+0x3bc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d059      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a33      	ldr	r2, [pc, #204]	; (8005160 <HAL_DMA_Abort_IT+0x3c0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d054      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a31      	ldr	r2, [pc, #196]	; (8005164 <HAL_DMA_Abort_IT+0x3c4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04f      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a30      	ldr	r2, [pc, #192]	; (8005168 <HAL_DMA_Abort_IT+0x3c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d04a      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2e      	ldr	r2, [pc, #184]	; (800516c <HAL_DMA_Abort_IT+0x3cc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d045      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2d      	ldr	r2, [pc, #180]	; (8005170 <HAL_DMA_Abort_IT+0x3d0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d040      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <HAL_DMA_Abort_IT+0x3d4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d03b      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <HAL_DMA_Abort_IT+0x3d8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d036      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a28      	ldr	r2, [pc, #160]	; (800517c <HAL_DMA_Abort_IT+0x3dc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d031      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a27      	ldr	r2, [pc, #156]	; (8005180 <HAL_DMA_Abort_IT+0x3e0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d02c      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a25      	ldr	r2, [pc, #148]	; (8005184 <HAL_DMA_Abort_IT+0x3e4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d027      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a24      	ldr	r2, [pc, #144]	; (8005188 <HAL_DMA_Abort_IT+0x3e8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <HAL_DMA_Abort_IT+0x3ec>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a21      	ldr	r2, [pc, #132]	; (8005190 <HAL_DMA_Abort_IT+0x3f0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_DMA_Abort_IT+0x3f4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_DMA_Abort_IT+0x3f8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_DMA_Abort_IT+0x3fc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_DMA_Abort_IT+0x400>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_DMA_Abort_IT+0x3a2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_DMA_Abort_IT+0x404>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d132      	bne.n	80051a8 <HAL_DMA_Abort_IT+0x408>
 8005142:	2301      	movs	r3, #1
 8005144:	e031      	b.n	80051aa <HAL_DMA_Abort_IT+0x40a>
 8005146:	bf00      	nop
 8005148:	40020010 	.word	0x40020010
 800514c:	40020028 	.word	0x40020028
 8005150:	40020040 	.word	0x40020040
 8005154:	40020058 	.word	0x40020058
 8005158:	40020070 	.word	0x40020070
 800515c:	40020088 	.word	0x40020088
 8005160:	400200a0 	.word	0x400200a0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	40020410 	.word	0x40020410
 800516c:	40020428 	.word	0x40020428
 8005170:	40020440 	.word	0x40020440
 8005174:	40020458 	.word	0x40020458
 8005178:	40020470 	.word	0x40020470
 800517c:	40020488 	.word	0x40020488
 8005180:	400204a0 	.word	0x400204a0
 8005184:	400204b8 	.word	0x400204b8
 8005188:	58025408 	.word	0x58025408
 800518c:	5802541c 	.word	0x5802541c
 8005190:	58025430 	.word	0x58025430
 8005194:	58025444 	.word	0x58025444
 8005198:	58025458 	.word	0x58025458
 800519c:	5802546c 	.word	0x5802546c
 80051a0:	58025480 	.word	0x58025480
 80051a4:	58025494 	.word	0x58025494
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2201      	movs	r2, #1
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop

0800522c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005238:	4b67      	ldr	r3, [pc, #412]	; (80053d8 <HAL_DMA_IRQHandler+0x1ac>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a67      	ldr	r2, [pc, #412]	; (80053dc <HAL_DMA_IRQHandler+0x1b0>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0a9b      	lsrs	r3, r3, #10
 8005244:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a5f      	ldr	r2, [pc, #380]	; (80053e0 <HAL_DMA_IRQHandler+0x1b4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a5d      	ldr	r2, [pc, #372]	; (80053e4 <HAL_DMA_IRQHandler+0x1b8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a5c      	ldr	r2, [pc, #368]	; (80053e8 <HAL_DMA_IRQHandler+0x1bc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5a      	ldr	r2, [pc, #360]	; (80053ec <HAL_DMA_IRQHandler+0x1c0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a59      	ldr	r2, [pc, #356]	; (80053f0 <HAL_DMA_IRQHandler+0x1c4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a57      	ldr	r2, [pc, #348]	; (80053f4 <HAL_DMA_IRQHandler+0x1c8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_DMA_IRQHandler+0x1cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a54      	ldr	r2, [pc, #336]	; (80053fc <HAL_DMA_IRQHandler+0x1d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a53      	ldr	r2, [pc, #332]	; (8005400 <HAL_DMA_IRQHandler+0x1d4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a51      	ldr	r2, [pc, #324]	; (8005404 <HAL_DMA_IRQHandler+0x1d8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a50      	ldr	r2, [pc, #320]	; (8005408 <HAL_DMA_IRQHandler+0x1dc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_DMA_IRQHandler+0x1e0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a4d      	ldr	r2, [pc, #308]	; (8005410 <HAL_DMA_IRQHandler+0x1e4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_DMA_IRQHandler+0x1e8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_DMA_IRQHandler+0x1ec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_IRQHandler+0xd2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a48      	ldr	r2, [pc, #288]	; (800541c <HAL_DMA_IRQHandler+0x1f0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_IRQHandler+0xd6>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_DMA_IRQHandler+0xd8>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 842b 	beq.w	8005b60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2208      	movs	r2, #8
 8005314:	409a      	lsls	r2, r3
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80a2 	beq.w	8005464 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2e      	ldr	r2, [pc, #184]	; (80053e0 <HAL_DMA_IRQHandler+0x1b4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d04a      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2d      	ldr	r2, [pc, #180]	; (80053e4 <HAL_DMA_IRQHandler+0x1b8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d045      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <HAL_DMA_IRQHandler+0x1bc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d040      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <HAL_DMA_IRQHandler+0x1c0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d03b      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a28      	ldr	r2, [pc, #160]	; (80053f0 <HAL_DMA_IRQHandler+0x1c4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d036      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <HAL_DMA_IRQHandler+0x1c8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d031      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <HAL_DMA_IRQHandler+0x1cc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02c      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a24      	ldr	r2, [pc, #144]	; (80053fc <HAL_DMA_IRQHandler+0x1d0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d027      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <HAL_DMA_IRQHandler+0x1d4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d022      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_DMA_IRQHandler+0x1d8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d01d      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <HAL_DMA_IRQHandler+0x1dc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d018      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_DMA_IRQHandler+0x1e0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d013      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_DMA_IRQHandler+0x1e4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00e      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_DMA_IRQHandler+0x1e8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d009      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_DMA_IRQHandler+0x1ec>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x194>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_DMA_IRQHandler+0x1f0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d12f      	bne.n	8005420 <HAL_DMA_IRQHandler+0x1f4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e02e      	b.n	8005434 <HAL_DMA_IRQHandler+0x208>
 80053d6:	bf00      	nop
 80053d8:	24000004 	.word	0x24000004
 80053dc:	1b4e81b5 	.word	0x1b4e81b5
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf14      	ite	ne
 800542e:	2301      	movne	r3, #1
 8005430:	2300      	moveq	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d015      	beq.n	8005464 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	2208      	movs	r2, #8
 8005452:	409a      	lsls	r2, r3
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	f043 0201 	orr.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d06e      	beq.n	8005558 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a69      	ldr	r2, [pc, #420]	; (8005624 <HAL_DMA_IRQHandler+0x3f8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d04a      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a67      	ldr	r2, [pc, #412]	; (8005628 <HAL_DMA_IRQHandler+0x3fc>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d045      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a66      	ldr	r2, [pc, #408]	; (800562c <HAL_DMA_IRQHandler+0x400>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d040      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a64      	ldr	r2, [pc, #400]	; (8005630 <HAL_DMA_IRQHandler+0x404>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d03b      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a63      	ldr	r2, [pc, #396]	; (8005634 <HAL_DMA_IRQHandler+0x408>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d036      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a61      	ldr	r2, [pc, #388]	; (8005638 <HAL_DMA_IRQHandler+0x40c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d031      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a60      	ldr	r2, [pc, #384]	; (800563c <HAL_DMA_IRQHandler+0x410>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d02c      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5e      	ldr	r2, [pc, #376]	; (8005640 <HAL_DMA_IRQHandler+0x414>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d027      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5d      	ldr	r2, [pc, #372]	; (8005644 <HAL_DMA_IRQHandler+0x418>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5b      	ldr	r2, [pc, #364]	; (8005648 <HAL_DMA_IRQHandler+0x41c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01d      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5a      	ldr	r2, [pc, #360]	; (800564c <HAL_DMA_IRQHandler+0x420>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a58      	ldr	r2, [pc, #352]	; (8005650 <HAL_DMA_IRQHandler+0x424>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a57      	ldr	r2, [pc, #348]	; (8005654 <HAL_DMA_IRQHandler+0x428>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a55      	ldr	r2, [pc, #340]	; (8005658 <HAL_DMA_IRQHandler+0x42c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a54      	ldr	r2, [pc, #336]	; (800565c <HAL_DMA_IRQHandler+0x430>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_DMA_IRQHandler+0x2ee>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a52      	ldr	r2, [pc, #328]	; (8005660 <HAL_DMA_IRQHandler+0x434>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10a      	bne.n	8005530 <HAL_DMA_IRQHandler+0x304>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e003      	b.n	8005538 <HAL_DMA_IRQHandler+0x30c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	2201      	movs	r2, #1
 8005546:	409a      	lsls	r2, r3
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	f043 0202 	orr.w	r2, r3, #2
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2204      	movs	r2, #4
 8005562:	409a      	lsls	r2, r3
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 808f 	beq.w	800568c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <HAL_DMA_IRQHandler+0x3f8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_DMA_IRQHandler+0x3fc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_DMA_IRQHandler+0x400>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a27      	ldr	r2, [pc, #156]	; (8005630 <HAL_DMA_IRQHandler+0x404>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a26      	ldr	r2, [pc, #152]	; (8005634 <HAL_DMA_IRQHandler+0x408>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <HAL_DMA_IRQHandler+0x40c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <HAL_DMA_IRQHandler+0x410>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a21      	ldr	r2, [pc, #132]	; (8005640 <HAL_DMA_IRQHandler+0x414>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a20      	ldr	r2, [pc, #128]	; (8005644 <HAL_DMA_IRQHandler+0x418>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_DMA_IRQHandler+0x41c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <HAL_DMA_IRQHandler+0x420>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <HAL_DMA_IRQHandler+0x424>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <HAL_DMA_IRQHandler+0x428>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_DMA_IRQHandler+0x42c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <HAL_DMA_IRQHandler+0x430>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_IRQHandler+0x3e2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <HAL_DMA_IRQHandler+0x434>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d12a      	bne.n	8005664 <HAL_DMA_IRQHandler+0x438>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e023      	b.n	800566c <HAL_DMA_IRQHandler+0x440>
 8005624:	40020010 	.word	0x40020010
 8005628:	40020028 	.word	0x40020028
 800562c:	40020040 	.word	0x40020040
 8005630:	40020058 	.word	0x40020058
 8005634:	40020070 	.word	0x40020070
 8005638:	40020088 	.word	0x40020088
 800563c:	400200a0 	.word	0x400200a0
 8005640:	400200b8 	.word	0x400200b8
 8005644:	40020410 	.word	0x40020410
 8005648:	40020428 	.word	0x40020428
 800564c:	40020440 	.word	0x40020440
 8005650:	40020458 	.word	0x40020458
 8005654:	40020470 	.word	0x40020470
 8005658:	40020488 	.word	0x40020488
 800565c:	400204a0 	.word	0x400204a0
 8005660:	400204b8 	.word	0x400204b8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2204      	movs	r2, #4
 800567a:	409a      	lsls	r2, r3
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f043 0204 	orr.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2210      	movs	r2, #16
 8005696:	409a      	lsls	r2, r3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a6 	beq.w	80057ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a85      	ldr	r2, [pc, #532]	; (80058bc <HAL_DMA_IRQHandler+0x690>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a83      	ldr	r2, [pc, #524]	; (80058c0 <HAL_DMA_IRQHandler+0x694>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a82      	ldr	r2, [pc, #520]	; (80058c4 <HAL_DMA_IRQHandler+0x698>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a80      	ldr	r2, [pc, #512]	; (80058c8 <HAL_DMA_IRQHandler+0x69c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a7f      	ldr	r2, [pc, #508]	; (80058cc <HAL_DMA_IRQHandler+0x6a0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a7d      	ldr	r2, [pc, #500]	; (80058d0 <HAL_DMA_IRQHandler+0x6a4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <HAL_DMA_IRQHandler+0x6a8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a7a      	ldr	r2, [pc, #488]	; (80058d8 <HAL_DMA_IRQHandler+0x6ac>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a79      	ldr	r2, [pc, #484]	; (80058dc <HAL_DMA_IRQHandler+0x6b0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a77      	ldr	r2, [pc, #476]	; (80058e0 <HAL_DMA_IRQHandler+0x6b4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a76      	ldr	r2, [pc, #472]	; (80058e4 <HAL_DMA_IRQHandler+0x6b8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a74      	ldr	r2, [pc, #464]	; (80058e8 <HAL_DMA_IRQHandler+0x6bc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a73      	ldr	r2, [pc, #460]	; (80058ec <HAL_DMA_IRQHandler+0x6c0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a71      	ldr	r2, [pc, #452]	; (80058f0 <HAL_DMA_IRQHandler+0x6c4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a70      	ldr	r2, [pc, #448]	; (80058f4 <HAL_DMA_IRQHandler+0x6c8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_IRQHandler+0x516>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6e      	ldr	r2, [pc, #440]	; (80058f8 <HAL_DMA_IRQHandler+0x6cc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d10a      	bne.n	8005758 <HAL_DMA_IRQHandler+0x52c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e009      	b.n	800576c <HAL_DMA_IRQHandler+0x540>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d03e      	beq.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	2210      	movs	r2, #16
 800577a:	409a      	lsls	r2, r3
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d108      	bne.n	80057ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d024      	beq.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
 80057ac:	e01f      	b.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01b      	beq.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	e016      	b.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0208 	bic.w	r2, r2, #8
 80057dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2220      	movs	r2, #32
 80057f8:	409a      	lsls	r2, r3
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8110 	beq.w	8005a24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <HAL_DMA_IRQHandler+0x690>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d04a      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2b      	ldr	r2, [pc, #172]	; (80058c0 <HAL_DMA_IRQHandler+0x694>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d045      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <HAL_DMA_IRQHandler+0x698>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d040      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <HAL_DMA_IRQHandler+0x69c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d03b      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <HAL_DMA_IRQHandler+0x6a0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d036      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <HAL_DMA_IRQHandler+0x6a4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d031      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <HAL_DMA_IRQHandler+0x6a8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d02c      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <HAL_DMA_IRQHandler+0x6ac>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d027      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a20      	ldr	r2, [pc, #128]	; (80058dc <HAL_DMA_IRQHandler+0x6b0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d022      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_DMA_IRQHandler+0x6b4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d01d      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_DMA_IRQHandler+0x6b8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_DMA_IRQHandler+0x6bc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <HAL_DMA_IRQHandler+0x6c0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_DMA_IRQHandler+0x6c4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_DMA_IRQHandler+0x6c8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x678>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_DMA_IRQHandler+0x6cc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d12b      	bne.n	80058fc <HAL_DMA_IRQHandler+0x6d0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	e02a      	b.n	8005910 <HAL_DMA_IRQHandler+0x6e4>
 80058ba:	bf00      	nop
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2300      	moveq	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8087 	beq.w	8005a24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2220      	movs	r2, #32
 8005920:	409a      	lsls	r2, r3
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b04      	cmp	r3, #4
 8005930:	d139      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0216 	bic.w	r2, r2, #22
 8005940:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005950:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <HAL_DMA_IRQHandler+0x736>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0208 	bic.w	r2, r2, #8
 8005970:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	223f      	movs	r2, #63	; 0x3f
 800597c:	409a      	lsls	r2, r3
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 834a 	beq.w	8006030 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
          }
          return;
 80059a4:	e344      	b.n	8006030 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02c      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	e027      	b.n	8005a24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d023      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	e01e      	b.n	8005a24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0210 	bic.w	r2, r2, #16
 8005a02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8306 	beq.w	800603a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8088 	beq.w	8005b4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a7a      	ldr	r2, [pc, #488]	; (8005c34 <HAL_DMA_IRQHandler+0xa08>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d04a      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a79      	ldr	r2, [pc, #484]	; (8005c38 <HAL_DMA_IRQHandler+0xa0c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d045      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a77      	ldr	r2, [pc, #476]	; (8005c3c <HAL_DMA_IRQHandler+0xa10>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d040      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a76      	ldr	r2, [pc, #472]	; (8005c40 <HAL_DMA_IRQHandler+0xa14>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d03b      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a74      	ldr	r2, [pc, #464]	; (8005c44 <HAL_DMA_IRQHandler+0xa18>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d036      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a73      	ldr	r2, [pc, #460]	; (8005c48 <HAL_DMA_IRQHandler+0xa1c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d031      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a71      	ldr	r2, [pc, #452]	; (8005c4c <HAL_DMA_IRQHandler+0xa20>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02c      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a70      	ldr	r2, [pc, #448]	; (8005c50 <HAL_DMA_IRQHandler+0xa24>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d027      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6e      	ldr	r2, [pc, #440]	; (8005c54 <HAL_DMA_IRQHandler+0xa28>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6d      	ldr	r2, [pc, #436]	; (8005c58 <HAL_DMA_IRQHandler+0xa2c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a6b      	ldr	r2, [pc, #428]	; (8005c5c <HAL_DMA_IRQHandler+0xa30>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6a      	ldr	r2, [pc, #424]	; (8005c60 <HAL_DMA_IRQHandler+0xa34>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a68      	ldr	r2, [pc, #416]	; (8005c64 <HAL_DMA_IRQHandler+0xa38>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a67      	ldr	r2, [pc, #412]	; (8005c68 <HAL_DMA_IRQHandler+0xa3c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a65      	ldr	r2, [pc, #404]	; (8005c6c <HAL_DMA_IRQHandler+0xa40>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x8b8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a64      	ldr	r2, [pc, #400]	; (8005c70 <HAL_DMA_IRQHandler+0xa44>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d108      	bne.n	8005af6 <HAL_DMA_IRQHandler+0x8ca>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e007      	b.n	8005b06 <HAL_DMA_IRQHandler+0x8da>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d307      	bcc.n	8005b22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f2      	bne.n	8005b06 <HAL_DMA_IRQHandler+0x8da>
 8005b20:	e000      	b.n	8005b24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005b3a:	e003      	b.n	8005b44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8272 	beq.w	800603a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
 8005b5e:	e26c      	b.n	800603a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a43      	ldr	r2, [pc, #268]	; (8005c74 <HAL_DMA_IRQHandler+0xa48>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d022      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a42      	ldr	r2, [pc, #264]	; (8005c78 <HAL_DMA_IRQHandler+0xa4c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d01d      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a40      	ldr	r2, [pc, #256]	; (8005c7c <HAL_DMA_IRQHandler+0xa50>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <HAL_DMA_IRQHandler+0xa54>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <HAL_DMA_IRQHandler+0xa58>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <HAL_DMA_IRQHandler+0xa5c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a3a      	ldr	r2, [pc, #232]	; (8005c8c <HAL_DMA_IRQHandler+0xa60>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x984>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a39      	ldr	r2, [pc, #228]	; (8005c90 <HAL_DMA_IRQHandler+0xa64>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d101      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x988>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <HAL_DMA_IRQHandler+0x98a>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 823f 	beq.w	800603a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2204      	movs	r2, #4
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80cd 	beq.w	8005d74 <HAL_DMA_IRQHandler+0xb48>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80c7 	beq.w	8005d74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2204      	movs	r2, #4
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d049      	beq.n	8005c94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8210 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c1c:	e20a      	b.n	8006034 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8206 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c30:	e200      	b.n	8006034 <HAL_DMA_IRQHandler+0xe08>
 8005c32:	bf00      	nop
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	58025408 	.word	0x58025408
 8005c78:	5802541c 	.word	0x5802541c
 8005c7c:	58025430 	.word	0x58025430
 8005c80:	58025444 	.word	0x58025444
 8005c84:	58025458 	.word	0x58025458
 8005c88:	5802546c 	.word	0x5802546c
 8005c8c:	58025480 	.word	0x58025480
 8005c90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d160      	bne.n	8005d60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7f      	ldr	r2, [pc, #508]	; (8005ea0 <HAL_DMA_IRQHandler+0xc74>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04a      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a7d      	ldr	r2, [pc, #500]	; (8005ea4 <HAL_DMA_IRQHandler+0xc78>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d045      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7c      	ldr	r2, [pc, #496]	; (8005ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7a      	ldr	r2, [pc, #488]	; (8005eac <HAL_DMA_IRQHandler+0xc80>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d03b      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a79      	ldr	r2, [pc, #484]	; (8005eb0 <HAL_DMA_IRQHandler+0xc84>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a77      	ldr	r2, [pc, #476]	; (8005eb4 <HAL_DMA_IRQHandler+0xc88>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d031      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a76      	ldr	r2, [pc, #472]	; (8005eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02c      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a74      	ldr	r2, [pc, #464]	; (8005ebc <HAL_DMA_IRQHandler+0xc90>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a73      	ldr	r2, [pc, #460]	; (8005ec0 <HAL_DMA_IRQHandler+0xc94>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a71      	ldr	r2, [pc, #452]	; (8005ec4 <HAL_DMA_IRQHandler+0xc98>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a70      	ldr	r2, [pc, #448]	; (8005ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6e      	ldr	r2, [pc, #440]	; (8005ecc <HAL_DMA_IRQHandler+0xca0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6d      	ldr	r2, [pc, #436]	; (8005ed0 <HAL_DMA_IRQHandler+0xca4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a6b      	ldr	r2, [pc, #428]	; (8005ed4 <HAL_DMA_IRQHandler+0xca8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6a      	ldr	r2, [pc, #424]	; (8005ed8 <HAL_DMA_IRQHandler+0xcac>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xb12>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a68      	ldr	r2, [pc, #416]	; (8005edc <HAL_DMA_IRQHandler+0xcb0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <HAL_DMA_IRQHandler+0xb24>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0208 	bic.w	r2, r2, #8
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e007      	b.n	8005d60 <HAL_DMA_IRQHandler+0xb34>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0204 	bic.w	r2, r2, #4
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8165 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d72:	e15f      	b.n	8006034 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d78:	f003 031f 	and.w	r3, r3, #31
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80c5 	beq.w	8005f14 <HAL_DMA_IRQHandler+0xce8>
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80bf 	beq.w	8005f14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2202      	movs	r2, #2
 8005da0:	409a      	lsls	r2, r3
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d018      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 813a 	beq.w	8006038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dcc:	e134      	b.n	8006038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8130 	beq.w	8006038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de0:	e12a      	b.n	8006038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 8089 	bne.w	8005f00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_DMA_IRQHandler+0xc74>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d04a      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <HAL_DMA_IRQHandler+0xc78>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d045      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d040      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a26      	ldr	r2, [pc, #152]	; (8005eac <HAL_DMA_IRQHandler+0xc80>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d03b      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <HAL_DMA_IRQHandler+0xc84>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d036      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <HAL_DMA_IRQHandler+0xc88>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d031      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d02c      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <HAL_DMA_IRQHandler+0xc90>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <HAL_DMA_IRQHandler+0xc94>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <HAL_DMA_IRQHandler+0xc98>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_DMA_IRQHandler+0xca0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <HAL_DMA_IRQHandler+0xca4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <HAL_DMA_IRQHandler+0xca8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_DMA_IRQHandler+0xcac>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_IRQHandler+0xc62>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a14      	ldr	r2, [pc, #80]	; (8005edc <HAL_DMA_IRQHandler+0xcb0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d128      	bne.n	8005ee0 <HAL_DMA_IRQHandler+0xcb4>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0214 	bic.w	r2, r2, #20
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e027      	b.n	8005ef0 <HAL_DMA_IRQHandler+0xcc4>
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 020a 	bic.w	r2, r2, #10
 8005eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8097 	beq.w	8006038 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f12:	e091      	b.n	8006038 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8088 	beq.w	800603a <HAL_DMA_IRQHandler+0xe0e>
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8082 	beq.w	800603a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a41      	ldr	r2, [pc, #260]	; (8006040 <HAL_DMA_IRQHandler+0xe14>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3f      	ldr	r2, [pc, #252]	; (8006044 <HAL_DMA_IRQHandler+0xe18>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3e      	ldr	r2, [pc, #248]	; (8006048 <HAL_DMA_IRQHandler+0xe1c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3c      	ldr	r2, [pc, #240]	; (800604c <HAL_DMA_IRQHandler+0xe20>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a3b      	ldr	r2, [pc, #236]	; (8006050 <HAL_DMA_IRQHandler+0xe24>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a39      	ldr	r2, [pc, #228]	; (8006054 <HAL_DMA_IRQHandler+0xe28>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a38      	ldr	r2, [pc, #224]	; (8006058 <HAL_DMA_IRQHandler+0xe2c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a36      	ldr	r2, [pc, #216]	; (800605c <HAL_DMA_IRQHandler+0xe30>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a35      	ldr	r2, [pc, #212]	; (8006060 <HAL_DMA_IRQHandler+0xe34>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a33      	ldr	r2, [pc, #204]	; (8006064 <HAL_DMA_IRQHandler+0xe38>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a32      	ldr	r2, [pc, #200]	; (8006068 <HAL_DMA_IRQHandler+0xe3c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a30      	ldr	r2, [pc, #192]	; (800606c <HAL_DMA_IRQHandler+0xe40>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <HAL_DMA_IRQHandler+0xe44>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <HAL_DMA_IRQHandler+0xe48>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2c      	ldr	r2, [pc, #176]	; (8006078 <HAL_DMA_IRQHandler+0xe4c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0xdaa>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2a      	ldr	r2, [pc, #168]	; (800607c <HAL_DMA_IRQHandler+0xe50>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d108      	bne.n	8005fe8 <HAL_DMA_IRQHandler+0xdbc>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 021c 	bic.w	r2, r2, #28
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e007      	b.n	8005ff8 <HAL_DMA_IRQHandler+0xdcc>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 020e 	bic.w	r2, r2, #14
 8005ff6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
 800602e:	e004      	b.n	800603a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006030:	bf00      	nop
 8006032:	e002      	b.n	800603a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006034:	bf00      	nop
 8006036:	e000      	b.n	800603a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006038:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800603a:	3728      	adds	r7, #40	; 0x28
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40020010 	.word	0x40020010
 8006044:	40020028 	.word	0x40020028
 8006048:	40020040 	.word	0x40020040
 800604c:	40020058 	.word	0x40020058
 8006050:	40020070 	.word	0x40020070
 8006054:	40020088 	.word	0x40020088
 8006058:	400200a0 	.word	0x400200a0
 800605c:	400200b8 	.word	0x400200b8
 8006060:	40020410 	.word	0x40020410
 8006064:	40020428 	.word	0x40020428
 8006068:	40020440 	.word	0x40020440
 800606c:	40020458 	.word	0x40020458
 8006070:	40020470 	.word	0x40020470
 8006074:	40020488 	.word	0x40020488
 8006078:	400204a0 	.word	0x400204a0
 800607c:	400204b8 	.word	0x400204b8

08006080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a42      	ldr	r2, [pc, #264]	; (8006198 <DMA_CalcBaseAndBitshift+0x118>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04a      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a41      	ldr	r2, [pc, #260]	; (800619c <DMA_CalcBaseAndBitshift+0x11c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d045      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a3f      	ldr	r2, [pc, #252]	; (80061a0 <DMA_CalcBaseAndBitshift+0x120>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d040      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3e      	ldr	r2, [pc, #248]	; (80061a4 <DMA_CalcBaseAndBitshift+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d03b      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <DMA_CalcBaseAndBitshift+0x128>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d036      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a3b      	ldr	r2, [pc, #236]	; (80061ac <DMA_CalcBaseAndBitshift+0x12c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d031      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a39      	ldr	r2, [pc, #228]	; (80061b0 <DMA_CalcBaseAndBitshift+0x130>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d02c      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a38      	ldr	r2, [pc, #224]	; (80061b4 <DMA_CalcBaseAndBitshift+0x134>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d027      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a36      	ldr	r2, [pc, #216]	; (80061b8 <DMA_CalcBaseAndBitshift+0x138>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a35      	ldr	r2, [pc, #212]	; (80061bc <DMA_CalcBaseAndBitshift+0x13c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d01d      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a33      	ldr	r2, [pc, #204]	; (80061c0 <DMA_CalcBaseAndBitshift+0x140>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a32      	ldr	r2, [pc, #200]	; (80061c4 <DMA_CalcBaseAndBitshift+0x144>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a30      	ldr	r2, [pc, #192]	; (80061c8 <DMA_CalcBaseAndBitshift+0x148>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2f      	ldr	r2, [pc, #188]	; (80061cc <DMA_CalcBaseAndBitshift+0x14c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2d      	ldr	r2, [pc, #180]	; (80061d0 <DMA_CalcBaseAndBitshift+0x150>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <DMA_CalcBaseAndBitshift+0xa8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <DMA_CalcBaseAndBitshift+0x154>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d101      	bne.n	800612c <DMA_CalcBaseAndBitshift+0xac>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <DMA_CalcBaseAndBitshift+0xae>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d024      	beq.n	800617c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	3b10      	subs	r3, #16
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <DMA_CalcBaseAndBitshift+0x158>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	4a24      	ldr	r2, [pc, #144]	; (80061dc <DMA_CalcBaseAndBitshift+0x15c>)
 800614c:	5cd3      	ldrb	r3, [r2, r3]
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d908      	bls.n	800616c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <DMA_CalcBaseAndBitshift+0x160>)
 8006162:	4013      	ands	r3, r2
 8006164:	1d1a      	adds	r2, r3, #4
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	659a      	str	r2, [r3, #88]	; 0x58
 800616a:	e00d      	b.n	8006188 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <DMA_CalcBaseAndBitshift+0x160>)
 8006174:	4013      	ands	r3, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
 800617a:	e005      	b.n	8006188 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40020010 	.word	0x40020010
 800619c:	40020028 	.word	0x40020028
 80061a0:	40020040 	.word	0x40020040
 80061a4:	40020058 	.word	0x40020058
 80061a8:	40020070 	.word	0x40020070
 80061ac:	40020088 	.word	0x40020088
 80061b0:	400200a0 	.word	0x400200a0
 80061b4:	400200b8 	.word	0x400200b8
 80061b8:	40020410 	.word	0x40020410
 80061bc:	40020428 	.word	0x40020428
 80061c0:	40020440 	.word	0x40020440
 80061c4:	40020458 	.word	0x40020458
 80061c8:	40020470 	.word	0x40020470
 80061cc:	40020488 	.word	0x40020488
 80061d0:	400204a0 	.word	0x400204a0
 80061d4:	400204b8 	.word	0x400204b8
 80061d8:	aaaaaaab 	.word	0xaaaaaaab
 80061dc:	0800ea18 	.word	0x0800ea18
 80061e0:	fffffc00 	.word	0xfffffc00

080061e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d120      	bne.n	800623a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d858      	bhi.n	80062b2 <DMA_CheckFifoParam+0xce>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <DMA_CheckFifoParam+0x24>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006219 	.word	0x08006219
 800620c:	0800622b 	.word	0x0800622b
 8006210:	08006219 	.word	0x08006219
 8006214:	080062b3 	.word	0x080062b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d048      	beq.n	80062b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006228:	e045      	b.n	80062b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006232:	d142      	bne.n	80062ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006238:	e03f      	b.n	80062ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	d123      	bne.n	800628c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2b03      	cmp	r3, #3
 800624a:	d838      	bhi.n	80062be <DMA_CheckFifoParam+0xda>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <DMA_CheckFifoParam+0x70>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006265 	.word	0x08006265
 8006258:	0800626b 	.word	0x0800626b
 800625c:	08006265 	.word	0x08006265
 8006260:	0800627d 	.word	0x0800627d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
        break;
 8006268:	e030      	b.n	80062cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d025      	beq.n	80062c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800627a:	e022      	b.n	80062c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006284:	d11f      	bne.n	80062c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800628a:	e01c      	b.n	80062c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	2b02      	cmp	r3, #2
 8006292:	d902      	bls.n	800629a <DMA_CheckFifoParam+0xb6>
 8006294:	2b03      	cmp	r3, #3
 8006296:	d003      	beq.n	80062a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006298:	e018      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
        break;
 800629e:	e015      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00e      	beq.n	80062ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
    break;
 80062b0:	e00b      	b.n	80062ca <DMA_CheckFifoParam+0xe6>
        break;
 80062b2:	bf00      	nop
 80062b4:	e00a      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        break;
 80062b6:	bf00      	nop
 80062b8:	e008      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        break;
 80062ba:	bf00      	nop
 80062bc:	e006      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        break;
 80062be:	bf00      	nop
 80062c0:	e004      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
        break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <DMA_CheckFifoParam+0xe8>
    break;
 80062ca:	bf00      	nop
    }
  }

  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop

080062dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a38      	ldr	r2, [pc, #224]	; (80063d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a36      	ldr	r2, [pc, #216]	; (80063d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01d      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a35      	ldr	r2, [pc, #212]	; (80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d018      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a33      	ldr	r2, [pc, #204]	; (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a32      	ldr	r2, [pc, #200]	; (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00e      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a30      	ldr	r2, [pc, #192]	; (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d009      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a2d      	ldr	r2, [pc, #180]	; (80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d101      	bne.n	800633e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01a      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	3b08      	subs	r3, #8
 800634c:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a24      	ldr	r2, [pc, #144]	; (80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006368:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2201      	movs	r2, #1
 8006372:	409a      	lsls	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006378:	e024      	b.n	80063c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	3b10      	subs	r3, #16
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006384:	fba2 2303 	umull	r2, r3, r2, r3
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d806      	bhi.n	80063a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d902      	bls.n	80063a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3308      	adds	r3, #8
 80063a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4b18      	ldr	r3, [pc, #96]	; (8006408 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a16      	ldr	r2, [pc, #88]	; (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2201      	movs	r2, #1
 80063be:	409a      	lsls	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	58025408 	.word	0x58025408
 80063d4:	5802541c 	.word	0x5802541c
 80063d8:	58025430 	.word	0x58025430
 80063dc:	58025444 	.word	0x58025444
 80063e0:	58025458 	.word	0x58025458
 80063e4:	5802546c 	.word	0x5802546c
 80063e8:	58025480 	.word	0x58025480
 80063ec:	58025494 	.word	0x58025494
 80063f0:	cccccccd 	.word	0xcccccccd
 80063f4:	16009600 	.word	0x16009600
 80063f8:	58025880 	.word	0x58025880
 80063fc:	aaaaaaab 	.word	0xaaaaaaab
 8006400:	400204b8 	.word	0x400204b8
 8006404:	4002040f 	.word	0x4002040f
 8006408:	10008200 	.word	0x10008200
 800640c:	40020880 	.word	0x40020880

08006410 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04a      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d847      	bhi.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a24      	ldr	r2, [pc, #144]	; (80064cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a22      	ldr	r2, [pc, #136]	; (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1c      	ldr	r2, [pc, #112]	; (80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d101      	bne.n	8006480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a15      	ldr	r2, [pc, #84]	; (80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006498:	671a      	str	r2, [r3, #112]	; 0x70
 800649a:	e009      	b.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	461a      	mov	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a11      	ldr	r2, [pc, #68]	; (80064f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	58025408 	.word	0x58025408
 80064cc:	5802541c 	.word	0x5802541c
 80064d0:	58025430 	.word	0x58025430
 80064d4:	58025444 	.word	0x58025444
 80064d8:	58025458 	.word	0x58025458
 80064dc:	5802546c 	.word	0x5802546c
 80064e0:	58025480 	.word	0x58025480
 80064e4:	58025494 	.word	0x58025494
 80064e8:	1600963f 	.word	0x1600963f
 80064ec:	58025940 	.word	0x58025940
 80064f0:	1000823f 	.word	0x1000823f
 80064f4:	40020940 	.word	0x40020940

080064f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e0cf      	b.n	80066aa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2223      	movs	r2, #35	; 0x23
 8006518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fd f89f 	bl	8003660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006522:	4b64      	ldr	r3, [pc, #400]	; (80066b4 <HAL_ETH_Init+0x1bc>)
 8006524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006528:	4a62      	ldr	r2, [pc, #392]	; (80066b4 <HAL_ETH_Init+0x1bc>)
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006532:	4b60      	ldr	r3, [pc, #384]	; (80066b4 <HAL_ETH_Init+0x1bc>)
 8006534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7a1b      	ldrb	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006548:	2000      	movs	r0, #0
 800654a:	f7fd fc8b 	bl	8003e64 <HAL_SYSCFG_ETHInterfaceSelect>
 800654e:	e003      	b.n	8006558 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006550:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006554:	f7fd fc86 	bl	8003e64 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006558:	4b57      	ldr	r3, [pc, #348]	; (80066b8 <HAL_ETH_Init+0x1c0>)
 800655a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006572:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006574:	f7fd fc3a 	bl	8003dec <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800657a:	e011      	b.n	80065a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800657c:	f7fd fc36 	bl	8003dec <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800658a:	d909      	bls.n	80065a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2204      	movs	r2, #4
 8006590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22e0      	movs	r2, #224	; 0xe0
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e084      	b.n	80066aa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e4      	bne.n	800657c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f886 	bl	80066c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80065b8:	f001 fefc 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80065bc:	4603      	mov	r3, r0
 80065be:	4a3f      	ldr	r2, [pc, #252]	; (80066bc <HAL_ETH_Init+0x1c4>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	0c9a      	lsrs	r2, r3, #18
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3a01      	subs	r2, #1
 80065cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa71 	bl	8006ab8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80065e2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065f2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	22e0      	movs	r2, #224	; 0xe0
 800660e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e049      	b.n	80066aa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006622:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <HAL_ETH_Init+0x1c8>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6952      	ldr	r2, [r2, #20]
 800662a:	0051      	lsls	r1, r2, #1
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	430b      	orrs	r3, r1
 8006632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006636:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fad9 	bl	8006bf2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fb1f 	bl	8006c84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	3305      	adds	r3, #5
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	4619      	mov	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	3303      	adds	r3, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	061a      	lsls	r2, r3, #24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	3302      	adds	r3, #2
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	3301      	adds	r3, #1
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006684:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006692:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006694:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2210      	movs	r2, #16
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
 80066b8:	58000400 	.word	0x58000400
 80066bc:	431bde83 	.word	0x431bde83
 80066c0:	ffff8001 	.word	0xffff8001

080066c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80066de:	f001 fe69 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80066e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d908      	bls.n	80066fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d804      	bhi.n	80066fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e027      	b.n	800674e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a18      	ldr	r2, [pc, #96]	; (8006764 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d908      	bls.n	8006718 <HAL_ETH_SetMDIOClockRange+0x54>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d204      	bcs.n	8006718 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e01a      	b.n	800674e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4a13      	ldr	r2, [pc, #76]	; (8006768 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d303      	bcc.n	8006728 <HAL_ETH_SetMDIOClockRange+0x64>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4a12      	ldr	r2, [pc, #72]	; (800676c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d911      	bls.n	800674c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a10      	ldr	r2, [pc, #64]	; (800676c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d908      	bls.n	8006742 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a0f      	ldr	r2, [pc, #60]	; (8006770 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d804      	bhi.n	8006742 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e005      	b.n	800674e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e000      	b.n	800674e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800674c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	01312cff 	.word	0x01312cff
 8006764:	02160ebf 	.word	0x02160ebf
 8006768:	03938700 	.word	0x03938700
 800676c:	05f5e0ff 	.word	0x05f5e0ff
 8006770:	08f0d17f 	.word	0x08f0d17f

08006774 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006786:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	791b      	ldrb	r3, [r3, #4]
 800678c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800678e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	7b1b      	ldrb	r3, [r3, #12]
 8006794:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	7b5b      	ldrb	r3, [r3, #13]
 800679c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800679e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	7b9b      	ldrb	r3, [r3, #14]
 80067a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80067a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	7bdb      	ldrb	r3, [r3, #15]
 80067ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80067ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	7c12      	ldrb	r2, [r2, #16]
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d102      	bne.n	80067be <ETH_SetMACConfig+0x4a>
 80067b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80067bc:	e000      	b.n	80067c0 <ETH_SetMACConfig+0x4c>
 80067be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80067c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	7c52      	ldrb	r2, [r2, #17]
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	d102      	bne.n	80067d0 <ETH_SetMACConfig+0x5c>
 80067ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067ce:	e000      	b.n	80067d2 <ETH_SetMACConfig+0x5e>
 80067d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80067d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	7c9b      	ldrb	r3, [r3, #18]
 80067d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80067da:	431a      	orrs	r2, r3
               macconf->Speed |
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80067e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80067e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	7f1b      	ldrb	r3, [r3, #28]
 80067ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80067ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	7f5b      	ldrb	r3, [r3, #29]
 80067f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80067f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	7f92      	ldrb	r2, [r2, #30]
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	d102      	bne.n	8006806 <ETH_SetMACConfig+0x92>
 8006800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006804:	e000      	b.n	8006808 <ETH_SetMACConfig+0x94>
 8006806:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006808:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	7fdb      	ldrb	r3, [r3, #31]
 800680e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006810:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006818:	2a00      	cmp	r2, #0
 800681a:	d102      	bne.n	8006822 <ETH_SetMACConfig+0xae>
 800681c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006820:	e000      	b.n	8006824 <ETH_SetMACConfig+0xb0>
 8006822:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006824:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800682a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006832:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006834:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <ETH_SetMACConfig+0x22c>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	430b      	orrs	r3, r1
 8006850:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800685e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006860:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006868:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800686a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006872:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006874:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800687c:	2a00      	cmp	r2, #0
 800687e:	d102      	bne.n	8006886 <ETH_SetMACConfig+0x112>
 8006880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006884:	e000      	b.n	8006888 <ETH_SetMACConfig+0x114>
 8006886:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006888:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <ETH_SetMACConfig+0x230>)
 800689a:	4013      	ands	r3, r2
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	4b3a      	ldr	r3, [pc, #232]	; (80069a8 <ETH_SetMACConfig+0x234>)
 80068be:	4013      	ands	r3, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80068d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d101      	bne.n	80068e6 <ETH_SetMACConfig+0x172>
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	e000      	b.n	80068e8 <ETH_SetMACConfig+0x174>
 80068e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80068e8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068fa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80068fe:	4013      	ands	r3, r2
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	430b      	orrs	r3, r1
 8006908:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006910:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006918:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f023 0103 	bic.w	r1, r3, #3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	430a      	orrs	r2, r1
 8006932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800693e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800695a:	2a00      	cmp	r2, #0
 800695c:	d101      	bne.n	8006962 <ETH_SetMACConfig+0x1ee>
 800695e:	2240      	movs	r2, #64	; 0x40
 8006960:	e000      	b.n	8006964 <ETH_SetMACConfig+0x1f0>
 8006962:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006964:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800696c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800696e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006976:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006984:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	430a      	orrs	r2, r1
 8006990:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	00048083 	.word	0x00048083
 80069a4:	c0f88000 	.word	0xc0f88000
 80069a8:	fffffef0 	.word	0xfffffef0

080069ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <ETH_SetDMAConfig+0xf8>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	6811      	ldr	r1, [r2, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	430b      	orrs	r3, r1
 80069ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069d2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	791b      	ldrb	r3, [r3, #4]
 80069d8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80069de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	7b1b      	ldrb	r3, [r3, #12]
 80069e4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <ETH_SetDMAConfig+0xfc>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	430b      	orrs	r3, r1
 8006a00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a04:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	7b5b      	ldrb	r3, [r3, #13]
 8006a0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006a20:	4b22      	ldr	r3, [pc, #136]	; (8006aac <ETH_SetDMAConfig+0x100>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	430b      	orrs	r3, r1
 8006a2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	7d1b      	ldrb	r3, [r3, #20]
 8006a3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	7f5b      	ldrb	r3, [r3, #29]
 8006a44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <ETH_SetDMAConfig+0x104>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	7f1b      	ldrb	r3, [r3, #28]
 8006a6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <ETH_SetDMAConfig+0x108>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a94:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	ffff87fd 	.word	0xffff87fd
 8006aa8:	ffff2ffe 	.word	0xffff2ffe
 8006aac:	fffec000 	.word	0xfffec000
 8006ab0:	ffc0efef 	.word	0xffc0efef
 8006ab4:	7fc0ffff 	.word	0x7fc0ffff

08006ab8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b0a4      	sub	sp, #144	; 0x90
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006af8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006b10:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006b14:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006b32:	2300      	movs	r3, #0
 8006b34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006b50:	2320      	movs	r3, #32
 8006b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006b62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b6c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006b74:	2302      	movs	r3, #2
 8006b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006b92:	2300      	movs	r3, #0
 8006b94:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fde6 	bl	8006774 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006bac:	2301      	movs	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006bc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006bd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006bde:	f107 0308 	add.w	r3, r7, #8
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fee1 	bl	80069ac <ETH_SetDMAConfig>
}
 8006bea:	bf00      	nop
 8006bec:	3790      	adds	r7, #144	; 0x90
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e01d      	b.n	8006c3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68d9      	ldr	r1, [r3, #12]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	440b      	add	r3, r1
 8006c10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	3206      	adds	r2, #6
 8006c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d9de      	bls.n	8006c00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	461a      	mov	r2, r3
 8006c52:	2303      	movs	r3, #3
 8006c54:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006c78:	bf00      	nop
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e023      	b.n	8006cda <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6919      	ldr	r1, [r3, #16]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	440b      	add	r3, r1
 8006ca2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	3212      	adds	r2, #18
 8006cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d9d8      	bls.n	8006c92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d06:	461a      	mov	r2, r3
 8006d08:	2303      	movs	r3, #3
 8006d0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
	...

08006d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b089      	sub	sp, #36	; 0x24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d4e:	4b89      	ldr	r3, [pc, #548]	; (8006f74 <HAL_GPIO_Init+0x234>)
 8006d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d52:	e194      	b.n	800707e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	2101      	movs	r1, #1
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	4013      	ands	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8186 	beq.w	8007078 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d005      	beq.n	8006d84 <HAL_GPIO_Init+0x44>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d130      	bne.n	8006de6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	2203      	movs	r2, #3
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	43db      	mvns	r3, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dba:	2201      	movs	r2, #1
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	f003 0201 	and.w	r2, r3, #1
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d017      	beq.n	8006e22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4013      	ands	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d123      	bne.n	8006e76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	08da      	lsrs	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3208      	adds	r2, #8
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	220f      	movs	r2, #15
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	08da      	lsrs	r2, r3, #3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3208      	adds	r2, #8
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	2203      	movs	r2, #3
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43db      	mvns	r3, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f003 0203 	and.w	r2, r3, #3
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80e0 	beq.w	8007078 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb8:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <HAL_GPIO_Init+0x238>)
 8006eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ebe:	4a2e      	ldr	r2, [pc, #184]	; (8006f78 <HAL_GPIO_Init+0x238>)
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ec8:	4b2b      	ldr	r3, [pc, #172]	; (8006f78 <HAL_GPIO_Init+0x238>)
 8006eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ed6:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <HAL_GPIO_Init+0x23c>)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	089b      	lsrs	r3, r3, #2
 8006edc:	3302      	adds	r3, #2
 8006ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	220f      	movs	r2, #15
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <HAL_GPIO_Init+0x240>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d052      	beq.n	8006fa8 <HAL_GPIO_Init+0x268>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	; (8006f84 <HAL_GPIO_Init+0x244>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <HAL_GPIO_Init+0x22e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <HAL_GPIO_Init+0x248>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d02b      	beq.n	8006f6a <HAL_GPIO_Init+0x22a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_GPIO_Init+0x24c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d025      	beq.n	8006f66 <HAL_GPIO_Init+0x226>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <HAL_GPIO_Init+0x250>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01f      	beq.n	8006f62 <HAL_GPIO_Init+0x222>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1b      	ldr	r2, [pc, #108]	; (8006f94 <HAL_GPIO_Init+0x254>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d019      	beq.n	8006f5e <HAL_GPIO_Init+0x21e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1a      	ldr	r2, [pc, #104]	; (8006f98 <HAL_GPIO_Init+0x258>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_GPIO_Init+0x21a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a19      	ldr	r2, [pc, #100]	; (8006f9c <HAL_GPIO_Init+0x25c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00d      	beq.n	8006f56 <HAL_GPIO_Init+0x216>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a18      	ldr	r2, [pc, #96]	; (8006fa0 <HAL_GPIO_Init+0x260>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <HAL_GPIO_Init+0x212>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <HAL_GPIO_Init+0x264>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <HAL_GPIO_Init+0x20e>
 8006f4a:	2309      	movs	r3, #9
 8006f4c:	e02d      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f4e:	230a      	movs	r3, #10
 8006f50:	e02b      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f52:	2308      	movs	r3, #8
 8006f54:	e029      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f56:	2307      	movs	r3, #7
 8006f58:	e027      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f5a:	2306      	movs	r3, #6
 8006f5c:	e025      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f5e:	2305      	movs	r3, #5
 8006f60:	e023      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f62:	2304      	movs	r3, #4
 8006f64:	e021      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f66:	2303      	movs	r3, #3
 8006f68:	e01f      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e01d      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e01b      	b.n	8006faa <HAL_GPIO_Init+0x26a>
 8006f72:	bf00      	nop
 8006f74:	58000080 	.word	0x58000080
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	58000400 	.word	0x58000400
 8006f80:	58020000 	.word	0x58020000
 8006f84:	58020400 	.word	0x58020400
 8006f88:	58020800 	.word	0x58020800
 8006f8c:	58020c00 	.word	0x58020c00
 8006f90:	58021000 	.word	0x58021000
 8006f94:	58021400 	.word	0x58021400
 8006f98:	58021800 	.word	0x58021800
 8006f9c:	58021c00 	.word	0x58021c00
 8006fa0:	58022000 	.word	0x58022000
 8006fa4:	58022400 	.word	0x58022400
 8006fa8:	2300      	movs	r3, #0
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	f002 0203 	and.w	r2, r2, #3
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	4093      	lsls	r3, r2
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fba:	4938      	ldr	r1, [pc, #224]	; (800709c <HAL_GPIO_Init+0x35c>)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	089b      	lsrs	r3, r3, #2
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	43db      	mvns	r3, r3
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	4013      	ands	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800701c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	43db      	mvns	r3, r3
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4013      	ands	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	43db      	mvns	r3, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4013      	ands	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3301      	adds	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	f47f ae63 	bne.w	8006d54 <HAL_GPIO_Init+0x14>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	3724      	adds	r7, #36	; 0x24
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	58000400 	.word	0x58000400

080070a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
 80070bc:	e001      	b.n	80070c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	807b      	strh	r3, [r7, #2]
 80070dc:	4613      	mov	r3, r2
 80070de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070e0:	787b      	ldrb	r3, [r7, #1]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80070ec:	e003      	b.n	80070f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80070ee:	887b      	ldrh	r3, [r7, #2]
 80070f0:	041a      	lsls	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	619a      	str	r2, [r3, #24]
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007114:	887a      	ldrh	r2, [r7, #2]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4013      	ands	r3, r2
 800711a:	041a      	lsls	r2, r3, #16
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	43d9      	mvns	r1, r3
 8007120:	887b      	ldrh	r3, [r7, #2]
 8007122:	400b      	ands	r3, r1
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	619a      	str	r2, [r3, #24]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007140:	4a08      	ldr	r2, [pc, #32]	; (8007164 <HAL_HSEM_FastTake+0x2c>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3320      	adds	r3, #32
 8007146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714a:	4a07      	ldr	r2, [pc, #28]	; (8007168 <HAL_HSEM_FastTake+0x30>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d101      	bne.n	8007154 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	58026400 	.word	0x58026400
 8007168:	80000300 	.word	0x80000300

0800716c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007176:	4906      	ldr	r1, [pc, #24]	; (8007190 <HAL_HSEM_Release+0x24>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	58026400 	.word	0x58026400

08007194 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007196:	b08f      	sub	sp, #60	; 0x3c
 8007198:	af0a      	add	r7, sp, #40	; 0x28
 800719a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e116      	b.n	80073d4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fc fc81 	bl	8003ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f005 f977 	bl	800c4d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	687e      	ldr	r6, [r7, #4]
 80071f2:	466d      	mov	r5, sp
 80071f4:	f106 0410 	add.w	r4, r6, #16
 80071f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007204:	e885 0003 	stmia.w	r5, {r0, r1}
 8007208:	1d33      	adds	r3, r6, #4
 800720a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800720c:	6838      	ldr	r0, [r7, #0]
 800720e:	f005 f8f5 	bl	800c3fc <USB_CoreInit>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e0d7      	b.n	80073d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f005 f965 	bl	800c4fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	e04a      	b.n	80072cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	333d      	adds	r3, #61	; 0x3d
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800724a:	7bfa      	ldrb	r2, [r7, #15]
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	333c      	adds	r3, #60	; 0x3c
 800725a:	7bfa      	ldrb	r2, [r7, #15]
 800725c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800725e:	7bfa      	ldrb	r2, [r7, #15]
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	b298      	uxth	r0, r3
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	3344      	adds	r3, #68	; 0x44
 8007272:	4602      	mov	r2, r0
 8007274:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3340      	adds	r3, #64	; 0x40
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3348      	adds	r3, #72	; 0x48
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800729e:	7bfa      	ldrb	r2, [r7, #15]
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	334c      	adds	r3, #76	; 0x4c
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80072b2:	7bfa      	ldrb	r2, [r7, #15]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	3354      	adds	r3, #84	; 0x54
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	3301      	adds	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
 80072cc:	7bfa      	ldrb	r2, [r7, #15]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d3af      	bcc.n	8007236 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
 80072da:	e044      	b.n	8007366 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800731e:	7bfa      	ldrb	r2, [r7, #15]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007334:	7bfa      	ldrb	r2, [r7, #15]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	3301      	adds	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	429a      	cmp	r2, r3
 800736e:	d3b5      	bcc.n	80072dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	687e      	ldr	r6, [r7, #4]
 8007378:	466d      	mov	r5, sp
 800737a:	f106 0410 	add.w	r4, r6, #16
 800737e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800738a:	e885 0003 	stmia.w	r5, {r0, r1}
 800738e:	1d33      	adds	r3, r6, #4
 8007390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	f005 f8fe 	bl	800c594 <USB_DevInit>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e014      	b.n	80073d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d102      	bne.n	80073c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f80a 	bl	80073dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f005 fabc 	bl	800c94a <USB_DevDisconnect>

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <HAL_PCDEx_ActivateLPM+0x44>)
 800740c:	4313      	orrs	r3, r2
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	10000003 	.word	0x10000003

08007424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	2b06      	cmp	r3, #6
 8007436:	d00a      	beq.n	800744e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007438:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d001      	beq.n	800744a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e040      	b.n	80074cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e03e      	b.n	80074cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007456:	491f      	ldr	r1, [pc, #124]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4313      	orrs	r3, r2
 800745c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800745e:	f7fc fcc5 	bl	8003dec <HAL_GetTick>
 8007462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007464:	e009      	b.n	800747a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007466:	f7fc fcc1 	bl	8003dec <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007474:	d901      	bls.n	800747a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e028      	b.n	80074cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800747a:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007486:	d1ee      	bne.n	8007466 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b1e      	cmp	r3, #30
 800748c:	d008      	beq.n	80074a0 <HAL_PWREx_ConfigSupply+0x7c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b2e      	cmp	r3, #46	; 0x2e
 8007492:	d005      	beq.n	80074a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b1d      	cmp	r3, #29
 8007498:	d002      	beq.n	80074a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b2d      	cmp	r3, #45	; 0x2d
 800749e:	d114      	bne.n	80074ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80074a0:	f7fc fca4 	bl	8003dec <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074a6:	e009      	b.n	80074bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074a8:	f7fc fca0 	bl	8003dec <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b6:	d901      	bls.n	80074bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e007      	b.n	80074cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d1ee      	bne.n	80074a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	58024800 	.word	0x58024800

080074d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4a04      	ldr	r2, [pc, #16]	; (80074f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80074e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074e6:	60d3      	str	r3, [r2, #12]
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	58024800 	.word	0x58024800

080074f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	; 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f000 bc1d 	b.w	8007d46 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8087 	beq.w	8007628 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800751a:	4b99      	ldr	r3, [pc, #612]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007524:	4b96      	ldr	r3, [pc, #600]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b10      	cmp	r3, #16
 800752e:	d007      	beq.n	8007540 <HAL_RCC_OscConfig+0x48>
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	2b18      	cmp	r3, #24
 8007534:	d110      	bne.n	8007558 <HAL_RCC_OscConfig+0x60>
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d10b      	bne.n	8007558 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007540:	4b8f      	ldr	r3, [pc, #572]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d06c      	beq.n	8007626 <HAL_RCC_OscConfig+0x12e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d168      	bne.n	8007626 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e3f6      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007560:	d106      	bne.n	8007570 <HAL_RCC_OscConfig+0x78>
 8007562:	4b87      	ldr	r3, [pc, #540]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a86      	ldr	r2, [pc, #536]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e02e      	b.n	80075ce <HAL_RCC_OscConfig+0xd6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10c      	bne.n	8007592 <HAL_RCC_OscConfig+0x9a>
 8007578:	4b81      	ldr	r3, [pc, #516]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a80      	ldr	r2, [pc, #512]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	4b7e      	ldr	r3, [pc, #504]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a7d      	ldr	r2, [pc, #500]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800758a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e01d      	b.n	80075ce <HAL_RCC_OscConfig+0xd6>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800759a:	d10c      	bne.n	80075b6 <HAL_RCC_OscConfig+0xbe>
 800759c:	4b78      	ldr	r3, [pc, #480]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a77      	ldr	r2, [pc, #476]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4b75      	ldr	r3, [pc, #468]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a74      	ldr	r2, [pc, #464]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e00b      	b.n	80075ce <HAL_RCC_OscConfig+0xd6>
 80075b6:	4b72      	ldr	r3, [pc, #456]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a71      	ldr	r2, [pc, #452]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4b6f      	ldr	r3, [pc, #444]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a6e      	ldr	r2, [pc, #440]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d013      	beq.n	80075fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d6:	f7fc fc09 	bl	8003dec <HAL_GetTick>
 80075da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075de:	f7fc fc05 	bl	8003dec <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b64      	cmp	r3, #100	; 0x64
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e3aa      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075f0:	4b63      	ldr	r3, [pc, #396]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0f0      	beq.n	80075de <HAL_RCC_OscConfig+0xe6>
 80075fc:	e014      	b.n	8007628 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fe:	f7fc fbf5 	bl	8003dec <HAL_GetTick>
 8007602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007604:	e008      	b.n	8007618 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007606:	f7fc fbf1 	bl	8003dec <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b64      	cmp	r3, #100	; 0x64
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e396      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007618:	4b59      	ldr	r3, [pc, #356]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f0      	bne.n	8007606 <HAL_RCC_OscConfig+0x10e>
 8007624:	e000      	b.n	8007628 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007626:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 80cb 	beq.w	80077cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007636:	4b52      	ldr	r3, [pc, #328]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800763e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007640:	4b4f      	ldr	r3, [pc, #316]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <HAL_RCC_OscConfig+0x164>
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2b18      	cmp	r3, #24
 8007650:	d156      	bne.n	8007700 <HAL_RCC_OscConfig+0x208>
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d151      	bne.n	8007700 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800765c:	4b48      	ldr	r3, [pc, #288]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_OscConfig+0x17c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e368      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007674:	4b42      	ldr	r3, [pc, #264]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 0219 	bic.w	r2, r3, #25
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	493f      	ldr	r1, [pc, #252]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007686:	f7fc fbb1 	bl	8003dec <HAL_GetTick>
 800768a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800768e:	f7fc fbad 	bl	8003dec <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e352      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076a0:	4b37      	ldr	r3, [pc, #220]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0f0      	beq.n	800768e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ac:	f7fc fbce 	bl	8003e4c <HAL_GetREVID>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d817      	bhi.n	80076ea <HAL_RCC_OscConfig+0x1f2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d108      	bne.n	80076d4 <HAL_RCC_OscConfig+0x1dc>
 80076c2:	4b2f      	ldr	r3, [pc, #188]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80076ca:	4a2d      	ldr	r2, [pc, #180]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076d2:	e07b      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d4:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	031b      	lsls	r3, r3, #12
 80076e2:	4927      	ldr	r1, [pc, #156]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e8:	e070      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ea:	4b25      	ldr	r3, [pc, #148]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	061b      	lsls	r3, r3, #24
 80076f8:	4921      	ldr	r1, [pc, #132]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076fe:	e065      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d048      	beq.n	800779a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007708:	4b1d      	ldr	r3, [pc, #116]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f023 0219 	bic.w	r2, r3, #25
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	491a      	ldr	r1, [pc, #104]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007716:	4313      	orrs	r3, r2
 8007718:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fc fb67 	bl	8003dec <HAL_GetTick>
 800771e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007722:	f7fc fb63 	bl	8003dec <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e308      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007734:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f0      	beq.n	8007722 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007740:	f7fc fb84 	bl	8003e4c <HAL_GetREVID>
 8007744:	4603      	mov	r3, r0
 8007746:	f241 0203 	movw	r2, #4099	; 0x1003
 800774a:	4293      	cmp	r3, r2
 800774c:	d81a      	bhi.n	8007784 <HAL_RCC_OscConfig+0x28c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d108      	bne.n	8007768 <HAL_RCC_OscConfig+0x270>
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800775e:	4a08      	ldr	r2, [pc, #32]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	6053      	str	r3, [r2, #4]
 8007766:	e031      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	031b      	lsls	r3, r3, #12
 8007776:	4902      	ldr	r1, [pc, #8]	; (8007780 <HAL_RCC_OscConfig+0x288>)
 8007778:	4313      	orrs	r3, r2
 800777a:	604b      	str	r3, [r1, #4]
 800777c:	e026      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
 800777e:	bf00      	nop
 8007780:	58024400 	.word	0x58024400
 8007784:	4b9a      	ldr	r3, [pc, #616]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	4997      	ldr	r1, [pc, #604]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007794:	4313      	orrs	r3, r2
 8007796:	604b      	str	r3, [r1, #4]
 8007798:	e018      	b.n	80077cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800779a:	4b95      	ldr	r3, [pc, #596]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a94      	ldr	r2, [pc, #592]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fc fb21 	bl	8003dec <HAL_GetTick>
 80077aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ae:	f7fc fb1d 	bl	8003dec <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e2c2      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077c0:	4b8b      	ldr	r3, [pc, #556]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f0      	bne.n	80077ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 80a9 	beq.w	800792c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077da:	4b85      	ldr	r3, [pc, #532]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077e4:	4b82      	ldr	r3, [pc, #520]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d007      	beq.n	8007800 <HAL_RCC_OscConfig+0x308>
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b18      	cmp	r3, #24
 80077f4:	d13a      	bne.n	800786c <HAL_RCC_OscConfig+0x374>
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d135      	bne.n	800786c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007800:	4b7b      	ldr	r3, [pc, #492]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_RCC_OscConfig+0x320>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d001      	beq.n	8007818 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e296      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007818:	f7fc fb18 	bl	8003e4c <HAL_GetREVID>
 800781c:	4603      	mov	r3, r0
 800781e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007822:	4293      	cmp	r3, r2
 8007824:	d817      	bhi.n	8007856 <HAL_RCC_OscConfig+0x35e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	2b20      	cmp	r3, #32
 800782c:	d108      	bne.n	8007840 <HAL_RCC_OscConfig+0x348>
 800782e:	4b70      	ldr	r3, [pc, #448]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007836:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800783c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800783e:	e075      	b.n	800792c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007840:	4b6b      	ldr	r3, [pc, #428]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	069b      	lsls	r3, r3, #26
 800784e:	4968      	ldr	r1, [pc, #416]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007850:	4313      	orrs	r3, r2
 8007852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007854:	e06a      	b.n	800792c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007856:	4b66      	ldr	r3, [pc, #408]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	061b      	lsls	r3, r3, #24
 8007864:	4962      	ldr	r1, [pc, #392]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007866:	4313      	orrs	r3, r2
 8007868:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800786a:	e05f      	b.n	800792c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d042      	beq.n	80078fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007874:	4b5e      	ldr	r3, [pc, #376]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a5d      	ldr	r2, [pc, #372]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 800787a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007880:	f7fc fab4 	bl	8003dec <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007888:	f7fc fab0 	bl	8003dec <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e255      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800789a:	4b55      	ldr	r3, [pc, #340]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078a6:	f7fc fad1 	bl	8003e4c <HAL_GetREVID>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d817      	bhi.n	80078e4 <HAL_RCC_OscConfig+0x3ec>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d108      	bne.n	80078ce <HAL_RCC_OscConfig+0x3d6>
 80078bc:	4b4c      	ldr	r3, [pc, #304]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078c4:	4a4a      	ldr	r2, [pc, #296]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ca:	6053      	str	r3, [r2, #4]
 80078cc:	e02e      	b.n	800792c <HAL_RCC_OscConfig+0x434>
 80078ce:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	069b      	lsls	r3, r3, #26
 80078dc:	4944      	ldr	r1, [pc, #272]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	604b      	str	r3, [r1, #4]
 80078e2:	e023      	b.n	800792c <HAL_RCC_OscConfig+0x434>
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	493f      	ldr	r1, [pc, #252]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60cb      	str	r3, [r1, #12]
 80078f8:	e018      	b.n	800792c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80078fa:	4b3d      	ldr	r3, [pc, #244]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3c      	ldr	r2, [pc, #240]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007906:	f7fc fa71 	bl	8003dec <HAL_GetTick>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800790c:	e008      	b.n	8007920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800790e:	f7fc fa6d 	bl	8003dec <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e212      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007920:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f0      	bne.n	800790e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d036      	beq.n	80079a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d019      	beq.n	8007974 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794c:	f7fc fa4e 	bl	8003dec <HAL_GetTick>
 8007950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007954:	f7fc fa4a 	bl	8003dec <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e1ef      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007966:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f0      	beq.n	8007954 <HAL_RCC_OscConfig+0x45c>
 8007972:	e018      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007974:	4b1e      	ldr	r3, [pc, #120]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 8007976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007978:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007980:	f7fc fa34 	bl	8003dec <HAL_GetTick>
 8007984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007988:	f7fc fa30 	bl	8003dec <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e1d5      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f0      	bne.n	8007988 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d039      	beq.n	8007a26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01c      	beq.n	80079f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079ba:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80079c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079c6:	f7fc fa11 	bl	8003dec <HAL_GetTick>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079ce:	f7fc fa0d 	bl	8003dec <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e1b2      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <HAL_RCC_OscConfig+0x4f8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0f0      	beq.n	80079ce <HAL_RCC_OscConfig+0x4d6>
 80079ec:	e01b      	b.n	8007a26 <HAL_RCC_OscConfig+0x52e>
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079f4:	4b9b      	ldr	r3, [pc, #620]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a9a      	ldr	r2, [pc, #616]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 80079fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a00:	f7fc f9f4 	bl	8003dec <HAL_GetTick>
 8007a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007a08:	f7fc f9f0 	bl	8003dec <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e195      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a1a:	4b92      	ldr	r3, [pc, #584]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8081 	beq.w	8007b36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a34:	4b8c      	ldr	r3, [pc, #560]	; (8007c68 <HAL_RCC_OscConfig+0x770>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a8b      	ldr	r2, [pc, #556]	; (8007c68 <HAL_RCC_OscConfig+0x770>)
 8007a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a40:	f7fc f9d4 	bl	8003dec <HAL_GetTick>
 8007a44:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a48:	f7fc f9d0 	bl	8003dec <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	; 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e175      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a5a:	4b83      	ldr	r3, [pc, #524]	; (8007c68 <HAL_RCC_OscConfig+0x770>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d106      	bne.n	8007a7c <HAL_RCC_OscConfig+0x584>
 8007a6e:	4b7d      	ldr	r3, [pc, #500]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a7c      	ldr	r2, [pc, #496]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7a:	e02d      	b.n	8007ad8 <HAL_RCC_OscConfig+0x5e0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <HAL_RCC_OscConfig+0x5a6>
 8007a84:	4b77      	ldr	r3, [pc, #476]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4a76      	ldr	r2, [pc, #472]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a90:	4b74      	ldr	r3, [pc, #464]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a94:	4a73      	ldr	r2, [pc, #460]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007a96:	f023 0304 	bic.w	r3, r3, #4
 8007a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9c:	e01c      	b.n	8007ad8 <HAL_RCC_OscConfig+0x5e0>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x5c8>
 8007aa6:	4b6f      	ldr	r3, [pc, #444]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	4a6e      	ldr	r2, [pc, #440]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab2:	4b6c      	ldr	r3, [pc, #432]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	4a6b      	ldr	r2, [pc, #428]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6713      	str	r3, [r2, #112]	; 0x70
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0x5e0>
 8007ac0:	4b68      	ldr	r3, [pc, #416]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac4:	4a67      	ldr	r2, [pc, #412]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	6713      	str	r3, [r2, #112]	; 0x70
 8007acc:	4b65      	ldr	r3, [pc, #404]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	4a64      	ldr	r2, [pc, #400]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ad2:	f023 0304 	bic.w	r3, r3, #4
 8007ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae0:	f7fc f984 	bl	8003dec <HAL_GetTick>
 8007ae4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae6:	e00a      	b.n	8007afe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae8:	f7fc f980 	bl	8003dec <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e123      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007afe:	4b59      	ldr	r3, [pc, #356]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ee      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x5f0>
 8007b0a:	e014      	b.n	8007b36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fc f96e 	bl	8003dec <HAL_GetTick>
 8007b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b12:	e00a      	b.n	8007b2a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b14:	f7fc f96a 	bl	8003dec <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e10d      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b2a:	4b4e      	ldr	r3, [pc, #312]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1ee      	bne.n	8007b14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8102 	beq.w	8007d44 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b40:	4b48      	ldr	r3, [pc, #288]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b48:	2b18      	cmp	r3, #24
 8007b4a:	f000 80bd 	beq.w	8007cc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	f040 809e 	bne.w	8007c94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b58:	4b42      	ldr	r3, [pc, #264]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a41      	ldr	r2, [pc, #260]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b64:	f7fc f942 	bl	8003dec <HAL_GetTick>
 8007b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fc f93e 	bl	8003dec <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e0e3      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b7e:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b8a:	4b36      	ldr	r3, [pc, #216]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b8e:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <HAL_RCC_OscConfig+0x774>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b9a:	0112      	lsls	r2, r2, #4
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	4931      	ldr	r1, [pc, #196]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	628b      	str	r3, [r1, #40]	; 0x28
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	025b      	lsls	r3, r3, #9
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	061b      	lsls	r3, r3, #24
 8007bd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bd4:	4923      	ldr	r1, [pc, #140]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007bda:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007be6:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bea:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <HAL_RCC_OscConfig+0x778>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007bf2:	00d2      	lsls	r2, r2, #3
 8007bf4:	491b      	ldr	r1, [pc, #108]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	f023 020c 	bic.w	r2, r3, #12
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	4917      	ldr	r1, [pc, #92]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c0c:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f023 0202 	bic.w	r2, r3, #2
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c18:	4912      	ldr	r1, [pc, #72]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c48:	f043 0301 	orr.w	r3, r3, #1
 8007c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <HAL_RCC_OscConfig+0x76c>)
 8007c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5a:	f7fc f8c7 	bl	8003dec <HAL_GetTick>
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c60:	e011      	b.n	8007c86 <HAL_RCC_OscConfig+0x78e>
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
 8007c68:	58024800 	.word	0x58024800
 8007c6c:	fffffc0c 	.word	0xfffffc0c
 8007c70:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c74:	f7fc f8ba 	bl	8003dec <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e05f      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c86:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0f0      	beq.n	8007c74 <HAL_RCC_OscConfig+0x77c>
 8007c92:	e057      	b.n	8007d44 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c94:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a2d      	ldr	r2, [pc, #180]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fc f8a4 	bl	8003dec <HAL_GetTick>
 8007ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca8:	f7fc f8a0 	bl	8003dec <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e045      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cba:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x7b0>
 8007cc6:	e03d      	b.n	8007d44 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cc8:	4b21      	ldr	r3, [pc, #132]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <HAL_RCC_OscConfig+0x858>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d031      	beq.n	8007d40 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f003 0203 	and.w	r2, r3, #3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d12a      	bne.n	8007d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d122      	bne.n	8007d40 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d11a      	bne.n	8007d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	0a5b      	lsrs	r3, r3, #9
 8007d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d111      	bne.n	8007d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d108      	bne.n	8007d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	0e1b      	lsrs	r3, r3, #24
 8007d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d001      	beq.n	8007d44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3730      	adds	r7, #48	; 0x30
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400

08007d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e19c      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d68:	4b8a      	ldr	r3, [pc, #552]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 030f 	and.w	r3, r3, #15
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d910      	bls.n	8007d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d76:	4b87      	ldr	r3, [pc, #540]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f023 020f 	bic.w	r2, r3, #15
 8007d7e:	4985      	ldr	r1, [pc, #532]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d86:	4b83      	ldr	r3, [pc, #524]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d001      	beq.n	8007d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e184      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	4b7b      	ldr	r3, [pc, #492]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d908      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007db4:	4b78      	ldr	r3, [pc, #480]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	4975      	ldr	r1, [pc, #468]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d010      	beq.n	8007df4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695a      	ldr	r2, [r3, #20]
 8007dd6:	4b70      	ldr	r3, [pc, #448]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d908      	bls.n	8007df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007de2:	4b6d      	ldr	r3, [pc, #436]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	496a      	ldr	r1, [pc, #424]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d010      	beq.n	8007e22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	4b64      	ldr	r3, [pc, #400]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d908      	bls.n	8007e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e10:	4b61      	ldr	r3, [pc, #388]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	495e      	ldr	r1, [pc, #376]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d010      	beq.n	8007e50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69da      	ldr	r2, [r3, #28]
 8007e32:	4b59      	ldr	r3, [pc, #356]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d908      	bls.n	8007e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e3e:	4b56      	ldr	r3, [pc, #344]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	4953      	ldr	r1, [pc, #332]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d010      	beq.n	8007e7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	4b4d      	ldr	r3, [pc, #308]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d908      	bls.n	8007e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e6c:	4b4a      	ldr	r3, [pc, #296]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	f023 020f 	bic.w	r2, r3, #15
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4947      	ldr	r1, [pc, #284]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d055      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e8a:	4b43      	ldr	r3, [pc, #268]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	4940      	ldr	r1, [pc, #256]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ea4:	4b3c      	ldr	r3, [pc, #240]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d121      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0f6      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d107      	bne.n	8007ecc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ebc:	4b36      	ldr	r3, [pc, #216]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d115      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0ea      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d107      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ed4:	4b30      	ldr	r3, [pc, #192]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e0de      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ee4:	4b2c      	ldr	r3, [pc, #176]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0d6      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ef4:	4b28      	ldr	r3, [pc, #160]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f023 0207 	bic.w	r2, r3, #7
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4925      	ldr	r1, [pc, #148]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f06:	f7fb ff71 	bl	8003dec <HAL_GetTick>
 8007f0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f0c:	e00a      	b.n	8007f24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f0e:	f7fb ff6d 	bl	8003dec <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e0be      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f24:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d1eb      	bne.n	8007f0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d208      	bcs.n	8007f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f52:	4b11      	ldr	r3, [pc, #68]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f023 020f 	bic.w	r2, r3, #15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	490e      	ldr	r1, [pc, #56]	; (8007f98 <HAL_RCC_ClockConfig+0x244>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d214      	bcs.n	8007f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f023 020f 	bic.w	r2, r3, #15
 8007f7a:	4906      	ldr	r1, [pc, #24]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f82:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_RCC_ClockConfig+0x240>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d005      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e086      	b.n	80080a2 <HAL_RCC_ClockConfig+0x34e>
 8007f94:	52002000 	.word	0x52002000
 8007f98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d208      	bcs.n	8007fca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fb8:	4b3c      	ldr	r3, [pc, #240]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	4939      	ldr	r1, [pc, #228]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d010      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695a      	ldr	r2, [r3, #20]
 8007fda:	4b34      	ldr	r3, [pc, #208]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d208      	bcs.n	8007ff8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fe6:	4b31      	ldr	r3, [pc, #196]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	492e      	ldr	r1, [pc, #184]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	d010      	beq.n	8008026 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	4b28      	ldr	r3, [pc, #160]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008010:	429a      	cmp	r2, r3
 8008012:	d208      	bcs.n	8008026 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008014:	4b25      	ldr	r3, [pc, #148]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	4922      	ldr	r1, [pc, #136]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008022:	4313      	orrs	r3, r2
 8008024:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d010      	beq.n	8008054 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69da      	ldr	r2, [r3, #28]
 8008036:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800803e:	429a      	cmp	r2, r3
 8008040:	d208      	bcs.n	8008054 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008042:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4917      	ldr	r1, [pc, #92]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008050:	4313      	orrs	r3, r2
 8008052:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008054:	f000 f834 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 8008058:	4602      	mov	r2, r0
 800805a:	4b14      	ldr	r3, [pc, #80]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	4912      	ldr	r1, [pc, #72]	; (80080b0 <HAL_RCC_ClockConfig+0x35c>)
 8008066:	5ccb      	ldrb	r3, [r1, r3]
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <HAL_RCC_ClockConfig+0x358>)
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <HAL_RCC_ClockConfig+0x35c>)
 800807c:	5cd3      	ldrb	r3, [r2, r3]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
 8008088:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <HAL_RCC_ClockConfig+0x360>)
 800808a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800808c:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <HAL_RCC_ClockConfig+0x364>)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <HAL_RCC_ClockConfig+0x368>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7fb fe5e 	bl	8003d58 <HAL_InitTick>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	58024400 	.word	0x58024400
 80080b0:	0800d4c8 	.word	0x0800d4c8
 80080b4:	24000008 	.word	0x24000008
 80080b8:	24000004 	.word	0x24000004
 80080bc:	2400001c 	.word	0x2400001c

080080c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080c6:	4bb3      	ldr	r3, [pc, #716]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ce:	2b18      	cmp	r3, #24
 80080d0:	f200 8155 	bhi.w	800837e <HAL_RCC_GetSysClockFreq+0x2be>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	08008141 	.word	0x08008141
 80080e0:	0800837f 	.word	0x0800837f
 80080e4:	0800837f 	.word	0x0800837f
 80080e8:	0800837f 	.word	0x0800837f
 80080ec:	0800837f 	.word	0x0800837f
 80080f0:	0800837f 	.word	0x0800837f
 80080f4:	0800837f 	.word	0x0800837f
 80080f8:	0800837f 	.word	0x0800837f
 80080fc:	08008167 	.word	0x08008167
 8008100:	0800837f 	.word	0x0800837f
 8008104:	0800837f 	.word	0x0800837f
 8008108:	0800837f 	.word	0x0800837f
 800810c:	0800837f 	.word	0x0800837f
 8008110:	0800837f 	.word	0x0800837f
 8008114:	0800837f 	.word	0x0800837f
 8008118:	0800837f 	.word	0x0800837f
 800811c:	0800816d 	.word	0x0800816d
 8008120:	0800837f 	.word	0x0800837f
 8008124:	0800837f 	.word	0x0800837f
 8008128:	0800837f 	.word	0x0800837f
 800812c:	0800837f 	.word	0x0800837f
 8008130:	0800837f 	.word	0x0800837f
 8008134:	0800837f 	.word	0x0800837f
 8008138:	0800837f 	.word	0x0800837f
 800813c:	08008173 	.word	0x08008173
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008140:	4b94      	ldr	r3, [pc, #592]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800814c:	4b91      	ldr	r3, [pc, #580]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	08db      	lsrs	r3, r3, #3
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	4a90      	ldr	r2, [pc, #576]	; (8008398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008158:	fa22 f303 	lsr.w	r3, r2, r3
 800815c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800815e:	e111      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008160:	4b8d      	ldr	r3, [pc, #564]	; (8008398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008162:	61bb      	str	r3, [r7, #24]
    break;
 8008164:	e10e      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008166:	4b8d      	ldr	r3, [pc, #564]	; (800839c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008168:	61bb      	str	r3, [r7, #24]
    break;
 800816a:	e10b      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800816c:	4b8c      	ldr	r3, [pc, #560]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800816e:	61bb      	str	r3, [r7, #24]
    break;
 8008170:	e108      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008172:	4b88      	ldr	r3, [pc, #544]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800817c:	4b85      	ldr	r3, [pc, #532]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	091b      	lsrs	r3, r3, #4
 8008182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008186:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008188:	4b82      	ldr	r3, [pc, #520]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008192:	4b80      	ldr	r3, [pc, #512]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008196:	08db      	lsrs	r3, r3, #3
 8008198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80e1 	beq.w	8008378 <HAL_RCC_GetSysClockFreq+0x2b8>
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	f000 8083 	beq.w	80082c4 <HAL_RCC_GetSysClockFreq+0x204>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	f200 80a1 	bhi.w	8008308 <HAL_RCC_GetSysClockFreq+0x248>
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x114>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d056      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80081d2:	e099      	b.n	8008308 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081d4:	4b6f      	ldr	r3, [pc, #444]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d02d      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e0:	4b6c      	ldr	r3, [pc, #432]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	08db      	lsrs	r3, r3, #3
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	4a6b      	ldr	r2, [pc, #428]	; (8008398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
 80081f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	ee07 3a90 	vmov	s15, r3
 80081f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820a:	4b62      	ldr	r3, [pc, #392]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821a:	ed97 6a02 	vldr	s12, [r7, #8]
 800821e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80083a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008236:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800823a:	e087      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eddf 6a58 	vldr	s13, [pc, #352]	; 80083a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b51      	ldr	r3, [pc, #324]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008262:	eddf 5a50 	vldr	s11, [pc, #320]	; 80083a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800827e:	e065      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80083ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008292:	4b40      	ldr	r3, [pc, #256]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80083a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082c2:	e043      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80083b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80082d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d6:	4b2f      	ldr	r3, [pc, #188]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80083a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008306:	e021      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eddf 6a26 	vldr	s13, [pc, #152]	; 80083ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831a:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832a:	ed97 6a02 	vldr	s12, [r7, #8]
 800832e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80083a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800834a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	0a5b      	lsrs	r3, r3, #9
 8008352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008356:	3301      	adds	r3, #1
 8008358:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008364:	edd7 6a07 	vldr	s13, [r7, #28]
 8008368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800836c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008370:	ee17 3a90 	vmov	r3, s15
 8008374:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008376:	e005      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	61bb      	str	r3, [r7, #24]
    break;
 800837c:	e002      	b.n	8008384 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008380:	61bb      	str	r3, [r7, #24]
    break;
 8008382:	bf00      	nop
  }

  return sysclockfreq;
 8008384:	69bb      	ldr	r3, [r7, #24]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3724      	adds	r7, #36	; 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	003d0900 	.word	0x003d0900
 80083a0:	007a1200 	.word	0x007a1200
 80083a4:	46000000 	.word	0x46000000
 80083a8:	4c742400 	.word	0x4c742400
 80083ac:	4a742400 	.word	0x4a742400
 80083b0:	4af42400 	.word	0x4af42400

080083b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80083ba:	f7ff fe81 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 80083be:	4602      	mov	r2, r0
 80083c0:	4b10      	ldr	r3, [pc, #64]	; (8008404 <HAL_RCC_GetHCLKFreq+0x50>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	0a1b      	lsrs	r3, r3, #8
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	490f      	ldr	r1, [pc, #60]	; (8008408 <HAL_RCC_GetHCLKFreq+0x54>)
 80083cc:	5ccb      	ldrb	r3, [r1, r3]
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	fa22 f303 	lsr.w	r3, r2, r3
 80083d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <HAL_RCC_GetHCLKFreq+0x50>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	4a09      	ldr	r2, [pc, #36]	; (8008408 <HAL_RCC_GetHCLKFreq+0x54>)
 80083e2:	5cd3      	ldrb	r3, [r2, r3]
 80083e4:	f003 031f 	and.w	r3, r3, #31
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	4a07      	ldr	r2, [pc, #28]	; (800840c <HAL_RCC_GetHCLKFreq+0x58>)
 80083f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083f2:	4a07      	ldr	r2, [pc, #28]	; (8008410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <HAL_RCC_GetHCLKFreq+0x58>)
 80083fa:	681b      	ldr	r3, [r3, #0]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	58024400 	.word	0x58024400
 8008408:	0800d4c8 	.word	0x0800d4c8
 800840c:	24000008 	.word	0x24000008
 8008410:	24000004 	.word	0x24000004

08008414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008418:	f7ff ffcc 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 800841c:	4602      	mov	r2, r0
 800841e:	4b06      	ldr	r3, [pc, #24]	; (8008438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	4904      	ldr	r1, [pc, #16]	; (800843c <HAL_RCC_GetPCLK1Freq+0x28>)
 800842a:	5ccb      	ldrb	r3, [r1, r3]
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd80      	pop	{r7, pc}
 8008438:	58024400 	.word	0x58024400
 800843c:	0800d4c8 	.word	0x0800d4c8

08008440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008444:	f7ff ffb6 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 8008448:	4602      	mov	r2, r0
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	4904      	ldr	r1, [pc, #16]	; (8008468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008456:	5ccb      	ldrb	r3, [r1, r3]
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	58024400 	.word	0x58024400
 8008468:	0800d4c8 	.word	0x0800d4c8

0800846c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008474:	2300      	movs	r3, #0
 8008476:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008478:	2300      	movs	r3, #0
 800847a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d03f      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008490:	d02a      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008496:	d824      	bhi.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800849c:	d018      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800849e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084a2:	d81e      	bhi.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80084a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ac:	d007      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80084ae:	e018      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b0:	4ba3      	ldr	r3, [pc, #652]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4aa2      	ldr	r2, [pc, #648]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084bc:	e015      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	2102      	movs	r1, #2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 f9d5 	bl	8009874 <RCCEx_PLL2_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084ce:	e00c      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3324      	adds	r3, #36	; 0x24
 80084d4:	2102      	movs	r1, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fa7e 	bl	80099d8 <RCCEx_PLL3_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80084e0:	e003      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      break;
 80084e6:	e000      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80084e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084f0:	4b93      	ldr	r3, [pc, #588]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fc:	4990      	ldr	r1, [pc, #576]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	650b      	str	r3, [r1, #80]	; 0x50
 8008502:	e001      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008510:	2b00      	cmp	r3, #0
 8008512:	d03d      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008518:	2b04      	cmp	r3, #4
 800851a:	d826      	bhi.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008539 	.word	0x08008539
 8008528:	08008547 	.word	0x08008547
 800852c:	08008559 	.word	0x08008559
 8008530:	08008571 	.word	0x08008571
 8008534:	08008571 	.word	0x08008571
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	4b81      	ldr	r3, [pc, #516]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4a80      	ldr	r2, [pc, #512]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008544:	e015      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3304      	adds	r3, #4
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f001 f991 	bl	8009874 <RCCEx_PLL2_Config>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008556:	e00c      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3324      	adds	r3, #36	; 0x24
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fa3a 	bl	80099d8 <RCCEx_PLL3_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008568:	e003      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]
      break;
 800856e:	e000      	b.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d109      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008578:	4b71      	ldr	r3, [pc, #452]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800857a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857c:	f023 0207 	bic.w	r2, r3, #7
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008584:	496e      	ldr	r1, [pc, #440]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008586:	4313      	orrs	r3, r2
 8008588:	650b      	str	r3, [r1, #80]	; 0x50
 800858a:	e001      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008598:	2b00      	cmp	r3, #0
 800859a:	d042      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a4:	d02b      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80085a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085aa:	d825      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80085ac:	2bc0      	cmp	r3, #192	; 0xc0
 80085ae:	d028      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80085b0:	2bc0      	cmp	r3, #192	; 0xc0
 80085b2:	d821      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d016      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80085b8:	2b80      	cmp	r3, #128	; 0x80
 80085ba:	d81d      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	d007      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80085c4:	e018      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c6:	4b5e      	ldr	r3, [pc, #376]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ca:	4a5d      	ldr	r2, [pc, #372]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085d2:	e017      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	2100      	movs	r1, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 f94a 	bl	8009874 <RCCEx_PLL2_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085e4:	e00e      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3324      	adds	r3, #36	; 0x24
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 f9f3 	bl	80099d8 <RCCEx_PLL3_Config>
 80085f2:	4603      	mov	r3, r0
 80085f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80085f6:	e005      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
      break;
 80085fc:	e002      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80085fe:	bf00      	nop
 8008600:	e000      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008604:	7dfb      	ldrb	r3, [r7, #23]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800860a:	4b4d      	ldr	r3, [pc, #308]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800860c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	494a      	ldr	r1, [pc, #296]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008618:	4313      	orrs	r3, r2
 800861a:	650b      	str	r3, [r1, #80]	; 0x50
 800861c:	e001      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862a:	2b00      	cmp	r3, #0
 800862c:	d049      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008638:	d030      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800863a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800863e:	d82a      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008644:	d02c      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800864a:	d824      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800864c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008650:	d018      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008656:	d81e      	bhi.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800865c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008660:	d007      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008662:	e018      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008664:	4b36      	ldr	r3, [pc, #216]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	4a35      	ldr	r2, [pc, #212]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800866a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008670:	e017      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3304      	adds	r3, #4
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f001 f8fb 	bl	8009874 <RCCEx_PLL2_Config>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008682:	e00e      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f9a4 	bl	80099d8 <RCCEx_PLL3_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008694:	e005      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	75fb      	strb	r3, [r7, #23]
      break;
 800869a:	e002      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800869c:	bf00      	nop
 800869e:	e000      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80086a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80086a8:	4b25      	ldr	r3, [pc, #148]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086b6:	4922      	ldr	r1, [pc, #136]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	658b      	str	r3, [r1, #88]	; 0x58
 80086bc:	e001      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d04b      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086d8:	d030      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80086da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086de:	d82a      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086e4:	d02e      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80086e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086ea:	d824      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f0:	d018      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80086f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f6:	d81e      	bhi.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80086fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008700:	d007      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008702:	e018      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a0d      	ldr	r2, [pc, #52]	; (8008740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008710:	e019      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f8ab 	bl	8009874 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008722:	e010      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3324      	adds	r3, #36	; 0x24
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f954 	bl	80099d8 <RCCEx_PLL3_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008734:	e007      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
      break;
 800873a:	e004      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800873c:	bf00      	nop
 800873e:	e002      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008740:	58024400 	.word	0x58024400
      break;
 8008744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800874c:	4b99      	ldr	r3, [pc, #612]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800875a:	4996      	ldr	r1, [pc, #600]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800875c:	4313      	orrs	r3, r2
 800875e:	658b      	str	r3, [r1, #88]	; 0x58
 8008760:	e001      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d032      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008776:	2b30      	cmp	r3, #48	; 0x30
 8008778:	d01c      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800877a:	2b30      	cmp	r3, #48	; 0x30
 800877c:	d817      	bhi.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800877e:	2b20      	cmp	r3, #32
 8008780:	d00c      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008782:	2b20      	cmp	r3, #32
 8008784:	d813      	bhi.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800878a:	2b10      	cmp	r3, #16
 800878c:	d10f      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878e:	4b89      	ldr	r3, [pc, #548]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	4a88      	ldr	r2, [pc, #544]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800879a:	e00e      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 f866 	bl	8009874 <RCCEx_PLL2_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80087ac:	e005      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
      break;
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80087b4:	bf00      	nop
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80087b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80087c0:	4b7c      	ldr	r3, [pc, #496]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087cc:	4979      	ldr	r1, [pc, #484]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087d2:	e001      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
 80087d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d047      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ec:	d030      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80087ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f2:	d82a      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80087f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087f8:	d02c      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80087fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087fe:	d824      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008804:	d018      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800880a:	d81e      	bhi.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008814:	d007      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008816:	e018      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008818:	4b66      	ldr	r3, [pc, #408]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a65      	ldr	r2, [pc, #404]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800881e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008824:	e017      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3304      	adds	r3, #4
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f001 f821 	bl	8009874 <RCCEx_PLL2_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008836:	e00e      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3324      	adds	r3, #36	; 0x24
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f8ca 	bl	80099d8 <RCCEx_PLL3_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008848:	e005      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
      break;
 800884e:	e002      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008850:	bf00      	nop
 8008852:	e000      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800885c:	4b55      	ldr	r3, [pc, #340]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008868:	4952      	ldr	r1, [pc, #328]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800886a:	4313      	orrs	r3, r2
 800886c:	650b      	str	r3, [r1, #80]	; 0x50
 800886e:	e001      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d049      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008888:	d02e      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800888a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800888e:	d828      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008894:	d02a      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800889a:	d822      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800889c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088a0:	d026      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80088a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088a6:	d81c      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80088a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ac:	d010      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80088ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b2:	d816      	bhi.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01d      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80088b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088bc:	d111      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3304      	adds	r3, #4
 80088c2:	2101      	movs	r1, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 ffd5 	bl	8009874 <RCCEx_PLL2_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80088ce:	e012      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3324      	adds	r3, #36	; 0x24
 80088d4:	2101      	movs	r1, #1
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f87e 	bl	80099d8 <RCCEx_PLL3_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80088e0:	e009      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
      break;
 80088e6:	e006      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088e8:	bf00      	nop
 80088ea:	e004      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088ec:	bf00      	nop
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80088f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088fc:	4b2d      	ldr	r3, [pc, #180]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008900:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	492a      	ldr	r1, [pc, #168]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800890a:	4313      	orrs	r3, r2
 800890c:	650b      	str	r3, [r1, #80]	; 0x50
 800890e:	e001      	b.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d04d      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800892a:	d02e      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800892c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008930:	d828      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008936:	d02a      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893c:	d822      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800893e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008942:	d026      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008944:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008948:	d81c      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800894a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800894e:	d010      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008954:	d816      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d01d      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800895a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800895e:	d111      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	2101      	movs	r1, #1
 8008966:	4618      	mov	r0, r3
 8008968:	f000 ff84 	bl	8009874 <RCCEx_PLL2_Config>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008970:	e012      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3324      	adds	r3, #36	; 0x24
 8008976:	2101      	movs	r1, #1
 8008978:	4618      	mov	r0, r3
 800897a:	f001 f82d 	bl	80099d8 <RCCEx_PLL3_Config>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008982:	e009      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	75fb      	strb	r3, [r7, #23]
      break;
 8008988:	e006      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800898a:	bf00      	nop
 800898c:	e004      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800898e:	bf00      	nop
 8008990:	e002      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008992:	bf00      	nop
 8008994:	e000      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10c      	bne.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089ac:	4901      	ldr	r1, [pc, #4]	; (80089b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	658b      	str	r3, [r1, #88]	; 0x58
 80089b2:	e003      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80089b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02f      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d0:	d00e      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d6:	d814      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d015      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80089dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e0:	d10f      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e2:	4baf      	ldr	r3, [pc, #700]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4aae      	ldr	r2, [pc, #696]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80089e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80089ee:	e00c      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2101      	movs	r1, #1
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 ff3c 	bl	8009874 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008a00:	e003      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
      break;
 8008a06:	e000      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a10:	4ba3      	ldr	r3, [pc, #652]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1c:	49a0      	ldr	r1, [pc, #640]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	650b      	str	r3, [r1, #80]	; 0x50
 8008a22:	e001      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d032      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d81b      	bhi.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008a3c:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a42:	bf00      	nop
 8008a44:	08008a7b 	.word	0x08008a7b
 8008a48:	08008a55 	.word	0x08008a55
 8008a4c:	08008a63 	.word	0x08008a63
 8008a50:	08008a7b 	.word	0x08008a7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a54:	4b92      	ldr	r3, [pc, #584]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	4a91      	ldr	r2, [pc, #580]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a60:	e00c      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3304      	adds	r3, #4
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 ff03 	bl	8009874 <RCCEx_PLL2_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008a72:	e003      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
      break;
 8008a78:	e000      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a82:	4b87      	ldr	r3, [pc, #540]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	f023 0203 	bic.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	4984      	ldr	r1, [pc, #528]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a94:	e001      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8086 	beq.w	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008aa8:	4b7e      	ldr	r3, [pc, #504]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a7d      	ldr	r2, [pc, #500]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ab4:	f7fb f99a 	bl	8003dec <HAL_GetTick>
 8008ab8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aba:	e009      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008abc:	f7fb f996 	bl	8003dec <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	; 0x64
 8008ac8:	d902      	bls.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	75fb      	strb	r3, [r7, #23]
        break;
 8008ace:	e005      	b.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ad0:	4b74      	ldr	r3, [pc, #464]	; (8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0ef      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d166      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ae2:	4b6f      	ldr	r3, [pc, #444]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008aec:	4053      	eors	r3, r2
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d013      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008af6:	4b6a      	ldr	r3, [pc, #424]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b00:	4b67      	ldr	r3, [pc, #412]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	4a66      	ldr	r2, [pc, #408]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b0c:	4b64      	ldr	r3, [pc, #400]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b10:	4a63      	ldr	r2, [pc, #396]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b18:	4a61      	ldr	r2, [pc, #388]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b28:	d115      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2a:	f7fb f95f 	bl	8003dec <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b30:	e00b      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f7fb f95b 	bl	8003dec <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d902      	bls.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	75fb      	strb	r3, [r7, #23]
            break;
 8008b48:	e005      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b4a:	4b55      	ldr	r3, [pc, #340]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0ed      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d126      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b6a:	d10d      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008b6c:	4b4c      	ldr	r3, [pc, #304]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b7a:	0919      	lsrs	r1, r3, #4
 8008b7c:	4b4a      	ldr	r3, [pc, #296]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008b7e:	400b      	ands	r3, r1
 8008b80:	4947      	ldr	r1, [pc, #284]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	610b      	str	r3, [r1, #16]
 8008b86:	e005      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008b88:	4b45      	ldr	r3, [pc, #276]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	4a44      	ldr	r2, [pc, #272]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b92:	6113      	str	r3, [r2, #16]
 8008b94:	4b42      	ldr	r3, [pc, #264]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ba2:	493f      	ldr	r1, [pc, #252]	; (8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	670b      	str	r3, [r1, #112]	; 0x70
 8008ba8:	e004      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	75bb      	strb	r3, [r7, #22]
 8008bae:	e001      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8085 	beq.w	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bc6:	2b28      	cmp	r3, #40	; 0x28
 8008bc8:	d866      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008bca:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008cad 	.word	0x08008cad
 8008bd4:	08008c99 	.word	0x08008c99
 8008bd8:	08008c99 	.word	0x08008c99
 8008bdc:	08008c99 	.word	0x08008c99
 8008be0:	08008c99 	.word	0x08008c99
 8008be4:	08008c99 	.word	0x08008c99
 8008be8:	08008c99 	.word	0x08008c99
 8008bec:	08008c99 	.word	0x08008c99
 8008bf0:	08008c75 	.word	0x08008c75
 8008bf4:	08008c99 	.word	0x08008c99
 8008bf8:	08008c99 	.word	0x08008c99
 8008bfc:	08008c99 	.word	0x08008c99
 8008c00:	08008c99 	.word	0x08008c99
 8008c04:	08008c99 	.word	0x08008c99
 8008c08:	08008c99 	.word	0x08008c99
 8008c0c:	08008c99 	.word	0x08008c99
 8008c10:	08008c87 	.word	0x08008c87
 8008c14:	08008c99 	.word	0x08008c99
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c99 	.word	0x08008c99
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008cad 	.word	0x08008cad
 8008c34:	08008c99 	.word	0x08008c99
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008c99 	.word	0x08008c99
 8008c44:	08008c99 	.word	0x08008c99
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008cad 	.word	0x08008cad
 8008c54:	08008c99 	.word	0x08008c99
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
 8008c64:	08008c99 	.word	0x08008c99
 8008c68:	08008c99 	.word	0x08008c99
 8008c6c:	08008c99 	.word	0x08008c99
 8008c70:	08008cad 	.word	0x08008cad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	2101      	movs	r1, #1
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fdfa 	bl	8009874 <RCCEx_PLL2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c84:	e013      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fea3 	bl	80099d8 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008c96:	e00a      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c9c:	e007      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008c9e:	bf00      	nop
 8008ca0:	58024400 	.word	0x58024400
 8008ca4:	58024800 	.word	0x58024800
 8008ca8:	00ffffcf 	.word	0x00ffffcf
      break;
 8008cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cb4:	4b96      	ldr	r3, [pc, #600]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cc0:	4993      	ldr	r1, [pc, #588]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8008cc6:	e001      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d038      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d821      	bhi.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d2b 	.word	0x08008d2b
 8008cec:	08008d01 	.word	0x08008d01
 8008cf0:	08008d13 	.word	0x08008d13
 8008cf4:	08008d2b 	.word	0x08008d2b
 8008cf8:	08008d2b 	.word	0x08008d2b
 8008cfc:	08008d2b 	.word	0x08008d2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3304      	adds	r3, #4
 8008d04:	2101      	movs	r1, #1
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fdb4 	bl	8009874 <RCCEx_PLL2_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d10:	e00c      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3324      	adds	r3, #36	; 0x24
 8008d16:	2101      	movs	r1, #1
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fe5d 	bl	80099d8 <RCCEx_PLL3_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008d22:	e003      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
      break;
 8008d28:	e000      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d32:	4b77      	ldr	r3, [pc, #476]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f023 0207 	bic.w	r2, r3, #7
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3e:	4974      	ldr	r1, [pc, #464]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	654b      	str	r3, [r1, #84]	; 0x54
 8008d44:	e001      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03a      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5c:	2b05      	cmp	r3, #5
 8008d5e:	d821      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008d60:	a201      	add	r2, pc, #4	; (adr r2, 8008d68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008dab 	.word	0x08008dab
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d93 	.word	0x08008d93
 8008d74:	08008dab 	.word	0x08008dab
 8008d78:	08008dab 	.word	0x08008dab
 8008d7c:	08008dab 	.word	0x08008dab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3304      	adds	r3, #4
 8008d84:	2101      	movs	r1, #1
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fd74 	bl	8009874 <RCCEx_PLL2_Config>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008d90:	e00c      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3324      	adds	r3, #36	; 0x24
 8008d96:	2101      	movs	r1, #1
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fe1d 	bl	80099d8 <RCCEx_PLL3_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008da2:	e003      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
      break;
 8008da8:	e000      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008db2:	4b57      	ldr	r3, [pc, #348]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db6:	f023 0207 	bic.w	r2, r3, #7
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc0:	4953      	ldr	r1, [pc, #332]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	658b      	str	r3, [r1, #88]	; 0x58
 8008dc6:	e001      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d04b      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de2:	d02e      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de8:	d828      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d02a      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df4:	d822      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dfa:	d026      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e00:	d81c      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e06:	d010      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0c:	d816      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01d      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e16:	d111      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fd28 	bl	8009874 <RCCEx_PLL2_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e28:	e012      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3324      	adds	r3, #36	; 0x24
 8008e2e:	2102      	movs	r1, #2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fdd1 	bl	80099d8 <RCCEx_PLL3_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008e3a:	e009      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e40:	e006      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e42:	bf00      	nop
 8008e44:	e004      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e46:	bf00      	nop
 8008e48:	e002      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e000      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e56:	4b2e      	ldr	r3, [pc, #184]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e64:	492a      	ldr	r1, [pc, #168]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	654b      	str	r3, [r1, #84]	; 0x54
 8008e6a:	e001      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d04d      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e86:	d02e      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008e88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e8c:	d828      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e92:	d02a      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e98:	d822      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e9e:	d026      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ea4:	d81c      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eaa:	d010      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb0:	d816      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01d      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eba:	d111      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fcd6 	bl	8009874 <RCCEx_PLL2_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008ecc:	e012      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3324      	adds	r3, #36	; 0x24
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fd7f 	bl	80099d8 <RCCEx_PLL3_Config>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008ede:	e009      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e006      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ee6:	bf00      	nop
 8008ee8:	e004      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008eea:	bf00      	nop
 8008eec:	e002      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f08:	4901      	ldr	r1, [pc, #4]	; (8008f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f0e:	e003      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d04b      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f2e:	d02e      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008f30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008f34:	d828      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3a:	d02a      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f40:	d822      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f46:	d026      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008f48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008f4c:	d81c      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f52:	d010      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f58:	d816      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d01d      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f62:	d111      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fc82 	bl	8009874 <RCCEx_PLL2_Config>
 8008f70:	4603      	mov	r3, r0
 8008f72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f74:	e012      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3324      	adds	r3, #36	; 0x24
 8008f7a:	2102      	movs	r1, #2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fd2b 	bl	80099d8 <RCCEx_PLL3_Config>
 8008f82:	4603      	mov	r3, r0
 8008f84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008f86:	e009      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8c:	e006      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f8e:	bf00      	nop
 8008f90:	e004      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f92:	bf00      	nop
 8008f94:	e002      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f96:	bf00      	nop
 8008f98:	e000      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008fa2:	4b9d      	ldr	r3, [pc, #628]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fb0:	4999      	ldr	r1, [pc, #612]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	658b      	str	r3, [r1, #88]	; 0x58
 8008fb6:	e001      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd2:	d10a      	bne.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3324      	adds	r3, #36	; 0x24
 8008fd8:	2102      	movs	r1, #2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fcfc 	bl	80099d8 <RCCEx_PLL3_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fea:	4b8b      	ldr	r3, [pc, #556]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff8:	4987      	ldr	r1, [pc, #540]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0310 	and.w	r3, r3, #16
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01a      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009014:	d10a      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3324      	adds	r3, #36	; 0x24
 800901a:	2102      	movs	r1, #2
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fcdb 	bl	80099d8 <RCCEx_PLL3_Config>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800902c:	4b7a      	ldr	r3, [pc, #488]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800902e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800903a:	4977      	ldr	r1, [pc, #476]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800903c:	4313      	orrs	r3, r2
 800903e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d034      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009056:	d01d      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800905c:	d817      	bhi.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009066:	d009      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009068:	e011      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3304      	adds	r3, #4
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fbff 	bl	8009874 <RCCEx_PLL2_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800907a:	e00c      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	2102      	movs	r1, #2
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fca8 	bl	80099d8 <RCCEx_PLL3_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800908c:	e003      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      break;
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800909c:	4b5e      	ldr	r3, [pc, #376]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090aa:	495b      	ldr	r1, [pc, #364]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	658b      	str	r3, [r1, #88]	; 0x58
 80090b0:	e001      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d033      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090cc:	d01c      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80090ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090d2:	d816      	bhi.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80090d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090d8:	d003      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80090da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090de:	d007      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80090e0:	e00f      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e2:	4b4d      	ldr	r3, [pc, #308]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	4a4c      	ldr	r2, [pc, #304]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80090e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80090ee:	e00c      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3324      	adds	r3, #36	; 0x24
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fc6e 	bl	80099d8 <RCCEx_PLL3_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	e000      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009110:	4b41      	ldr	r3, [pc, #260]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800911e:	493e      	ldr	r1, [pc, #248]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009120:	4313      	orrs	r3, r2
 8009122:	654b      	str	r3, [r1, #84]	; 0x54
 8009124:	e001      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d029      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800913e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009142:	d007      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009144:	e00f      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009146:	4b34      	ldr	r3, [pc, #208]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	4a33      	ldr	r2, [pc, #204]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800914c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009152:	e00b      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3304      	adds	r3, #4
 8009158:	2102      	movs	r1, #2
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fb8a 	bl	8009874 <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009164:	e002      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
      break;
 800916a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800916c:	7dfb      	ldrb	r3, [r7, #23]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d109      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009172:	4b29      	ldr	r3, [pc, #164]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917e:	4926      	ldr	r1, [pc, #152]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009180:	4313      	orrs	r3, r2
 8009182:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009184:	e001      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3324      	adds	r3, #36	; 0x24
 800919a:	2102      	movs	r1, #2
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fc1b 	bl	80099d8 <RCCEx_PLL3_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d033      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091c0:	d017      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80091c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091c6:	d811      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80091c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091cc:	d013      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80091ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d2:	d80b      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d010      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80091d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091dc:	d106      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091de:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a0d      	ldr	r2, [pc, #52]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80091ea:	e007      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	75fb      	strb	r3, [r7, #23]
      break;
 80091f0:	e004      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80091fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009202:	4b05      	ldr	r3, [pc, #20]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920e:	4902      	ldr	r1, [pc, #8]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009210:	4313      	orrs	r3, r2
 8009212:	654b      	str	r3, [r1, #84]	; 0x54
 8009214:	e004      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800922c:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800922e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	492e      	ldr	r1, [pc, #184]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800923a:	4313      	orrs	r3, r2
 800923c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800924a:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009258:	4926      	ldr	r1, [pc, #152]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800925a:	4313      	orrs	r3, r2
 800925c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d008      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800926a:	4b22      	ldr	r3, [pc, #136]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800926c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009276:	491f      	ldr	r1, [pc, #124]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009278:	4313      	orrs	r3, r2
 800927a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009288:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800928e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009292:	6113      	str	r3, [r2, #16]
 8009294:	4b17      	ldr	r3, [pc, #92]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800929e:	4915      	ldr	r1, [pc, #84]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	da08      	bge.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	490e      	ldr	r1, [pc, #56]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092ca:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	4906      	ldr	r1, [pc, #24]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80092de:	7dbb      	ldrb	r3, [r7, #22]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400

080092f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092fc:	f7ff f85a 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 8009300:	4602      	mov	r2, r0
 8009302:	4b06      	ldr	r3, [pc, #24]	; (800931c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	4904      	ldr	r1, [pc, #16]	; (8009320 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800930e:	5ccb      	ldrb	r3, [r1, r3]
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	58024400 	.word	0x58024400
 8009320:	0800d4c8 	.word	0x0800d4c8

08009324 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	; 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800932c:	4ba1      	ldr	r3, [pc, #644]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009336:	4b9f      	ldr	r3, [pc, #636]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	0b1b      	lsrs	r3, r3, #12
 800933c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009340:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009342:	4b9c      	ldr	r3, [pc, #624]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	091b      	lsrs	r3, r3, #4
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800934e:	4b99      	ldr	r3, [pc, #612]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	08db      	lsrs	r3, r3, #3
 8009354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	fb02 f303 	mul.w	r3, r2, r3
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8111 	beq.w	8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	2b02      	cmp	r3, #2
 8009376:	f000 8083 	beq.w	8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b02      	cmp	r3, #2
 800937e:	f200 80a1 	bhi.w	80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d056      	beq.n	800943c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800938e:	e099      	b.n	80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009390:	4b88      	ldr	r3, [pc, #544]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02d      	beq.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800939c:	4b85      	ldr	r3, [pc, #532]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	08db      	lsrs	r3, r3, #3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	4a84      	ldr	r2, [pc, #528]	; (80095b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	ee07 3a90 	vmov	s15, r3
 80093b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b7b      	ldr	r3, [pc, #492]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093f6:	e087      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b6a      	ldr	r3, [pc, #424]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800943a:	e065      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b59      	ldr	r3, [pc, #356]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800947e:	e043      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b48      	ldr	r3, [pc, #288]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094c2:	e021      	b.n	8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d6:	4b37      	ldr	r3, [pc, #220]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009506:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009508:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	0a5b      	lsrs	r3, r3, #9
 800950e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800951e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009522:	edd7 6a07 	vldr	s13, [r7, #28]
 8009526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800952e:	ee17 2a90 	vmov	r2, s15
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009536:	4b1f      	ldr	r3, [pc, #124]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800954c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009550:	edd7 6a07 	vldr	s13, [r7, #28]
 8009554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955c:	ee17 2a90 	vmov	r2, s15
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009564:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	0e1b      	lsrs	r3, r3, #24
 800956a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800957a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800957e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958a:	ee17 2a90 	vmov	r2, s15
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009592:	e008      	b.n	80095a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	609a      	str	r2, [r3, #8]
}
 80095a6:	bf00      	nop
 80095a8:	3724      	adds	r7, #36	; 0x24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	58024400 	.word	0x58024400
 80095b8:	03d09000 	.word	0x03d09000
 80095bc:	46000000 	.word	0x46000000
 80095c0:	4c742400 	.word	0x4c742400
 80095c4:	4a742400 	.word	0x4a742400
 80095c8:	4af42400 	.word	0x4af42400

080095cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b089      	sub	sp, #36	; 0x24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095d4:	4ba1      	ldr	r3, [pc, #644]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80095de:	4b9f      	ldr	r3, [pc, #636]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e2:	0d1b      	lsrs	r3, r3, #20
 80095e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095ea:	4b9c      	ldr	r3, [pc, #624]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80095f6:	4b99      	ldr	r3, [pc, #612]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	fb02 f303 	mul.w	r3, r2, r3
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8111 	beq.w	800983c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b02      	cmp	r3, #2
 800961e:	f000 8083 	beq.w	8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b02      	cmp	r3, #2
 8009626:	f200 80a1 	bhi.w	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d056      	beq.n	80096e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009636:	e099      	b.n	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009638:	4b88      	ldr	r3, [pc, #544]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02d      	beq.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009644:	4b85      	ldr	r3, [pc, #532]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	08db      	lsrs	r3, r3, #3
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	4a84      	ldr	r2, [pc, #528]	; (8009860 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
 8009654:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	ee07 3a90 	vmov	s15, r3
 800965c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966e:	4b7b      	ldr	r3, [pc, #492]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009682:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800969e:	e087      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009868 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80096ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b2:	4b6a      	ldr	r3, [pc, #424]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ba:	ee07 3a90 	vmov	s15, r3
 80096be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096e2:	e065      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800986c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f6:	4b59      	ldr	r3, [pc, #356]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009706:	ed97 6a03 	vldr	s12, [r7, #12]
 800970a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800970e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009726:	e043      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009732:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973a:	4b48      	ldr	r3, [pc, #288]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974a:	ed97 6a03 	vldr	s12, [r7, #12]
 800974e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800975e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800976a:	e021      	b.n	80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	ee07 3a90 	vmov	s15, r3
 8009772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009776:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800986c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800977a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977e:	4b37      	ldr	r3, [pc, #220]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009792:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80097b0:	4b2a      	ldr	r3, [pc, #168]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b4:	0a5b      	lsrs	r3, r3, #9
 80097b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d6:	ee17 2a90 	vmov	r2, s15
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80097de:	4b1f      	ldr	r3, [pc, #124]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	0c1b      	lsrs	r3, r3, #16
 80097e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009804:	ee17 2a90 	vmov	r2, s15
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800980c:	4b13      	ldr	r3, [pc, #76]	; (800985c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009826:	edd7 6a07 	vldr	s13, [r7, #28]
 800982a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800982e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009832:	ee17 2a90 	vmov	r2, s15
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800983a:	e008      	b.n	800984e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	609a      	str	r2, [r3, #8]
}
 800984e:	bf00      	nop
 8009850:	3724      	adds	r7, #36	; 0x24
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	03d09000 	.word	0x03d09000
 8009864:	46000000 	.word	0x46000000
 8009868:	4c742400 	.word	0x4c742400
 800986c:	4a742400 	.word	0x4a742400
 8009870:	4af42400 	.word	0x4af42400

08009874 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009882:	4b53      	ldr	r3, [pc, #332]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d101      	bne.n	8009892 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e099      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009892:	4b4f      	ldr	r3, [pc, #316]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a4e      	ldr	r2, [pc, #312]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009898:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800989c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989e:	f7fa faa5 	bl	8003dec <HAL_GetTick>
 80098a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098a4:	e008      	b.n	80098b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098a6:	f7fa faa1 	bl	8003dec <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d901      	bls.n	80098b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e086      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098b8:	4b45      	ldr	r3, [pc, #276]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1f0      	bne.n	80098a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098c4:	4b42      	ldr	r3, [pc, #264]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	031b      	lsls	r3, r3, #12
 80098d2:	493f      	ldr	r1, [pc, #252]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	628b      	str	r3, [r1, #40]	; 0x28
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	3b01      	subs	r3, #1
 80098de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	025b      	lsls	r3, r3, #9
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	3b01      	subs	r3, #1
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009908:	4931      	ldr	r1, [pc, #196]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800990a:	4313      	orrs	r3, r2
 800990c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800990e:	4b30      	ldr	r3, [pc, #192]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	492d      	ldr	r1, [pc, #180]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800991c:	4313      	orrs	r3, r2
 800991e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009920:	4b2b      	ldr	r3, [pc, #172]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f023 0220 	bic.w	r2, r3, #32
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	4928      	ldr	r1, [pc, #160]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800992e:	4313      	orrs	r3, r2
 8009930:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009932:	4b27      	ldr	r3, [pc, #156]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	4a26      	ldr	r2, [pc, #152]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009938:	f023 0310 	bic.w	r3, r3, #16
 800993c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800993e:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <RCCEx_PLL2_Config+0x160>)
 8009944:	4013      	ands	r3, r2
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	69d2      	ldr	r2, [r2, #28]
 800994a:	00d2      	lsls	r2, r2, #3
 800994c:	4920      	ldr	r1, [pc, #128]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009952:	4b1f      	ldr	r3, [pc, #124]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009958:	f043 0310 	orr.w	r3, r3, #16
 800995c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009964:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800996a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800996e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009970:	e00f      	b.n	8009992 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d106      	bne.n	8009986 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800997a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997c:	4a14      	ldr	r2, [pc, #80]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800997e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009984:	e005      	b.n	8009992 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 800998c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009990:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a0e      	ldr	r2, [pc, #56]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 8009998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800999c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999e:	f7fa fa25 	bl	8003dec <HAL_GetTick>
 80099a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099a4:	e008      	b.n	80099b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099a6:	f7fa fa21 	bl	8003dec <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e006      	b.n	80099c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <RCCEx_PLL2_Config+0x15c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0f0      	beq.n	80099a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	58024400 	.word	0x58024400
 80099d4:	ffff0007 	.word	0xffff0007

080099d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099e6:	4b53      	ldr	r3, [pc, #332]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d101      	bne.n	80099f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e099      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099f6:	4b4f      	ldr	r3, [pc, #316]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a4e      	ldr	r2, [pc, #312]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a02:	f7fa f9f3 	bl	8003dec <HAL_GetTick>
 8009a06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a08:	e008      	b.n	8009a1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a0a:	f7fa f9ef 	bl	8003dec <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d901      	bls.n	8009a1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e086      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a1c:	4b45      	ldr	r3, [pc, #276]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f0      	bne.n	8009a0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a28:	4b42      	ldr	r3, [pc, #264]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	051b      	lsls	r3, r3, #20
 8009a36:	493f      	ldr	r1, [pc, #252]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	025b      	lsls	r3, r3, #9
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a6c:	4931      	ldr	r1, [pc, #196]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a72:	4b30      	ldr	r3, [pc, #192]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	492d      	ldr	r1, [pc, #180]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a84:	4b2b      	ldr	r3, [pc, #172]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	4928      	ldr	r1, [pc, #160]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <RCCEx_PLL3_Config+0x160>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	69d2      	ldr	r2, [r2, #28]
 8009aae:	00d2      	lsls	r2, r2, #3
 8009ab0:	4920      	ldr	r1, [pc, #128]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ab6:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	4a19      	ldr	r2, [pc, #100]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad4:	e00f      	b.n	8009af6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d106      	bne.n	8009aea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009adc:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ae8:	e005      	b.n	8009af6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009aea:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a11      	ldr	r2, [pc, #68]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009af6:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b02:	f7fa f973 	bl	8003dec <HAL_GetTick>
 8009b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b08:	e008      	b.n	8009b1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b0a:	f7fa f96f 	bl	8003dec <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d901      	bls.n	8009b1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0f0      	beq.n	8009b0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	58024400 	.word	0x58024400
 8009b38:	ffff0007 	.word	0xffff0007

08009b3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e0f1      	b.n	8009d32 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a78      	ldr	r2, [pc, #480]	; (8009d3c <HAL_SPI_Init+0x200>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00f      	beq.n	8009b7e <HAL_SPI_Init+0x42>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a77      	ldr	r2, [pc, #476]	; (8009d40 <HAL_SPI_Init+0x204>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00a      	beq.n	8009b7e <HAL_SPI_Init+0x42>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a75      	ldr	r2, [pc, #468]	; (8009d44 <HAL_SPI_Init+0x208>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d005      	beq.n	8009b7e <HAL_SPI_Init+0x42>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d901      	bls.n	8009b7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e0d9      	b.n	8009d32 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fba2 	bl	800a2c8 <SPI_GetPacketSize>
 8009b84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a6c      	ldr	r2, [pc, #432]	; (8009d3c <HAL_SPI_Init+0x200>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d00c      	beq.n	8009baa <HAL_SPI_Init+0x6e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a6a      	ldr	r2, [pc, #424]	; (8009d40 <HAL_SPI_Init+0x204>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d007      	beq.n	8009baa <HAL_SPI_Init+0x6e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a69      	ldr	r2, [pc, #420]	; (8009d44 <HAL_SPI_Init+0x208>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d002      	beq.n	8009baa <HAL_SPI_Init+0x6e>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d811      	bhi.n	8009bce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009bae:	4a63      	ldr	r2, [pc, #396]	; (8009d3c <HAL_SPI_Init+0x200>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d009      	beq.n	8009bc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a61      	ldr	r2, [pc, #388]	; (8009d40 <HAL_SPI_Init+0x204>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d004      	beq.n	8009bc8 <HAL_SPI_Init+0x8c>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a60      	ldr	r2, [pc, #384]	; (8009d44 <HAL_SPI_Init+0x208>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d104      	bne.n	8009bd2 <HAL_SPI_Init+0x96>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d901      	bls.n	8009bd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e0af      	b.n	8009d32 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7f9 fe08 	bl	80037fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0201 	bic.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009c0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c18:	d119      	bne.n	8009c4e <HAL_SPI_Init+0x112>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c22:	d103      	bne.n	8009c2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d008      	beq.n	8009c3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10c      	bne.n	8009c4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c3c:	d107      	bne.n	8009c4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69da      	ldr	r2, [r3, #28]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c56:	431a      	orrs	r2, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c60:	ea42 0103 	orr.w	r1, r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	431a      	orrs	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	431a      	orrs	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	431a      	orrs	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cae:	ea42 0103 	orr.w	r1, r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d113      	bne.n	8009cee <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cd8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40013000 	.word	0x40013000
 8009d40:	40003800 	.word	0x40003800
 8009d44:	40003c00 	.word	0x40003c00

08009d48 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	; 0x28
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	4613      	mov	r3, r2
 8009d56:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3320      	adds	r3, #32
 8009d5e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_SPI_Transmit+0x2a>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e1d7      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d7a:	f7fa f837 	bl	8003dec <HAL_GetTick>
 8009d7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d007      	beq.n	8009d9c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009d98:	7efb      	ldrb	r3, [r7, #27]
 8009d9a:	e1c2      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <HAL_SPI_Transmit+0x60>
 8009da2:	88fb      	ldrh	r3, [r7, #6]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d107      	bne.n	8009db8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009db4:	7efb      	ldrb	r3, [r7, #27]
 8009db6:	e1b4      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	88fa      	ldrh	r2, [r7, #6]
 8009dd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009e08:	d107      	bne.n	8009e1a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	4b96      	ldr	r3, [pc, #600]	; (800a07c <HAL_SPI_Transmit+0x334>)
 8009e22:	4013      	ands	r3, r2
 8009e24:	88f9      	ldrh	r1, [r7, #6]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	6812      	ldr	r2, [r2, #0]
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f042 0201 	orr.w	r2, r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e46:	d107      	bne.n	8009e58 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b0f      	cmp	r3, #15
 8009e5e:	d947      	bls.n	8009ef0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e60:	e03f      	b.n	8009ee2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d114      	bne.n	8009e9a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e80:	1d1a      	adds	r2, r3, #4
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009e98:	e023      	b.n	8009ee2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e9a:	f7f9 ffa7 	bl	8003dec <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d803      	bhi.n	8009eb2 <HAL_SPI_Transmit+0x16a>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d102      	bne.n	8009eb8 <HAL_SPI_Transmit+0x170>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d114      	bne.n	8009ee2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f937 	bl	800a12c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e11f      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1b9      	bne.n	8009e62 <HAL_SPI_Transmit+0x11a>
 8009eee:	e0f2      	b.n	800a0d6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	2b07      	cmp	r3, #7
 8009ef6:	f240 80e7 	bls.w	800a0c8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009efa:	e05d      	b.n	8009fb8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d132      	bne.n	8009f70 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d918      	bls.n	8009f48 <HAL_SPI_Transmit+0x200>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d014      	beq.n	8009f48 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6812      	ldr	r2, [r2, #0]
 8009f28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f2e:	1d1a      	adds	r2, r3, #4
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	3b02      	subs	r3, #2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f46:	e037      	b.n	8009fb8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4c:	881a      	ldrh	r2, [r3, #0]
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f56:	1c9a      	adds	r2, r3, #2
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f6e:	e023      	b.n	8009fb8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f70:	f7f9 ff3c 	bl	8003dec <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d803      	bhi.n	8009f88 <HAL_SPI_Transmit+0x240>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f86:	d102      	bne.n	8009f8e <HAL_SPI_Transmit+0x246>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d114      	bne.n	8009fb8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 f8cc 	bl	800a12c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e0b4      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d19b      	bne.n	8009efc <HAL_SPI_Transmit+0x1b4>
 8009fc4:	e087      	b.n	800a0d6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d155      	bne.n	800a080 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2b03      	cmp	r3, #3
 8009fde:	d918      	bls.n	800a012 <HAL_SPI_Transmit+0x2ca>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe4:	2b40      	cmp	r3, #64	; 0x40
 8009fe6:	d914      	bls.n	800a012 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff8:	1d1a      	adds	r2, r3, #4
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a004:	b29b      	uxth	r3, r3
 800a006:	3b04      	subs	r3, #4
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a010:	e05a      	b.n	800a0c8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d917      	bls.n	800a04e <HAL_SPI_Transmit+0x306>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a022:	2b00      	cmp	r3, #0
 800a024:	d013      	beq.n	800a04e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02a:	881a      	ldrh	r2, [r3, #0]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a034:	1c9a      	adds	r2, r3, #2
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b02      	subs	r3, #2
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a04c:	e03c      	b.n	800a0c8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3320      	adds	r3, #32
 800a058:	7812      	ldrb	r2, [r2, #0]
 800a05a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	3b01      	subs	r3, #1
 800a070:	b29a      	uxth	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a078:	e026      	b.n	800a0c8 <HAL_SPI_Transmit+0x380>
 800a07a:	bf00      	nop
 800a07c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a080:	f7f9 feb4 	bl	8003dec <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d803      	bhi.n	800a098 <HAL_SPI_Transmit+0x350>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d102      	bne.n	800a09e <HAL_SPI_Transmit+0x356>
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d114      	bne.n	800a0c8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f844 	bl	800a12c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e02c      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f af78 	bne.w	8009fc6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2108      	movs	r1, #8
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f8c3 	bl	800a26c <SPI_WaitOnFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d007      	beq.n	800a0fc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0f2:	f043 0220 	orr.w	r2, r3, #32
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f815 	bl	800a12c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e000      	b.n	800a122 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a120:	7efb      	ldrb	r3, [r7, #27]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop

0800a12c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699a      	ldr	r2, [r3, #24]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0208 	orr.w	r2, r2, #8
 800a14a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f042 0210 	orr.w	r2, r2, #16
 800a15a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0201 	bic.w	r2, r2, #1
 800a16a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6919      	ldr	r1, [r3, #16]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	4b3c      	ldr	r3, [pc, #240]	; (800a268 <SPI_CloseTransfer+0x13c>)
 800a178:	400b      	ands	r3, r1
 800a17a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a18a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b04      	cmp	r3, #4
 800a196:	d014      	beq.n	800a1c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f042 0220 	orr.w	r2, r2, #32
 800a1c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d014      	beq.n	800a1f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00f      	beq.n	800a1f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1de:	f043 0204 	orr.w	r2, r3, #4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00f      	beq.n	800a222 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a208:	f043 0201 	orr.w	r2, r3, #1
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a220:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00f      	beq.n	800a24c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a232:	f043 0208 	orr.w	r2, r3, #8
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a24a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	fffffc90 	.word	0xfffffc90

0800a26c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	4613      	mov	r3, r2
 800a27a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a27c:	e010      	b.n	800a2a0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a27e:	f7f9 fdb5 	bl	8003dec <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d803      	bhi.n	800a296 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a294:	d102      	bne.n	800a29c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e00f      	b.n	800a2c0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695a      	ldr	r2, [r3, #20]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	bf0c      	ite	eq
 800a2b0:	2301      	moveq	r3, #1
 800a2b2:	2300      	movne	r3, #0
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d0df      	beq.n	800a27e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d4:	095b      	lsrs	r3, r3, #5
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	3307      	adds	r3, #7
 800a2e6:	08db      	lsrs	r3, r3, #3
 800a2e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	fb02 f303 	mul.w	r3, r2, r3
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e049      	b.n	800a3a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7f9 fad5 	bl	80038d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2202      	movs	r2, #2
 800a32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3304      	adds	r3, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	4610      	mov	r0, r2
 800a33e:	f000 fa23 	bl	800a788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d001      	beq.n	800a3c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e054      	b.n	800a46e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a26      	ldr	r2, [pc, #152]	; (800a47c <HAL_TIM_Base_Start_IT+0xd0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d022      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ee:	d01d      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a22      	ldr	r2, [pc, #136]	; (800a480 <HAL_TIM_Base_Start_IT+0xd4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d018      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a21      	ldr	r2, [pc, #132]	; (800a484 <HAL_TIM_Base_Start_IT+0xd8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d013      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1f      	ldr	r2, [pc, #124]	; (800a488 <HAL_TIM_Base_Start_IT+0xdc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d00e      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <HAL_TIM_Base_Start_IT+0xe0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d009      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1c      	ldr	r2, [pc, #112]	; (800a490 <HAL_TIM_Base_Start_IT+0xe4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d004      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x80>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1b      	ldr	r2, [pc, #108]	; (800a494 <HAL_TIM_Base_Start_IT+0xe8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d115      	bne.n	800a458 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	4b19      	ldr	r3, [pc, #100]	; (800a498 <HAL_TIM_Base_Start_IT+0xec>)
 800a434:	4013      	ands	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b06      	cmp	r3, #6
 800a43c:	d015      	beq.n	800a46a <HAL_TIM_Base_Start_IT+0xbe>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a444:	d011      	beq.n	800a46a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0201 	orr.w	r2, r2, #1
 800a454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a456:	e008      	b.n	800a46a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f042 0201 	orr.w	r2, r2, #1
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	e000      	b.n	800a46c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40010000 	.word	0x40010000
 800a480:	40000400 	.word	0x40000400
 800a484:	40000800 	.word	0x40000800
 800a488:	40000c00 	.word	0x40000c00
 800a48c:	40010400 	.word	0x40010400
 800a490:	40001800 	.word	0x40001800
 800a494:	40014000 	.word	0x40014000
 800a498:	00010007 	.word	0x00010007

0800a49c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68da      	ldr	r2, [r3, #12]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0201 	bic.w	r2, r2, #1
 800a4b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6a1a      	ldr	r2, [r3, #32]
 800a4ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800a4be:	4013      	ands	r3, r2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10f      	bne.n	800a4e4 <HAL_TIM_Base_Stop_IT+0x48>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6a1a      	ldr	r2, [r3, #32]
 800a4ca:	f240 4344 	movw	r3, #1092	; 0x444
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d107      	bne.n	800a4e4 <HAL_TIM_Base_Stop_IT+0x48>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f022 0201 	bic.w	r2, r2, #1
 800a4e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d122      	bne.n	800a556 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d11b      	bne.n	800a556 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f06f 0202 	mvn.w	r2, #2
 800a526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f905 	bl	800a74c <HAL_TIM_IC_CaptureCallback>
 800a542:	e005      	b.n	800a550 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f8f7 	bl	800a738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f908 	bl	800a760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b04      	cmp	r3, #4
 800a562:	d122      	bne.n	800a5aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b04      	cmp	r3, #4
 800a570:	d11b      	bne.n	800a5aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f06f 0204 	mvn.w	r2, #4
 800a57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f8db 	bl	800a74c <HAL_TIM_IC_CaptureCallback>
 800a596:	e005      	b.n	800a5a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f8cd 	bl	800a738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f8de 	bl	800a760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d122      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b08      	cmp	r3, #8
 800a5c4:	d11b      	bne.n	800a5fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f06f 0208 	mvn.w	r2, #8
 800a5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2204      	movs	r2, #4
 800a5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f8b1 	bl	800a74c <HAL_TIM_IC_CaptureCallback>
 800a5ea:	e005      	b.n	800a5f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f8a3 	bl	800a738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f8b4 	bl	800a760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	2b10      	cmp	r3, #16
 800a60a:	d122      	bne.n	800a652 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f003 0310 	and.w	r3, r3, #16
 800a616:	2b10      	cmp	r3, #16
 800a618:	d11b      	bne.n	800a652 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f06f 0210 	mvn.w	r2, #16
 800a622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2208      	movs	r2, #8
 800a628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f887 	bl	800a74c <HAL_TIM_IC_CaptureCallback>
 800a63e:	e005      	b.n	800a64c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f879 	bl	800a738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f88a 	bl	800a760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d10e      	bne.n	800a67e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d107      	bne.n	800a67e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f06f 0201 	mvn.w	r2, #1
 800a676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7f8 fb95 	bl	8002da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a688:	2b80      	cmp	r3, #128	; 0x80
 800a68a:	d10e      	bne.n	800a6aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a696:	2b80      	cmp	r3, #128	; 0x80
 800a698:	d107      	bne.n	800a6aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f9a1 	bl	800a9ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b8:	d10e      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c4:	2b80      	cmp	r3, #128	; 0x80
 800a6c6:	d107      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f994 	bl	800aa00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	d10e      	bne.n	800a704 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f0:	2b40      	cmp	r3, #64	; 0x40
 800a6f2:	d107      	bne.n	800a704 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f838 	bl	800a774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d10e      	bne.n	800a730 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d107      	bne.n	800a730 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0220 	mvn.w	r2, #32
 800a728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f954 	bl	800a9d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a40      	ldr	r2, [pc, #256]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d013      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a3d      	ldr	r2, [pc, #244]	; (800a8a0 <TIM_Base_SetConfig+0x118>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a3c      	ldr	r2, [pc, #240]	; (800a8a4 <TIM_Base_SetConfig+0x11c>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a3b      	ldr	r2, [pc, #236]	; (800a8a8 <TIM_Base_SetConfig+0x120>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a3a      	ldr	r2, [pc, #232]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d108      	bne.n	800a7da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2f      	ldr	r2, [pc, #188]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01f      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e8:	d01b      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2c      	ldr	r2, [pc, #176]	; (800a8a0 <TIM_Base_SetConfig+0x118>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d017      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a2b      	ldr	r2, [pc, #172]	; (800a8a4 <TIM_Base_SetConfig+0x11c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d013      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <TIM_Base_SetConfig+0x120>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00f      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a29      	ldr	r2, [pc, #164]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00b      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a28      	ldr	r2, [pc, #160]	; (800a8b0 <TIM_Base_SetConfig+0x128>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d007      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a27      	ldr	r2, [pc, #156]	; (800a8b4 <TIM_Base_SetConfig+0x12c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d003      	beq.n	800a822 <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a26      	ldr	r2, [pc, #152]	; (800a8b8 <TIM_Base_SetConfig+0x130>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d108      	bne.n	800a834 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a10      	ldr	r2, [pc, #64]	; (800a89c <TIM_Base_SetConfig+0x114>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d00f      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a12      	ldr	r2, [pc, #72]	; (800a8ac <TIM_Base_SetConfig+0x124>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00b      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a11      	ldr	r2, [pc, #68]	; (800a8b0 <TIM_Base_SetConfig+0x128>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d007      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <TIM_Base_SetConfig+0x12c>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_Base_SetConfig+0xf8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a0f      	ldr	r2, [pc, #60]	; (800a8b8 <TIM_Base_SetConfig+0x130>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d103      	bne.n	800a888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	691a      	ldr	r2, [r3, #16]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	615a      	str	r2, [r3, #20]
}
 800a88e:	bf00      	nop
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40000400 	.word	0x40000400
 800a8a4:	40000800 	.word	0x40000800
 800a8a8:	40000c00 	.word	0x40000c00
 800a8ac:	40010400 	.word	0x40010400
 800a8b0:	40014000 	.word	0x40014000
 800a8b4:	40014400 	.word	0x40014400
 800a8b8:	40014800 	.word	0x40014800

0800a8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e06d      	b.n	800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a30      	ldr	r2, [pc, #192]	; (800a9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d004      	beq.n	800a908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a2f      	ldr	r2, [pc, #188]	; (800a9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d108      	bne.n	800a91a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a90e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d022      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a946:	d01d      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a1d      	ldr	r2, [pc, #116]	; (800a9c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d018      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a1c      	ldr	r2, [pc, #112]	; (800a9c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d013      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a1a      	ldr	r2, [pc, #104]	; (800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00e      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a15      	ldr	r2, [pc, #84]	; (800a9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d009      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a16      	ldr	r2, [pc, #88]	; (800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d10c      	bne.n	800a99e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a98a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	4313      	orrs	r3, r2
 800a994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	40010000 	.word	0x40010000
 800a9c0:	40010400 	.word	0x40010400
 800a9c4:	40000400 	.word	0x40000400
 800a9c8:	40000800 	.word	0x40000800
 800a9cc:	40000c00 	.word	0x40000c00
 800a9d0:	40001800 	.word	0x40001800
 800a9d4:	40014000 	.word	0x40014000

0800a9d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e042      	b.n	800aaac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d106      	bne.n	800aa3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7f8 ff73 	bl	8003924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2224      	movs	r2, #36	; 0x24
 800aa42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f022 0201 	bic.w	r2, r2, #1
 800aa54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fbea 	bl	800b230 <UART_SetConfig>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e022      	b.n	800aaac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f946 	bl	800bd00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0201 	orr.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 f9cd 	bl	800be44 <UART_CheckIdleState>
 800aaaa:	4603      	mov	r3, r0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b0ba      	sub	sp, #232	; 0xe8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aade:	f640 030f 	movw	r3, #2063	; 0x80f
 800aae2:	4013      	ands	r3, r2
 800aae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d11b      	bne.n	800ab28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aaf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf4:	f003 0320 	and.w	r3, r3, #32
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d015      	beq.n	800ab28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aafc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d105      	bne.n	800ab14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d009      	beq.n	800ab28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 835a 	beq.w	800b1d2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
      }
      return;
 800ab26:	e354      	b.n	800b1d2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 811f 	beq.w	800ad70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab36:	4b8b      	ldr	r3, [pc, #556]	; (800ad64 <HAL_UART_IRQHandler+0x2b0>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab42:	4b89      	ldr	r3, [pc, #548]	; (800ad68 <HAL_UART_IRQHandler+0x2b4>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 8112 	beq.w	800ad70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d011      	beq.n	800ab7c <HAL_UART_IRQHandler+0xc8>
 800ab58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00b      	beq.n	800ab7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab72:	f043 0201 	orr.w	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d011      	beq.n	800abac <HAL_UART_IRQHandler+0xf8>
 800ab88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aba2:	f043 0204 	orr.w	r2, r3, #4
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d011      	beq.n	800abdc <HAL_UART_IRQHandler+0x128>
 800abb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2204      	movs	r2, #4
 800abca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abd2:	f043 0202 	orr.w	r2, r3, #2
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe0:	f003 0308 	and.w	r3, r3, #8
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d017      	beq.n	800ac18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abec:	f003 0320 	and.w	r3, r3, #32
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d105      	bne.n	800ac00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800abf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800abf8:	4b5a      	ldr	r3, [pc, #360]	; (800ad64 <HAL_UART_IRQHandler+0x2b0>)
 800abfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2208      	movs	r2, #8
 800ac06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac0e:	f043 0208 	orr.w	r2, r3, #8
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d012      	beq.n	800ac4a <HAL_UART_IRQHandler+0x196>
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00c      	beq.n	800ac4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac40:	f043 0220 	orr.w	r2, r3, #32
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 82c0 	beq.w	800b1d6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d013      	beq.n	800ac8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d007      	beq.n	800ac8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac9e:	2b40      	cmp	r3, #64	; 0x40
 800aca0:	d005      	beq.n	800acae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d04f      	beq.n	800ad4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f9dc 	bl	800c06c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbe:	2b40      	cmp	r3, #64	; 0x40
 800acc0:	d141      	bne.n	800ad46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acd0:	e853 3f00 	ldrex	r3, [r3]
 800acd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3308      	adds	r3, #8
 800acea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800acee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800acf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800acfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1d9      	bne.n	800acc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d013      	beq.n	800ad3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad1a:	4a14      	ldr	r2, [pc, #80]	; (800ad6c <HAL_UART_IRQHandler+0x2b8>)
 800ad1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fa f83c 	bl	8004da0 <HAL_DMA_Abort_IT>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d017      	beq.n	800ad5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad3c:	e00f      	b.n	800ad5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa60 	bl	800b204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad44:	e00b      	b.n	800ad5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fa5c 	bl	800b204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad4c:	e007      	b.n	800ad5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa58 	bl	800b204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ad5c:	e23b      	b.n	800b1d6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad5e:	bf00      	nop
    return;
 800ad60:	e239      	b.n	800b1d6 <HAL_UART_IRQHandler+0x722>
 800ad62:	bf00      	nop
 800ad64:	10000001 	.word	0x10000001
 800ad68:	04000120 	.word	0x04000120
 800ad6c:	0800c139 	.word	0x0800c139

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	f040 81ce 	bne.w	800b116 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad7e:	f003 0310 	and.w	r3, r3, #16
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 81c7 	beq.w	800b116 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad8c:	f003 0310 	and.w	r3, r3, #16
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 81c0 	beq.w	800b116 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	f040 813b 	bne.w	800b024 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a8b      	ldr	r2, [pc, #556]	; (800afe4 <HAL_UART_IRQHandler+0x530>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d059      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a89      	ldr	r2, [pc, #548]	; (800afe8 <HAL_UART_IRQHandler+0x534>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d053      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a87      	ldr	r2, [pc, #540]	; (800afec <HAL_UART_IRQHandler+0x538>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d04d      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a85      	ldr	r2, [pc, #532]	; (800aff0 <HAL_UART_IRQHandler+0x53c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d047      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a83      	ldr	r2, [pc, #524]	; (800aff4 <HAL_UART_IRQHandler+0x540>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d041      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a81      	ldr	r2, [pc, #516]	; (800aff8 <HAL_UART_IRQHandler+0x544>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d03b      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a7f      	ldr	r2, [pc, #508]	; (800affc <HAL_UART_IRQHandler+0x548>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d035      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a7d      	ldr	r2, [pc, #500]	; (800b000 <HAL_UART_IRQHandler+0x54c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d02f      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a7b      	ldr	r2, [pc, #492]	; (800b004 <HAL_UART_IRQHandler+0x550>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d029      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a79      	ldr	r2, [pc, #484]	; (800b008 <HAL_UART_IRQHandler+0x554>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d023      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a77      	ldr	r2, [pc, #476]	; (800b00c <HAL_UART_IRQHandler+0x558>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d01d      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a75      	ldr	r2, [pc, #468]	; (800b010 <HAL_UART_IRQHandler+0x55c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d017      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a73      	ldr	r2, [pc, #460]	; (800b014 <HAL_UART_IRQHandler+0x560>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d011      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a71      	ldr	r2, [pc, #452]	; (800b018 <HAL_UART_IRQHandler+0x564>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00b      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a6f      	ldr	r2, [pc, #444]	; (800b01c <HAL_UART_IRQHandler+0x568>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d005      	beq.n	800ae6e <HAL_UART_IRQHandler+0x3ba>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a6d      	ldr	r2, [pc, #436]	; (800b020 <HAL_UART_IRQHandler+0x56c>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d105      	bne.n	800ae7a <HAL_UART_IRQHandler+0x3c6>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	e004      	b.n	800ae84 <HAL_UART_IRQHandler+0x3d0>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 81a4 	beq.w	800b1da <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	f080 819c 	bcs.w	800b1da <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb6:	f000 8086 	beq.w	800afc6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aec6:	e853 3f00 	ldrex	r3, [r3]
 800aeca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aee8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aef0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aef4:	e841 2300 	strex	r3, r2, [r1]
 800aef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aefc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1da      	bne.n	800aeba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3308      	adds	r3, #8
 800af0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af0e:	e853 3f00 	ldrex	r3, [r3]
 800af12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af16:	f023 0301 	bic.w	r3, r3, #1
 800af1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3308      	adds	r3, #8
 800af24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af34:	e841 2300 	strex	r3, r2, [r1]
 800af38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e1      	bne.n	800af04 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3308      	adds	r3, #8
 800af46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800af50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af64:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e3      	bne.n	800af40 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2220      	movs	r2, #32
 800af7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8e:	e853 3f00 	ldrex	r3, [r3]
 800af92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af96:	f023 0310 	bic.w	r3, r3, #16
 800af9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afa8:	65bb      	str	r3, [r7, #88]	; 0x58
 800afaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e4      	bne.n	800af86 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7f9 fbcf 	bl	8004764 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	4619      	mov	r1, r3
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f91c 	bl	800b218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afe0:	e0fb      	b.n	800b1da <HAL_UART_IRQHandler+0x726>
 800afe2:	bf00      	nop
 800afe4:	40020010 	.word	0x40020010
 800afe8:	40020028 	.word	0x40020028
 800afec:	40020040 	.word	0x40020040
 800aff0:	40020058 	.word	0x40020058
 800aff4:	40020070 	.word	0x40020070
 800aff8:	40020088 	.word	0x40020088
 800affc:	400200a0 	.word	0x400200a0
 800b000:	400200b8 	.word	0x400200b8
 800b004:	40020410 	.word	0x40020410
 800b008:	40020428 	.word	0x40020428
 800b00c:	40020440 	.word	0x40020440
 800b010:	40020458 	.word	0x40020458
 800b014:	40020470 	.word	0x40020470
 800b018:	40020488 	.word	0x40020488
 800b01c:	400204a0 	.word	0x400204a0
 800b020:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b030:	b29b      	uxth	r3, r3
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 80cc 	beq.w	800b1de <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 80c7 	beq.w	800b1de <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	e853 3f00 	ldrex	r3, [r3]
 800b05c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b072:	647b      	str	r3, [r7, #68]	; 0x44
 800b074:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e4      	bne.n	800b050 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	623b      	str	r3, [r7, #32]
   return(result);
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	4b54      	ldr	r3, [pc, #336]	; (800b1ec <HAL_UART_IRQHandler+0x738>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0aa:	633a      	str	r2, [r7, #48]	; 0x30
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b2:	e841 2300 	strex	r3, r2, [r1]
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1e3      	bne.n	800b086 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2220      	movs	r2, #32
 800b0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0310 	bic.w	r3, r3, #16
 800b0e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b0f4:	61fb      	str	r3, [r7, #28]
 800b0f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	69b9      	ldr	r1, [r7, #24]
 800b0fa:	69fa      	ldr	r2, [r7, #28]
 800b0fc:	e841 2300 	strex	r3, r2, [r1]
 800b100:	617b      	str	r3, [r7, #20]
   return(result);
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1e4      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f882 	bl	800b218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b114:	e063      	b.n	800b1de <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b11a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00e      	beq.n	800b140 <HAL_UART_IRQHandler+0x68c>
 800b122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d008      	beq.n	800b140 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f83e 	bl	800c1ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b13e:	e051      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d014      	beq.n	800b176 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b154:	2b00      	cmp	r3, #0
 800b156:	d105      	bne.n	800b164 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b15c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d008      	beq.n	800b176 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d03a      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	4798      	blx	r3
    }
    return;
 800b174:	e035      	b.n	800b1e2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d009      	beq.n	800b196 <HAL_UART_IRQHandler+0x6e2>
 800b182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 ffe8 	bl	800c164 <UART_EndTransmit_IT>
    return;
 800b194:	e026      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d009      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x702>
 800b1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 f817 	bl	800c1e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1b4:	e016      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d010      	beq.n	800b1e4 <HAL_UART_IRQHandler+0x730>
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	da0c      	bge.n	800b1e4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 ffff 	bl	800c1ce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1d0:	e008      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1d2:	bf00      	nop
 800b1d4:	e006      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
    return;
 800b1d6:	bf00      	nop
 800b1d8:	e004      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1da:	bf00      	nop
 800b1dc:	e002      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
      return;
 800b1de:	bf00      	nop
 800b1e0:	e000      	b.n	800b1e4 <HAL_UART_IRQHandler+0x730>
    return;
 800b1e2:	bf00      	nop
  }
}
 800b1e4:	37e8      	adds	r7, #232	; 0xe8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	effffffe 	.word	0xeffffffe

0800b1f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b234:	b092      	sub	sp, #72	; 0x48
 800b236:	af00      	add	r7, sp, #0
 800b238:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	431a      	orrs	r2, r3
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	431a      	orrs	r2, r3
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	4313      	orrs	r3, r2
 800b256:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	4bbe      	ldr	r3, [pc, #760]	; (800b558 <UART_SetConfig+0x328>)
 800b260:	4013      	ands	r3, r2
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	6812      	ldr	r2, [r2, #0]
 800b266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b268:	430b      	orrs	r3, r1
 800b26a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	430a      	orrs	r2, r1
 800b280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4ab3      	ldr	r2, [pc, #716]	; (800b55c <UART_SetConfig+0x32c>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d004      	beq.n	800b29c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b298:	4313      	orrs	r3, r2
 800b29a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	4baf      	ldr	r3, [pc, #700]	; (800b560 <UART_SetConfig+0x330>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	6812      	ldr	r2, [r2, #0]
 800b2aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	f023 010f 	bic.w	r1, r3, #15
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4aa6      	ldr	r2, [pc, #664]	; (800b564 <UART_SetConfig+0x334>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d177      	bne.n	800b3c0 <UART_SetConfig+0x190>
 800b2d0:	4ba5      	ldr	r3, [pc, #660]	; (800b568 <UART_SetConfig+0x338>)
 800b2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2d8:	2b28      	cmp	r3, #40	; 0x28
 800b2da:	d86d      	bhi.n	800b3b8 <UART_SetConfig+0x188>
 800b2dc:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <UART_SetConfig+0xb4>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b389 	.word	0x0800b389
 800b2e8:	0800b3b9 	.word	0x0800b3b9
 800b2ec:	0800b3b9 	.word	0x0800b3b9
 800b2f0:	0800b3b9 	.word	0x0800b3b9
 800b2f4:	0800b3b9 	.word	0x0800b3b9
 800b2f8:	0800b3b9 	.word	0x0800b3b9
 800b2fc:	0800b3b9 	.word	0x0800b3b9
 800b300:	0800b3b9 	.word	0x0800b3b9
 800b304:	0800b391 	.word	0x0800b391
 800b308:	0800b3b9 	.word	0x0800b3b9
 800b30c:	0800b3b9 	.word	0x0800b3b9
 800b310:	0800b3b9 	.word	0x0800b3b9
 800b314:	0800b3b9 	.word	0x0800b3b9
 800b318:	0800b3b9 	.word	0x0800b3b9
 800b31c:	0800b3b9 	.word	0x0800b3b9
 800b320:	0800b3b9 	.word	0x0800b3b9
 800b324:	0800b399 	.word	0x0800b399
 800b328:	0800b3b9 	.word	0x0800b3b9
 800b32c:	0800b3b9 	.word	0x0800b3b9
 800b330:	0800b3b9 	.word	0x0800b3b9
 800b334:	0800b3b9 	.word	0x0800b3b9
 800b338:	0800b3b9 	.word	0x0800b3b9
 800b33c:	0800b3b9 	.word	0x0800b3b9
 800b340:	0800b3b9 	.word	0x0800b3b9
 800b344:	0800b3a1 	.word	0x0800b3a1
 800b348:	0800b3b9 	.word	0x0800b3b9
 800b34c:	0800b3b9 	.word	0x0800b3b9
 800b350:	0800b3b9 	.word	0x0800b3b9
 800b354:	0800b3b9 	.word	0x0800b3b9
 800b358:	0800b3b9 	.word	0x0800b3b9
 800b35c:	0800b3b9 	.word	0x0800b3b9
 800b360:	0800b3b9 	.word	0x0800b3b9
 800b364:	0800b3a9 	.word	0x0800b3a9
 800b368:	0800b3b9 	.word	0x0800b3b9
 800b36c:	0800b3b9 	.word	0x0800b3b9
 800b370:	0800b3b9 	.word	0x0800b3b9
 800b374:	0800b3b9 	.word	0x0800b3b9
 800b378:	0800b3b9 	.word	0x0800b3b9
 800b37c:	0800b3b9 	.word	0x0800b3b9
 800b380:	0800b3b9 	.word	0x0800b3b9
 800b384:	0800b3b1 	.word	0x0800b3b1
 800b388:	2301      	movs	r3, #1
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38e:	e222      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b390:	2304      	movs	r3, #4
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b396:	e21e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b398:	2308      	movs	r3, #8
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e21a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3a0:	2310      	movs	r3, #16
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e216      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3a8:	2320      	movs	r3, #32
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e212      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3b0:	2340      	movs	r3, #64	; 0x40
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e20e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3b8:	2380      	movs	r3, #128	; 0x80
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e20a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a69      	ldr	r2, [pc, #420]	; (800b56c <UART_SetConfig+0x33c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d130      	bne.n	800b42c <UART_SetConfig+0x1fc>
 800b3ca:	4b67      	ldr	r3, [pc, #412]	; (800b568 <UART_SetConfig+0x338>)
 800b3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d826      	bhi.n	800b424 <UART_SetConfig+0x1f4>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <UART_SetConfig+0x1ac>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b3f5 	.word	0x0800b3f5
 800b3e0:	0800b3fd 	.word	0x0800b3fd
 800b3e4:	0800b405 	.word	0x0800b405
 800b3e8:	0800b40d 	.word	0x0800b40d
 800b3ec:	0800b415 	.word	0x0800b415
 800b3f0:	0800b41d 	.word	0x0800b41d
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fa:	e1ec      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b3fc:	2304      	movs	r3, #4
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b402:	e1e8      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b404:	2308      	movs	r3, #8
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e1e4      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b40c:	2310      	movs	r3, #16
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e1e0      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b414:	2320      	movs	r3, #32
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e1dc      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b41c:	2340      	movs	r3, #64	; 0x40
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e1d8      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b424:	2380      	movs	r3, #128	; 0x80
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e1d4      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a4f      	ldr	r2, [pc, #316]	; (800b570 <UART_SetConfig+0x340>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d130      	bne.n	800b498 <UART_SetConfig+0x268>
 800b436:	4b4c      	ldr	r3, [pc, #304]	; (800b568 <UART_SetConfig+0x338>)
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	2b05      	cmp	r3, #5
 800b440:	d826      	bhi.n	800b490 <UART_SetConfig+0x260>
 800b442:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <UART_SetConfig+0x218>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b461 	.word	0x0800b461
 800b44c:	0800b469 	.word	0x0800b469
 800b450:	0800b471 	.word	0x0800b471
 800b454:	0800b479 	.word	0x0800b479
 800b458:	0800b481 	.word	0x0800b481
 800b45c:	0800b489 	.word	0x0800b489
 800b460:	2300      	movs	r3, #0
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b466:	e1b6      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b468:	2304      	movs	r3, #4
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46e:	e1b2      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b470:	2308      	movs	r3, #8
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b476:	e1ae      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b478:	2310      	movs	r3, #16
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47e:	e1aa      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b480:	2320      	movs	r3, #32
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e1a6      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b488:	2340      	movs	r3, #64	; 0x40
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48e:	e1a2      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b490:	2380      	movs	r3, #128	; 0x80
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b496:	e19e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a35      	ldr	r2, [pc, #212]	; (800b574 <UART_SetConfig+0x344>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d130      	bne.n	800b504 <UART_SetConfig+0x2d4>
 800b4a2:	4b31      	ldr	r3, [pc, #196]	; (800b568 <UART_SetConfig+0x338>)
 800b4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	2b05      	cmp	r3, #5
 800b4ac:	d826      	bhi.n	800b4fc <UART_SetConfig+0x2cc>
 800b4ae:	a201      	add	r2, pc, #4	; (adr r2, 800b4b4 <UART_SetConfig+0x284>)
 800b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b4:	0800b4cd 	.word	0x0800b4cd
 800b4b8:	0800b4d5 	.word	0x0800b4d5
 800b4bc:	0800b4dd 	.word	0x0800b4dd
 800b4c0:	0800b4e5 	.word	0x0800b4e5
 800b4c4:	0800b4ed 	.word	0x0800b4ed
 800b4c8:	0800b4f5 	.word	0x0800b4f5
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e180      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4da:	e17c      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4dc:	2308      	movs	r3, #8
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e2:	e178      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e174      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e170      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4f4:	2340      	movs	r3, #64	; 0x40
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fa:	e16c      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b4fc:	2380      	movs	r3, #128	; 0x80
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b502:	e168      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a1b      	ldr	r2, [pc, #108]	; (800b578 <UART_SetConfig+0x348>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d142      	bne.n	800b594 <UART_SetConfig+0x364>
 800b50e:	4b16      	ldr	r3, [pc, #88]	; (800b568 <UART_SetConfig+0x338>)
 800b510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	2b05      	cmp	r3, #5
 800b518:	d838      	bhi.n	800b58c <UART_SetConfig+0x35c>
 800b51a:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <UART_SetConfig+0x2f0>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b539 	.word	0x0800b539
 800b524:	0800b541 	.word	0x0800b541
 800b528:	0800b549 	.word	0x0800b549
 800b52c:	0800b551 	.word	0x0800b551
 800b530:	0800b57d 	.word	0x0800b57d
 800b534:	0800b585 	.word	0x0800b585
 800b538:	2300      	movs	r3, #0
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e14a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e146      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e142      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e13e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b558:	cfff69f3 	.word	0xcfff69f3
 800b55c:	58000c00 	.word	0x58000c00
 800b560:	11fff4ff 	.word	0x11fff4ff
 800b564:	40011000 	.word	0x40011000
 800b568:	58024400 	.word	0x58024400
 800b56c:	40004400 	.word	0x40004400
 800b570:	40004800 	.word	0x40004800
 800b574:	40004c00 	.word	0x40004c00
 800b578:	40005000 	.word	0x40005000
 800b57c:	2320      	movs	r3, #32
 800b57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b582:	e128      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58a:	e124      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b58c:	2380      	movs	r3, #128	; 0x80
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b592:	e120      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4acb      	ldr	r2, [pc, #812]	; (800b8c8 <UART_SetConfig+0x698>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d176      	bne.n	800b68c <UART_SetConfig+0x45c>
 800b59e:	4bcb      	ldr	r3, [pc, #812]	; (800b8cc <UART_SetConfig+0x69c>)
 800b5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5a6:	2b28      	cmp	r3, #40	; 0x28
 800b5a8:	d86c      	bhi.n	800b684 <UART_SetConfig+0x454>
 800b5aa:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <UART_SetConfig+0x380>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b655 	.word	0x0800b655
 800b5b4:	0800b685 	.word	0x0800b685
 800b5b8:	0800b685 	.word	0x0800b685
 800b5bc:	0800b685 	.word	0x0800b685
 800b5c0:	0800b685 	.word	0x0800b685
 800b5c4:	0800b685 	.word	0x0800b685
 800b5c8:	0800b685 	.word	0x0800b685
 800b5cc:	0800b685 	.word	0x0800b685
 800b5d0:	0800b65d 	.word	0x0800b65d
 800b5d4:	0800b685 	.word	0x0800b685
 800b5d8:	0800b685 	.word	0x0800b685
 800b5dc:	0800b685 	.word	0x0800b685
 800b5e0:	0800b685 	.word	0x0800b685
 800b5e4:	0800b685 	.word	0x0800b685
 800b5e8:	0800b685 	.word	0x0800b685
 800b5ec:	0800b685 	.word	0x0800b685
 800b5f0:	0800b665 	.word	0x0800b665
 800b5f4:	0800b685 	.word	0x0800b685
 800b5f8:	0800b685 	.word	0x0800b685
 800b5fc:	0800b685 	.word	0x0800b685
 800b600:	0800b685 	.word	0x0800b685
 800b604:	0800b685 	.word	0x0800b685
 800b608:	0800b685 	.word	0x0800b685
 800b60c:	0800b685 	.word	0x0800b685
 800b610:	0800b66d 	.word	0x0800b66d
 800b614:	0800b685 	.word	0x0800b685
 800b618:	0800b685 	.word	0x0800b685
 800b61c:	0800b685 	.word	0x0800b685
 800b620:	0800b685 	.word	0x0800b685
 800b624:	0800b685 	.word	0x0800b685
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b675 	.word	0x0800b675
 800b634:	0800b685 	.word	0x0800b685
 800b638:	0800b685 	.word	0x0800b685
 800b63c:	0800b685 	.word	0x0800b685
 800b640:	0800b685 	.word	0x0800b685
 800b644:	0800b685 	.word	0x0800b685
 800b648:	0800b685 	.word	0x0800b685
 800b64c:	0800b685 	.word	0x0800b685
 800b650:	0800b67d 	.word	0x0800b67d
 800b654:	2301      	movs	r3, #1
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65a:	e0bc      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b65c:	2304      	movs	r3, #4
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b662:	e0b8      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b664:	2308      	movs	r3, #8
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66a:	e0b4      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b66c:	2310      	movs	r3, #16
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b672:	e0b0      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b674:	2320      	movs	r3, #32
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e0ac      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b67c:	2340      	movs	r3, #64	; 0x40
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e0a8      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b684:	2380      	movs	r3, #128	; 0x80
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e0a4      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a8f      	ldr	r2, [pc, #572]	; (800b8d0 <UART_SetConfig+0x6a0>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d130      	bne.n	800b6f8 <UART_SetConfig+0x4c8>
 800b696:	4b8d      	ldr	r3, [pc, #564]	; (800b8cc <UART_SetConfig+0x69c>)
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	2b05      	cmp	r3, #5
 800b6a0:	d826      	bhi.n	800b6f0 <UART_SetConfig+0x4c0>
 800b6a2:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <UART_SetConfig+0x478>)
 800b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a8:	0800b6c1 	.word	0x0800b6c1
 800b6ac:	0800b6c9 	.word	0x0800b6c9
 800b6b0:	0800b6d1 	.word	0x0800b6d1
 800b6b4:	0800b6d9 	.word	0x0800b6d9
 800b6b8:	0800b6e1 	.word	0x0800b6e1
 800b6bc:	0800b6e9 	.word	0x0800b6e9
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c6:	e086      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6c8:	2304      	movs	r3, #4
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ce:	e082      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6d0:	2308      	movs	r3, #8
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d6:	e07e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6de:	e07a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6e0:	2320      	movs	r3, #32
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6e6:	e076      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ee:	e072      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6f0:	2380      	movs	r3, #128	; 0x80
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6f6:	e06e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a75      	ldr	r2, [pc, #468]	; (800b8d4 <UART_SetConfig+0x6a4>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d130      	bne.n	800b764 <UART_SetConfig+0x534>
 800b702:	4b72      	ldr	r3, [pc, #456]	; (800b8cc <UART_SetConfig+0x69c>)
 800b704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	2b05      	cmp	r3, #5
 800b70c:	d826      	bhi.n	800b75c <UART_SetConfig+0x52c>
 800b70e:	a201      	add	r2, pc, #4	; (adr r2, 800b714 <UART_SetConfig+0x4e4>)
 800b710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b714:	0800b72d 	.word	0x0800b72d
 800b718:	0800b735 	.word	0x0800b735
 800b71c:	0800b73d 	.word	0x0800b73d
 800b720:	0800b745 	.word	0x0800b745
 800b724:	0800b74d 	.word	0x0800b74d
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	2300      	movs	r3, #0
 800b72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b732:	e050      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b734:	2304      	movs	r3, #4
 800b736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b73a:	e04c      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b73c:	2308      	movs	r3, #8
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b742:	e048      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b744:	2310      	movs	r3, #16
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b74a:	e044      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b74c:	2320      	movs	r3, #32
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b752:	e040      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b754:	2340      	movs	r3, #64	; 0x40
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b75a:	e03c      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b75c:	2380      	movs	r3, #128	; 0x80
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b762:	e038      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a5b      	ldr	r2, [pc, #364]	; (800b8d8 <UART_SetConfig+0x6a8>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d130      	bne.n	800b7d0 <UART_SetConfig+0x5a0>
 800b76e:	4b57      	ldr	r3, [pc, #348]	; (800b8cc <UART_SetConfig+0x69c>)
 800b770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b05      	cmp	r3, #5
 800b778:	d826      	bhi.n	800b7c8 <UART_SetConfig+0x598>
 800b77a:	a201      	add	r2, pc, #4	; (adr r2, 800b780 <UART_SetConfig+0x550>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b799 	.word	0x0800b799
 800b784:	0800b7a1 	.word	0x0800b7a1
 800b788:	0800b7a9 	.word	0x0800b7a9
 800b78c:	0800b7b1 	.word	0x0800b7b1
 800b790:	0800b7b9 	.word	0x0800b7b9
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	2302      	movs	r3, #2
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79e:	e01a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7a0:	2304      	movs	r3, #4
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7a6:	e016      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7a8:	2308      	movs	r3, #8
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ae:	e012      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7b6:	e00e      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7be:	e00a      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7c0:	2340      	movs	r3, #64	; 0x40
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7c6:	e006      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7c8:	2380      	movs	r3, #128	; 0x80
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ce:	e002      	b.n	800b7d6 <UART_SetConfig+0x5a6>
 800b7d0:	2380      	movs	r3, #128	; 0x80
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a3f      	ldr	r2, [pc, #252]	; (800b8d8 <UART_SetConfig+0x6a8>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	f040 80f8 	bne.w	800b9d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	dc46      	bgt.n	800b878 <UART_SetConfig+0x648>
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	f2c0 8082 	blt.w	800b8f4 <UART_SetConfig+0x6c4>
 800b7f0:	3b02      	subs	r3, #2
 800b7f2:	2b1e      	cmp	r3, #30
 800b7f4:	d87e      	bhi.n	800b8f4 <UART_SetConfig+0x6c4>
 800b7f6:	a201      	add	r2, pc, #4	; (adr r2, 800b7fc <UART_SetConfig+0x5cc>)
 800b7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fc:	0800b87f 	.word	0x0800b87f
 800b800:	0800b8f5 	.word	0x0800b8f5
 800b804:	0800b887 	.word	0x0800b887
 800b808:	0800b8f5 	.word	0x0800b8f5
 800b80c:	0800b8f5 	.word	0x0800b8f5
 800b810:	0800b8f5 	.word	0x0800b8f5
 800b814:	0800b897 	.word	0x0800b897
 800b818:	0800b8f5 	.word	0x0800b8f5
 800b81c:	0800b8f5 	.word	0x0800b8f5
 800b820:	0800b8f5 	.word	0x0800b8f5
 800b824:	0800b8f5 	.word	0x0800b8f5
 800b828:	0800b8f5 	.word	0x0800b8f5
 800b82c:	0800b8f5 	.word	0x0800b8f5
 800b830:	0800b8f5 	.word	0x0800b8f5
 800b834:	0800b8a7 	.word	0x0800b8a7
 800b838:	0800b8f5 	.word	0x0800b8f5
 800b83c:	0800b8f5 	.word	0x0800b8f5
 800b840:	0800b8f5 	.word	0x0800b8f5
 800b844:	0800b8f5 	.word	0x0800b8f5
 800b848:	0800b8f5 	.word	0x0800b8f5
 800b84c:	0800b8f5 	.word	0x0800b8f5
 800b850:	0800b8f5 	.word	0x0800b8f5
 800b854:	0800b8f5 	.word	0x0800b8f5
 800b858:	0800b8f5 	.word	0x0800b8f5
 800b85c:	0800b8f5 	.word	0x0800b8f5
 800b860:	0800b8f5 	.word	0x0800b8f5
 800b864:	0800b8f5 	.word	0x0800b8f5
 800b868:	0800b8f5 	.word	0x0800b8f5
 800b86c:	0800b8f5 	.word	0x0800b8f5
 800b870:	0800b8f5 	.word	0x0800b8f5
 800b874:	0800b8e7 	.word	0x0800b8e7
 800b878:	2b40      	cmp	r3, #64	; 0x40
 800b87a:	d037      	beq.n	800b8ec <UART_SetConfig+0x6bc>
 800b87c:	e03a      	b.n	800b8f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b87e:	f7fd fd3b 	bl	80092f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b884:	e03c      	b.n	800b900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd fd4a 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b894:	e034      	b.n	800b900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b896:	f107 0318 	add.w	r3, r7, #24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd fe96 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a4:	e02c      	b.n	800b900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8a6:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <UART_SetConfig+0x69c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0320 	and.w	r3, r3, #32
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d016      	beq.n	800b8e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8b2:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <UART_SetConfig+0x69c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	08db      	lsrs	r3, r3, #3
 800b8b8:	f003 0303 	and.w	r3, r3, #3
 800b8bc:	4a07      	ldr	r2, [pc, #28]	; (800b8dc <UART_SetConfig+0x6ac>)
 800b8be:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8c4:	e01c      	b.n	800b900 <UART_SetConfig+0x6d0>
 800b8c6:	bf00      	nop
 800b8c8:	40011400 	.word	0x40011400
 800b8cc:	58024400 	.word	0x58024400
 800b8d0:	40007800 	.word	0x40007800
 800b8d4:	40007c00 	.word	0x40007c00
 800b8d8:	58000c00 	.word	0x58000c00
 800b8dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b8e0:	4b9d      	ldr	r3, [pc, #628]	; (800bb58 <UART_SetConfig+0x928>)
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e4:	e00c      	b.n	800b900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8e6:	4b9d      	ldr	r3, [pc, #628]	; (800bb5c <UART_SetConfig+0x92c>)
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ea:	e009      	b.n	800b900 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f2:	e005      	b.n	800b900 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 81de 	beq.w	800bcc4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	4a94      	ldr	r2, [pc, #592]	; (800bb60 <UART_SetConfig+0x930>)
 800b90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b912:	461a      	mov	r2, r3
 800b914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b916:	fbb3 f3f2 	udiv	r3, r3, r2
 800b91a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	4613      	mov	r3, r2
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	4413      	add	r3, r2
 800b926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b928:	429a      	cmp	r2, r3
 800b92a:	d305      	bcc.n	800b938 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b934:	429a      	cmp	r2, r3
 800b936:	d903      	bls.n	800b940 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b93e:	e1c1      	b.n	800bcc4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b942:	2200      	movs	r2, #0
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	60fa      	str	r2, [r7, #12]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	4a84      	ldr	r2, [pc, #528]	; (800bb60 <UART_SetConfig+0x930>)
 800b94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b952:	b29b      	uxth	r3, r3
 800b954:	2200      	movs	r2, #0
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b962:	f7f4 fd0d 	bl	8000380 <__aeabi_uldivmod>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4610      	mov	r0, r2
 800b96c:	4619      	mov	r1, r3
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	f04f 0300 	mov.w	r3, #0
 800b976:	020b      	lsls	r3, r1, #8
 800b978:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b97c:	0202      	lsls	r2, r0, #8
 800b97e:	6979      	ldr	r1, [r7, #20]
 800b980:	6849      	ldr	r1, [r1, #4]
 800b982:	0849      	lsrs	r1, r1, #1
 800b984:	2000      	movs	r0, #0
 800b986:	460c      	mov	r4, r1
 800b988:	4605      	mov	r5, r0
 800b98a:	eb12 0804 	adds.w	r8, r2, r4
 800b98e:	eb43 0905 	adc.w	r9, r3, r5
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	469a      	mov	sl, r3
 800b99a:	4693      	mov	fp, r2
 800b99c:	4652      	mov	r2, sl
 800b99e:	465b      	mov	r3, fp
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fcec 	bl	8000380 <__aeabi_uldivmod>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9b6:	d308      	bcc.n	800b9ca <UART_SetConfig+0x79a>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9be:	d204      	bcs.n	800b9ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9c6:	60da      	str	r2, [r3, #12]
 800b9c8:	e17c      	b.n	800bcc4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b9d0:	e178      	b.n	800bcc4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9da:	f040 80c5 	bne.w	800bb68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b9de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	dc48      	bgt.n	800ba78 <UART_SetConfig+0x848>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	db7b      	blt.n	800bae2 <UART_SetConfig+0x8b2>
 800b9ea:	2b20      	cmp	r3, #32
 800b9ec:	d879      	bhi.n	800bae2 <UART_SetConfig+0x8b2>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <UART_SetConfig+0x7c4>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba7f 	.word	0x0800ba7f
 800b9f8:	0800ba87 	.word	0x0800ba87
 800b9fc:	0800bae3 	.word	0x0800bae3
 800ba00:	0800bae3 	.word	0x0800bae3
 800ba04:	0800ba8f 	.word	0x0800ba8f
 800ba08:	0800bae3 	.word	0x0800bae3
 800ba0c:	0800bae3 	.word	0x0800bae3
 800ba10:	0800bae3 	.word	0x0800bae3
 800ba14:	0800ba9f 	.word	0x0800ba9f
 800ba18:	0800bae3 	.word	0x0800bae3
 800ba1c:	0800bae3 	.word	0x0800bae3
 800ba20:	0800bae3 	.word	0x0800bae3
 800ba24:	0800bae3 	.word	0x0800bae3
 800ba28:	0800bae3 	.word	0x0800bae3
 800ba2c:	0800bae3 	.word	0x0800bae3
 800ba30:	0800bae3 	.word	0x0800bae3
 800ba34:	0800baaf 	.word	0x0800baaf
 800ba38:	0800bae3 	.word	0x0800bae3
 800ba3c:	0800bae3 	.word	0x0800bae3
 800ba40:	0800bae3 	.word	0x0800bae3
 800ba44:	0800bae3 	.word	0x0800bae3
 800ba48:	0800bae3 	.word	0x0800bae3
 800ba4c:	0800bae3 	.word	0x0800bae3
 800ba50:	0800bae3 	.word	0x0800bae3
 800ba54:	0800bae3 	.word	0x0800bae3
 800ba58:	0800bae3 	.word	0x0800bae3
 800ba5c:	0800bae3 	.word	0x0800bae3
 800ba60:	0800bae3 	.word	0x0800bae3
 800ba64:	0800bae3 	.word	0x0800bae3
 800ba68:	0800bae3 	.word	0x0800bae3
 800ba6c:	0800bae3 	.word	0x0800bae3
 800ba70:	0800bae3 	.word	0x0800bae3
 800ba74:	0800bad5 	.word	0x0800bad5
 800ba78:	2b40      	cmp	r3, #64	; 0x40
 800ba7a:	d02e      	beq.n	800bada <UART_SetConfig+0x8aa>
 800ba7c:	e031      	b.n	800bae2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba7e:	f7fc fcc9 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800ba82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba84:	e033      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba86:	f7fc fcdb 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 800ba8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba8c:	e02f      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd fc46 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba9c:	e027      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba9e:	f107 0318 	add.w	r3, r7, #24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd fd92 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baac:	e01f      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800baae:	4b2d      	ldr	r3, [pc, #180]	; (800bb64 <UART_SetConfig+0x934>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baba:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <UART_SetConfig+0x934>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	08db      	lsrs	r3, r3, #3
 800bac0:	f003 0303 	and.w	r3, r3, #3
 800bac4:	4a24      	ldr	r2, [pc, #144]	; (800bb58 <UART_SetConfig+0x928>)
 800bac6:	fa22 f303 	lsr.w	r3, r2, r3
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bacc:	e00f      	b.n	800baee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bace:	4b22      	ldr	r3, [pc, #136]	; (800bb58 <UART_SetConfig+0x928>)
 800bad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad2:	e00c      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bad4:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <UART_SetConfig+0x92c>)
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad8:	e009      	b.n	800baee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae0:	e005      	b.n	800baee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bae2:	2300      	movs	r3, #0
 800bae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800baec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 80e7 	beq.w	800bcc4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafa:	4a19      	ldr	r2, [pc, #100]	; (800bb60 <UART_SetConfig+0x930>)
 800bafc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb00:	461a      	mov	r2, r3
 800bb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb04:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb08:	005a      	lsls	r2, r3, #1
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	085b      	lsrs	r3, r3, #1
 800bb10:	441a      	add	r2, r3
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1e:	2b0f      	cmp	r3, #15
 800bb20:	d916      	bls.n	800bb50 <UART_SetConfig+0x920>
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb28:	d212      	bcs.n	800bb50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	f023 030f 	bic.w	r3, r3, #15
 800bb32:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb42:	4313      	orrs	r3, r2
 800bb44:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb4c:	60da      	str	r2, [r3, #12]
 800bb4e:	e0b9      	b.n	800bcc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb56:	e0b5      	b.n	800bcc4 <UART_SetConfig+0xa94>
 800bb58:	03d09000 	.word	0x03d09000
 800bb5c:	003d0900 	.word	0x003d0900
 800bb60:	0800ea20 	.word	0x0800ea20
 800bb64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb6c:	2b20      	cmp	r3, #32
 800bb6e:	dc49      	bgt.n	800bc04 <UART_SetConfig+0x9d4>
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	db7c      	blt.n	800bc6e <UART_SetConfig+0xa3e>
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d87a      	bhi.n	800bc6e <UART_SetConfig+0xa3e>
 800bb78:	a201      	add	r2, pc, #4	; (adr r2, 800bb80 <UART_SetConfig+0x950>)
 800bb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7e:	bf00      	nop
 800bb80:	0800bc0b 	.word	0x0800bc0b
 800bb84:	0800bc13 	.word	0x0800bc13
 800bb88:	0800bc6f 	.word	0x0800bc6f
 800bb8c:	0800bc6f 	.word	0x0800bc6f
 800bb90:	0800bc1b 	.word	0x0800bc1b
 800bb94:	0800bc6f 	.word	0x0800bc6f
 800bb98:	0800bc6f 	.word	0x0800bc6f
 800bb9c:	0800bc6f 	.word	0x0800bc6f
 800bba0:	0800bc2b 	.word	0x0800bc2b
 800bba4:	0800bc6f 	.word	0x0800bc6f
 800bba8:	0800bc6f 	.word	0x0800bc6f
 800bbac:	0800bc6f 	.word	0x0800bc6f
 800bbb0:	0800bc6f 	.word	0x0800bc6f
 800bbb4:	0800bc6f 	.word	0x0800bc6f
 800bbb8:	0800bc6f 	.word	0x0800bc6f
 800bbbc:	0800bc6f 	.word	0x0800bc6f
 800bbc0:	0800bc3b 	.word	0x0800bc3b
 800bbc4:	0800bc6f 	.word	0x0800bc6f
 800bbc8:	0800bc6f 	.word	0x0800bc6f
 800bbcc:	0800bc6f 	.word	0x0800bc6f
 800bbd0:	0800bc6f 	.word	0x0800bc6f
 800bbd4:	0800bc6f 	.word	0x0800bc6f
 800bbd8:	0800bc6f 	.word	0x0800bc6f
 800bbdc:	0800bc6f 	.word	0x0800bc6f
 800bbe0:	0800bc6f 	.word	0x0800bc6f
 800bbe4:	0800bc6f 	.word	0x0800bc6f
 800bbe8:	0800bc6f 	.word	0x0800bc6f
 800bbec:	0800bc6f 	.word	0x0800bc6f
 800bbf0:	0800bc6f 	.word	0x0800bc6f
 800bbf4:	0800bc6f 	.word	0x0800bc6f
 800bbf8:	0800bc6f 	.word	0x0800bc6f
 800bbfc:	0800bc6f 	.word	0x0800bc6f
 800bc00:	0800bc61 	.word	0x0800bc61
 800bc04:	2b40      	cmp	r3, #64	; 0x40
 800bc06:	d02e      	beq.n	800bc66 <UART_SetConfig+0xa36>
 800bc08:	e031      	b.n	800bc6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc0a:	f7fc fc03 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800bc0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc10:	e033      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc12:	f7fc fc15 	bl	8008440 <HAL_RCC_GetPCLK2Freq>
 800bc16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc18:	e02f      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fb80 	bl	8009324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e027      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc2a:	f107 0318 	add.w	r3, r7, #24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fd fccc 	bl	80095cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc38:	e01f      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc3a:	4b2d      	ldr	r3, [pc, #180]	; (800bcf0 <UART_SetConfig+0xac0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc46:	4b2a      	ldr	r3, [pc, #168]	; (800bcf0 <UART_SetConfig+0xac0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	08db      	lsrs	r3, r3, #3
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	4a28      	ldr	r2, [pc, #160]	; (800bcf4 <UART_SetConfig+0xac4>)
 800bc52:	fa22 f303 	lsr.w	r3, r2, r3
 800bc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc58:	e00f      	b.n	800bc7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bc5a:	4b26      	ldr	r3, [pc, #152]	; (800bcf4 <UART_SetConfig+0xac4>)
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5e:	e00c      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc60:	4b25      	ldr	r3, [pc, #148]	; (800bcf8 <UART_SetConfig+0xac8>)
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc64:	e009      	b.n	800bc7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc6c:	e005      	b.n	800bc7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc78:	bf00      	nop
    }

    if (pclk != 0U)
 800bc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d021      	beq.n	800bcc4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	4a1d      	ldr	r2, [pc, #116]	; (800bcfc <UART_SetConfig+0xacc>)
 800bc86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	085b      	lsrs	r3, r3, #1
 800bc98:	441a      	add	r2, r3
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca6:	2b0f      	cmp	r3, #15
 800bca8:	d909      	bls.n	800bcbe <UART_SetConfig+0xa8e>
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb0:	d205      	bcs.n	800bcbe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60da      	str	r2, [r3, #12]
 800bcbc:	e002      	b.n	800bcc4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bce0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3748      	adds	r7, #72	; 0x48
 800bce8:	46bd      	mov	sp, r7
 800bcea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcee:	bf00      	nop
 800bcf0:	58024400 	.word	0x58024400
 800bcf4:	03d09000 	.word	0x03d09000
 800bcf8:	003d0900 	.word	0x003d0900
 800bcfc:	0800ea20 	.word	0x0800ea20

0800bd00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00a      	beq.n	800bd2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2e:	f003 0302 	and.w	r3, r3, #2
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00a      	beq.n	800bd6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd72:	f003 0308 	and.w	r3, r3, #8
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	430a      	orrs	r2, r1
 800bd8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd94:	f003 0310 	and.w	r3, r3, #16
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00a      	beq.n	800bdd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01a      	beq.n	800be16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	430a      	orrs	r2, r1
 800bdf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdfe:	d10a      	bne.n	800be16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00a      	beq.n	800be38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	605a      	str	r2, [r3, #4]
  }
}
 800be38:	bf00      	nop
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af02      	add	r7, sp, #8
 800be4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be54:	f7f7 ffca 	bl	8003dec <HAL_GetTick>
 800be58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 0308 	and.w	r3, r3, #8
 800be64:	2b08      	cmp	r3, #8
 800be66:	d10e      	bne.n	800be86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f82f 	bl	800beda <UART_WaitOnFlagUntilTimeout>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e025      	b.n	800bed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 0304 	and.w	r3, r3, #4
 800be90:	2b04      	cmp	r3, #4
 800be92:	d10e      	bne.n	800beb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f819 	bl	800beda <UART_WaitOnFlagUntilTimeout>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e00f      	b.n	800bed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b09c      	sub	sp, #112	; 0x70
 800bede:	af00      	add	r7, sp, #0
 800bee0:	60f8      	str	r0, [r7, #12]
 800bee2:	60b9      	str	r1, [r7, #8]
 800bee4:	603b      	str	r3, [r7, #0]
 800bee6:	4613      	mov	r3, r2
 800bee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800beea:	e0a9      	b.n	800c040 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef2:	f000 80a5 	beq.w	800c040 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bef6:	f7f7 ff79 	bl	8003dec <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d302      	bcc.n	800bf0c <UART_WaitOnFlagUntilTimeout+0x32>
 800bf06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d140      	bne.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf20:	667b      	str	r3, [r7, #100]	; 0x64
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e6      	bne.n	800bf0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	f023 0301 	bic.w	r3, r3, #1
 800bf54:	663b      	str	r3, [r7, #96]	; 0x60
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf5e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e5      	bne.n	800bf3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e069      	b.n	800c062 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d051      	beq.n	800c040 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfaa:	d149      	bne.n	800c040 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bfca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e6      	bne.n	800bfb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3308      	adds	r3, #8
 800bfee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	613b      	str	r3, [r7, #16]
   return(result);
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f023 0301 	bic.w	r3, r3, #1
 800bffe:	66bb      	str	r3, [r7, #104]	; 0x68
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3308      	adds	r3, #8
 800c006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c008:	623a      	str	r2, [r7, #32]
 800c00a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	69f9      	ldr	r1, [r7, #28]
 800c00e:	6a3a      	ldr	r2, [r7, #32]
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	61bb      	str	r3, [r7, #24]
   return(result);
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e5      	bne.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2220      	movs	r2, #32
 800c020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2220      	movs	r2, #32
 800c028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e010      	b.n	800c062 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	69da      	ldr	r2, [r3, #28]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	4013      	ands	r3, r2
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	bf0c      	ite	eq
 800c050:	2301      	moveq	r3, #1
 800c052:	2300      	movne	r3, #0
 800c054:	b2db      	uxtb	r3, r3
 800c056:	461a      	mov	r2, r3
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	f43f af46 	beq.w	800beec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3770      	adds	r7, #112	; 0x70
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b095      	sub	sp, #84	; 0x54
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c092:	643b      	str	r3, [r7, #64]	; 0x40
 800c094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e6      	bne.n	800c074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0b6:	69fa      	ldr	r2, [r7, #28]
 800c0b8:	4b1e      	ldr	r3, [pc, #120]	; (800c134 <UART_EndRxTransfer+0xc8>)
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e5      	bne.n	800c0a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d118      	bne.n	800c114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	e853 3f00 	ldrex	r3, [r3]
 800c0ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f023 0310 	bic.w	r3, r3, #16
 800c0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c100:	61bb      	str	r3, [r7, #24]
 800c102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c104:	6979      	ldr	r1, [r7, #20]
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	e841 2300 	strex	r3, r2, [r1]
 800c10c:	613b      	str	r3, [r7, #16]
   return(result);
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1e6      	bne.n	800c0e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2220      	movs	r2, #32
 800c118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c128:	bf00      	nop
 800c12a:	3754      	adds	r7, #84	; 0x54
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	effffffe 	.word	0xeffffffe

0800c138 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7ff f854 	bl	800b204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	e853 3f00 	ldrex	r3, [r3]
 800c178:	60bb      	str	r3, [r7, #8]
   return(result);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	61bb      	str	r3, [r7, #24]
 800c18c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	6979      	ldr	r1, [r7, #20]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	e841 2300 	strex	r3, r2, [r1]
 800c196:	613b      	str	r3, [r7, #16]
   return(result);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1e6      	bne.n	800c16c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff f81f 	bl	800b1f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1b2:	bf00      	nop
 800c1b4:	3720      	adds	r7, #32
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c204:	2b01      	cmp	r3, #1
 800c206:	d101      	bne.n	800c20c <HAL_UARTEx_DisableFifoMode+0x16>
 800c208:	2302      	movs	r3, #2
 800c20a:	e027      	b.n	800c25c <HAL_UARTEx_DisableFifoMode+0x66>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2224      	movs	r2, #36	; 0x24
 800c218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 0201 	bic.w	r2, r2, #1
 800c232:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c23a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d101      	bne.n	800c280 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c27c:	2302      	movs	r3, #2
 800c27e:	e02d      	b.n	800c2dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2224      	movs	r2, #36	; 0x24
 800c28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0201 	bic.w	r2, r2, #1
 800c2a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f84f 	bl	800c360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e02d      	b.n	800c358 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2224      	movs	r2, #36	; 0x24
 800c308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 0201 	bic.w	r2, r2, #1
 800c322:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	430a      	orrs	r2, r1
 800c336:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f811 	bl	800c360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d108      	bne.n	800c382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c380:	e031      	b.n	800c3e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c382:	2310      	movs	r3, #16
 800c384:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c386:	2310      	movs	r3, #16
 800c388:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	0e5b      	lsrs	r3, r3, #25
 800c392:	b2db      	uxtb	r3, r3
 800c394:	f003 0307 	and.w	r3, r3, #7
 800c398:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	0f5b      	lsrs	r3, r3, #29
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	f003 0307 	and.w	r3, r3, #7
 800c3a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3aa:	7bbb      	ldrb	r3, [r7, #14]
 800c3ac:	7b3a      	ldrb	r2, [r7, #12]
 800c3ae:	4911      	ldr	r1, [pc, #68]	; (800c3f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c3b0:	5c8a      	ldrb	r2, [r1, r2]
 800c3b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c3b6:	7b3a      	ldrb	r2, [r7, #12]
 800c3b8:	490f      	ldr	r1, [pc, #60]	; (800c3f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c3ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c3bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	7b7a      	ldrb	r2, [r7, #13]
 800c3cc:	4909      	ldr	r1, [pc, #36]	; (800c3f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c3ce:	5c8a      	ldrb	r2, [r1, r2]
 800c3d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c3d4:	7b7a      	ldrb	r2, [r7, #13]
 800c3d6:	4908      	ldr	r1, [pc, #32]	; (800c3f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c3d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c3da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c3e6:	bf00      	nop
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	0800ea38 	.word	0x0800ea38
 800c3f8:	0800ea40 	.word	0x0800ea40

0800c3fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b084      	sub	sp, #16
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	f107 001c 	add.w	r0, r7, #28
 800c40a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	2b01      	cmp	r3, #1
 800c412:	d120      	bne.n	800c456 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68da      	ldr	r2, [r3, #12]
 800c424:	4b2a      	ldr	r3, [pc, #168]	; (800c4d0 <USB_CoreInit+0xd4>)
 800c426:	4013      	ands	r3, r2
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d105      	bne.n	800c44a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 faac 	bl	800c9a8 <USB_CoreReset>
 800c450:	4603      	mov	r3, r0
 800c452:	73fb      	strb	r3, [r7, #15]
 800c454:	e01a      	b.n	800c48c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 faa0 	bl	800c9a8 <USB_CoreReset>
 800c468:	4603      	mov	r3, r0
 800c46a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	639a      	str	r2, [r3, #56]	; 0x38
 800c47e:	e005      	b.n	800c48c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d116      	bne.n	800c4c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4a0:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <USB_CoreInit+0xd8>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f043 0206 	orr.w	r2, r3, #6
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f043 0220 	orr.w	r2, r3, #32
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4cc:	b004      	add	sp, #16
 800c4ce:	4770      	bx	lr
 800c4d0:	ffbdffbf 	.word	0xffbdffbf
 800c4d4:	03ee0000 	.word	0x03ee0000

0800c4d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f023 0201 	bic.w	r2, r3, #1
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d115      	bne.n	800c548 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c528:	2001      	movs	r0, #1
 800c52a:	f7f7 fc6b 	bl	8003e04 <HAL_Delay>
      ms++;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3301      	adds	r3, #1
 800c532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fa29 	bl	800c98c <USB_GetMode>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d01e      	beq.n	800c57e <USB_SetCurrentMode+0x84>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b31      	cmp	r3, #49	; 0x31
 800c544:	d9f0      	bls.n	800c528 <USB_SetCurrentMode+0x2e>
 800c546:	e01a      	b.n	800c57e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c548:	78fb      	ldrb	r3, [r7, #3]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d115      	bne.n	800c57a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c55a:	2001      	movs	r0, #1
 800c55c:	f7f7 fc52 	bl	8003e04 <HAL_Delay>
      ms++;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3301      	adds	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa10 	bl	800c98c <USB_GetMode>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <USB_SetCurrentMode+0x84>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2b31      	cmp	r3, #49	; 0x31
 800c576:	d9f0      	bls.n	800c55a <USB_SetCurrentMode+0x60>
 800c578:	e001      	b.n	800c57e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e005      	b.n	800c58a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b32      	cmp	r3, #50	; 0x32
 800c582:	d101      	bne.n	800c588 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
	...

0800c594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c594:	b084      	sub	sp, #16
 800c596:	b580      	push	{r7, lr}
 800c598:	b086      	sub	sp, #24
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c5a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	613b      	str	r3, [r7, #16]
 800c5b2:	e009      	b.n	800c5c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	3340      	adds	r3, #64	; 0x40
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2b0e      	cmp	r3, #14
 800c5cc:	d9f2      	bls.n	800c5b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d11c      	bne.n	800c60e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5e2:	f043 0302 	orr.w	r3, r3, #2
 800c5e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	e005      	b.n	800c61a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c620:	461a      	mov	r2, r3
 800c622:	2300      	movs	r3, #0
 800c624:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62c:	4619      	mov	r1, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c634:	461a      	mov	r2, r3
 800c636:	680b      	ldr	r3, [r1, #0]
 800c638:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d10c      	bne.n	800c65a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c642:	2b00      	cmp	r3, #0
 800c644:	d104      	bne.n	800c650 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f965 	bl	800c918 <USB_SetDevSpeed>
 800c64e:	e008      	b.n	800c662 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c650:	2101      	movs	r1, #1
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f960 	bl	800c918 <USB_SetDevSpeed>
 800c658:	e003      	b.n	800c662 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c65a:	2103      	movs	r1, #3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f95b 	bl	800c918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c662:	2110      	movs	r1, #16
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f8f3 	bl	800c850 <USB_FlushTxFifo>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f91f 	bl	800c8b8 <USB_FlushRxFifo>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68a:	461a      	mov	r2, r3
 800c68c:	2300      	movs	r3, #0
 800c68e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c696:	461a      	mov	r2, r3
 800c698:	2300      	movs	r3, #0
 800c69a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	613b      	str	r3, [r7, #16]
 800c6ac:	e043      	b.n	800c736 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6c4:	d118      	bne.n	800c6f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	e013      	b.n	800c70a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6f4:	6013      	str	r3, [r2, #0]
 800c6f6:	e008      	b.n	800c70a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c704:	461a      	mov	r2, r3
 800c706:	2300      	movs	r3, #0
 800c708:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c716:	461a      	mov	r2, r3
 800c718:	2300      	movs	r3, #0
 800c71a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	015a      	lsls	r2, r3, #5
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	4413      	add	r3, r2
 800c724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c728:	461a      	mov	r2, r3
 800c72a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c72e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	3301      	adds	r3, #1
 800c734:	613b      	str	r3, [r7, #16]
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d3b7      	bcc.n	800c6ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c73e:	2300      	movs	r3, #0
 800c740:	613b      	str	r3, [r7, #16]
 800c742:	e043      	b.n	800c7cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c75a:	d118      	bne.n	800c78e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c76e:	461a      	mov	r2, r3
 800c770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	e013      	b.n	800c7a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c784:	461a      	mov	r2, r3
 800c786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	e008      	b.n	800c7a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79a:	461a      	mov	r2, r3
 800c79c:	2300      	movs	r3, #0
 800c79e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	015a      	lsls	r2, r3, #5
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	613b      	str	r3, [r7, #16]
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d3b7      	bcc.n	800c744 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c7f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d105      	bne.n	800c808 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	f043 0210 	orr.w	r2, r3, #16
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	699a      	ldr	r2, [r3, #24]
 800c80c:	4b0e      	ldr	r3, [pc, #56]	; (800c848 <USB_DevInit+0x2b4>)
 800c80e:	4313      	orrs	r3, r2
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	f043 0208 	orr.w	r2, r3, #8
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d105      	bne.n	800c838 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	699a      	ldr	r2, [r3, #24]
 800c830:	4b06      	ldr	r3, [pc, #24]	; (800c84c <USB_DevInit+0x2b8>)
 800c832:	4313      	orrs	r3, r2
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c844:	b004      	add	sp, #16
 800c846:	4770      	bx	lr
 800c848:	803c3800 	.word	0x803c3800
 800c84c:	40000004 	.word	0x40000004

0800c850 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c85a:	2300      	movs	r3, #0
 800c85c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3301      	adds	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4a13      	ldr	r2, [pc, #76]	; (800c8b4 <USB_FlushTxFifo+0x64>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d901      	bls.n	800c870 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c86c:	2303      	movs	r3, #3
 800c86e:	e01b      	b.n	800c8a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	daf2      	bge.n	800c85e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	019b      	lsls	r3, r3, #6
 800c880:	f043 0220 	orr.w	r2, r3, #32
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a08      	ldr	r2, [pc, #32]	; (800c8b4 <USB_FlushTxFifo+0x64>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d901      	bls.n	800c89a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e006      	b.n	800c8a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b20      	cmp	r3, #32
 800c8a4:	d0f0      	beq.n	800c888 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3714      	adds	r7, #20
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	00030d40 	.word	0x00030d40

0800c8b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	4a11      	ldr	r2, [pc, #68]	; (800c914 <USB_FlushRxFifo+0x5c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d901      	bls.n	800c8d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e018      	b.n	800c908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	daf2      	bge.n	800c8c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2210      	movs	r2, #16
 800c8e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4a08      	ldr	r2, [pc, #32]	; (800c914 <USB_FlushRxFifo+0x5c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d901      	bls.n	800c8fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e006      	b.n	800c908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	f003 0310 	and.w	r3, r3, #16
 800c902:	2b10      	cmp	r3, #16
 800c904:	d0f0      	beq.n	800c8e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3714      	adds	r7, #20
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	00030d40 	.word	0x00030d40

0800c918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	68f9      	ldr	r1, [r7, #12]
 800c934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c938:	4313      	orrs	r3, r2
 800c93a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b085      	sub	sp, #20
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c964:	f023 0303 	bic.w	r3, r3, #3
 800c968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c978:	f043 0302 	orr.w	r3, r3, #2
 800c97c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	695b      	ldr	r3, [r3, #20]
 800c998:	f003 0301 	and.w	r3, r3, #1
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4a13      	ldr	r2, [pc, #76]	; (800ca0c <USB_CoreReset+0x64>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d901      	bls.n	800c9c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e01b      	b.n	800c9fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	daf2      	bge.n	800c9b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	f043 0201 	orr.w	r2, r3, #1
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4a09      	ldr	r2, [pc, #36]	; (800ca0c <USB_CoreReset+0x64>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d901      	bls.n	800c9f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e006      	b.n	800c9fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d0f0      	beq.n	800c9de <USB_CoreReset+0x36>

  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	00030d40 	.word	0x00030d40

0800ca10 <__errno>:
 800ca10:	4b01      	ldr	r3, [pc, #4]	; (800ca18 <__errno+0x8>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	24000024 	.word	0x24000024

0800ca1c <__libc_init_array>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4d0d      	ldr	r5, [pc, #52]	; (800ca54 <__libc_init_array+0x38>)
 800ca20:	4c0d      	ldr	r4, [pc, #52]	; (800ca58 <__libc_init_array+0x3c>)
 800ca22:	1b64      	subs	r4, r4, r5
 800ca24:	10a4      	asrs	r4, r4, #2
 800ca26:	2600      	movs	r6, #0
 800ca28:	42a6      	cmp	r6, r4
 800ca2a:	d109      	bne.n	800ca40 <__libc_init_array+0x24>
 800ca2c:	4d0b      	ldr	r5, [pc, #44]	; (800ca5c <__libc_init_array+0x40>)
 800ca2e:	4c0c      	ldr	r4, [pc, #48]	; (800ca60 <__libc_init_array+0x44>)
 800ca30:	f000 fc8e 	bl	800d350 <_init>
 800ca34:	1b64      	subs	r4, r4, r5
 800ca36:	10a4      	asrs	r4, r4, #2
 800ca38:	2600      	movs	r6, #0
 800ca3a:	42a6      	cmp	r6, r4
 800ca3c:	d105      	bne.n	800ca4a <__libc_init_array+0x2e>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca44:	4798      	blx	r3
 800ca46:	3601      	adds	r6, #1
 800ca48:	e7ee      	b.n	800ca28 <__libc_init_array+0xc>
 800ca4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4e:	4798      	blx	r3
 800ca50:	3601      	adds	r6, #1
 800ca52:	e7f2      	b.n	800ca3a <__libc_init_array+0x1e>
 800ca54:	0800ea84 	.word	0x0800ea84
 800ca58:	0800ea84 	.word	0x0800ea84
 800ca5c:	0800ea84 	.word	0x0800ea84
 800ca60:	0800ea88 	.word	0x0800ea88

0800ca64 <memset>:
 800ca64:	4402      	add	r2, r0
 800ca66:	4603      	mov	r3, r0
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d100      	bne.n	800ca6e <memset+0xa>
 800ca6c:	4770      	bx	lr
 800ca6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca72:	e7f9      	b.n	800ca68 <memset+0x4>

0800ca74 <_free_r>:
 800ca74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca76:	2900      	cmp	r1, #0
 800ca78:	d044      	beq.n	800cb04 <_free_r+0x90>
 800ca7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca7e:	9001      	str	r0, [sp, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f1a1 0404 	sub.w	r4, r1, #4
 800ca86:	bfb8      	it	lt
 800ca88:	18e4      	addlt	r4, r4, r3
 800ca8a:	f000 f903 	bl	800cc94 <__malloc_lock>
 800ca8e:	4a1e      	ldr	r2, [pc, #120]	; (800cb08 <_free_r+0x94>)
 800ca90:	9801      	ldr	r0, [sp, #4]
 800ca92:	6813      	ldr	r3, [r2, #0]
 800ca94:	b933      	cbnz	r3, 800caa4 <_free_r+0x30>
 800ca96:	6063      	str	r3, [r4, #4]
 800ca98:	6014      	str	r4, [r2, #0]
 800ca9a:	b003      	add	sp, #12
 800ca9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800caa0:	f000 b8fe 	b.w	800cca0 <__malloc_unlock>
 800caa4:	42a3      	cmp	r3, r4
 800caa6:	d908      	bls.n	800caba <_free_r+0x46>
 800caa8:	6825      	ldr	r5, [r4, #0]
 800caaa:	1961      	adds	r1, r4, r5
 800caac:	428b      	cmp	r3, r1
 800caae:	bf01      	itttt	eq
 800cab0:	6819      	ldreq	r1, [r3, #0]
 800cab2:	685b      	ldreq	r3, [r3, #4]
 800cab4:	1949      	addeq	r1, r1, r5
 800cab6:	6021      	streq	r1, [r4, #0]
 800cab8:	e7ed      	b.n	800ca96 <_free_r+0x22>
 800caba:	461a      	mov	r2, r3
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	b10b      	cbz	r3, 800cac4 <_free_r+0x50>
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	d9fa      	bls.n	800caba <_free_r+0x46>
 800cac4:	6811      	ldr	r1, [r2, #0]
 800cac6:	1855      	adds	r5, r2, r1
 800cac8:	42a5      	cmp	r5, r4
 800caca:	d10b      	bne.n	800cae4 <_free_r+0x70>
 800cacc:	6824      	ldr	r4, [r4, #0]
 800cace:	4421      	add	r1, r4
 800cad0:	1854      	adds	r4, r2, r1
 800cad2:	42a3      	cmp	r3, r4
 800cad4:	6011      	str	r1, [r2, #0]
 800cad6:	d1e0      	bne.n	800ca9a <_free_r+0x26>
 800cad8:	681c      	ldr	r4, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	6053      	str	r3, [r2, #4]
 800cade:	4421      	add	r1, r4
 800cae0:	6011      	str	r1, [r2, #0]
 800cae2:	e7da      	b.n	800ca9a <_free_r+0x26>
 800cae4:	d902      	bls.n	800caec <_free_r+0x78>
 800cae6:	230c      	movs	r3, #12
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	e7d6      	b.n	800ca9a <_free_r+0x26>
 800caec:	6825      	ldr	r5, [r4, #0]
 800caee:	1961      	adds	r1, r4, r5
 800caf0:	428b      	cmp	r3, r1
 800caf2:	bf04      	itt	eq
 800caf4:	6819      	ldreq	r1, [r3, #0]
 800caf6:	685b      	ldreq	r3, [r3, #4]
 800caf8:	6063      	str	r3, [r4, #4]
 800cafa:	bf04      	itt	eq
 800cafc:	1949      	addeq	r1, r1, r5
 800cafe:	6021      	streq	r1, [r4, #0]
 800cb00:	6054      	str	r4, [r2, #4]
 800cb02:	e7ca      	b.n	800ca9a <_free_r+0x26>
 800cb04:	b003      	add	sp, #12
 800cb06:	bd30      	pop	{r4, r5, pc}
 800cb08:	24000eb0 	.word	0x24000eb0

0800cb0c <sbrk_aligned>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	4e0e      	ldr	r6, [pc, #56]	; (800cb48 <sbrk_aligned+0x3c>)
 800cb10:	460c      	mov	r4, r1
 800cb12:	6831      	ldr	r1, [r6, #0]
 800cb14:	4605      	mov	r5, r0
 800cb16:	b911      	cbnz	r1, 800cb1e <sbrk_aligned+0x12>
 800cb18:	f000 f88c 	bl	800cc34 <_sbrk_r>
 800cb1c:	6030      	str	r0, [r6, #0]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 f887 	bl	800cc34 <_sbrk_r>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d00a      	beq.n	800cb40 <sbrk_aligned+0x34>
 800cb2a:	1cc4      	adds	r4, r0, #3
 800cb2c:	f024 0403 	bic.w	r4, r4, #3
 800cb30:	42a0      	cmp	r0, r4
 800cb32:	d007      	beq.n	800cb44 <sbrk_aligned+0x38>
 800cb34:	1a21      	subs	r1, r4, r0
 800cb36:	4628      	mov	r0, r5
 800cb38:	f000 f87c 	bl	800cc34 <_sbrk_r>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d101      	bne.n	800cb44 <sbrk_aligned+0x38>
 800cb40:	f04f 34ff 	mov.w	r4, #4294967295
 800cb44:	4620      	mov	r0, r4
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	24000eb4 	.word	0x24000eb4

0800cb4c <_malloc_r>:
 800cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	1ccd      	adds	r5, r1, #3
 800cb52:	f025 0503 	bic.w	r5, r5, #3
 800cb56:	3508      	adds	r5, #8
 800cb58:	2d0c      	cmp	r5, #12
 800cb5a:	bf38      	it	cc
 800cb5c:	250c      	movcc	r5, #12
 800cb5e:	2d00      	cmp	r5, #0
 800cb60:	4607      	mov	r7, r0
 800cb62:	db01      	blt.n	800cb68 <_malloc_r+0x1c>
 800cb64:	42a9      	cmp	r1, r5
 800cb66:	d905      	bls.n	800cb74 <_malloc_r+0x28>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	2600      	movs	r6, #0
 800cb6e:	4630      	mov	r0, r6
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	4e2e      	ldr	r6, [pc, #184]	; (800cc30 <_malloc_r+0xe4>)
 800cb76:	f000 f88d 	bl	800cc94 <__malloc_lock>
 800cb7a:	6833      	ldr	r3, [r6, #0]
 800cb7c:	461c      	mov	r4, r3
 800cb7e:	bb34      	cbnz	r4, 800cbce <_malloc_r+0x82>
 800cb80:	4629      	mov	r1, r5
 800cb82:	4638      	mov	r0, r7
 800cb84:	f7ff ffc2 	bl	800cb0c <sbrk_aligned>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	d14d      	bne.n	800cc2a <_malloc_r+0xde>
 800cb8e:	6834      	ldr	r4, [r6, #0]
 800cb90:	4626      	mov	r6, r4
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	d140      	bne.n	800cc18 <_malloc_r+0xcc>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	4631      	mov	r1, r6
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	eb04 0803 	add.w	r8, r4, r3
 800cba0:	f000 f848 	bl	800cc34 <_sbrk_r>
 800cba4:	4580      	cmp	r8, r0
 800cba6:	d13a      	bne.n	800cc1e <_malloc_r+0xd2>
 800cba8:	6821      	ldr	r1, [r4, #0]
 800cbaa:	3503      	adds	r5, #3
 800cbac:	1a6d      	subs	r5, r5, r1
 800cbae:	f025 0503 	bic.w	r5, r5, #3
 800cbb2:	3508      	adds	r5, #8
 800cbb4:	2d0c      	cmp	r5, #12
 800cbb6:	bf38      	it	cc
 800cbb8:	250c      	movcc	r5, #12
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f7ff ffa5 	bl	800cb0c <sbrk_aligned>
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d02b      	beq.n	800cc1e <_malloc_r+0xd2>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	442b      	add	r3, r5
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	e00e      	b.n	800cbec <_malloc_r+0xa0>
 800cbce:	6822      	ldr	r2, [r4, #0]
 800cbd0:	1b52      	subs	r2, r2, r5
 800cbd2:	d41e      	bmi.n	800cc12 <_malloc_r+0xc6>
 800cbd4:	2a0b      	cmp	r2, #11
 800cbd6:	d916      	bls.n	800cc06 <_malloc_r+0xba>
 800cbd8:	1961      	adds	r1, r4, r5
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	6025      	str	r5, [r4, #0]
 800cbde:	bf18      	it	ne
 800cbe0:	6059      	strne	r1, [r3, #4]
 800cbe2:	6863      	ldr	r3, [r4, #4]
 800cbe4:	bf08      	it	eq
 800cbe6:	6031      	streq	r1, [r6, #0]
 800cbe8:	5162      	str	r2, [r4, r5]
 800cbea:	604b      	str	r3, [r1, #4]
 800cbec:	4638      	mov	r0, r7
 800cbee:	f104 060b 	add.w	r6, r4, #11
 800cbf2:	f000 f855 	bl	800cca0 <__malloc_unlock>
 800cbf6:	f026 0607 	bic.w	r6, r6, #7
 800cbfa:	1d23      	adds	r3, r4, #4
 800cbfc:	1af2      	subs	r2, r6, r3
 800cbfe:	d0b6      	beq.n	800cb6e <_malloc_r+0x22>
 800cc00:	1b9b      	subs	r3, r3, r6
 800cc02:	50a3      	str	r3, [r4, r2]
 800cc04:	e7b3      	b.n	800cb6e <_malloc_r+0x22>
 800cc06:	6862      	ldr	r2, [r4, #4]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	bf0c      	ite	eq
 800cc0c:	6032      	streq	r2, [r6, #0]
 800cc0e:	605a      	strne	r2, [r3, #4]
 800cc10:	e7ec      	b.n	800cbec <_malloc_r+0xa0>
 800cc12:	4623      	mov	r3, r4
 800cc14:	6864      	ldr	r4, [r4, #4]
 800cc16:	e7b2      	b.n	800cb7e <_malloc_r+0x32>
 800cc18:	4634      	mov	r4, r6
 800cc1a:	6876      	ldr	r6, [r6, #4]
 800cc1c:	e7b9      	b.n	800cb92 <_malloc_r+0x46>
 800cc1e:	230c      	movs	r3, #12
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	4638      	mov	r0, r7
 800cc24:	f000 f83c 	bl	800cca0 <__malloc_unlock>
 800cc28:	e7a1      	b.n	800cb6e <_malloc_r+0x22>
 800cc2a:	6025      	str	r5, [r4, #0]
 800cc2c:	e7de      	b.n	800cbec <_malloc_r+0xa0>
 800cc2e:	bf00      	nop
 800cc30:	24000eb0 	.word	0x24000eb0

0800cc34 <_sbrk_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d06      	ldr	r5, [pc, #24]	; (800cc50 <_sbrk_r+0x1c>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	f7f6 ffee 	bl	8003c20 <_sbrk>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_sbrk_r+0x1a>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_sbrk_r+0x1a>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	24000eb8 	.word	0x24000eb8

0800cc54 <siprintf>:
 800cc54:	b40e      	push	{r1, r2, r3}
 800cc56:	b500      	push	{lr}
 800cc58:	b09c      	sub	sp, #112	; 0x70
 800cc5a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc5c:	9002      	str	r0, [sp, #8]
 800cc5e:	9006      	str	r0, [sp, #24]
 800cc60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc64:	4809      	ldr	r0, [pc, #36]	; (800cc8c <siprintf+0x38>)
 800cc66:	9107      	str	r1, [sp, #28]
 800cc68:	9104      	str	r1, [sp, #16]
 800cc6a:	4909      	ldr	r1, [pc, #36]	; (800cc90 <siprintf+0x3c>)
 800cc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc70:	9105      	str	r1, [sp, #20]
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	a902      	add	r1, sp, #8
 800cc78:	f000 f874 	bl	800cd64 <_svfiprintf_r>
 800cc7c:	9b02      	ldr	r3, [sp, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	b01c      	add	sp, #112	; 0x70
 800cc84:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc88:	b003      	add	sp, #12
 800cc8a:	4770      	bx	lr
 800cc8c:	24000024 	.word	0x24000024
 800cc90:	ffff0208 	.word	0xffff0208

0800cc94 <__malloc_lock>:
 800cc94:	4801      	ldr	r0, [pc, #4]	; (800cc9c <__malloc_lock+0x8>)
 800cc96:	f000 baf9 	b.w	800d28c <__retarget_lock_acquire_recursive>
 800cc9a:	bf00      	nop
 800cc9c:	24000ebc 	.word	0x24000ebc

0800cca0 <__malloc_unlock>:
 800cca0:	4801      	ldr	r0, [pc, #4]	; (800cca8 <__malloc_unlock+0x8>)
 800cca2:	f000 baf4 	b.w	800d28e <__retarget_lock_release_recursive>
 800cca6:	bf00      	nop
 800cca8:	24000ebc 	.word	0x24000ebc

0800ccac <__ssputs_r>:
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	688e      	ldr	r6, [r1, #8]
 800ccb2:	429e      	cmp	r6, r3
 800ccb4:	4682      	mov	sl, r0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	4690      	mov	r8, r2
 800ccba:	461f      	mov	r7, r3
 800ccbc:	d838      	bhi.n	800cd30 <__ssputs_r+0x84>
 800ccbe:	898a      	ldrh	r2, [r1, #12]
 800ccc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccc4:	d032      	beq.n	800cd2c <__ssputs_r+0x80>
 800ccc6:	6825      	ldr	r5, [r4, #0]
 800ccc8:	6909      	ldr	r1, [r1, #16]
 800ccca:	eba5 0901 	sub.w	r9, r5, r1
 800ccce:	6965      	ldr	r5, [r4, #20]
 800ccd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccd8:	3301      	adds	r3, #1
 800ccda:	444b      	add	r3, r9
 800ccdc:	106d      	asrs	r5, r5, #1
 800ccde:	429d      	cmp	r5, r3
 800cce0:	bf38      	it	cc
 800cce2:	461d      	movcc	r5, r3
 800cce4:	0553      	lsls	r3, r2, #21
 800cce6:	d531      	bpl.n	800cd4c <__ssputs_r+0xa0>
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7ff ff2f 	bl	800cb4c <_malloc_r>
 800ccee:	4606      	mov	r6, r0
 800ccf0:	b950      	cbnz	r0, 800cd08 <__ssputs_r+0x5c>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	f8ca 3000 	str.w	r3, [sl]
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccfe:	81a3      	strh	r3, [r4, #12]
 800cd00:	f04f 30ff 	mov.w	r0, #4294967295
 800cd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd08:	6921      	ldr	r1, [r4, #16]
 800cd0a:	464a      	mov	r2, r9
 800cd0c:	f000 fac0 	bl	800d290 <memcpy>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	6126      	str	r6, [r4, #16]
 800cd1e:	6165      	str	r5, [r4, #20]
 800cd20:	444e      	add	r6, r9
 800cd22:	eba5 0509 	sub.w	r5, r5, r9
 800cd26:	6026      	str	r6, [r4, #0]
 800cd28:	60a5      	str	r5, [r4, #8]
 800cd2a:	463e      	mov	r6, r7
 800cd2c:	42be      	cmp	r6, r7
 800cd2e:	d900      	bls.n	800cd32 <__ssputs_r+0x86>
 800cd30:	463e      	mov	r6, r7
 800cd32:	6820      	ldr	r0, [r4, #0]
 800cd34:	4632      	mov	r2, r6
 800cd36:	4641      	mov	r1, r8
 800cd38:	f000 fab8 	bl	800d2ac <memmove>
 800cd3c:	68a3      	ldr	r3, [r4, #8]
 800cd3e:	1b9b      	subs	r3, r3, r6
 800cd40:	60a3      	str	r3, [r4, #8]
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	4433      	add	r3, r6
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e7db      	b.n	800cd04 <__ssputs_r+0x58>
 800cd4c:	462a      	mov	r2, r5
 800cd4e:	f000 fac7 	bl	800d2e0 <_realloc_r>
 800cd52:	4606      	mov	r6, r0
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d1e1      	bne.n	800cd1c <__ssputs_r+0x70>
 800cd58:	6921      	ldr	r1, [r4, #16]
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	f7ff fe8a 	bl	800ca74 <_free_r>
 800cd60:	e7c7      	b.n	800ccf2 <__ssputs_r+0x46>
	...

0800cd64 <_svfiprintf_r>:
 800cd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd68:	4698      	mov	r8, r3
 800cd6a:	898b      	ldrh	r3, [r1, #12]
 800cd6c:	061b      	lsls	r3, r3, #24
 800cd6e:	b09d      	sub	sp, #116	; 0x74
 800cd70:	4607      	mov	r7, r0
 800cd72:	460d      	mov	r5, r1
 800cd74:	4614      	mov	r4, r2
 800cd76:	d50e      	bpl.n	800cd96 <_svfiprintf_r+0x32>
 800cd78:	690b      	ldr	r3, [r1, #16]
 800cd7a:	b963      	cbnz	r3, 800cd96 <_svfiprintf_r+0x32>
 800cd7c:	2140      	movs	r1, #64	; 0x40
 800cd7e:	f7ff fee5 	bl	800cb4c <_malloc_r>
 800cd82:	6028      	str	r0, [r5, #0]
 800cd84:	6128      	str	r0, [r5, #16]
 800cd86:	b920      	cbnz	r0, 800cd92 <_svfiprintf_r+0x2e>
 800cd88:	230c      	movs	r3, #12
 800cd8a:	603b      	str	r3, [r7, #0]
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd90:	e0d1      	b.n	800cf36 <_svfiprintf_r+0x1d2>
 800cd92:	2340      	movs	r3, #64	; 0x40
 800cd94:	616b      	str	r3, [r5, #20]
 800cd96:	2300      	movs	r3, #0
 800cd98:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9a:	2320      	movs	r3, #32
 800cd9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cda0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda4:	2330      	movs	r3, #48	; 0x30
 800cda6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf50 <_svfiprintf_r+0x1ec>
 800cdaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdae:	f04f 0901 	mov.w	r9, #1
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	469a      	mov	sl, r3
 800cdb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdba:	b10a      	cbz	r2, 800cdc0 <_svfiprintf_r+0x5c>
 800cdbc:	2a25      	cmp	r2, #37	; 0x25
 800cdbe:	d1f9      	bne.n	800cdb4 <_svfiprintf_r+0x50>
 800cdc0:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc4:	d00b      	beq.n	800cdde <_svfiprintf_r+0x7a>
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	4622      	mov	r2, r4
 800cdca:	4629      	mov	r1, r5
 800cdcc:	4638      	mov	r0, r7
 800cdce:	f7ff ff6d 	bl	800ccac <__ssputs_r>
 800cdd2:	3001      	adds	r0, #1
 800cdd4:	f000 80aa 	beq.w	800cf2c <_svfiprintf_r+0x1c8>
 800cdd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdda:	445a      	add	r2, fp
 800cddc:	9209      	str	r2, [sp, #36]	; 0x24
 800cdde:	f89a 3000 	ldrb.w	r3, [sl]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 80a2 	beq.w	800cf2c <_svfiprintf_r+0x1c8>
 800cde8:	2300      	movs	r3, #0
 800cdea:	f04f 32ff 	mov.w	r2, #4294967295
 800cdee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf2:	f10a 0a01 	add.w	sl, sl, #1
 800cdf6:	9304      	str	r3, [sp, #16]
 800cdf8:	9307      	str	r3, [sp, #28]
 800cdfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdfe:	931a      	str	r3, [sp, #104]	; 0x68
 800ce00:	4654      	mov	r4, sl
 800ce02:	2205      	movs	r2, #5
 800ce04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce08:	4851      	ldr	r0, [pc, #324]	; (800cf50 <_svfiprintf_r+0x1ec>)
 800ce0a:	f7f3 fa69 	bl	80002e0 <memchr>
 800ce0e:	9a04      	ldr	r2, [sp, #16]
 800ce10:	b9d8      	cbnz	r0, 800ce4a <_svfiprintf_r+0xe6>
 800ce12:	06d0      	lsls	r0, r2, #27
 800ce14:	bf44      	itt	mi
 800ce16:	2320      	movmi	r3, #32
 800ce18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce1c:	0711      	lsls	r1, r2, #28
 800ce1e:	bf44      	itt	mi
 800ce20:	232b      	movmi	r3, #43	; 0x2b
 800ce22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce26:	f89a 3000 	ldrb.w	r3, [sl]
 800ce2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2c:	d015      	beq.n	800ce5a <_svfiprintf_r+0xf6>
 800ce2e:	9a07      	ldr	r2, [sp, #28]
 800ce30:	4654      	mov	r4, sl
 800ce32:	2000      	movs	r0, #0
 800ce34:	f04f 0c0a 	mov.w	ip, #10
 800ce38:	4621      	mov	r1, r4
 800ce3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce3e:	3b30      	subs	r3, #48	; 0x30
 800ce40:	2b09      	cmp	r3, #9
 800ce42:	d94e      	bls.n	800cee2 <_svfiprintf_r+0x17e>
 800ce44:	b1b0      	cbz	r0, 800ce74 <_svfiprintf_r+0x110>
 800ce46:	9207      	str	r2, [sp, #28]
 800ce48:	e014      	b.n	800ce74 <_svfiprintf_r+0x110>
 800ce4a:	eba0 0308 	sub.w	r3, r0, r8
 800ce4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce52:	4313      	orrs	r3, r2
 800ce54:	9304      	str	r3, [sp, #16]
 800ce56:	46a2      	mov	sl, r4
 800ce58:	e7d2      	b.n	800ce00 <_svfiprintf_r+0x9c>
 800ce5a:	9b03      	ldr	r3, [sp, #12]
 800ce5c:	1d19      	adds	r1, r3, #4
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	9103      	str	r1, [sp, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	bfbb      	ittet	lt
 800ce66:	425b      	neglt	r3, r3
 800ce68:	f042 0202 	orrlt.w	r2, r2, #2
 800ce6c:	9307      	strge	r3, [sp, #28]
 800ce6e:	9307      	strlt	r3, [sp, #28]
 800ce70:	bfb8      	it	lt
 800ce72:	9204      	strlt	r2, [sp, #16]
 800ce74:	7823      	ldrb	r3, [r4, #0]
 800ce76:	2b2e      	cmp	r3, #46	; 0x2e
 800ce78:	d10c      	bne.n	800ce94 <_svfiprintf_r+0x130>
 800ce7a:	7863      	ldrb	r3, [r4, #1]
 800ce7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce7e:	d135      	bne.n	800ceec <_svfiprintf_r+0x188>
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	1d1a      	adds	r2, r3, #4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	9203      	str	r2, [sp, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	bfb8      	it	lt
 800ce8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce90:	3402      	adds	r4, #2
 800ce92:	9305      	str	r3, [sp, #20]
 800ce94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf60 <_svfiprintf_r+0x1fc>
 800ce98:	7821      	ldrb	r1, [r4, #0]
 800ce9a:	2203      	movs	r2, #3
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	f7f3 fa1f 	bl	80002e0 <memchr>
 800cea2:	b140      	cbz	r0, 800ceb6 <_svfiprintf_r+0x152>
 800cea4:	2340      	movs	r3, #64	; 0x40
 800cea6:	eba0 000a 	sub.w	r0, r0, sl
 800ceaa:	fa03 f000 	lsl.w	r0, r3, r0
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	4303      	orrs	r3, r0
 800ceb2:	3401      	adds	r4, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceba:	4826      	ldr	r0, [pc, #152]	; (800cf54 <_svfiprintf_r+0x1f0>)
 800cebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cec0:	2206      	movs	r2, #6
 800cec2:	f7f3 fa0d 	bl	80002e0 <memchr>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d038      	beq.n	800cf3c <_svfiprintf_r+0x1d8>
 800ceca:	4b23      	ldr	r3, [pc, #140]	; (800cf58 <_svfiprintf_r+0x1f4>)
 800cecc:	bb1b      	cbnz	r3, 800cf16 <_svfiprintf_r+0x1b2>
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	3307      	adds	r3, #7
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	3308      	adds	r3, #8
 800ced8:	9303      	str	r3, [sp, #12]
 800ceda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cedc:	4433      	add	r3, r6
 800cede:	9309      	str	r3, [sp, #36]	; 0x24
 800cee0:	e767      	b.n	800cdb2 <_svfiprintf_r+0x4e>
 800cee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee6:	460c      	mov	r4, r1
 800cee8:	2001      	movs	r0, #1
 800ceea:	e7a5      	b.n	800ce38 <_svfiprintf_r+0xd4>
 800ceec:	2300      	movs	r3, #0
 800ceee:	3401      	adds	r4, #1
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	4619      	mov	r1, r3
 800cef4:	f04f 0c0a 	mov.w	ip, #10
 800cef8:	4620      	mov	r0, r4
 800cefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefe:	3a30      	subs	r2, #48	; 0x30
 800cf00:	2a09      	cmp	r2, #9
 800cf02:	d903      	bls.n	800cf0c <_svfiprintf_r+0x1a8>
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0c5      	beq.n	800ce94 <_svfiprintf_r+0x130>
 800cf08:	9105      	str	r1, [sp, #20]
 800cf0a:	e7c3      	b.n	800ce94 <_svfiprintf_r+0x130>
 800cf0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf10:	4604      	mov	r4, r0
 800cf12:	2301      	movs	r3, #1
 800cf14:	e7f0      	b.n	800cef8 <_svfiprintf_r+0x194>
 800cf16:	ab03      	add	r3, sp, #12
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4b0f      	ldr	r3, [pc, #60]	; (800cf5c <_svfiprintf_r+0x1f8>)
 800cf1e:	a904      	add	r1, sp, #16
 800cf20:	4638      	mov	r0, r7
 800cf22:	f3af 8000 	nop.w
 800cf26:	1c42      	adds	r2, r0, #1
 800cf28:	4606      	mov	r6, r0
 800cf2a:	d1d6      	bne.n	800ceda <_svfiprintf_r+0x176>
 800cf2c:	89ab      	ldrh	r3, [r5, #12]
 800cf2e:	065b      	lsls	r3, r3, #25
 800cf30:	f53f af2c 	bmi.w	800cd8c <_svfiprintf_r+0x28>
 800cf34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf36:	b01d      	add	sp, #116	; 0x74
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	ab03      	add	r3, sp, #12
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	462a      	mov	r2, r5
 800cf42:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <_svfiprintf_r+0x1f8>)
 800cf44:	a904      	add	r1, sp, #16
 800cf46:	4638      	mov	r0, r7
 800cf48:	f000 f87a 	bl	800d040 <_printf_i>
 800cf4c:	e7eb      	b.n	800cf26 <_svfiprintf_r+0x1c2>
 800cf4e:	bf00      	nop
 800cf50:	0800ea48 	.word	0x0800ea48
 800cf54:	0800ea52 	.word	0x0800ea52
 800cf58:	00000000 	.word	0x00000000
 800cf5c:	0800ccad 	.word	0x0800ccad
 800cf60:	0800ea4e 	.word	0x0800ea4e

0800cf64 <_printf_common>:
 800cf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf68:	4616      	mov	r6, r2
 800cf6a:	4699      	mov	r9, r3
 800cf6c:	688a      	ldr	r2, [r1, #8]
 800cf6e:	690b      	ldr	r3, [r1, #16]
 800cf70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf74:	4293      	cmp	r3, r2
 800cf76:	bfb8      	it	lt
 800cf78:	4613      	movlt	r3, r2
 800cf7a:	6033      	str	r3, [r6, #0]
 800cf7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf80:	4607      	mov	r7, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	b10a      	cbz	r2, 800cf8a <_printf_common+0x26>
 800cf86:	3301      	adds	r3, #1
 800cf88:	6033      	str	r3, [r6, #0]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	0699      	lsls	r1, r3, #26
 800cf8e:	bf42      	ittt	mi
 800cf90:	6833      	ldrmi	r3, [r6, #0]
 800cf92:	3302      	addmi	r3, #2
 800cf94:	6033      	strmi	r3, [r6, #0]
 800cf96:	6825      	ldr	r5, [r4, #0]
 800cf98:	f015 0506 	ands.w	r5, r5, #6
 800cf9c:	d106      	bne.n	800cfac <_printf_common+0x48>
 800cf9e:	f104 0a19 	add.w	sl, r4, #25
 800cfa2:	68e3      	ldr	r3, [r4, #12]
 800cfa4:	6832      	ldr	r2, [r6, #0]
 800cfa6:	1a9b      	subs	r3, r3, r2
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	dc26      	bgt.n	800cffa <_printf_common+0x96>
 800cfac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfb0:	1e13      	subs	r3, r2, #0
 800cfb2:	6822      	ldr	r2, [r4, #0]
 800cfb4:	bf18      	it	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	0692      	lsls	r2, r2, #26
 800cfba:	d42b      	bmi.n	800d014 <_printf_common+0xb0>
 800cfbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d01e      	beq.n	800d008 <_printf_common+0xa4>
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	68e5      	ldr	r5, [r4, #12]
 800cfce:	6832      	ldr	r2, [r6, #0]
 800cfd0:	f003 0306 	and.w	r3, r3, #6
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	bf08      	it	eq
 800cfd8:	1aad      	subeq	r5, r5, r2
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	bf0c      	ite	eq
 800cfe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfe4:	2500      	movne	r5, #0
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	bfc4      	itt	gt
 800cfea:	1a9b      	subgt	r3, r3, r2
 800cfec:	18ed      	addgt	r5, r5, r3
 800cfee:	2600      	movs	r6, #0
 800cff0:	341a      	adds	r4, #26
 800cff2:	42b5      	cmp	r5, r6
 800cff4:	d11a      	bne.n	800d02c <_printf_common+0xc8>
 800cff6:	2000      	movs	r0, #0
 800cff8:	e008      	b.n	800d00c <_printf_common+0xa8>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4652      	mov	r2, sl
 800cffe:	4649      	mov	r1, r9
 800d000:	4638      	mov	r0, r7
 800d002:	47c0      	blx	r8
 800d004:	3001      	adds	r0, #1
 800d006:	d103      	bne.n	800d010 <_printf_common+0xac>
 800d008:	f04f 30ff 	mov.w	r0, #4294967295
 800d00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d010:	3501      	adds	r5, #1
 800d012:	e7c6      	b.n	800cfa2 <_printf_common+0x3e>
 800d014:	18e1      	adds	r1, r4, r3
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	2030      	movs	r0, #48	; 0x30
 800d01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d01e:	4422      	add	r2, r4
 800d020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d028:	3302      	adds	r3, #2
 800d02a:	e7c7      	b.n	800cfbc <_printf_common+0x58>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4622      	mov	r2, r4
 800d030:	4649      	mov	r1, r9
 800d032:	4638      	mov	r0, r7
 800d034:	47c0      	blx	r8
 800d036:	3001      	adds	r0, #1
 800d038:	d0e6      	beq.n	800d008 <_printf_common+0xa4>
 800d03a:	3601      	adds	r6, #1
 800d03c:	e7d9      	b.n	800cff2 <_printf_common+0x8e>
	...

0800d040 <_printf_i>:
 800d040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	7e0f      	ldrb	r7, [r1, #24]
 800d046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d048:	2f78      	cmp	r7, #120	; 0x78
 800d04a:	4691      	mov	r9, r2
 800d04c:	4680      	mov	r8, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	469a      	mov	sl, r3
 800d052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d056:	d807      	bhi.n	800d068 <_printf_i+0x28>
 800d058:	2f62      	cmp	r7, #98	; 0x62
 800d05a:	d80a      	bhi.n	800d072 <_printf_i+0x32>
 800d05c:	2f00      	cmp	r7, #0
 800d05e:	f000 80d8 	beq.w	800d212 <_printf_i+0x1d2>
 800d062:	2f58      	cmp	r7, #88	; 0x58
 800d064:	f000 80a3 	beq.w	800d1ae <_printf_i+0x16e>
 800d068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d070:	e03a      	b.n	800d0e8 <_printf_i+0xa8>
 800d072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d076:	2b15      	cmp	r3, #21
 800d078:	d8f6      	bhi.n	800d068 <_printf_i+0x28>
 800d07a:	a101      	add	r1, pc, #4	; (adr r1, 800d080 <_printf_i+0x40>)
 800d07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d080:	0800d0d9 	.word	0x0800d0d9
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d069 	.word	0x0800d069
 800d08c:	0800d069 	.word	0x0800d069
 800d090:	0800d069 	.word	0x0800d069
 800d094:	0800d069 	.word	0x0800d069
 800d098:	0800d0ed 	.word	0x0800d0ed
 800d09c:	0800d069 	.word	0x0800d069
 800d0a0:	0800d069 	.word	0x0800d069
 800d0a4:	0800d069 	.word	0x0800d069
 800d0a8:	0800d069 	.word	0x0800d069
 800d0ac:	0800d1f9 	.word	0x0800d1f9
 800d0b0:	0800d11d 	.word	0x0800d11d
 800d0b4:	0800d1db 	.word	0x0800d1db
 800d0b8:	0800d069 	.word	0x0800d069
 800d0bc:	0800d069 	.word	0x0800d069
 800d0c0:	0800d21b 	.word	0x0800d21b
 800d0c4:	0800d069 	.word	0x0800d069
 800d0c8:	0800d11d 	.word	0x0800d11d
 800d0cc:	0800d069 	.word	0x0800d069
 800d0d0:	0800d069 	.word	0x0800d069
 800d0d4:	0800d1e3 	.word	0x0800d1e3
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	1d1a      	adds	r2, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	602a      	str	r2, [r5, #0]
 800d0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e0a3      	b.n	800d234 <_printf_i+0x1f4>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	6829      	ldr	r1, [r5, #0]
 800d0f0:	0606      	lsls	r6, r0, #24
 800d0f2:	f101 0304 	add.w	r3, r1, #4
 800d0f6:	d50a      	bpl.n	800d10e <_printf_i+0xce>
 800d0f8:	680e      	ldr	r6, [r1, #0]
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	da03      	bge.n	800d108 <_printf_i+0xc8>
 800d100:	232d      	movs	r3, #45	; 0x2d
 800d102:	4276      	negs	r6, r6
 800d104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d108:	485e      	ldr	r0, [pc, #376]	; (800d284 <_printf_i+0x244>)
 800d10a:	230a      	movs	r3, #10
 800d10c:	e019      	b.n	800d142 <_printf_i+0x102>
 800d10e:	680e      	ldr	r6, [r1, #0]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d116:	bf18      	it	ne
 800d118:	b236      	sxthne	r6, r6
 800d11a:	e7ef      	b.n	800d0fc <_printf_i+0xbc>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	6820      	ldr	r0, [r4, #0]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	6029      	str	r1, [r5, #0]
 800d124:	0601      	lsls	r1, r0, #24
 800d126:	d501      	bpl.n	800d12c <_printf_i+0xec>
 800d128:	681e      	ldr	r6, [r3, #0]
 800d12a:	e002      	b.n	800d132 <_printf_i+0xf2>
 800d12c:	0646      	lsls	r6, r0, #25
 800d12e:	d5fb      	bpl.n	800d128 <_printf_i+0xe8>
 800d130:	881e      	ldrh	r6, [r3, #0]
 800d132:	4854      	ldr	r0, [pc, #336]	; (800d284 <_printf_i+0x244>)
 800d134:	2f6f      	cmp	r7, #111	; 0x6f
 800d136:	bf0c      	ite	eq
 800d138:	2308      	moveq	r3, #8
 800d13a:	230a      	movne	r3, #10
 800d13c:	2100      	movs	r1, #0
 800d13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d142:	6865      	ldr	r5, [r4, #4]
 800d144:	60a5      	str	r5, [r4, #8]
 800d146:	2d00      	cmp	r5, #0
 800d148:	bfa2      	ittt	ge
 800d14a:	6821      	ldrge	r1, [r4, #0]
 800d14c:	f021 0104 	bicge.w	r1, r1, #4
 800d150:	6021      	strge	r1, [r4, #0]
 800d152:	b90e      	cbnz	r6, 800d158 <_printf_i+0x118>
 800d154:	2d00      	cmp	r5, #0
 800d156:	d04d      	beq.n	800d1f4 <_printf_i+0x1b4>
 800d158:	4615      	mov	r5, r2
 800d15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d15e:	fb03 6711 	mls	r7, r3, r1, r6
 800d162:	5dc7      	ldrb	r7, [r0, r7]
 800d164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d168:	4637      	mov	r7, r6
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	460e      	mov	r6, r1
 800d16e:	d9f4      	bls.n	800d15a <_printf_i+0x11a>
 800d170:	2b08      	cmp	r3, #8
 800d172:	d10b      	bne.n	800d18c <_printf_i+0x14c>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	07de      	lsls	r6, r3, #31
 800d178:	d508      	bpl.n	800d18c <_printf_i+0x14c>
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	6861      	ldr	r1, [r4, #4]
 800d17e:	4299      	cmp	r1, r3
 800d180:	bfde      	ittt	le
 800d182:	2330      	movle	r3, #48	; 0x30
 800d184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d18c:	1b52      	subs	r2, r2, r5
 800d18e:	6122      	str	r2, [r4, #16]
 800d190:	f8cd a000 	str.w	sl, [sp]
 800d194:	464b      	mov	r3, r9
 800d196:	aa03      	add	r2, sp, #12
 800d198:	4621      	mov	r1, r4
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7ff fee2 	bl	800cf64 <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d14c      	bne.n	800d23e <_printf_i+0x1fe>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	b004      	add	sp, #16
 800d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ae:	4835      	ldr	r0, [pc, #212]	; (800d284 <_printf_i+0x244>)
 800d1b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1b4:	6829      	ldr	r1, [r5, #0]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1bc:	6029      	str	r1, [r5, #0]
 800d1be:	061d      	lsls	r5, r3, #24
 800d1c0:	d514      	bpl.n	800d1ec <_printf_i+0x1ac>
 800d1c2:	07df      	lsls	r7, r3, #31
 800d1c4:	bf44      	itt	mi
 800d1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1ca:	6023      	strmi	r3, [r4, #0]
 800d1cc:	b91e      	cbnz	r6, 800d1d6 <_printf_i+0x196>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f023 0320 	bic.w	r3, r3, #32
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	e7b0      	b.n	800d13c <_printf_i+0xfc>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	f043 0320 	orr.w	r3, r3, #32
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	2378      	movs	r3, #120	; 0x78
 800d1e4:	4828      	ldr	r0, [pc, #160]	; (800d288 <_printf_i+0x248>)
 800d1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1ea:	e7e3      	b.n	800d1b4 <_printf_i+0x174>
 800d1ec:	0659      	lsls	r1, r3, #25
 800d1ee:	bf48      	it	mi
 800d1f0:	b2b6      	uxthmi	r6, r6
 800d1f2:	e7e6      	b.n	800d1c2 <_printf_i+0x182>
 800d1f4:	4615      	mov	r5, r2
 800d1f6:	e7bb      	b.n	800d170 <_printf_i+0x130>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	6826      	ldr	r6, [r4, #0]
 800d1fc:	6961      	ldr	r1, [r4, #20]
 800d1fe:	1d18      	adds	r0, r3, #4
 800d200:	6028      	str	r0, [r5, #0]
 800d202:	0635      	lsls	r5, r6, #24
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	d501      	bpl.n	800d20c <_printf_i+0x1cc>
 800d208:	6019      	str	r1, [r3, #0]
 800d20a:	e002      	b.n	800d212 <_printf_i+0x1d2>
 800d20c:	0670      	lsls	r0, r6, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0x1c8>
 800d210:	8019      	strh	r1, [r3, #0]
 800d212:	2300      	movs	r3, #0
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	4615      	mov	r5, r2
 800d218:	e7ba      	b.n	800d190 <_printf_i+0x150>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	1d1a      	adds	r2, r3, #4
 800d21e:	602a      	str	r2, [r5, #0]
 800d220:	681d      	ldr	r5, [r3, #0]
 800d222:	6862      	ldr	r2, [r4, #4]
 800d224:	2100      	movs	r1, #0
 800d226:	4628      	mov	r0, r5
 800d228:	f7f3 f85a 	bl	80002e0 <memchr>
 800d22c:	b108      	cbz	r0, 800d232 <_printf_i+0x1f2>
 800d22e:	1b40      	subs	r0, r0, r5
 800d230:	6060      	str	r0, [r4, #4]
 800d232:	6863      	ldr	r3, [r4, #4]
 800d234:	6123      	str	r3, [r4, #16]
 800d236:	2300      	movs	r3, #0
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23c:	e7a8      	b.n	800d190 <_printf_i+0x150>
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	462a      	mov	r2, r5
 800d242:	4649      	mov	r1, r9
 800d244:	4640      	mov	r0, r8
 800d246:	47d0      	blx	sl
 800d248:	3001      	adds	r0, #1
 800d24a:	d0ab      	beq.n	800d1a4 <_printf_i+0x164>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	079b      	lsls	r3, r3, #30
 800d250:	d413      	bmi.n	800d27a <_printf_i+0x23a>
 800d252:	68e0      	ldr	r0, [r4, #12]
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	4298      	cmp	r0, r3
 800d258:	bfb8      	it	lt
 800d25a:	4618      	movlt	r0, r3
 800d25c:	e7a4      	b.n	800d1a8 <_printf_i+0x168>
 800d25e:	2301      	movs	r3, #1
 800d260:	4632      	mov	r2, r6
 800d262:	4649      	mov	r1, r9
 800d264:	4640      	mov	r0, r8
 800d266:	47d0      	blx	sl
 800d268:	3001      	adds	r0, #1
 800d26a:	d09b      	beq.n	800d1a4 <_printf_i+0x164>
 800d26c:	3501      	adds	r5, #1
 800d26e:	68e3      	ldr	r3, [r4, #12]
 800d270:	9903      	ldr	r1, [sp, #12]
 800d272:	1a5b      	subs	r3, r3, r1
 800d274:	42ab      	cmp	r3, r5
 800d276:	dcf2      	bgt.n	800d25e <_printf_i+0x21e>
 800d278:	e7eb      	b.n	800d252 <_printf_i+0x212>
 800d27a:	2500      	movs	r5, #0
 800d27c:	f104 0619 	add.w	r6, r4, #25
 800d280:	e7f5      	b.n	800d26e <_printf_i+0x22e>
 800d282:	bf00      	nop
 800d284:	0800ea59 	.word	0x0800ea59
 800d288:	0800ea6a 	.word	0x0800ea6a

0800d28c <__retarget_lock_acquire_recursive>:
 800d28c:	4770      	bx	lr

0800d28e <__retarget_lock_release_recursive>:
 800d28e:	4770      	bx	lr

0800d290 <memcpy>:
 800d290:	440a      	add	r2, r1
 800d292:	4291      	cmp	r1, r2
 800d294:	f100 33ff 	add.w	r3, r0, #4294967295
 800d298:	d100      	bne.n	800d29c <memcpy+0xc>
 800d29a:	4770      	bx	lr
 800d29c:	b510      	push	{r4, lr}
 800d29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2a6:	4291      	cmp	r1, r2
 800d2a8:	d1f9      	bne.n	800d29e <memcpy+0xe>
 800d2aa:	bd10      	pop	{r4, pc}

0800d2ac <memmove>:
 800d2ac:	4288      	cmp	r0, r1
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	eb01 0402 	add.w	r4, r1, r2
 800d2b4:	d902      	bls.n	800d2bc <memmove+0x10>
 800d2b6:	4284      	cmp	r4, r0
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	d807      	bhi.n	800d2cc <memmove+0x20>
 800d2bc:	1e43      	subs	r3, r0, #1
 800d2be:	42a1      	cmp	r1, r4
 800d2c0:	d008      	beq.n	800d2d4 <memmove+0x28>
 800d2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ca:	e7f8      	b.n	800d2be <memmove+0x12>
 800d2cc:	4402      	add	r2, r0
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	428a      	cmp	r2, r1
 800d2d2:	d100      	bne.n	800d2d6 <memmove+0x2a>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2de:	e7f7      	b.n	800d2d0 <memmove+0x24>

0800d2e0 <_realloc_r>:
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	4614      	mov	r4, r2
 800d2e8:	460e      	mov	r6, r1
 800d2ea:	b921      	cbnz	r1, 800d2f6 <_realloc_r+0x16>
 800d2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	f7ff bc2b 	b.w	800cb4c <_malloc_r>
 800d2f6:	b92a      	cbnz	r2, 800d304 <_realloc_r+0x24>
 800d2f8:	f7ff fbbc 	bl	800ca74 <_free_r>
 800d2fc:	4625      	mov	r5, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d304:	f000 f81b 	bl	800d33e <_malloc_usable_size_r>
 800d308:	4284      	cmp	r4, r0
 800d30a:	4607      	mov	r7, r0
 800d30c:	d802      	bhi.n	800d314 <_realloc_r+0x34>
 800d30e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d312:	d812      	bhi.n	800d33a <_realloc_r+0x5a>
 800d314:	4621      	mov	r1, r4
 800d316:	4640      	mov	r0, r8
 800d318:	f7ff fc18 	bl	800cb4c <_malloc_r>
 800d31c:	4605      	mov	r5, r0
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0ed      	beq.n	800d2fe <_realloc_r+0x1e>
 800d322:	42bc      	cmp	r4, r7
 800d324:	4622      	mov	r2, r4
 800d326:	4631      	mov	r1, r6
 800d328:	bf28      	it	cs
 800d32a:	463a      	movcs	r2, r7
 800d32c:	f7ff ffb0 	bl	800d290 <memcpy>
 800d330:	4631      	mov	r1, r6
 800d332:	4640      	mov	r0, r8
 800d334:	f7ff fb9e 	bl	800ca74 <_free_r>
 800d338:	e7e1      	b.n	800d2fe <_realloc_r+0x1e>
 800d33a:	4635      	mov	r5, r6
 800d33c:	e7df      	b.n	800d2fe <_realloc_r+0x1e>

0800d33e <_malloc_usable_size_r>:
 800d33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d342:	1f18      	subs	r0, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfbc      	itt	lt
 800d348:	580b      	ldrlt	r3, [r1, r0]
 800d34a:	18c0      	addlt	r0, r0, r3
 800d34c:	4770      	bx	lr
	...

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr
