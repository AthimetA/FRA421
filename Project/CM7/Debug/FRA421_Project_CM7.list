
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080090fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800910c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800916c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007a0  240000d0  080091cc  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000870  080091cc  00020870  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b333  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c11  00000000  00000000  0003b431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f8  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001000  00000000  00000000  0003f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a647  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001722d  00000000  00000000  0007a787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001809fd  00000000  00000000  000919b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002123b1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000047e8  00000000  00000000  00212404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009094 	.word	0x08009094

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009094 	.word	0x08009094

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <main+0xcc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f000 fae3 	bl	8000cfc <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fd6d 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f851 	bl	80007e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 f8d3 	bl	80008e8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <main+0xcc>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <main+0xcc>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0xcc>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f003 ff6b 	bl	800463c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f003 ff81 	bl	8004670 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <main+0xcc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f000 fab3 	bl	8000cfc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 f9cd 	bl	8000b34 <MX_GPIO_Init>
  MX_ETH_Init();
 800079a:	f000 f8d7 	bl	800094c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079e:	f000 f921 	bl	80009e4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80007a2:	f000 f99f 	bl	8000ae4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 f96b 	bl	8000a80 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007aa:	f000 fdb9 	bl	8001320 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <main+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ba:	d9f6      	bls.n	80007aa <main+0xa2>
		{
			timemsM7_LED = HAL_GetTick();
 80007bc:	f000 fdb0 	bl	8001320 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <main+0xd0>)
 80007c4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <main+0xd4>)
 80007cc:	f003 ff1b 	bl	8004606 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007d0:	e7eb      	b.n	80007aa <main+0xa2>
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400
 80007d8:	24000860 	.word	0x24000860
 80007dc:	58020400 	.word	0x58020400

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fc48 	bl	8009084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f008 fc42 	bl	8009084 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f004 f891 	bl	8004928 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <SystemClock_Config+0xfc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <SystemClock_Config+0xfc>)
 8000810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <SystemClock_Config+0xfc>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <SystemClock_Config+0x100>)
 8000822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <SystemClock_Config+0x100>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <SystemClock_Config+0x100>)
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xfc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0x104>)
 800084a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084c:	f023 0303 	bic.w	r3, r3, #3
 8000850:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <SystemClock_Config+0x104>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800086e:	2378      	movs	r3, #120	; 0x78
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087e:	230c      	movs	r3, #12
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f004 f8b4 	bl	80049fc <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089a:	f000 fa2f 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	233f      	movs	r3, #63	; 0x3f
 80008a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008aa:	2308      	movs	r3, #8
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2104      	movs	r1, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 fcc7 	bl	8005258 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008d0:	f000 fa14 	bl	8000cfc <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	; 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024800 	.word	0x58024800
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024400 	.word	0x58024400

080008e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0b0      	sub	sp, #192	; 0xc0
 80008ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	22bc      	movs	r2, #188	; 0xbc
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f008 fbc5 	bl	8009084 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI1;
 80008fa:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80008fe:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000904:	2318      	movs	r3, #24
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000914:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800092c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f005 f81c 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800093e:	f000 f9dd 	bl	8000cfc <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	37c0      	adds	r7, #192	; 0xc0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_ETH_Init+0x80>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MX_ETH_Init+0x84>)
 8000954:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_ETH_Init+0x88>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_ETH_Init+0x88>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ETH_Init+0x88>)
 8000964:	22e1      	movs	r2, #225	; 0xe1
 8000966:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_ETH_Init+0x88>)
 800096a:	2200      	movs	r2, #0
 800096c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ETH_Init+0x88>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_ETH_Init+0x88>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_ETH_Init+0x80>)
 800097c:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_ETH_Init+0x88>)
 800097e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_ETH_Init+0x80>)
 8000982:	2201      	movs	r2, #1
 8000984:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_ETH_Init+0x80>)
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <MX_ETH_Init+0x8c>)
 800098a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_ETH_Init+0x80>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_ETH_Init+0x90>)
 8000990:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_ETH_Init+0x80>)
 8000994:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000998:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_ETH_Init+0x80>)
 800099c:	f003 f846 	bl	8003a2c <HAL_ETH_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009a6:	f000 f9a9 	bl	8000cfc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009aa:	2238      	movs	r2, #56	; 0x38
 80009ac:	2100      	movs	r1, #0
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_ETH_Init+0x94>)
 80009b0:	f008 fb68 	bl	8009084 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_ETH_Init+0x94>)
 80009b6:	2221      	movs	r2, #33	; 0x21
 80009b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_ETH_Init+0x94>)
 80009bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_ETH_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000124 	.word	0x24000124
 80009d0:	40028000 	.word	0x40028000
 80009d4:	24000864 	.word	0x24000864
 80009d8:	24000070 	.word	0x24000070
 80009dc:	24000010 	.word	0x24000010
 80009e0:	240000ec 	.word	0x240000ec

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_USART3_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x98>)
 80009f2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a08:	220c      	movs	r2, #12
 8000a0a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a2c:	f006 fb08 	bl	8007040 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 f961 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a3e:	f007 ff29 	bl	8008894 <HAL_UARTEx_SetTxFifoThreshold>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000a48:	f000 f958 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a50:	f007 ff5e 	bl	8008910 <HAL_UARTEx_SetRxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000a5a:	f000 f94f 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a60:	f007 fedf 	bl	8008822 <HAL_UARTEx_DisableFifoMode>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000a6a:	f000 f947 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	240001d4 	.word	0x240001d4
 8000a78:	40004800 	.word	0x40004800
 8000a7c:	0005dc00 	.word	0x0005dc00

08000a80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	f003 fde6 	bl	8004698 <HAL_PCD_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 f913 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000354 	.word	0x24000354
 8000ae0:	40080000 	.word	0x40080000

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	200c      	movs	r0, #12
 8000b0e:	f000 fd32 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b12:	200c      	movs	r0, #12
 8000b14:	f000 fd49 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f000 fd2a 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 fd41 	bl	80015aa <HAL_NVIC_EnableIRQ>

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b67      	ldr	r3, [pc, #412]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a65      	ldr	r2, [pc, #404]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b68:	4b5f      	ldr	r3, [pc, #380]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a5e      	ldr	r2, [pc, #376]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x1b4>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000c22:	4832      	ldr	r0, [pc, #200]	; (8000cec <MX_GPIO_Init+0x1b8>)
 8000c24:	f003 fcd6 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2e:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000c30:	f003 fcd0 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	482e      	ldr	r0, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x1c0>)
 8000c3c:	f003 fcca 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c46:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000c48:	f003 fcc4 	bl	80045d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8000c4c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <MX_GPIO_Init+0x1b8>)
 8000c66:	f003 fb05 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000c84:	f003 faf6 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_GPIO_Init+0x1c0>)
 8000ca2:	f003 fae7 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000cbc:	f003 fada 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000cda:	f003 facb 	bl	8004274 <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58021000 	.word	0x58021000
 8000cf0:	58020400 	.word	0x58020400
 8000cf4:	58020c00 	.word	0x58020c00
 8000cf8:	58021800 	.word	0x58021800

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x30>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x30>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x30>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	58024400 	.word	0x58024400

08000d3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a59      	ldr	r2, [pc, #356]	; (8000ec0 <HAL_ETH_MspInit+0x184>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 80ab 	bne.w	8000eb6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d60:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d66:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7a:	623b      	str	r3, [r7, #32]
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e32:	2332      	movs	r3, #50	; 0x32
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	230b      	movs	r3, #11
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <HAL_ETH_MspInit+0x18c>)
 8000e4e:	f003 fa11 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e52:	2386      	movs	r3, #134	; 0x86
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e62:	230b      	movs	r3, #11
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <HAL_ETH_MspInit+0x190>)
 8000e6e:	f003 fa01 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e84:	230b      	movs	r3, #11
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <HAL_ETH_MspInit+0x194>)
 8000e90:	f003 f9f0 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_ETH_MspInit+0x198>)
 8000eb2:	f003 f9df 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40028000 	.word	0x40028000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020800 	.word	0x58020800
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58021800 	.word	0x58021800

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	22bc      	movs	r2, #188	; 0xbc
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f008 f8c3 	bl	8009084 <memset>
  if(huart->Instance==USART3)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a57      	ldr	r2, [pc, #348]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f040 80a6 	bne.w	8001056 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fd29 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000f24:	f7ff feea 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4837      	ldr	r0, [pc, #220]	; (8001068 <HAL_UART_MspInit+0x190>)
 8000f8c:	f003 f972 	bl	8004274 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_UART_MspInit+0x194>)
 8000f92:	4a37      	ldr	r2, [pc, #220]	; (8001070 <HAL_UART_MspInit+0x198>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f96:	4b35      	ldr	r3, [pc, #212]	; (800106c <HAL_UART_MspInit+0x194>)
 8000f98:	222d      	movs	r2, #45	; 0x2d
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <HAL_UART_MspInit+0x194>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <HAL_UART_MspInit+0x194>)
 8000faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000fd0:	4826      	ldr	r0, [pc, #152]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fd2:	f000 fb05 	bl	80015e0 <HAL_DMA_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000fdc:	f7ff fe8e 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fe4:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_UART_MspInit+0x1a0>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8000ff4:	222e      	movs	r2, #46	; 0x2e
 8000ff6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8000ffa:	2240      	movs	r2, #64	; 0x40
 8000ffc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x19c>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_UART_MspInit+0x19c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <HAL_UART_MspInit+0x19c>)
 800102c:	f000 fad8 	bl	80015e0 <HAL_DMA_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001036:	f7ff fe61 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_UART_MspInit+0x19c>)
 800103e:	679a      	str	r2, [r3, #120]	; 0x78
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_UART_MspInit+0x19c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2027      	movs	r0, #39	; 0x27
 800104c:	f000 fa93 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001050:	2027      	movs	r0, #39	; 0x27
 8001052:	f000 faaa 	bl	80015aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	37e0      	adds	r7, #224	; 0xe0
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004800 	.word	0x40004800
 8001064:	58024400 	.word	0x58024400
 8001068:	58020c00 	.word	0x58020c00
 800106c:	24000264 	.word	0x24000264
 8001070:	40020028 	.word	0x40020028
 8001074:	240002dc 	.word	0x240002dc
 8001078:	40020070 	.word	0x40020070

0800107c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_PCD_MspInit+0xa8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d13d      	bne.n	800111a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800109e:	f003 fc9d 	bl	80049dc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_PCD_MspInit+0xac>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a8:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_PCD_MspInit+0xac>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_PCD_MspInit+0xac>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010c0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010d2:	230a      	movs	r3, #10
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <HAL_PCD_MspInit+0xb0>)
 80010de:	f003 f8c9 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <HAL_PCD_MspInit+0xb0>)
 80010f8:	f003 f8bc 	bl	8004274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_PCD_MspInit+0xac>)
 80010fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_PCD_MspInit+0xac>)
 8001104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001108:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_PCD_MspInit+0xac>)
 800110e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40080000 	.word	0x40080000
 8001128:	58024400 	.word	0x58024400
 800112c:	58020000 	.word	0x58020000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f8bc 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <DMA1_Stream1_IRQHandler+0x10>)
 800118a:	f001 fae9 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000264 	.word	0x24000264

08001198 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Stream4_IRQHandler+0x10>)
 800119e:	f001 fadf 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240002dc 	.word	0x240002dc

080011ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART3_IRQHandler+0x10>)
 80011b2:	f005 ff95 	bl	80070e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	240001d4 	.word	0x240001d4

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c4:	f7ff fa0a 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f007 ff25 	bl	800903c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fa89 	bl	8000708 <main>
  bx  lr
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001200:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001204:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 8001208:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800120c:	24000870 	.word	0x24000870

08001210 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC3_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f9a0 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001220:	f004 f9d0 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8001224:	4602      	mov	r2, r0
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_Init+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	4913      	ldr	r1, [pc, #76]	; (8001280 <HAL_Init+0x6c>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_Init+0x68>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_Init+0x6c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_Init+0x70>)
 8001256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x74>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f814 	bl	800128c <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e002      	b.n	8001274 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fd4b 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58024400 	.word	0x58024400
 8001280:	080090ac 	.word	0x080090ac
 8001284:	24000004 	.word	0x24000004
 8001288:	24000000 	.word	0x24000000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e021      	b.n	80012e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_InitTick+0x64>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_InitTick+0x60>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f985 	bl	80015c6 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f94f 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x68>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2400000c 	.word	0x2400000c
 80012f0:	24000000 	.word	0x24000000
 80012f4:	24000008 	.word	0x24000008

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2400000c 	.word	0x2400000c
 800131c:	2400086c 	.word	0x2400086c

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2400086c 	.word	0x2400086c

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2400000c 	.word	0x2400000c

08001380 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetREVID+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0c1b      	lsrs	r3, r3, #16
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	5c001000 	.word	0x5c001000

08001398 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	58000400 	.word	0x58000400

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	05fa0000 	.word	0x05fa0000

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff40 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff90 	bl	80014b4 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff33 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffa4 	bl	800151c <SysTick_Config>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff fe9a 	bl	8001320 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e316      	b.n	8001c26 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_DMA_Init+0x1b8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d04a      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a65      	ldr	r2, [pc, #404]	; (800179c <HAL_DMA_Init+0x1bc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d045      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a63      	ldr	r2, [pc, #396]	; (80017a0 <HAL_DMA_Init+0x1c0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d040      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a62      	ldr	r2, [pc, #392]	; (80017a4 <HAL_DMA_Init+0x1c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d03b      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a60      	ldr	r2, [pc, #384]	; (80017a8 <HAL_DMA_Init+0x1c8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d036      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5f      	ldr	r2, [pc, #380]	; (80017ac <HAL_DMA_Init+0x1cc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d031      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <HAL_DMA_Init+0x1d0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d02c      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5c      	ldr	r2, [pc, #368]	; (80017b4 <HAL_DMA_Init+0x1d4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d027      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <HAL_DMA_Init+0x1d8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d022      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a59      	ldr	r2, [pc, #356]	; (80017bc <HAL_DMA_Init+0x1dc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01d      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <HAL_DMA_Init+0x1e0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d018      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <HAL_DMA_Init+0x1e4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d013      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_DMA_Init+0x1e8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00e      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a53      	ldr	r2, [pc, #332]	; (80017cc <HAL_DMA_Init+0x1ec>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_DMA_Init+0x1f0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d004      	beq.n	8001698 <HAL_DMA_Init+0xb8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a50      	ldr	r2, [pc, #320]	; (80017d4 <HAL_DMA_Init+0x1f4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_DMA_Init+0xbc>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_DMA_Init+0xbe>
 800169c:	2300      	movs	r3, #0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 813b 	beq.w	800191a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_DMA_Init+0x1b8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d04a      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a36      	ldr	r2, [pc, #216]	; (800179c <HAL_DMA_Init+0x1bc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d045      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_DMA_Init+0x1c0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d040      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_DMA_Init+0x1c4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d03b      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a31      	ldr	r2, [pc, #196]	; (80017a8 <HAL_DMA_Init+0x1c8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d036      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a30      	ldr	r2, [pc, #192]	; (80017ac <HAL_DMA_Init+0x1cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d031      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <HAL_DMA_Init+0x1d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02c      	beq.n	8001754 <HAL_DMA_Init+0x174>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <HAL_DMA_Init+0x1d4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d027      	beq.n	8001754 <HAL_DMA_Init+0x174>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <HAL_DMA_Init+0x1d8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d022      	beq.n	8001754 <HAL_DMA_Init+0x174>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2a      	ldr	r2, [pc, #168]	; (80017bc <HAL_DMA_Init+0x1dc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d01d      	beq.n	8001754 <HAL_DMA_Init+0x174>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_DMA_Init+0x1e0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d018      	beq.n	8001754 <HAL_DMA_Init+0x174>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <HAL_DMA_Init+0x1e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_DMA_Init+0x174>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_DMA_Init+0x1e8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00e      	beq.n	8001754 <HAL_DMA_Init+0x174>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_DMA_Init+0x1ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d009      	beq.n	8001754 <HAL_DMA_Init+0x174>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_DMA_Init+0x1f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d004      	beq.n	8001754 <HAL_DMA_Init+0x174>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_DMA_Init+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d108      	bne.n	8001766 <HAL_DMA_Init+0x186>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_DMA_Init+0x196>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001776:	e02f      	b.n	80017d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001778:	f7ff fdd2 	bl	8001320 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b05      	cmp	r3, #5
 8001784:	d928      	bls.n	80017d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e246      	b.n	8001c26 <HAL_DMA_Init+0x646>
 8001798:	40020010 	.word	0x40020010
 800179c:	40020028 	.word	0x40020028
 80017a0:	40020040 	.word	0x40020040
 80017a4:	40020058 	.word	0x40020058
 80017a8:	40020070 	.word	0x40020070
 80017ac:	40020088 	.word	0x40020088
 80017b0:	400200a0 	.word	0x400200a0
 80017b4:	400200b8 	.word	0x400200b8
 80017b8:	40020410 	.word	0x40020410
 80017bc:	40020428 	.word	0x40020428
 80017c0:	40020440 	.word	0x40020440
 80017c4:	40020458 	.word	0x40020458
 80017c8:	40020470 	.word	0x40020470
 80017cc:	40020488 	.word	0x40020488
 80017d0:	400204a0 	.word	0x400204a0
 80017d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1c8      	bne.n	8001778 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4b83      	ldr	r3, [pc, #524]	; (8001a00 <HAL_DMA_Init+0x420>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4313      	orrs	r3, r2
 8001822:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2b04      	cmp	r3, #4
 800182a:	d107      	bne.n	800183c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4313      	orrs	r3, r2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800183c:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_DMA_Init+0x424>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <HAL_DMA_Init+0x428>)
 8001842:	4013      	ands	r3, r2
 8001844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001848:	d328      	bcc.n	800189c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b28      	cmp	r3, #40	; 0x28
 8001850:	d903      	bls.n	800185a <HAL_DMA_Init+0x27a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b2e      	cmp	r3, #46	; 0x2e
 8001858:	d917      	bls.n	800188a <HAL_DMA_Init+0x2aa>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b3e      	cmp	r3, #62	; 0x3e
 8001860:	d903      	bls.n	800186a <HAL_DMA_Init+0x28a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b42      	cmp	r3, #66	; 0x42
 8001868:	d90f      	bls.n	800188a <HAL_DMA_Init+0x2aa>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b46      	cmp	r3, #70	; 0x46
 8001870:	d903      	bls.n	800187a <HAL_DMA_Init+0x29a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b48      	cmp	r3, #72	; 0x48
 8001878:	d907      	bls.n	800188a <HAL_DMA_Init+0x2aa>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b4e      	cmp	r3, #78	; 0x4e
 8001880:	d905      	bls.n	800188e <HAL_DMA_Init+0x2ae>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b52      	cmp	r3, #82	; 0x52
 8001888:	d801      	bhi.n	800188e <HAL_DMA_Init+0x2ae>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_DMA_Init+0x2b0>
 800188e:	2300      	movs	r3, #0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800189a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d117      	bne.n	80018f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 ff1d 	bl	8003718 <DMA_CheckFifoParam>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	; 0x40
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e197      	b.n	8001c26 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f001 fe58 	bl	80035b4 <DMA_CalcBaseAndBitshift>
 8001904:	4603      	mov	r3, r0
 8001906:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	223f      	movs	r2, #63	; 0x3f
 8001912:	409a      	lsls	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e0cd      	b.n	8001ab6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <HAL_DMA_Init+0x42c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_Init+0x38a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a39      	ldr	r2, [pc, #228]	; (8001a10 <HAL_DMA_Init+0x430>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01d      	beq.n	800196a <HAL_DMA_Init+0x38a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_DMA_Init+0x434>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d018      	beq.n	800196a <HAL_DMA_Init+0x38a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a36      	ldr	r2, [pc, #216]	; (8001a18 <HAL_DMA_Init+0x438>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_DMA_Init+0x38a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a35      	ldr	r2, [pc, #212]	; (8001a1c <HAL_DMA_Init+0x43c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Init+0x38a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <HAL_DMA_Init+0x440>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_DMA_Init+0x38a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <HAL_DMA_Init+0x444>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Init+0x38a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_DMA_Init+0x448>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_DMA_Init+0x38e>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_DMA_Init+0x390>
 800196e:	2300      	movs	r3, #0
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8097 	beq.w	8001aa4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <HAL_DMA_Init+0x42c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d021      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_DMA_Init+0x430>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01c      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <HAL_DMA_Init+0x434>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d017      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <HAL_DMA_Init+0x438>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d012      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_DMA_Init+0x43c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_DMA_Init+0x440>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d008      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_DMA_Init+0x444>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_DMA_Init+0x3e4>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_DMA_Init+0x448>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_DMA_Init+0x44c>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	d020      	beq.n	8001a30 <HAL_DMA_Init+0x450>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b80      	cmp	r3, #128	; 0x80
 80019f4:	d102      	bne.n	80019fc <HAL_DMA_Init+0x41c>
 80019f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019fa:	e01a      	b.n	8001a32 <HAL_DMA_Init+0x452>
 80019fc:	2300      	movs	r3, #0
 80019fe:	e018      	b.n	8001a32 <HAL_DMA_Init+0x452>
 8001a00:	fe10803f 	.word	0xfe10803f
 8001a04:	5c001000 	.word	0x5c001000
 8001a08:	ffff0000 	.word	0xffff0000
 8001a0c:	58025408 	.word	0x58025408
 8001a10:	5802541c 	.word	0x5802541c
 8001a14:	58025430 	.word	0x58025430
 8001a18:	58025444 	.word	0x58025444
 8001a1c:	58025458 	.word	0x58025458
 8001a20:	5802546c 	.word	0x5802546c
 8001a24:	58025480 	.word	0x58025480
 8001a28:	58025494 	.word	0x58025494
 8001a2c:	fffe000f 	.word	0xfffe000f
 8001a30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68d2      	ldr	r2, [r2, #12]
 8001a36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_DMA_Init+0x650>)
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <HAL_DMA_Init+0x654>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	009a      	lsls	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f001 fd93 	bl	80035b4 <DMA_CalcBaseAndBitshift>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	e008      	b.n	8001ab6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0b7      	b.n	8001c26 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a5f      	ldr	r2, [pc, #380]	; (8001c38 <HAL_DMA_Init+0x658>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d072      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a5d      	ldr	r2, [pc, #372]	; (8001c3c <HAL_DMA_Init+0x65c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d06d      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_DMA_Init+0x660>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d068      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5a      	ldr	r2, [pc, #360]	; (8001c44 <HAL_DMA_Init+0x664>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d063      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a59      	ldr	r2, [pc, #356]	; (8001c48 <HAL_DMA_Init+0x668>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d05e      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <HAL_DMA_Init+0x66c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d059      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a56      	ldr	r2, [pc, #344]	; (8001c50 <HAL_DMA_Init+0x670>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d054      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a54      	ldr	r2, [pc, #336]	; (8001c54 <HAL_DMA_Init+0x674>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04f      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_DMA_Init+0x678>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04a      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a51      	ldr	r2, [pc, #324]	; (8001c5c <HAL_DMA_Init+0x67c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d045      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <HAL_DMA_Init+0x680>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d040      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <HAL_DMA_Init+0x684>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d03b      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_DMA_Init+0x688>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d036      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_DMA_Init+0x68c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_DMA_Init+0x690>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d02c      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_DMA_Init+0x694>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d027      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_DMA_Init+0x698>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_DMA_Init+0x69c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01d      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <HAL_DMA_Init+0x6a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d018      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a42      	ldr	r2, [pc, #264]	; (8001c84 <HAL_DMA_Init+0x6a4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_DMA_Init+0x6a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <HAL_DMA_Init+0x6ac>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_DMA_Init+0x6b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_Init+0x5c6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a3c      	ldr	r2, [pc, #240]	; (8001c94 <HAL_DMA_Init+0x6b4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Init+0x5ca>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_Init+0x5cc>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d032      	beq.n	8001c16 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f001 fe2d 	bl	8003810 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b80      	cmp	r3, #128	; 0x80
 8001bbc:	d102      	bne.n	8001bc4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bd8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_DMA_Init+0x624>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d80c      	bhi.n	8001c04 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f001 feaa 	bl	8003944 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	e008      	b.n	8001c16 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	a7fdabf8 	.word	0xa7fdabf8
 8001c34:	cccccccd 	.word	0xcccccccd
 8001c38:	40020010 	.word	0x40020010
 8001c3c:	40020028 	.word	0x40020028
 8001c40:	40020040 	.word	0x40020040
 8001c44:	40020058 	.word	0x40020058
 8001c48:	40020070 	.word	0x40020070
 8001c4c:	40020088 	.word	0x40020088
 8001c50:	400200a0 	.word	0x400200a0
 8001c54:	400200b8 	.word	0x400200b8
 8001c58:	40020410 	.word	0x40020410
 8001c5c:	40020428 	.word	0x40020428
 8001c60:	40020440 	.word	0x40020440
 8001c64:	40020458 	.word	0x40020458
 8001c68:	40020470 	.word	0x40020470
 8001c6c:	40020488 	.word	0x40020488
 8001c70:	400204a0 	.word	0x400204a0
 8001c74:	400204b8 	.word	0x400204b8
 8001c78:	58025408 	.word	0x58025408
 8001c7c:	5802541c 	.word	0x5802541c
 8001c80:	58025430 	.word	0x58025430
 8001c84:	58025444 	.word	0x58025444
 8001c88:	58025458 	.word	0x58025458
 8001c8c:	5802546c 	.word	0x5802546c
 8001c90:	58025480 	.word	0x58025480
 8001c94:	58025494 	.word	0x58025494

08001c98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fb3e 	bl	8001320 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e2dc      	b.n	800226a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e2cd      	b.n	800226a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a76      	ldr	r2, [pc, #472]	; (8001eac <HAL_DMA_Abort+0x214>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04a      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a74      	ldr	r2, [pc, #464]	; (8001eb0 <HAL_DMA_Abort+0x218>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d045      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a73      	ldr	r2, [pc, #460]	; (8001eb4 <HAL_DMA_Abort+0x21c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d040      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_DMA_Abort+0x220>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d03b      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <HAL_DMA_Abort+0x224>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d036      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <HAL_DMA_Abort+0x228>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <HAL_DMA_Abort+0x22c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d02c      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	; (8001ec8 <HAL_DMA_Abort+0x230>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d027      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_DMA_Abort+0x234>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_DMA_Abort+0x238>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01d      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_DMA_Abort+0x23c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_DMA_Abort+0x240>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a64      	ldr	r2, [pc, #400]	; (8001edc <HAL_DMA_Abort+0x244>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00e      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a62      	ldr	r2, [pc, #392]	; (8001ee0 <HAL_DMA_Abort+0x248>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_DMA_Abort+0x24c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d004      	beq.n	8001d6e <HAL_DMA_Abort+0xd6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_DMA_Abort+0x250>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Abort+0xda>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_DMA_Abort+0xdc>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 021e 	bic.w	r2, r2, #30
 8001d86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e00a      	b.n	8001db6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020e 	bic.w	r2, r2, #14
 8001dae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_DMA_Abort+0x214>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d072      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	; (8001eb0 <HAL_DMA_Abort+0x218>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d06d      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_DMA_Abort+0x21c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d068      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a37      	ldr	r2, [pc, #220]	; (8001eb8 <HAL_DMA_Abort+0x220>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d063      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a36      	ldr	r2, [pc, #216]	; (8001ebc <HAL_DMA_Abort+0x224>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a34      	ldr	r2, [pc, #208]	; (8001ec0 <HAL_DMA_Abort+0x228>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d059      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_DMA_Abort+0x22c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d054      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <HAL_DMA_Abort+0x230>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d04f      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_DMA_Abort+0x234>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04a      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <HAL_DMA_Abort+0x238>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d045      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_DMA_Abort+0x23c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d040      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_DMA_Abort+0x240>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d03b      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_DMA_Abort+0x244>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d036      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_DMA_Abort+0x248>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d031      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_DMA_Abort+0x24c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d02c      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_DMA_Abort+0x250>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d027      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_DMA_Abort+0x254>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d022      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Abort+0x258>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01d      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_DMA_Abort+0x25c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Abort+0x260>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_DMA_Abort+0x264>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Abort+0x268>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_DMA_Abort+0x26c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_DMA_Abort+0x20e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_Abort+0x270>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d132      	bne.n	8001f0c <HAL_DMA_Abort+0x274>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e031      	b.n	8001f0e <HAL_DMA_Abort+0x276>
 8001eaa:	bf00      	nop
 8001eac:	40020010 	.word	0x40020010
 8001eb0:	40020028 	.word	0x40020028
 8001eb4:	40020040 	.word	0x40020040
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	40020070 	.word	0x40020070
 8001ec0:	40020088 	.word	0x40020088
 8001ec4:	400200a0 	.word	0x400200a0
 8001ec8:	400200b8 	.word	0x400200b8
 8001ecc:	40020410 	.word	0x40020410
 8001ed0:	40020428 	.word	0x40020428
 8001ed4:	40020440 	.word	0x40020440
 8001ed8:	40020458 	.word	0x40020458
 8001edc:	40020470 	.word	0x40020470
 8001ee0:	40020488 	.word	0x40020488
 8001ee4:	400204a0 	.word	0x400204a0
 8001ee8:	400204b8 	.word	0x400204b8
 8001eec:	58025408 	.word	0x58025408
 8001ef0:	5802541c 	.word	0x5802541c
 8001ef4:	58025430 	.word	0x58025430
 8001ef8:	58025444 	.word	0x58025444
 8001efc:	58025458 	.word	0x58025458
 8001f00:	5802546c 	.word	0x5802546c
 8001f04:	58025480 	.word	0x58025480
 8001f08:	58025494 	.word	0x58025494
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6d      	ldr	r2, [pc, #436]	; (80020dc <HAL_DMA_Abort+0x444>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04a      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6b      	ldr	r2, [pc, #428]	; (80020e0 <HAL_DMA_Abort+0x448>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d045      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_DMA_Abort+0x44c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d040      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_DMA_Abort+0x450>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d03b      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_DMA_Abort+0x454>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a65      	ldr	r2, [pc, #404]	; (80020f0 <HAL_DMA_Abort+0x458>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <HAL_DMA_Abort+0x45c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d02c      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a62      	ldr	r2, [pc, #392]	; (80020f8 <HAL_DMA_Abort+0x460>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d027      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a61      	ldr	r2, [pc, #388]	; (80020fc <HAL_DMA_Abort+0x464>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_DMA_Abort+0x468>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01d      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a5e      	ldr	r2, [pc, #376]	; (8002104 <HAL_DMA_Abort+0x46c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5c      	ldr	r2, [pc, #368]	; (8002108 <HAL_DMA_Abort+0x470>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_DMA_Abort+0x474>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a59      	ldr	r2, [pc, #356]	; (8002110 <HAL_DMA_Abort+0x478>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_DMA_Abort+0x47c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort+0x32a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_DMA_Abort+0x480>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <HAL_DMA_Abort+0x33c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_DMA_Abort+0x34c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001fe4:	e013      	b.n	800200e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe6:	f7ff f99b 	bl	8001320 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d90c      	bls.n	800200e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12d      	b.n	800226a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_DMA_Abort+0x444>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <HAL_DMA_Abort+0x448>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d045      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <HAL_DMA_Abort+0x44c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d040      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_DMA_Abort+0x450>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03b      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_DMA_Abort+0x454>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d036      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_DMA_Abort+0x458>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_DMA_Abort+0x45c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d02c      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_DMA_Abort+0x460>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d027      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_DMA_Abort+0x464>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_DMA_Abort+0x468>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01d      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_DMA_Abort+0x46c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <HAL_DMA_Abort+0x470>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1d      	ldr	r2, [pc, #116]	; (800210c <HAL_DMA_Abort+0x474>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <HAL_DMA_Abort+0x478>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_DMA_Abort+0x47c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort+0x422>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_DMA_Abort+0x480>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Abort+0x426>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_Abort+0x428>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d02b      	beq.n	800211c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	e02a      	b.n	8002132 <HAL_DMA_Abort+0x49a>
 80020dc:	40020010 	.word	0x40020010
 80020e0:	40020028 	.word	0x40020028
 80020e4:	40020040 	.word	0x40020040
 80020e8:	40020058 	.word	0x40020058
 80020ec:	40020070 	.word	0x40020070
 80020f0:	40020088 	.word	0x40020088
 80020f4:	400200a0 	.word	0x400200a0
 80020f8:	400200b8 	.word	0x400200b8
 80020fc:	40020410 	.word	0x40020410
 8002100:	40020428 	.word	0x40020428
 8002104:	40020440 	.word	0x40020440
 8002108:	40020458 	.word	0x40020458
 800210c:	40020470 	.word	0x40020470
 8002110:	40020488 	.word	0x40020488
 8002114:	400204a0 	.word	0x400204a0
 8002118:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2201      	movs	r2, #1
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a4f      	ldr	r2, [pc, #316]	; (8002274 <HAL_DMA_Abort+0x5dc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d072      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <HAL_DMA_Abort+0x5e0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d06d      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a4c      	ldr	r2, [pc, #304]	; (800227c <HAL_DMA_Abort+0x5e4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d068      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_DMA_Abort+0x5e8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d063      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a49      	ldr	r2, [pc, #292]	; (8002284 <HAL_DMA_Abort+0x5ec>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a47      	ldr	r2, [pc, #284]	; (8002288 <HAL_DMA_Abort+0x5f0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d059      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a46      	ldr	r2, [pc, #280]	; (800228c <HAL_DMA_Abort+0x5f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d054      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a44      	ldr	r2, [pc, #272]	; (8002290 <HAL_DMA_Abort+0x5f8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04f      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <HAL_DMA_Abort+0x5fc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04a      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_DMA_Abort+0x600>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d045      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_DMA_Abort+0x604>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d040      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_DMA_Abort+0x608>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d03b      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <HAL_DMA_Abort+0x60c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d036      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_DMA_Abort+0x610>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <HAL_DMA_Abort+0x614>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d02c      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_DMA_Abort+0x618>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d027      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <HAL_DMA_Abort+0x61c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a35      	ldr	r2, [pc, #212]	; (80022b8 <HAL_DMA_Abort+0x620>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01d      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_DMA_Abort+0x624>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_DMA_Abort+0x628>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_DMA_Abort+0x62c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_DMA_Abort+0x630>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2e      	ldr	r2, [pc, #184]	; (80022cc <HAL_DMA_Abort+0x634>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_DMA_Abort+0x58a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_DMA_Abort+0x638>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Abort+0x58e>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_DMA_Abort+0x590>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002234:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800224c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002256:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020010 	.word	0x40020010
 8002278:	40020028 	.word	0x40020028
 800227c:	40020040 	.word	0x40020040
 8002280:	40020058 	.word	0x40020058
 8002284:	40020070 	.word	0x40020070
 8002288:	40020088 	.word	0x40020088
 800228c:	400200a0 	.word	0x400200a0
 8002290:	400200b8 	.word	0x400200b8
 8002294:	40020410 	.word	0x40020410
 8002298:	40020428 	.word	0x40020428
 800229c:	40020440 	.word	0x40020440
 80022a0:	40020458 	.word	0x40020458
 80022a4:	40020470 	.word	0x40020470
 80022a8:	40020488 	.word	0x40020488
 80022ac:	400204a0 	.word	0x400204a0
 80022b0:	400204b8 	.word	0x400204b8
 80022b4:	58025408 	.word	0x58025408
 80022b8:	5802541c 	.word	0x5802541c
 80022bc:	58025430 	.word	0x58025430
 80022c0:	58025444 	.word	0x58025444
 80022c4:	58025458 	.word	0x58025458
 80022c8:	5802546c 	.word	0x5802546c
 80022cc:	58025480 	.word	0x58025480
 80022d0:	58025494 	.word	0x58025494

080022d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e237      	b.n	8002756 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e22c      	b.n	8002756 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a5c      	ldr	r2, [pc, #368]	; (8002474 <HAL_DMA_Abort_IT+0x1a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d04a      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_DMA_Abort_IT+0x1a4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d045      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a59      	ldr	r2, [pc, #356]	; (800247c <HAL_DMA_Abort_IT+0x1a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d040      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_DMA_Abort_IT+0x1ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d03b      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_DMA_Abort_IT+0x1b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d036      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_DMA_Abort_IT+0x1b4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a53      	ldr	r2, [pc, #332]	; (800248c <HAL_DMA_Abort_IT+0x1b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02c      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_DMA_Abort_IT+0x1bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d027      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_DMA_Abort_IT+0x1c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d022      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_DMA_Abort_IT+0x1c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d01d      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4d      	ldr	r2, [pc, #308]	; (800249c <HAL_DMA_Abort_IT+0x1c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d018      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_DMA_Abort_IT+0x1d0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00e      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_DMA_Abort_IT+0x1d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0xc8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Abort_IT+0xcc>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_DMA_Abort_IT+0xce>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8086 	beq.w	80024b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_DMA_Abort_IT+0x1a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04a      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <HAL_DMA_Abort_IT+0x1a4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d045      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	; (800247c <HAL_DMA_Abort_IT+0x1a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d040      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_DMA_Abort_IT+0x1ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03b      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_DMA_Abort_IT+0x1b0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d036      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_DMA_Abort_IT+0x1b4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_DMA_Abort_IT+0x1b8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_DMA_Abort_IT+0x1bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_DMA_Abort_IT+0x1c0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a22      	ldr	r2, [pc, #136]	; (8002498 <HAL_DMA_Abort_IT+0x1c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <HAL_DMA_Abort_IT+0x1c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_DMA_Abort_IT+0x1cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_DMA_Abort_IT+0x1d0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_DMA_Abort_IT+0x1d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_DMA_Abort_IT+0x1d8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0x17c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_DMA_Abort_IT+0x1dc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d108      	bne.n	8002462 <HAL_DMA_Abort_IT+0x18e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e178      	b.n	8002754 <HAL_DMA_Abort_IT+0x480>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e16f      	b.n	8002754 <HAL_DMA_Abort_IT+0x480>
 8002474:	40020010 	.word	0x40020010
 8002478:	40020028 	.word	0x40020028
 800247c:	40020040 	.word	0x40020040
 8002480:	40020058 	.word	0x40020058
 8002484:	40020070 	.word	0x40020070
 8002488:	40020088 	.word	0x40020088
 800248c:	400200a0 	.word	0x400200a0
 8002490:	400200b8 	.word	0x400200b8
 8002494:	40020410 	.word	0x40020410
 8002498:	40020428 	.word	0x40020428
 800249c:	40020440 	.word	0x40020440
 80024a0:	40020458 	.word	0x40020458
 80024a4:	40020470 	.word	0x40020470
 80024a8:	40020488 	.word	0x40020488
 80024ac:	400204a0 	.word	0x400204a0
 80024b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020e 	bic.w	r2, r2, #14
 80024c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_DMA_Abort_IT+0x3a8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d04a      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_DMA_Abort_IT+0x3ac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d045      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_DMA_Abort_IT+0x3b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d040      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a68      	ldr	r2, [pc, #416]	; (8002688 <HAL_DMA_Abort_IT+0x3b4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d03b      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a66      	ldr	r2, [pc, #408]	; (800268c <HAL_DMA_Abort_IT+0x3b8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d036      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a65      	ldr	r2, [pc, #404]	; (8002690 <HAL_DMA_Abort_IT+0x3bc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d031      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a63      	ldr	r2, [pc, #396]	; (8002694 <HAL_DMA_Abort_IT+0x3c0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d02c      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_DMA_Abort_IT+0x3c4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d027      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a60      	ldr	r2, [pc, #384]	; (800269c <HAL_DMA_Abort_IT+0x3c8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d022      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5f      	ldr	r2, [pc, #380]	; (80026a0 <HAL_DMA_Abort_IT+0x3cc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d01d      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5d      	ldr	r2, [pc, #372]	; (80026a4 <HAL_DMA_Abort_IT+0x3d0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d018      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_DMA_Abort_IT+0x3d4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5a      	ldr	r2, [pc, #360]	; (80026ac <HAL_DMA_Abort_IT+0x3d8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00e      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_DMA_Abort_IT+0x3dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x290>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <HAL_DMA_Abort_IT+0x2a2>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e007      	b.n	8002586 <HAL_DMA_Abort_IT+0x2b2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3c      	ldr	r2, [pc, #240]	; (800267c <HAL_DMA_Abort_IT+0x3a8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d072      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_DMA_Abort_IT+0x3ac>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d06d      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a39      	ldr	r2, [pc, #228]	; (8002684 <HAL_DMA_Abort_IT+0x3b0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d068      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a37      	ldr	r2, [pc, #220]	; (8002688 <HAL_DMA_Abort_IT+0x3b4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d063      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a36      	ldr	r2, [pc, #216]	; (800268c <HAL_DMA_Abort_IT+0x3b8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d05e      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a34      	ldr	r2, [pc, #208]	; (8002690 <HAL_DMA_Abort_IT+0x3bc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d059      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a33      	ldr	r2, [pc, #204]	; (8002694 <HAL_DMA_Abort_IT+0x3c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d054      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_DMA_Abort_IT+0x3c4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d04f      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_DMA_Abort_IT+0x3c8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d04a      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <HAL_DMA_Abort_IT+0x3cc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d045      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_DMA_Abort_IT+0x3d0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d040      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_DMA_Abort_IT+0x3d4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d03b      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_DMA_Abort_IT+0x3d8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d036      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_DMA_Abort_IT+0x3dc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d031      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_DMA_Abort_IT+0x3e0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02c      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_DMA_Abort_IT+0x3e4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d027      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_DMA_Abort_IT+0x3e8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_DMA_Abort_IT+0x3ec>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01d      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_DMA_Abort_IT+0x3f0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d018      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_DMA_Abort_IT+0x3f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_DMA_Abort_IT+0x3f8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00e      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_DMA_Abort_IT+0x3fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <HAL_DMA_Abort_IT+0x400>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <HAL_DMA_Abort_IT+0x3a2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_DMA_Abort_IT+0x404>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d132      	bne.n	80026dc <HAL_DMA_Abort_IT+0x408>
 8002676:	2301      	movs	r3, #1
 8002678:	e031      	b.n	80026de <HAL_DMA_Abort_IT+0x40a>
 800267a:	bf00      	nop
 800267c:	40020010 	.word	0x40020010
 8002680:	40020028 	.word	0x40020028
 8002684:	40020040 	.word	0x40020040
 8002688:	40020058 	.word	0x40020058
 800268c:	40020070 	.word	0x40020070
 8002690:	40020088 	.word	0x40020088
 8002694:	400200a0 	.word	0x400200a0
 8002698:	400200b8 	.word	0x400200b8
 800269c:	40020410 	.word	0x40020410
 80026a0:	40020428 	.word	0x40020428
 80026a4:	40020440 	.word	0x40020440
 80026a8:	40020458 	.word	0x40020458
 80026ac:	40020470 	.word	0x40020470
 80026b0:	40020488 	.word	0x40020488
 80026b4:	400204a0 	.word	0x400204a0
 80026b8:	400204b8 	.word	0x400204b8
 80026bc:	58025408 	.word	0x58025408
 80026c0:	5802541c 	.word	0x5802541c
 80026c4:	58025430 	.word	0x58025430
 80026c8:	58025444 	.word	0x58025444
 80026cc:	58025458 	.word	0x58025458
 80026d0:	5802546c 	.word	0x5802546c
 80026d4:	58025480 	.word	0x58025480
 80026d8:	58025494 	.word	0x58025494
 80026dc:	2300      	movs	r3, #0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d028      	beq.n	8002734 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002710:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002732:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800276c:	4b67      	ldr	r3, [pc, #412]	; (800290c <HAL_DMA_IRQHandler+0x1ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a67      	ldr	r2, [pc, #412]	; (8002910 <HAL_DMA_IRQHandler+0x1b0>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <HAL_DMA_IRQHandler+0x1b4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d04a      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <HAL_DMA_IRQHandler+0x1b8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d045      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_DMA_IRQHandler+0x1bc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d040      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_DMA_IRQHandler+0x1c0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d03b      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_DMA_IRQHandler+0x1c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d036      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_DMA_IRQHandler+0x1c8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d031      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_DMA_IRQHandler+0x1cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d02c      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_DMA_IRQHandler+0x1d0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d027      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a53      	ldr	r2, [pc, #332]	; (8002934 <HAL_DMA_IRQHandler+0x1d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d022      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_DMA_IRQHandler+0x1d8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01d      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_DMA_IRQHandler+0x1dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_DMA_IRQHandler+0x1e0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_DMA_IRQHandler+0x1e4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00e      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_DMA_IRQHandler+0x1e8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_DMA_IRQHandler+0x1ec>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_DMA_IRQHandler+0xd2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_DMA_IRQHandler+0x1f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_DMA_IRQHandler+0xd6>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_DMA_IRQHandler+0xd8>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 842b 	beq.w	8003094 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2208      	movs	r2, #8
 8002848:	409a      	lsls	r2, r3
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a2 	beq.w	8002998 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <HAL_DMA_IRQHandler+0x1b4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d04a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2d      	ldr	r2, [pc, #180]	; (8002918 <HAL_DMA_IRQHandler+0x1b8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d045      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_DMA_IRQHandler+0x1bc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d040      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2a      	ldr	r2, [pc, #168]	; (8002920 <HAL_DMA_IRQHandler+0x1c0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d03b      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_DMA_IRQHandler+0x1c4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d036      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a27      	ldr	r2, [pc, #156]	; (8002928 <HAL_DMA_IRQHandler+0x1c8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a25      	ldr	r2, [pc, #148]	; (800292c <HAL_DMA_IRQHandler+0x1cc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02c      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_DMA_IRQHandler+0x1d0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d027      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_DMA_IRQHandler+0x1d4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d022      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_DMA_IRQHandler+0x1d8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01d      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_DMA_IRQHandler+0x1dc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d018      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_DMA_IRQHandler+0x1e0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_DMA_IRQHandler+0x1e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_DMA_IRQHandler+0x1e8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_DMA_IRQHandler+0x1ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x194>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a18      	ldr	r2, [pc, #96]	; (8002950 <HAL_DMA_IRQHandler+0x1f0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12f      	bne.n	8002954 <HAL_DMA_IRQHandler+0x1f4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e02e      	b.n	8002968 <HAL_DMA_IRQHandler+0x208>
 800290a:	bf00      	nop
 800290c:	24000000 	.word	0x24000000
 8002910:	1b4e81b5 	.word	0x1b4e81b5
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2208      	movs	r2, #8
 8002986:	409a      	lsls	r2, r3
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06e      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_DMA_IRQHandler+0x3f8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_DMA_IRQHandler+0x3fc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_DMA_IRQHandler+0x400>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a64      	ldr	r2, [pc, #400]	; (8002b64 <HAL_DMA_IRQHandler+0x404>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_DMA_IRQHandler+0x408>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <HAL_DMA_IRQHandler+0x40c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_DMA_IRQHandler+0x410>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5e      	ldr	r2, [pc, #376]	; (8002b74 <HAL_DMA_IRQHandler+0x414>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_DMA_IRQHandler+0x418>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5b      	ldr	r2, [pc, #364]	; (8002b7c <HAL_DMA_IRQHandler+0x41c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5a      	ldr	r2, [pc, #360]	; (8002b80 <HAL_DMA_IRQHandler+0x420>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_DMA_IRQHandler+0x424>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a57      	ldr	r2, [pc, #348]	; (8002b88 <HAL_DMA_IRQHandler+0x428>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a55      	ldr	r2, [pc, #340]	; (8002b8c <HAL_DMA_IRQHandler+0x42c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_DMA_IRQHandler+0x430>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2ee>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_DMA_IRQHandler+0x434>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10a      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x304>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2301      	movne	r3, #1
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e003      	b.n	8002a6c <HAL_DMA_IRQHandler+0x30c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f043 0202 	orr.w	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2204      	movs	r2, #4
 8002a96:	409a      	lsls	r2, r3
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 808f 	beq.w	8002bc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <HAL_DMA_IRQHandler+0x3f8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_DMA_IRQHandler+0x3fc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_DMA_IRQHandler+0x400>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <HAL_DMA_IRQHandler+0x404>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <HAL_DMA_IRQHandler+0x408>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <HAL_DMA_IRQHandler+0x40c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_DMA_IRQHandler+0x410>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_DMA_IRQHandler+0x414>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_DMA_IRQHandler+0x418>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_DMA_IRQHandler+0x41c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_DMA_IRQHandler+0x420>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_DMA_IRQHandler+0x424>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_DMA_IRQHandler+0x428>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_DMA_IRQHandler+0x42c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_DMA_IRQHandler+0x430>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x3e2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_DMA_IRQHandler+0x434>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12a      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x438>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	e023      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x440>
 8002b58:	40020010 	.word	0x40020010
 8002b5c:	40020028 	.word	0x40020028
 8002b60:	40020040 	.word	0x40020040
 8002b64:	40020058 	.word	0x40020058
 8002b68:	40020070 	.word	0x40020070
 8002b6c:	40020088 	.word	0x40020088
 8002b70:	400200a0 	.word	0x400200a0
 8002b74:	400200b8 	.word	0x400200b8
 8002b78:	40020410 	.word	0x40020410
 8002b7c:	40020428 	.word	0x40020428
 8002b80:	40020440 	.word	0x40020440
 8002b84:	40020458 	.word	0x40020458
 8002b88:	40020470 	.word	0x40020470
 8002b8c:	40020488 	.word	0x40020488
 8002b90:	400204a0 	.word	0x400204a0
 8002b94:	400204b8 	.word	0x400204b8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2204      	movs	r2, #4
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2210      	movs	r2, #16
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a6 	beq.w	8002d22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a85      	ldr	r2, [pc, #532]	; (8002df0 <HAL_DMA_IRQHandler+0x690>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_DMA_IRQHandler+0x694>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a82      	ldr	r2, [pc, #520]	; (8002df8 <HAL_DMA_IRQHandler+0x698>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_DMA_IRQHandler+0x69c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7f      	ldr	r2, [pc, #508]	; (8002e00 <HAL_DMA_IRQHandler+0x6a0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7d      	ldr	r2, [pc, #500]	; (8002e04 <HAL_DMA_IRQHandler+0x6a4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_DMA_IRQHandler+0x6a8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_DMA_IRQHandler+0x6ac>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a79      	ldr	r2, [pc, #484]	; (8002e10 <HAL_DMA_IRQHandler+0x6b0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_DMA_IRQHandler+0x6b4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a76      	ldr	r2, [pc, #472]	; (8002e18 <HAL_DMA_IRQHandler+0x6b8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a74      	ldr	r2, [pc, #464]	; (8002e1c <HAL_DMA_IRQHandler+0x6bc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <HAL_DMA_IRQHandler+0x6c0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_DMA_IRQHandler+0x6c4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a70      	ldr	r2, [pc, #448]	; (8002e28 <HAL_DMA_IRQHandler+0x6c8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x516>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_DMA_IRQHandler+0x6cc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10a      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x52c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e009      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x540>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d03e      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2210      	movs	r2, #16
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d108      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d024      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e01f      	b.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01b      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
 8002cf2:	e016      	b.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8110 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <HAL_DMA_IRQHandler+0x690>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <HAL_DMA_IRQHandler+0x694>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d045      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <HAL_DMA_IRQHandler+0x698>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d040      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a28      	ldr	r2, [pc, #160]	; (8002dfc <HAL_DMA_IRQHandler+0x69c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03b      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_DMA_IRQHandler+0x6a0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d036      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <HAL_DMA_IRQHandler+0x6a4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_DMA_IRQHandler+0x6a8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <HAL_DMA_IRQHandler+0x6ac>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_DMA_IRQHandler+0x6b0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_DMA_IRQHandler+0x6b4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_DMA_IRQHandler+0x6b8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_DMA_IRQHandler+0x6bc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <HAL_DMA_IRQHandler+0x6c0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_DMA_IRQHandler+0x6c4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_DMA_IRQHandler+0x6c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x678>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <HAL_DMA_IRQHandler+0x6cc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d12b      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x6d0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e02a      	b.n	8002e44 <HAL_DMA_IRQHandler+0x6e4>
 8002dee:	bf00      	nop
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8087 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2220      	movs	r2, #32
 8002e54:	409a      	lsls	r2, r3
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d139      	bne.n	8002eda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x736>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	223f      	movs	r2, #63	; 0x3f
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 834a 	beq.w	8003564 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
          }
          return;
 8002ed8:	e344      	b.n	8003564 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02c      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
 8002f06:	e027      	b.n	8002f58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e01e      	b.n	8002f58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0210 	bic.w	r2, r2, #16
 8002f36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8306 	beq.w	800356e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8088 	beq.w	8003080 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2204      	movs	r2, #4
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_DMA_IRQHandler+0xa08>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a79      	ldr	r2, [pc, #484]	; (800316c <HAL_DMA_IRQHandler+0xa0c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d045      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_DMA_IRQHandler+0xa10>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a76      	ldr	r2, [pc, #472]	; (8003174 <HAL_DMA_IRQHandler+0xa14>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_DMA_IRQHandler+0xa18>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d036      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_DMA_IRQHandler+0xa1c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_DMA_IRQHandler+0xa20>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02c      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a70      	ldr	r2, [pc, #448]	; (8003184 <HAL_DMA_IRQHandler+0xa24>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d027      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_DMA_IRQHandler+0xa28>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6d      	ldr	r2, [pc, #436]	; (800318c <HAL_DMA_IRQHandler+0xa2c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	; (8003190 <HAL_DMA_IRQHandler+0xa30>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6a      	ldr	r2, [pc, #424]	; (8003194 <HAL_DMA_IRQHandler+0xa34>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a68      	ldr	r2, [pc, #416]	; (8003198 <HAL_DMA_IRQHandler+0xa38>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a67      	ldr	r2, [pc, #412]	; (800319c <HAL_DMA_IRQHandler+0xa3c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_DMA_IRQHandler+0xa40>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_IRQHandler+0x8b8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a64      	ldr	r2, [pc, #400]	; (80031a4 <HAL_DMA_IRQHandler+0xa44>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <HAL_DMA_IRQHandler+0x8ca>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e007      	b.n	800303a <HAL_DMA_IRQHandler+0x8da>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3301      	adds	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	429a      	cmp	r2, r3
 8003044:	d307      	bcc.n	8003056 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f2      	bne.n	800303a <HAL_DMA_IRQHandler+0x8da>
 8003054:	e000      	b.n	8003058 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003056:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800306e:	e003      	b.n	8003078 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8272 	beq.w	800356e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
 8003092:	e26c      	b.n	800356e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_DMA_IRQHandler+0xa48>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d022      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <HAL_DMA_IRQHandler+0xa4c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d01d      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <HAL_DMA_IRQHandler+0xa50>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d018      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3f      	ldr	r2, [pc, #252]	; (80031b4 <HAL_DMA_IRQHandler+0xa54>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_DMA_IRQHandler+0xa58>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_DMA_IRQHandler+0xa5c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d009      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a3a      	ldr	r2, [pc, #232]	; (80031c0 <HAL_DMA_IRQHandler+0xa60>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x984>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <HAL_DMA_IRQHandler+0xa64>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x988>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_DMA_IRQHandler+0x98a>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 823f 	beq.w	800356e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80cd 	beq.w	80032a8 <HAL_DMA_IRQHandler+0xb48>
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80c7 	beq.w	80032a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2204      	movs	r2, #4
 8003124:	409a      	lsls	r2, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d049      	beq.n	80031c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8210 	beq.w	8003568 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003150:	e20a      	b.n	8003568 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8206 	beq.w	8003568 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003164:	e200      	b.n	8003568 <HAL_DMA_IRQHandler+0xe08>
 8003166:	bf00      	nop
 8003168:	40020010 	.word	0x40020010
 800316c:	40020028 	.word	0x40020028
 8003170:	40020040 	.word	0x40020040
 8003174:	40020058 	.word	0x40020058
 8003178:	40020070 	.word	0x40020070
 800317c:	40020088 	.word	0x40020088
 8003180:	400200a0 	.word	0x400200a0
 8003184:	400200b8 	.word	0x400200b8
 8003188:	40020410 	.word	0x40020410
 800318c:	40020428 	.word	0x40020428
 8003190:	40020440 	.word	0x40020440
 8003194:	40020458 	.word	0x40020458
 8003198:	40020470 	.word	0x40020470
 800319c:	40020488 	.word	0x40020488
 80031a0:	400204a0 	.word	0x400204a0
 80031a4:	400204b8 	.word	0x400204b8
 80031a8:	58025408 	.word	0x58025408
 80031ac:	5802541c 	.word	0x5802541c
 80031b0:	58025430 	.word	0x58025430
 80031b4:	58025444 	.word	0x58025444
 80031b8:	58025458 	.word	0x58025458
 80031bc:	5802546c 	.word	0x5802546c
 80031c0:	58025480 	.word	0x58025480
 80031c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d160      	bne.n	8003294 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7f      	ldr	r2, [pc, #508]	; (80033d4 <HAL_DMA_IRQHandler+0xc74>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d04a      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_DMA_IRQHandler+0xc78>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d045      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7c      	ldr	r2, [pc, #496]	; (80033dc <HAL_DMA_IRQHandler+0xc7c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d040      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7a      	ldr	r2, [pc, #488]	; (80033e0 <HAL_DMA_IRQHandler+0xc80>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d03b      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <HAL_DMA_IRQHandler+0xc84>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d036      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_DMA_IRQHandler+0xc88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d031      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a76      	ldr	r2, [pc, #472]	; (80033ec <HAL_DMA_IRQHandler+0xc8c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d02c      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a74      	ldr	r2, [pc, #464]	; (80033f0 <HAL_DMA_IRQHandler+0xc90>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d027      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a73      	ldr	r2, [pc, #460]	; (80033f4 <HAL_DMA_IRQHandler+0xc94>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a71      	ldr	r2, [pc, #452]	; (80033f8 <HAL_DMA_IRQHandler+0xc98>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a70      	ldr	r2, [pc, #448]	; (80033fc <HAL_DMA_IRQHandler+0xc9c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_DMA_IRQHandler+0xca0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6d      	ldr	r2, [pc, #436]	; (8003404 <HAL_DMA_IRQHandler+0xca4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <HAL_DMA_IRQHandler+0xca8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6a      	ldr	r2, [pc, #424]	; (800340c <HAL_DMA_IRQHandler+0xcac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_DMA_IRQHandler+0xb12>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a68      	ldr	r2, [pc, #416]	; (8003410 <HAL_DMA_IRQHandler+0xcb0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <HAL_DMA_IRQHandler+0xb24>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <HAL_DMA_IRQHandler+0xb34>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8165 	beq.w	8003568 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a6:	e15f      	b.n	8003568 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2202      	movs	r2, #2
 80032b2:	409a      	lsls	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80c5 	beq.w	8003448 <HAL_DMA_IRQHandler+0xce8>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80bf 	beq.w	8003448 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2202      	movs	r2, #2
 80032d4:	409a      	lsls	r2, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 813a 	beq.w	800356c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003300:	e134      	b.n	800356c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8130 	beq.w	800356c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003314:	e12a      	b.n	800356c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8089 	bne.w	8003434 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <HAL_DMA_IRQHandler+0xc74>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_DMA_IRQHandler+0xc78>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <HAL_DMA_IRQHandler+0xc7c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_DMA_IRQHandler+0xc80>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <HAL_DMA_IRQHandler+0xc84>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_DMA_IRQHandler+0xc88>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <HAL_DMA_IRQHandler+0xc8c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <HAL_DMA_IRQHandler+0xc90>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_DMA_IRQHandler+0xc94>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_DMA_IRQHandler+0xc98>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <HAL_DMA_IRQHandler+0xc9c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_DMA_IRQHandler+0xca0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a19      	ldr	r2, [pc, #100]	; (8003404 <HAL_DMA_IRQHandler+0xca4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_DMA_IRQHandler+0xca8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_DMA_IRQHandler+0xcac>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xc62>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <HAL_DMA_IRQHandler+0xcb0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d128      	bne.n	8003414 <HAL_DMA_IRQHandler+0xcb4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0214 	bic.w	r2, r2, #20
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e027      	b.n	8003424 <HAL_DMA_IRQHandler+0xcc4>
 80033d4:	40020010 	.word	0x40020010
 80033d8:	40020028 	.word	0x40020028
 80033dc:	40020040 	.word	0x40020040
 80033e0:	40020058 	.word	0x40020058
 80033e4:	40020070 	.word	0x40020070
 80033e8:	40020088 	.word	0x40020088
 80033ec:	400200a0 	.word	0x400200a0
 80033f0:	400200b8 	.word	0x400200b8
 80033f4:	40020410 	.word	0x40020410
 80033f8:	40020428 	.word	0x40020428
 80033fc:	40020440 	.word	0x40020440
 8003400:	40020458 	.word	0x40020458
 8003404:	40020470 	.word	0x40020470
 8003408:	40020488 	.word	0x40020488
 800340c:	400204a0 	.word	0x400204a0
 8003410:	400204b8 	.word	0x400204b8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 020a 	bic.w	r2, r2, #10
 8003422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8097 	beq.w	800356c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003446:	e091      	b.n	800356c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8088 	beq.w	800356e <HAL_DMA_IRQHandler+0xe0e>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8082 	beq.w	800356e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a41      	ldr	r2, [pc, #260]	; (8003574 <HAL_DMA_IRQHandler+0xe14>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_DMA_IRQHandler+0xe18>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a3e      	ldr	r2, [pc, #248]	; (800357c <HAL_DMA_IRQHandler+0xe1c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <HAL_DMA_IRQHandler+0xe20>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <HAL_DMA_IRQHandler+0xe24>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a39      	ldr	r2, [pc, #228]	; (8003588 <HAL_DMA_IRQHandler+0xe28>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_DMA_IRQHandler+0xe2c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a36      	ldr	r2, [pc, #216]	; (8003590 <HAL_DMA_IRQHandler+0xe30>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a35      	ldr	r2, [pc, #212]	; (8003594 <HAL_DMA_IRQHandler+0xe34>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a33      	ldr	r2, [pc, #204]	; (8003598 <HAL_DMA_IRQHandler+0xe38>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_DMA_IRQHandler+0xe3c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <HAL_DMA_IRQHandler+0xe40>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <HAL_DMA_IRQHandler+0xe44>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_DMA_IRQHandler+0xe48>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <HAL_DMA_IRQHandler+0xe4c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0xdaa>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <HAL_DMA_IRQHandler+0xe50>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_DMA_IRQHandler+0xdbc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 021c 	bic.w	r2, r2, #28
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_DMA_IRQHandler+0xdcc>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 020e 	bic.w	r2, r2, #14
 800352a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2201      	movs	r2, #1
 8003536:	409a      	lsls	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e004      	b.n	800356e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800356c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020010 	.word	0x40020010
 8003578:	40020028 	.word	0x40020028
 800357c:	40020040 	.word	0x40020040
 8003580:	40020058 	.word	0x40020058
 8003584:	40020070 	.word	0x40020070
 8003588:	40020088 	.word	0x40020088
 800358c:	400200a0 	.word	0x400200a0
 8003590:	400200b8 	.word	0x400200b8
 8003594:	40020410 	.word	0x40020410
 8003598:	40020428 	.word	0x40020428
 800359c:	40020440 	.word	0x40020440
 80035a0:	40020458 	.word	0x40020458
 80035a4:	40020470 	.word	0x40020470
 80035a8:	40020488 	.word	0x40020488
 80035ac:	400204a0 	.word	0x400204a0
 80035b0:	400204b8 	.word	0x400204b8

080035b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a42      	ldr	r2, [pc, #264]	; (80036cc <DMA_CalcBaseAndBitshift+0x118>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d04a      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a41      	ldr	r2, [pc, #260]	; (80036d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3f      	ldr	r2, [pc, #252]	; (80036d4 <DMA_CalcBaseAndBitshift+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d040      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3e      	ldr	r2, [pc, #248]	; (80036d8 <DMA_CalcBaseAndBitshift+0x124>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d03b      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <DMA_CalcBaseAndBitshift+0x128>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d036      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d031      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <DMA_CalcBaseAndBitshift+0x130>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02c      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <DMA_CalcBaseAndBitshift+0x134>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d027      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a36      	ldr	r2, [pc, #216]	; (80036ec <DMA_CalcBaseAndBitshift+0x138>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a35      	ldr	r2, [pc, #212]	; (80036f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01d      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a33      	ldr	r2, [pc, #204]	; (80036f4 <DMA_CalcBaseAndBitshift+0x140>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <DMA_CalcBaseAndBitshift+0x144>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <DMA_CalcBaseAndBitshift+0x148>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <DMA_CalcBaseAndBitshift+0x14c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <DMA_CalcBaseAndBitshift+0x150>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <DMA_CalcBaseAndBitshift+0xa8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <DMA_CalcBaseAndBitshift+0x154>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <DMA_CalcBaseAndBitshift+0xac>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <DMA_CalcBaseAndBitshift+0xae>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d024      	beq.n	80036b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	3b10      	subs	r3, #16
 800366e:	4a27      	ldr	r2, [pc, #156]	; (800370c <DMA_CalcBaseAndBitshift+0x158>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	4a24      	ldr	r2, [pc, #144]	; (8003710 <DMA_CalcBaseAndBitshift+0x15c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d908      	bls.n	80036a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <DMA_CalcBaseAndBitshift+0x160>)
 8003696:	4013      	ands	r3, r2
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	659a      	str	r2, [r3, #88]	; 0x58
 800369e:	e00d      	b.n	80036bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <DMA_CalcBaseAndBitshift+0x160>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
 80036ae:	e005      	b.n	80036bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40020010 	.word	0x40020010
 80036d0:	40020028 	.word	0x40020028
 80036d4:	40020040 	.word	0x40020040
 80036d8:	40020058 	.word	0x40020058
 80036dc:	40020070 	.word	0x40020070
 80036e0:	40020088 	.word	0x40020088
 80036e4:	400200a0 	.word	0x400200a0
 80036e8:	400200b8 	.word	0x400200b8
 80036ec:	40020410 	.word	0x40020410
 80036f0:	40020428 	.word	0x40020428
 80036f4:	40020440 	.word	0x40020440
 80036f8:	40020458 	.word	0x40020458
 80036fc:	40020470 	.word	0x40020470
 8003700:	40020488 	.word	0x40020488
 8003704:	400204a0 	.word	0x400204a0
 8003708:	400204b8 	.word	0x400204b8
 800370c:	aaaaaaab 	.word	0xaaaaaaab
 8003710:	080090bc 	.word	0x080090bc
 8003714:	fffffc00 	.word	0xfffffc00

08003718 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d120      	bne.n	800376e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	2b03      	cmp	r3, #3
 8003732:	d858      	bhi.n	80037e6 <DMA_CheckFifoParam+0xce>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <DMA_CheckFifoParam+0x24>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	0800374d 	.word	0x0800374d
 8003740:	0800375f 	.word	0x0800375f
 8003744:	0800374d 	.word	0x0800374d
 8003748:	080037e7 	.word	0x080037e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d048      	beq.n	80037ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800375c:	e045      	b.n	80037ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003766:	d142      	bne.n	80037ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800376c:	e03f      	b.n	80037ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d123      	bne.n	80037c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	2b03      	cmp	r3, #3
 800377e:	d838      	bhi.n	80037f2 <DMA_CheckFifoParam+0xda>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <DMA_CheckFifoParam+0x70>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	0800379f 	.word	0x0800379f
 8003790:	08003799 	.word	0x08003799
 8003794:	080037b1 	.word	0x080037b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
        break;
 800379c:	e030      	b.n	8003800 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d025      	beq.n	80037f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ae:	e022      	b.n	80037f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b8:	d11f      	bne.n	80037fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037be:	e01c      	b.n	80037fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <DMA_CheckFifoParam+0xb6>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d003      	beq.n	80037d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80037cc:	e018      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
        break;
 80037d2:	e015      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
    break;
 80037e4:	e00b      	b.n	80037fe <DMA_CheckFifoParam+0xe6>
        break;
 80037e6:	bf00      	nop
 80037e8:	e00a      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        break;
 80037ea:	bf00      	nop
 80037ec:	e008      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        break;
 80037ee:	bf00      	nop
 80037f0:	e006      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
        break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <DMA_CheckFifoParam+0xe8>
    break;
 80037fe:	bf00      	nop
    }
  }

  return status;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop

08003810 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a38      	ldr	r2, [pc, #224]	; (8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a36      	ldr	r2, [pc, #216]	; (8003908 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01d      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a35      	ldr	r2, [pc, #212]	; (800390c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a33      	ldr	r2, [pc, #204]	; (8003910 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01a      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3b08      	subs	r3, #8
 8003880:	4a28      	ldr	r2, [pc, #160]	; (8003924 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a24      	ldr	r2, [pc, #144]	; (800392c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800389c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038ac:	e024      	b.n	80038f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3b10      	subs	r3, #16
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d806      	bhi.n	80038d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d902      	bls.n	80038d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3308      	adds	r3, #8
 80038d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4b18      	ldr	r3, [pc, #96]	; (800393c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a16      	ldr	r2, [pc, #88]	; (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80038e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	58025408 	.word	0x58025408
 8003908:	5802541c 	.word	0x5802541c
 800390c:	58025430 	.word	0x58025430
 8003910:	58025444 	.word	0x58025444
 8003914:	58025458 	.word	0x58025458
 8003918:	5802546c 	.word	0x5802546c
 800391c:	58025480 	.word	0x58025480
 8003920:	58025494 	.word	0x58025494
 8003924:	cccccccd 	.word	0xcccccccd
 8003928:	16009600 	.word	0x16009600
 800392c:	58025880 	.word	0x58025880
 8003930:	aaaaaaab 	.word	0xaaaaaaab
 8003934:	400204b8 	.word	0x400204b8
 8003938:	4002040f 	.word	0x4002040f
 800393c:	10008200 	.word	0x10008200
 8003940:	40020880 	.word	0x40020880

08003944 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04a      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d847      	bhi.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80039cc:	671a      	str	r2, [r3, #112]	; 0x70
 80039ce:	e009      	b.n	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80039e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	58025408 	.word	0x58025408
 8003a00:	5802541c 	.word	0x5802541c
 8003a04:	58025430 	.word	0x58025430
 8003a08:	58025444 	.word	0x58025444
 8003a0c:	58025458 	.word	0x58025458
 8003a10:	5802546c 	.word	0x5802546c
 8003a14:	58025480 	.word	0x58025480
 8003a18:	58025494 	.word	0x58025494
 8003a1c:	1600963f 	.word	0x1600963f
 8003a20:	58025940 	.word	0x58025940
 8003a24:	1000823f 	.word	0x1000823f
 8003a28:	40020940 	.word	0x40020940

08003a2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0cf      	b.n	8003bde <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2223      	movs	r2, #35	; 0x23
 8003a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd f973 	bl	8000d3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <HAL_ETH_Init+0x1bc>)
 8003a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a5c:	4a62      	ldr	r2, [pc, #392]	; (8003be8 <HAL_ETH_Init+0x1bc>)
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a66:	4b60      	ldr	r3, [pc, #384]	; (8003be8 <HAL_ETH_Init+0x1bc>)
 8003a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	7a1b      	ldrb	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7fd fc8b 	bl	8001398 <HAL_SYSCFG_ETHInterfaceSelect>
 8003a82:	e003      	b.n	8003a8c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003a84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003a88:	f7fd fc86 	bl	8001398 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003a8c:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_ETH_Init+0x1c0>)
 8003a8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aa6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd fc3a 	bl	8001320 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003aae:	e011      	b.n	8003ad4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ab0:	f7fd fc36 	bl	8001320 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003abe:	d909      	bls.n	8003ad4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	22e0      	movs	r2, #224	; 0xe0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e084      	b.n	8003bde <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e4      	bne.n	8003ab0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f886 	bl	8003bf8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003aec:	f001 fee4 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4a3f      	ldr	r2, [pc, #252]	; (8003bf0 <HAL_ETH_Init+0x1c4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9a      	lsrs	r2, r3, #18
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3a01      	subs	r2, #1
 8003b00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa71 	bl	8003fec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b16:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b26:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	22e0      	movs	r2, #224	; 0xe0
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e049      	b.n	8003bde <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003b56:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_ETH_Init+0x1c8>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6952      	ldr	r2, [r2, #20]
 8003b5e:	0051      	lsls	r1, r2, #1
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b6a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fad9 	bl	8004126 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb1f 	bl	80041b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	3305      	adds	r3, #5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	3303      	adds	r3, #3
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	061a      	lsls	r2, r3, #24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bb8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bc6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58000400 	.word	0x58000400
 8003bf0:	431bde83 	.word	0x431bde83
 8003bf4:	ffff8001 	.word	0xffff8001

08003bf8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c12:	f001 fe51 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8003c16:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d908      	bls.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d804      	bhi.n	8003c32 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e027      	b.n	8003c82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d908      	bls.n	8003c4c <HAL_ETH_SetMDIOClockRange+0x54>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d204      	bcs.n	8003c4c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e01a      	b.n	8003c82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d303      	bcc.n	8003c5c <HAL_ETH_SetMDIOClockRange+0x64>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d911      	bls.n	8003c80 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d908      	bls.n	8003c76 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d804      	bhi.n	8003c76 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e005      	b.n	8003c82 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e000      	b.n	8003c82 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003c80:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	01312cff 	.word	0x01312cff
 8003c98:	02160ebf 	.word	0x02160ebf
 8003c9c:	03938700 	.word	0x03938700
 8003ca0:	05f5e0ff 	.word	0x05f5e0ff
 8003ca4:	08f0d17f 	.word	0x08f0d17f

08003ca8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	791b      	ldrb	r3, [r3, #4]
 8003cc0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	7b1b      	ldrb	r3, [r3, #12]
 8003cc8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	7b5b      	ldrb	r3, [r3, #13]
 8003cd0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	7b9b      	ldrb	r3, [r3, #14]
 8003cd8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	7bdb      	ldrb	r3, [r3, #15]
 8003ce0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ce2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	7c12      	ldrb	r2, [r2, #16]
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d102      	bne.n	8003cf2 <ETH_SetMACConfig+0x4a>
 8003cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cf0:	e000      	b.n	8003cf4 <ETH_SetMACConfig+0x4c>
 8003cf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003cf4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	7c52      	ldrb	r2, [r2, #17]
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	d102      	bne.n	8003d04 <ETH_SetMACConfig+0x5c>
 8003cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d02:	e000      	b.n	8003d06 <ETH_SetMACConfig+0x5e>
 8003d04:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	7c9b      	ldrb	r3, [r3, #18]
 8003d0c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d0e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d14:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	7f1b      	ldrb	r3, [r3, #28]
 8003d20:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003d22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	7f5b      	ldrb	r3, [r3, #29]
 8003d28:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	7f92      	ldrb	r2, [r2, #30]
 8003d30:	2a00      	cmp	r2, #0
 8003d32:	d102      	bne.n	8003d3a <ETH_SetMACConfig+0x92>
 8003d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d38:	e000      	b.n	8003d3c <ETH_SetMACConfig+0x94>
 8003d3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003d3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	7fdb      	ldrb	r3, [r3, #31]
 8003d42:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003d44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d102      	bne.n	8003d56 <ETH_SetMACConfig+0xae>
 8003d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d54:	e000      	b.n	8003d58 <ETH_SetMACConfig+0xb0>
 8003d56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003d58:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d66:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003d68:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <ETH_SetMACConfig+0x22c>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	68f9      	ldr	r1, [r7, #12]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d92:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003d94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d9c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003d9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003da6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003da8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d102      	bne.n	8003dba <ETH_SetMACConfig+0x112>
 8003db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003db8:	e000      	b.n	8003dbc <ETH_SetMACConfig+0x114>
 8003dba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003dbc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4b42      	ldr	r3, [pc, #264]	; (8003ed8 <ETH_SetMACConfig+0x230>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <ETH_SetMACConfig+0x234>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e04:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d101      	bne.n	8003e1a <ETH_SetMACConfig+0x172>
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	e000      	b.n	8003e1c <ETH_SetMACConfig+0x174>
 8003e1a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003e1c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003e44:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003e4c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f023 0103 	bic.w	r1, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003e72:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	d101      	bne.n	8003e96 <ETH_SetMACConfig+0x1ee>
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	e000      	b.n	8003e98 <ETH_SetMACConfig+0x1f0>
 8003e96:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003e98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003ea0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ea2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003eaa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003eb8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	00048083 	.word	0x00048083
 8003ed8:	c0f88000 	.word	0xc0f88000
 8003edc:	fffffef0 	.word	0xfffffef0

08003ee0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <ETH_SetDMAConfig+0xf8>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	6811      	ldr	r1, [r2, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f06:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	7b1b      	ldrb	r3, [r3, #12]
 8003f18:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <ETH_SetDMAConfig+0xfc>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	68f9      	ldr	r1, [r7, #12]
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f38:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	7b5b      	ldrb	r3, [r3, #13]
 8003f3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003f54:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <ETH_SetDMAConfig+0x100>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f64:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	7d1b      	ldrb	r3, [r3, #20]
 8003f70:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	7f5b      	ldrb	r3, [r3, #29]
 8003f78:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <ETH_SetDMAConfig+0x104>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	7f1b      	ldrb	r3, [r3, #28]
 8003fa2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <ETH_SetDMAConfig+0x108>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fc8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	ffff87fd 	.word	0xffff87fd
 8003fdc:	ffff2ffe 	.word	0xffff2ffe
 8003fe0:	fffec000 	.word	0xfffec000
 8003fe4:	ffc0efef 	.word	0xffc0efef
 8003fe8:	7fc0ffff 	.word	0x7fc0ffff

08003fec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0a4      	sub	sp, #144	; 0x90
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004034:	2300      	movs	r3, #0
 8004036:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004038:	2300      	movs	r3, #0
 800403a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004044:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004048:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004066:	2300      	movs	r3, #0
 8004068:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800406a:	2300      	movs	r3, #0
 800406c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800406e:	2300      	movs	r3, #0
 8004070:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004078:	2300      	movs	r3, #0
 800407a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004084:	2320      	movs	r3, #32
 8004086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004096:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800409c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80040c6:	2300      	movs	r3, #0
 80040c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80040d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fde6 	bl	8003ca8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80040dc:	2301      	movs	r3, #1
 80040de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80040e0:	2301      	movs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004104:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004106:	2300      	movs	r3, #0
 8004108:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800410c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fee1 	bl	8003ee0 <ETH_SetDMAConfig>
}
 800411e:	bf00      	nop
 8004120:	3790      	adds	r7, #144	; 0x90
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e01d      	b.n	8004170 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68d9      	ldr	r1, [r3, #12]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	3206      	adds	r2, #6
 8004166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d9de      	bls.n	8004134 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	461a      	mov	r2, r3
 8004186:	2303      	movs	r3, #3
 8004188:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e023      	b.n	800420e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6919      	ldr	r1, [r3, #16]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2200      	movs	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	3212      	adds	r2, #18
 8004204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d9d8      	bls.n	80041c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	461a      	mov	r2, r3
 800423c:	2303      	movs	r3, #3
 800423e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_GPIO_Init+0x234>)
 8004284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004286:	e194      	b.n	80045b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8186 	beq.w	80045ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d005      	beq.n	80042b8 <HAL_GPIO_Init+0x44>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d130      	bne.n	800431a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	2203      	movs	r2, #3
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ee:	2201      	movs	r2, #1
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 0201 	and.w	r2, r3, #1
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b03      	cmp	r3, #3
 8004324:	d017      	beq.n	8004356 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	2203      	movs	r2, #3
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d123      	bne.n	80043aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	08da      	lsrs	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3208      	adds	r2, #8
 800436a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	220f      	movs	r2, #15
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	08da      	lsrs	r2, r3, #3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3208      	adds	r2, #8
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0203 	and.w	r2, r3, #3
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80e0 	beq.w	80045ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ec:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_GPIO_Init+0x238>)
 80043ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043f2:	4a2e      	ldr	r2, [pc, #184]	; (80044ac <HAL_GPIO_Init+0x238>)
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_GPIO_Init+0x238>)
 80043fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_GPIO_Init+0x23c>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_GPIO_Init+0x240>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d052      	beq.n	80044dc <HAL_GPIO_Init+0x268>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <HAL_GPIO_Init+0x244>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d031      	beq.n	80044a2 <HAL_GPIO_Init+0x22e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_GPIO_Init+0x248>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <HAL_GPIO_Init+0x22a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_GPIO_Init+0x24c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d025      	beq.n	800449a <HAL_GPIO_Init+0x226>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_GPIO_Init+0x250>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01f      	beq.n	8004496 <HAL_GPIO_Init+0x222>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_GPIO_Init+0x254>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d019      	beq.n	8004492 <HAL_GPIO_Init+0x21e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_GPIO_Init+0x258>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_GPIO_Init+0x21a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_GPIO_Init+0x25c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00d      	beq.n	800448a <HAL_GPIO_Init+0x216>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_GPIO_Init+0x260>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <HAL_GPIO_Init+0x212>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_GPIO_Init+0x264>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_GPIO_Init+0x20e>
 800447e:	2309      	movs	r3, #9
 8004480:	e02d      	b.n	80044de <HAL_GPIO_Init+0x26a>
 8004482:	230a      	movs	r3, #10
 8004484:	e02b      	b.n	80044de <HAL_GPIO_Init+0x26a>
 8004486:	2308      	movs	r3, #8
 8004488:	e029      	b.n	80044de <HAL_GPIO_Init+0x26a>
 800448a:	2307      	movs	r3, #7
 800448c:	e027      	b.n	80044de <HAL_GPIO_Init+0x26a>
 800448e:	2306      	movs	r3, #6
 8004490:	e025      	b.n	80044de <HAL_GPIO_Init+0x26a>
 8004492:	2305      	movs	r3, #5
 8004494:	e023      	b.n	80044de <HAL_GPIO_Init+0x26a>
 8004496:	2304      	movs	r3, #4
 8004498:	e021      	b.n	80044de <HAL_GPIO_Init+0x26a>
 800449a:	2303      	movs	r3, #3
 800449c:	e01f      	b.n	80044de <HAL_GPIO_Init+0x26a>
 800449e:	2302      	movs	r3, #2
 80044a0:	e01d      	b.n	80044de <HAL_GPIO_Init+0x26a>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e01b      	b.n	80044de <HAL_GPIO_Init+0x26a>
 80044a6:	bf00      	nop
 80044a8:	58000080 	.word	0x58000080
 80044ac:	58024400 	.word	0x58024400
 80044b0:	58000400 	.word	0x58000400
 80044b4:	58020000 	.word	0x58020000
 80044b8:	58020400 	.word	0x58020400
 80044bc:	58020800 	.word	0x58020800
 80044c0:	58020c00 	.word	0x58020c00
 80044c4:	58021000 	.word	0x58021000
 80044c8:	58021400 	.word	0x58021400
 80044cc:	58021800 	.word	0x58021800
 80044d0:	58021c00 	.word	0x58021c00
 80044d4:	58022000 	.word	0x58022000
 80044d8:	58022400 	.word	0x58022400
 80044dc:	2300      	movs	r3, #0
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	f002 0203 	and.w	r2, r2, #3
 80044e4:	0092      	lsls	r2, r2, #2
 80044e6:	4093      	lsls	r3, r2
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ee:	4938      	ldr	r1, [pc, #224]	; (80045d0 <HAL_GPIO_Init+0x35c>)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800452a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f ae63 	bne.w	8004288 <HAL_GPIO_Init+0x14>
  }
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	3724      	adds	r7, #36	; 0x24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	58000400 	.word	0x58000400

080045d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	807b      	strh	r3, [r7, #2]
 80045e0:	4613      	mov	r3, r2
 80045e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045e4:	787b      	ldrb	r3, [r7, #1]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045f0:	e003      	b.n	80045fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	619a      	str	r2, [r3, #24]
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004618:	887a      	ldrh	r2, [r7, #2]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	041a      	lsls	r2, r3, #16
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43d9      	mvns	r1, r3
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	400b      	ands	r3, r1
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	619a      	str	r2, [r3, #24]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004644:	4a08      	ldr	r2, [pc, #32]	; (8004668 <HAL_HSEM_FastTake+0x2c>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3320      	adds	r3, #32
 800464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464e:	4a07      	ldr	r2, [pc, #28]	; (800466c <HAL_HSEM_FastTake+0x30>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	58026400 	.word	0x58026400
 800466c:	80000300 	.word	0x80000300

08004670 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800467a:	4906      	ldr	r1, [pc, #24]	; (8004694 <HAL_HSEM_Release+0x24>)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	58026400 	.word	0x58026400

08004698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469a:	b08f      	sub	sp, #60	; 0x3c
 800469c:	af0a      	add	r7, sp, #40	; 0x28
 800469e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e116      	b.n	80048d8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc fcd9 	bl	800107c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2203      	movs	r2, #3
 80046ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 fa0b 	bl	8008b04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	687e      	ldr	r6, [r7, #4]
 80046f6:	466d      	mov	r5, sp
 80046f8:	f106 0410 	add.w	r4, r6, #16
 80046fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004708:	e885 0003 	stmia.w	r5, {r0, r1}
 800470c:	1d33      	adds	r3, r6, #4
 800470e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f004 f989 	bl	8008a28 <USB_CoreInit>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0d7      	b.n	80048d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f004 f9f9 	bl	8008b26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e04a      	b.n	80047d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	333d      	adds	r3, #61	; 0x3d
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	333c      	adds	r3, #60	; 0x3c
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	b298      	uxth	r0, r3
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3344      	adds	r3, #68	; 0x44
 8004776:	4602      	mov	r2, r0
 8004778:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3340      	adds	r3, #64	; 0x40
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3348      	adds	r3, #72	; 0x48
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	334c      	adds	r3, #76	; 0x4c
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3354      	adds	r3, #84	; 0x54
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	3301      	adds	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3af      	bcc.n	800473a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e044      	b.n	800486a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047f6:	7bfa      	ldrb	r2, [r7, #15]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800484e:	7bfa      	ldrb	r2, [r7, #15]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	3301      	adds	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3b5      	bcc.n	80047e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	687e      	ldr	r6, [r7, #4]
 800487c:	466d      	mov	r5, sp
 800487e:	f106 0410 	add.w	r4, r6, #16
 8004882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800488e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004892:	1d33      	adds	r3, r6, #4
 8004894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004896:	6838      	ldr	r0, [r7, #0]
 8004898:	f004 f992 	bl	8008bc0 <USB_DevInit>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e014      	b.n	80048d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d102      	bne.n	80048cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f80a 	bl	80048e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f004 fb50 	bl	8008f76 <USB_DevDisconnect>

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_PCDEx_ActivateLPM+0x44>)
 8004910:	4313      	orrs	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	10000003 	.word	0x10000003

08004928 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004930:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	2b06      	cmp	r3, #6
 800493a:	d00a      	beq.n	8004952 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e040      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e03e      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800495a:	491f      	ldr	r1, [pc, #124]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4313      	orrs	r3, r2
 8004960:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004962:	f7fc fcdd 	bl	8001320 <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004968:	e009      	b.n	800497e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800496a:	f7fc fcd9 	bl	8001320 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d901      	bls.n	800497e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e028      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	d1ee      	bne.n	800496a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b1e      	cmp	r3, #30
 8004990:	d008      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b2e      	cmp	r3, #46	; 0x2e
 8004996:	d005      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b1d      	cmp	r3, #29
 800499c:	d002      	beq.n	80049a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b2d      	cmp	r3, #45	; 0x2d
 80049a2:	d114      	bne.n	80049ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80049a4:	f7fc fcbc 	bl	8001320 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049aa:	e009      	b.n	80049c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ac:	f7fc fcb8 	bl	8001320 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ba:	d901      	bls.n	80049c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e007      	b.n	80049d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d1ee      	bne.n	80049ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	58024800 	.word	0x58024800

080049dc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	60d3      	str	r3, [r2, #12]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	58024800 	.word	0x58024800

080049fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	; 0x30
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f000 bc1d 	b.w	800524a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8087 	beq.w	8004b2c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a1e:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a28:	4b96      	ldr	r3, [pc, #600]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d007      	beq.n	8004a44 <HAL_RCC_OscConfig+0x48>
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b18      	cmp	r3, #24
 8004a38:	d110      	bne.n	8004a5c <HAL_RCC_OscConfig+0x60>
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d10b      	bne.n	8004a5c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4b8f      	ldr	r3, [pc, #572]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d06c      	beq.n	8004b2a <HAL_RCC_OscConfig+0x12e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d168      	bne.n	8004b2a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e3f6      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x78>
 8004a66:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a86      	ldr	r2, [pc, #536]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e02e      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd6>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCC_OscConfig+0x9a>
 8004a7c:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a80      	ldr	r2, [pc, #512]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b7e      	ldr	r3, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7d      	ldr	r2, [pc, #500]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e01d      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd6>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9e:	d10c      	bne.n	8004aba <HAL_RCC_OscConfig+0xbe>
 8004aa0:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a77      	ldr	r2, [pc, #476]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a74      	ldr	r2, [pc, #464]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCC_OscConfig+0xd6>
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a71      	ldr	r2, [pc, #452]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6e      	ldr	r2, [pc, #440]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d013      	beq.n	8004b02 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ada:	f7fc fc21 	bl	8001320 <HAL_GetTick>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae2:	f7fc fc1d 	bl	8001320 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b64      	cmp	r3, #100	; 0x64
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e3aa      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004af4:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0xe6>
 8004b00:	e014      	b.n	8004b2c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fc0d 	bl	8001320 <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b0a:	f7fc fc09 	bl	8001320 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e396      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b1c:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x10e>
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80cb 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3a:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b44:	4b4f      	ldr	r3, [pc, #316]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_RCC_OscConfig+0x164>
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	2b18      	cmp	r3, #24
 8004b54:	d156      	bne.n	8004c04 <HAL_RCC_OscConfig+0x208>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d151      	bne.n	8004c04 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b60:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_OscConfig+0x17c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e368      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 0219 	bic.w	r2, r3, #25
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	493f      	ldr	r1, [pc, #252]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b8a:	f7fc fbc9 	bl	8001320 <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fc fbc5 	bl	8001320 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e352      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ba4:	4b37      	ldr	r3, [pc, #220]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	f7fc fbe6 	bl	8001380 <HAL_GetREVID>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d817      	bhi.n	8004bee <HAL_RCC_OscConfig+0x1f2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d108      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x1dc>
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004bce:	4a2d      	ldr	r2, [pc, #180]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd6:	e07b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	4927      	ldr	r1, [pc, #156]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bec:	e070      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	4921      	ldr	r1, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c02:	e065      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d048      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c0c:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 0219 	bic.w	r2, r3, #25
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	491a      	ldr	r1, [pc, #104]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fc fb7f 	bl	8001320 <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fc fb7b 	bl	8001320 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e308      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	f7fc fb9c 	bl	8001380 <HAL_GetREVID>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d81a      	bhi.n	8004c88 <HAL_RCC_OscConfig+0x28c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d108      	bne.n	8004c6c <HAL_RCC_OscConfig+0x270>
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	6053      	str	r3, [r2, #4]
 8004c6a:	e031      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	4902      	ldr	r1, [pc, #8]	; (8004c84 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e026      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	4b9a      	ldr	r3, [pc, #616]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	4997      	ldr	r1, [pc, #604]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
 8004c9c:	e018      	b.n	8004cd0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	4b95      	ldr	r3, [pc, #596]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a94      	ldr	r2, [pc, #592]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fc fb39 	bl	8001320 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7fc fb35 	bl	8001320 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e2c2      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc4:	4b8b      	ldr	r3, [pc, #556]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a9 	beq.w	8004e30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cde:	4b85      	ldr	r3, [pc, #532]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ce6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ce8:	4b82      	ldr	r3, [pc, #520]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d007      	beq.n	8004d04 <HAL_RCC_OscConfig+0x308>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b18      	cmp	r3, #24
 8004cf8:	d13a      	bne.n	8004d70 <HAL_RCC_OscConfig+0x374>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d135      	bne.n	8004d70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d04:	4b7b      	ldr	r3, [pc, #492]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_OscConfig+0x320>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e296      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d1c:	f7fc fb30 	bl	8001380 <HAL_GetREVID>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d817      	bhi.n	8004d5a <HAL_RCC_OscConfig+0x35e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d108      	bne.n	8004d44 <HAL_RCC_OscConfig+0x348>
 8004d32:	4b70      	ldr	r3, [pc, #448]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d3a:	4a6e      	ldr	r2, [pc, #440]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d42:	e075      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d44:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	069b      	lsls	r3, r3, #26
 8004d52:	4968      	ldr	r1, [pc, #416]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d58:	e06a      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d5a:	4b66      	ldr	r3, [pc, #408]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	4962      	ldr	r1, [pc, #392]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d6e:	e05f      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d042      	beq.n	8004dfe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d78:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5d      	ldr	r2, [pc, #372]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fc facc 	bl	8001320 <HAL_GetTick>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d8c:	f7fc fac8 	bl	8001320 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e255      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d9e:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004daa:	f7fc fae9 	bl	8001380 <HAL_GetREVID>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d817      	bhi.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d108      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3d6>
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004dc8:	4a4a      	ldr	r2, [pc, #296]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	6053      	str	r3, [r2, #4]
 8004dd0:	e02e      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
 8004dd2:	4b48      	ldr	r3, [pc, #288]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	069b      	lsls	r3, r3, #26
 8004de0:	4944      	ldr	r1, [pc, #272]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
 8004de6:	e023      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
 8004de8:	4b42      	ldr	r3, [pc, #264]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	061b      	lsls	r3, r3, #24
 8004df6:	493f      	ldr	r1, [pc, #252]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e018      	b.n	8004e30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fc fa89 	bl	8001320 <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004e12:	f7fc fa85 	bl	8001320 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e212      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e24:	4b33      	ldr	r3, [pc, #204]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d036      	beq.n	8004eaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e44:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e50:	f7fc fa66 	bl	8001320 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e58:	f7fc fa62 	bl	8001320 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1ef      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e6a:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x45c>
 8004e76:	e018      	b.n	8004eaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e78:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fc fa4c 	bl	8001320 <HAL_GetTick>
 8004e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fc fa48 	bl	8001320 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e1d5      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d039      	beq.n	8004f2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eca:	f7fc fa29 	bl	8001320 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ed2:	f7fc fa25 	bl	8001320 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e1b2      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <HAL_RCC_OscConfig+0x4f8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x4d6>
 8004ef0:	e01b      	b.n	8004f2a <HAL_RCC_OscConfig+0x52e>
 8004ef2:	bf00      	nop
 8004ef4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ef8:	4b9b      	ldr	r3, [pc, #620]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a9a      	ldr	r2, [pc, #616]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f04:	f7fc fa0c 	bl	8001320 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004f0c:	f7fc fa08 	bl	8001320 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e195      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f1e:	4b92      	ldr	r3, [pc, #584]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8081 	beq.w	800503a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f38:	4b8c      	ldr	r3, [pc, #560]	; (800516c <HAL_RCC_OscConfig+0x770>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a8b      	ldr	r2, [pc, #556]	; (800516c <HAL_RCC_OscConfig+0x770>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f44:	f7fc f9ec 	bl	8001320 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7fc f9e8 	bl	8001320 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e175      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f5e:	4b83      	ldr	r3, [pc, #524]	; (800516c <HAL_RCC_OscConfig+0x770>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d106      	bne.n	8004f80 <HAL_RCC_OscConfig+0x584>
 8004f72:	4b7d      	ldr	r3, [pc, #500]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a7c      	ldr	r2, [pc, #496]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7e:	e02d      	b.n	8004fdc <HAL_RCC_OscConfig+0x5e0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x5a6>
 8004f88:	4b77      	ldr	r3, [pc, #476]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	4a76      	ldr	r2, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	; 0x70
 8004f94:	4b74      	ldr	r3, [pc, #464]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a73      	ldr	r2, [pc, #460]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	e01c      	b.n	8004fdc <HAL_RCC_OscConfig+0x5e0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c8>
 8004faa:	4b6f      	ldr	r3, [pc, #444]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	4a6e      	ldr	r2, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb6:	4b6c      	ldr	r3, [pc, #432]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a6b      	ldr	r2, [pc, #428]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0x5e0>
 8004fc4:	4b68      	ldr	r3, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a67      	ldr	r2, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd0:	4b65      	ldr	r3, [pc, #404]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	4a64      	ldr	r2, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fc f99c 	bl	8001320 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fc f998 	bl	8001320 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e123      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005002:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ee      	beq.n	8004fec <HAL_RCC_OscConfig+0x5f0>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc f986 	bl	8001320 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fc f982 	bl	8001320 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e10d      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800502e:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ee      	bne.n	8005018 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8102 	beq.w	8005248 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504c:	2b18      	cmp	r3, #24
 800504e:	f000 80bd 	beq.w	80051cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b02      	cmp	r3, #2
 8005058:	f040 809e 	bne.w	8005198 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b42      	ldr	r3, [pc, #264]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a41      	ldr	r2, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc f95a 	bl	8001320 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc f956 	bl	8001320 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0e3      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508e:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005092:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCC_OscConfig+0x774>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	430a      	orrs	r2, r1
 80050a2:	4931      	ldr	r1, [pc, #196]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	628b      	str	r3, [r1, #40]	; 0x28
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	3b01      	subs	r3, #1
 80050ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	3b01      	subs	r3, #1
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	3b01      	subs	r3, #1
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050d8:	4923      	ldr	r1, [pc, #140]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80050de:	4b22      	ldr	r3, [pc, #136]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ea:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ee:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCC_OscConfig+0x778>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050f6:	00d2      	lsls	r2, r2, #3
 80050f8:	491b      	ldr	r1, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	f023 020c 	bic.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4917      	ldr	r1, [pc, #92]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005110:	4b15      	ldr	r3, [pc, #84]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	f023 0202 	bic.w	r2, r3, #2
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	4912      	ldr	r1, [pc, #72]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	4a07      	ldr	r2, [pc, #28]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_RCC_OscConfig+0x76c>)
 8005158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fc f8df 	bl	8001320 <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005164:	e011      	b.n	800518a <HAL_RCC_OscConfig+0x78e>
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	58024800 	.word	0x58024800
 8005170:	fffffc0c 	.word	0xfffffc0c
 8005174:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fc f8d2 	bl	8001320 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e05f      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800518a:	4b32      	ldr	r3, [pc, #200]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x77c>
 8005196:	e057      	b.n	8005248 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 800519e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fc f8bc 	bl	8001320 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fc f8b8 	bl	8001320 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e045      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x7b0>
 80051ca:	e03d      	b.n	8005248 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_OscConfig+0x858>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d031      	beq.n	8005244 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0203 	and.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d12a      	bne.n	8005244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d122      	bne.n	8005244 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11a      	bne.n	8005244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	0a5b      	lsrs	r3, r3, #9
 8005212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d111      	bne.n	8005244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d108      	bne.n	8005244 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3730      	adds	r7, #48	; 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400

08005258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e19c      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b8a      	ldr	r3, [pc, #552]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b87      	ldr	r3, [pc, #540]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	4985      	ldr	r1, [pc, #532]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b83      	ldr	r3, [pc, #524]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e184      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	4b7b      	ldr	r3, [pc, #492]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d908      	bls.n	80052ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052b8:	4b78      	ldr	r3, [pc, #480]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	4975      	ldr	r1, [pc, #468]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d908      	bls.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	496a      	ldr	r1, [pc, #424]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	4b64      	ldr	r3, [pc, #400]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005310:	429a      	cmp	r2, r3
 8005312:	d908      	bls.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	495e      	ldr	r1, [pc, #376]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005322:	4313      	orrs	r3, r2
 8005324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800533e:	429a      	cmp	r2, r3
 8005340:	d908      	bls.n	8005354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005342:	4b56      	ldr	r3, [pc, #344]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4953      	ldr	r1, [pc, #332]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005350:	4313      	orrs	r3, r2
 8005352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	4b4d      	ldr	r3, [pc, #308]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	429a      	cmp	r2, r3
 800536e:	d908      	bls.n	8005382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f023 020f 	bic.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4947      	ldr	r1, [pc, #284]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 800537e:	4313      	orrs	r3, r2
 8005380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d055      	beq.n	800543a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800538e:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4940      	ldr	r1, [pc, #256]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a8:	4b3c      	ldr	r3, [pc, #240]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d121      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0f6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d115      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0ea      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053d8:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0de      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e8:	4b2c      	ldr	r3, [pc, #176]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0d6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f023 0207 	bic.w	r2, r3, #7
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4925      	ldr	r1, [pc, #148]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540a:	f7fb ff89 	bl	8001320 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005410:	e00a      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005412:	f7fb ff85 	bl	8001320 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0be      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	429a      	cmp	r2, r3
 8005438:	d1eb      	bne.n	8005412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	429a      	cmp	r2, r3
 8005454:	d208      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f023 020f 	bic.w	r2, r3, #15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	490e      	ldr	r1, [pc, #56]	; (800549c <HAL_RCC_ClockConfig+0x244>)
 8005464:	4313      	orrs	r3, r2
 8005466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d214      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020f 	bic.w	r2, r3, #15
 800547e:	4906      	ldr	r1, [pc, #24]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b04      	ldr	r3, [pc, #16]	; (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e086      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
 8005498:	52002000 	.word	0x52002000
 800549c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	4b3f      	ldr	r3, [pc, #252]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d208      	bcs.n	80054ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054bc:	4b3c      	ldr	r3, [pc, #240]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4939      	ldr	r1, [pc, #228]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d208      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	492e      	ldr	r1, [pc, #184]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	4922      	ldr	r1, [pc, #136]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005526:	4313      	orrs	r3, r2
 8005528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005542:	429a      	cmp	r2, r3
 8005544:	d208      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4917      	ldr	r1, [pc, #92]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005554:	4313      	orrs	r3, r2
 8005556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005558:	f000 f834 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4912      	ldr	r1, [pc, #72]	; (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005576:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 8005580:	5cd3      	ldrb	r3, [r2, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x360>)
 800558e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <HAL_RCC_ClockConfig+0x364>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_RCC_ClockConfig+0x368>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fb fe76 	bl	800128c <HAL_InitTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	080090ac 	.word	0x080090ac
 80055b8:	24000004 	.word	0x24000004
 80055bc:	24000000 	.word	0x24000000
 80055c0:	24000008 	.word	0x24000008

080055c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ca:	4bb3      	ldr	r3, [pc, #716]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	f200 8155 	bhi.w	8005882 <HAL_RCC_GetSysClockFreq+0x2be>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005645 	.word	0x08005645
 80055e4:	08005883 	.word	0x08005883
 80055e8:	08005883 	.word	0x08005883
 80055ec:	08005883 	.word	0x08005883
 80055f0:	08005883 	.word	0x08005883
 80055f4:	08005883 	.word	0x08005883
 80055f8:	08005883 	.word	0x08005883
 80055fc:	08005883 	.word	0x08005883
 8005600:	0800566b 	.word	0x0800566b
 8005604:	08005883 	.word	0x08005883
 8005608:	08005883 	.word	0x08005883
 800560c:	08005883 	.word	0x08005883
 8005610:	08005883 	.word	0x08005883
 8005614:	08005883 	.word	0x08005883
 8005618:	08005883 	.word	0x08005883
 800561c:	08005883 	.word	0x08005883
 8005620:	08005671 	.word	0x08005671
 8005624:	08005883 	.word	0x08005883
 8005628:	08005883 	.word	0x08005883
 800562c:	08005883 	.word	0x08005883
 8005630:	08005883 	.word	0x08005883
 8005634:	08005883 	.word	0x08005883
 8005638:	08005883 	.word	0x08005883
 800563c:	08005883 	.word	0x08005883
 8005640:	08005677 	.word	0x08005677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005644:	4b94      	ldr	r3, [pc, #592]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005650:	4b91      	ldr	r3, [pc, #580]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	4a90      	ldr	r2, [pc, #576]	; (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005662:	e111      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005664:	4b8d      	ldr	r3, [pc, #564]	; (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005666:	61bb      	str	r3, [r7, #24]
    break;
 8005668:	e10e      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800566c:	61bb      	str	r3, [r7, #24]
    break;
 800566e:	e10b      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005670:	4b8c      	ldr	r3, [pc, #560]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005672:	61bb      	str	r3, [r7, #24]
    break;
 8005674:	e108      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005676:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005680:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800568c:	4b82      	ldr	r3, [pc, #520]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005696:	4b80      	ldr	r3, [pc, #512]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80e1 	beq.w	800587c <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 8083 	beq.w	80057c8 <HAL_RCC_GetSysClockFreq+0x204>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f200 80a1 	bhi.w	800580c <HAL_RCC_GetSysClockFreq+0x248>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x114>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d056      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056d6:	e099      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b6f      	ldr	r3, [pc, #444]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056e4:	4b6c      	ldr	r3, [pc, #432]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a6b      	ldr	r2, [pc, #428]	; (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b62      	ldr	r3, [pc, #392]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800573e:	e087      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80058ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b51      	ldr	r3, [pc, #324]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a02 	vldr	s12, [r7, #8]
 8005766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005782:	e065      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b40      	ldr	r3, [pc, #256]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c6:	e043      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80058b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b2f      	ldr	r3, [pc, #188]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800580a:	e021      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b1e      	ldr	r3, [pc, #120]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	3301      	adds	r3, #1
 800585c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005868:	edd7 6a07 	vldr	s13, [r7, #28]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005874:	ee17 3a90 	vmov	r3, s15
 8005878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800587a:	e005      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
    break;
 8005880:	e002      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005884:	61bb      	str	r3, [r7, #24]
    break;
 8005886:	bf00      	nop
  }

  return sysclockfreq;
 8005888:	69bb      	ldr	r3, [r7, #24]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	003d0900 	.word	0x003d0900
 80058a4:	007a1200 	.word	0x007a1200
 80058a8:	46000000 	.word	0x46000000
 80058ac:	4c742400 	.word	0x4c742400
 80058b0:	4a742400 	.word	0x4a742400
 80058b4:	4af42400 	.word	0x4af42400

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058be:	f7ff fe81 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490f      	ldr	r1, [pc, #60]	; (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4a09      	ldr	r2, [pc, #36]	; (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a07      	ldr	r2, [pc, #28]	; (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058f6:	4a07      	ldr	r2, [pc, #28]	; (8005914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	080090ac 	.word	0x080090ac
 8005910:	24000004 	.word	0x24000004
 8005914:	24000000 	.word	0x24000000

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800591c:	f7ff ffcc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	; (8005940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	080090ac 	.word	0x080090ac

08005944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005948:	f7ff ffb6 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_RCC_GetPCLK2Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	080090ac 	.word	0x080090ac

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800597c:	2300      	movs	r3, #0
 800597e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03f      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005994:	d02a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800599a:	d824      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d018      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a6:	d81e      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b0:	d007      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059b2:	e018      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4ba3      	ldr	r3, [pc, #652]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4aa2      	ldr	r2, [pc, #648]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059c0:	e015      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	2102      	movs	r1, #2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f9d5 	bl	8006d78 <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059d2:	e00c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3324      	adds	r3, #36	; 0x24
 80059d8:	2102      	movs	r1, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fa7e 	bl	8006edc <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059f4:	4b93      	ldr	r3, [pc, #588]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80059f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a00:	4990      	ldr	r1, [pc, #576]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	650b      	str	r3, [r1, #80]	; 0x50
 8005a06:	e001      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d03d      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d826      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005a4b 	.word	0x08005a4b
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a3c:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	4a80      	ldr	r2, [pc, #512]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a48:	e015      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f991 	bl	8006d78 <RCCEx_PLL2_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5a:	e00c      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3324      	adds	r3, #36	; 0x24
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fa3a 	bl	8006edc <RCCEx_PLL3_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
      break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a7c:	4b71      	ldr	r3, [pc, #452]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a80:	f023 0207 	bic.w	r2, r3, #7
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	496e      	ldr	r1, [pc, #440]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a8e:	e001      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d042      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa8:	d02b      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aae:	d825      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8005ab2:	d028      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8005ab6:	d821      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d016      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d81d      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d007      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005ac8:	e018      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aca:	4b5e      	ldr	r3, [pc, #376]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4a5d      	ldr	r2, [pc, #372]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ad6:	e017      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 f94a 	bl	8006d78 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e00e      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 f9f3 	bl	8006edc <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005afa:	e005      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e002      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b0e:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	494a      	ldr	r1, [pc, #296]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005b20:	e001      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d049      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b3c:	d030      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b42:	d82a      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b48:	d02c      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b4e:	d824      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b54:	d018      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5a:	d81e      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b64:	d007      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b66:	e018      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b68:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	4a35      	ldr	r2, [pc, #212]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b74:	e017      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 f8fb 	bl	8006d78 <RCCEx_PLL2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b86:	e00e      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3324      	adds	r3, #36	; 0x24
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 f9a4 	bl	8006edc <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b98:	e005      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bba:	4922      	ldr	r1, [pc, #136]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04b      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bdc:	d030      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be2:	d82a      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005be8:	d02e      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bee:	d824      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf4:	d018      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfa:	d81e      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c04:	d007      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c06:	e018      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c14:	e019      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 f8ab 	bl	8006d78 <RCCEx_PLL2_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c26:	e010      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3324      	adds	r3, #36	; 0x24
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 f954 	bl	8006edc <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c38:	e007      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c44:	58024400 	.word	0x58024400
      break;
 8005c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c50:	4b99      	ldr	r3, [pc, #612]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c5e:	4996      	ldr	r1, [pc, #600]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	658b      	str	r3, [r1, #88]	; 0x58
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d032      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7a:	2b30      	cmp	r3, #48	; 0x30
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005c7e:	2b30      	cmp	r3, #48	; 0x30
 8005c80:	d817      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d00c      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d813      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d10f      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c92:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	4a88      	ldr	r2, [pc, #544]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c9e:	e00e      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f866 	bl	8006d78 <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005cb0:	e005      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb6:	e002      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cc4:	4b7c      	ldr	r3, [pc, #496]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd0:	4979      	ldr	r1, [pc, #484]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cd6:	e001      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d047      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf0:	d030      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf6:	d82a      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cfc:	d02c      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d02:	d824      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	d018      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0e:	d81e      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d007      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005d1a:	e018      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d28:	e017      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f821 	bl	8006d78 <RCCEx_PLL2_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d3a:	e00e      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3324      	adds	r3, #36	; 0x24
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f8ca 	bl	8006edc <RCCEx_PLL3_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
      break;
 8005d52:	e002      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d54:	bf00      	nop
 8005d56:	e000      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d60:	4b55      	ldr	r3, [pc, #340]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	4952      	ldr	r1, [pc, #328]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	650b      	str	r3, [r1, #80]	; 0x50
 8005d72:	e001      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d049      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d8c:	d02e      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d92:	d828      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d98:	d02a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d9e:	d822      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005da4:	d026      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005daa:	d81c      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db0:	d010      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db6:	d816      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01d      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc0:	d111      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 ffd5 	bl	8006d78 <RCCEx_PLL2_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005dd2:	e012      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3324      	adds	r3, #36	; 0x24
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f87e 	bl	8006edc <RCCEx_PLL3_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005de4:	e009      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dea:	e006      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005dec:	bf00      	nop
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005df0:	bf00      	nop
 8005df2:	e002      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005df4:	bf00      	nop
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e00:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0c:	492a      	ldr	r1, [pc, #168]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	650b      	str	r3, [r1, #80]	; 0x50
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d04d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e2e:	d02e      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e34:	d828      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3a:	d02a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e40:	d822      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e46:	d026      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e4c:	d81c      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e52:	d010      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e58:	d816      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01d      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e62:	d111      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ff84 	bl	8006d78 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e74:	e012      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 f82d 	bl	8006edc <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e86:	e009      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e8e:	bf00      	nop
 8005e90:	e004      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005eb0:	4901      	ldr	r1, [pc, #4]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8005eb6:	e003      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eda:	d814      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee4:	d10f      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee6:	4baf      	ldr	r3, [pc, #700]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4aae      	ldr	r2, [pc, #696]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ef2:	e00c      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 ff3c 	bl	8006d78 <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f14:	4ba3      	ldr	r3, [pc, #652]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f20:	49a0      	ldr	r1, [pc, #640]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	650b      	str	r3, [r1, #80]	; 0x50
 8005f26:	e001      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d032      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d81b      	bhi.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f7f 	.word	0x08005f7f
 8005f4c:	08005f59 	.word	0x08005f59
 8005f50:	08005f67 	.word	0x08005f67
 8005f54:	08005f7f 	.word	0x08005f7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b92      	ldr	r3, [pc, #584]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a91      	ldr	r2, [pc, #580]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f64:	e00c      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ff03 	bl	8006d78 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f76:	e003      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f86:	4b87      	ldr	r3, [pc, #540]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	f023 0203 	bic.w	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	4984      	ldr	r1, [pc, #528]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f98:	e001      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8086 	beq.w	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fac:	4b7e      	ldr	r3, [pc, #504]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a7d      	ldr	r2, [pc, #500]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb8:	f7fb f9b2 	bl	8001320 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fbe:	e009      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc0:	f7fb f9ae 	bl	8001320 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	; 0x64
 8005fcc:	d902      	bls.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8005fd2:	e005      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd4:	4b74      	ldr	r3, [pc, #464]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0ef      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d166      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ff0:	4053      	eors	r3, r2
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ffa:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006004:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	4a66      	ldr	r2, [pc, #408]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800600a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006010:	4b64      	ldr	r3, [pc, #400]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a63      	ldr	r2, [pc, #396]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800601c:	4a61      	ldr	r2, [pc, #388]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602c:	d115      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fb f977 	bl	8001320 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006034:	e00b      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006036:	f7fb f973 	bl	8001320 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f241 3288 	movw	r2, #5000	; 0x1388
 8006044:	4293      	cmp	r3, r2
 8006046:	d902      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	75fb      	strb	r3, [r7, #23]
            break;
 800604c:	e005      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800604e:	4b55      	ldr	r3, [pc, #340]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0ed      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d126      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606e:	d10d      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006070:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800607e:	0919      	lsrs	r1, r3, #4
 8006080:	4b4a      	ldr	r3, [pc, #296]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006082:	400b      	ands	r3, r1
 8006084:	4947      	ldr	r1, [pc, #284]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]
 800608a:	e005      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800608c:	4b45      	ldr	r3, [pc, #276]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	4a44      	ldr	r2, [pc, #272]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006096:	6113      	str	r3, [r2, #16]
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800609a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	493f      	ldr	r1, [pc, #252]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	670b      	str	r3, [r1, #112]	; 0x70
 80060ac:	e004      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	75bb      	strb	r3, [r7, #22]
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8085 	beq.w	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	2b28      	cmp	r3, #40	; 0x28
 80060cc:	d866      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080061b1 	.word	0x080061b1
 80060d8:	0800619d 	.word	0x0800619d
 80060dc:	0800619d 	.word	0x0800619d
 80060e0:	0800619d 	.word	0x0800619d
 80060e4:	0800619d 	.word	0x0800619d
 80060e8:	0800619d 	.word	0x0800619d
 80060ec:	0800619d 	.word	0x0800619d
 80060f0:	0800619d 	.word	0x0800619d
 80060f4:	08006179 	.word	0x08006179
 80060f8:	0800619d 	.word	0x0800619d
 80060fc:	0800619d 	.word	0x0800619d
 8006100:	0800619d 	.word	0x0800619d
 8006104:	0800619d 	.word	0x0800619d
 8006108:	0800619d 	.word	0x0800619d
 800610c:	0800619d 	.word	0x0800619d
 8006110:	0800619d 	.word	0x0800619d
 8006114:	0800618b 	.word	0x0800618b
 8006118:	0800619d 	.word	0x0800619d
 800611c:	0800619d 	.word	0x0800619d
 8006120:	0800619d 	.word	0x0800619d
 8006124:	0800619d 	.word	0x0800619d
 8006128:	0800619d 	.word	0x0800619d
 800612c:	0800619d 	.word	0x0800619d
 8006130:	0800619d 	.word	0x0800619d
 8006134:	080061b1 	.word	0x080061b1
 8006138:	0800619d 	.word	0x0800619d
 800613c:	0800619d 	.word	0x0800619d
 8006140:	0800619d 	.word	0x0800619d
 8006144:	0800619d 	.word	0x0800619d
 8006148:	0800619d 	.word	0x0800619d
 800614c:	0800619d 	.word	0x0800619d
 8006150:	0800619d 	.word	0x0800619d
 8006154:	080061b1 	.word	0x080061b1
 8006158:	0800619d 	.word	0x0800619d
 800615c:	0800619d 	.word	0x0800619d
 8006160:	0800619d 	.word	0x0800619d
 8006164:	0800619d 	.word	0x0800619d
 8006168:	0800619d 	.word	0x0800619d
 800616c:	0800619d 	.word	0x0800619d
 8006170:	0800619d 	.word	0x0800619d
 8006174:	080061b1 	.word	0x080061b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2101      	movs	r1, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fdfa 	bl	8006d78 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006188:	e013      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fea3 	bl	8006edc <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800619a:	e00a      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
      break;
 80061a0:	e007      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80061a2:	bf00      	nop
 80061a4:	58024400 	.word	0x58024400
 80061a8:	58024800 	.word	0x58024800
 80061ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80061b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061b8:	4b96      	ldr	r3, [pc, #600]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c4:	4993      	ldr	r1, [pc, #588]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	654b      	str	r3, [r1, #84]	; 0x54
 80061ca:	e001      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d038      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d821      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	0800622f 	.word	0x0800622f
 80061f0:	08006205 	.word	0x08006205
 80061f4:	08006217 	.word	0x08006217
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fdb4 	bl	8006d78 <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006214:	e00c      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2101      	movs	r1, #1
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fe5d 	bl	8006edc <RCCEx_PLL3_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	e000      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800622e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006236:	4b77      	ldr	r3, [pc, #476]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f023 0207 	bic.w	r2, r3, #7
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006242:	4974      	ldr	r1, [pc, #464]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	654b      	str	r3, [r1, #84]	; 0x54
 8006248:	e001      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d03a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	2b05      	cmp	r3, #5
 8006262:	d821      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	080062af 	.word	0x080062af
 8006270:	08006285 	.word	0x08006285
 8006274:	08006297 	.word	0x08006297
 8006278:	080062af 	.word	0x080062af
 800627c:	080062af 	.word	0x080062af
 8006280:	080062af 	.word	0x080062af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fd74 	bl	8006d78 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006294:	e00c      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2101      	movs	r1, #1
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fe1d 	bl	8006edc <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80062ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062b6:	4b57      	ldr	r3, [pc, #348]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	f023 0207 	bic.w	r2, r3, #7
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	4953      	ldr	r1, [pc, #332]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	658b      	str	r3, [r1, #88]	; 0x58
 80062ca:	e001      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d04b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062e6:	d02e      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80062e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062ec:	d828      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d02a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f8:	d822      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80062fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062fe:	d026      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006304:	d81c      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800630a:	d010      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800630c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006310:	d816      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01d      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631a:	d111      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fd28 	bl	8006d78 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800632c:	e012      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3324      	adds	r3, #36	; 0x24
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fdd1 	bl	8006edc <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800633e:	e009      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e006      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006346:	bf00      	nop
 8006348:	e004      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006368:	492a      	ldr	r1, [pc, #168]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800636a:	4313      	orrs	r3, r2
 800636c:	654b      	str	r3, [r1, #84]	; 0x54
 800636e:	e001      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d04d      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006386:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800638a:	d02e      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800638c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006390:	d828      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	d02a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d822      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800639e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a2:	d026      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80063a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a8:	d81c      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d010      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80063b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b4:	d816      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01d      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063be:	d111      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fcd6 	bl	8006d78 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063d0:	e012      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fd7f 	bl	8006edc <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80063e2:	e009      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	e006      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063ea:	bf00      	nop
 80063ec:	e004      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063ee:	bf00      	nop
 80063f0:	e002      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80063f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800640c:	4901      	ldr	r1, [pc, #4]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	658b      	str	r3, [r1, #88]	; 0x58
 8006412:	e003      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b00      	cmp	r3, #0
 8006426:	d04b      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800642e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006432:	d02e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006434:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006438:	d828      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643e:	d02a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006444:	d822      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006446:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800644a:	d026      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800644c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006450:	d81c      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006456:	d010      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645c:	d816      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01d      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006466:	d111      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fc82 	bl	8006d78 <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006478:	e012      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3324      	adds	r3, #36	; 0x24
 800647e:	2102      	movs	r1, #2
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fd2b 	bl	8006edc <RCCEx_PLL3_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800648a:	e009      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
      break;
 8006490:	e006      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006492:	bf00      	nop
 8006494:	e004      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800649e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064a6:	4b9d      	ldr	r3, [pc, #628]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064b4:	4999      	ldr	r1, [pc, #612]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	658b      	str	r3, [r1, #88]	; 0x58
 80064ba:	e001      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d10a      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	2102      	movs	r1, #2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fcfc 	bl	8006edc <RCCEx_PLL3_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064ee:	4b8b      	ldr	r3, [pc, #556]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064fc:	4987      	ldr	r1, [pc, #540]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006518:	d10a      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3324      	adds	r3, #36	; 0x24
 800651e:	2102      	movs	r1, #2
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fcdb 	bl	8006edc <RCCEx_PLL3_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006530:	4b7a      	ldr	r3, [pc, #488]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800653e:	4977      	ldr	r1, [pc, #476]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006540:	4313      	orrs	r3, r2
 8006542:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d034      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800655a:	d01d      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800655c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006560:	d817      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656a:	d009      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800656c:	e011      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fbff 	bl	8006d78 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800657e:	e00c      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fca8 	bl	8006edc <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065a0:	4b5e      	ldr	r3, [pc, #376]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065ae:	495b      	ldr	r1, [pc, #364]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	658b      	str	r3, [r1, #88]	; 0x58
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d033      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065d0:	d01c      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80065d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065d6:	d816      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80065d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065dc:	d003      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80065de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e2:	d007      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80065e4:	e00f      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e6:	4b4d      	ldr	r3, [pc, #308]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	4a4c      	ldr	r2, [pc, #304]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80065f2:	e00c      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fc6e 	bl	8006edc <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006604:	e003      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
      break;
 800660a:	e000      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800660c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006614:	4b41      	ldr	r3, [pc, #260]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006622:	493e      	ldr	r1, [pc, #248]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006624:	4313      	orrs	r3, r2
 8006626:	654b      	str	r3, [r1, #84]	; 0x54
 8006628:	e001      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d029      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006646:	d007      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006648:	e00f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800664a:	4b34      	ldr	r3, [pc, #208]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	4a33      	ldr	r2, [pc, #204]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006656:	e00b      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fb8a 	bl	8006d78 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006668:	e002      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	75fb      	strb	r3, [r7, #23]
      break;
 800666e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006676:	4b29      	ldr	r3, [pc, #164]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4926      	ldr	r1, [pc, #152]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006684:	4313      	orrs	r3, r2
 8006686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006688:	e001      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fc1b 	bl	8006edc <RCCEx_PLL3_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d033      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c4:	d017      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80066c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ca:	d811      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d0:	d013      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80066d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d6:	d80b      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d106      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	4a0d      	ldr	r2, [pc, #52]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80066ee:	e007      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
      break;
 80066f4:	e004      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80066fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10c      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006712:	4902      	ldr	r1, [pc, #8]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006714:	4313      	orrs	r3, r2
 8006716:	654b      	str	r3, [r1, #84]	; 0x54
 8006718:	e004      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800671a:	bf00      	nop
 800671c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	492e      	ldr	r1, [pc, #184]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800673e:	4313      	orrs	r3, r2
 8006740:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800674e:	4b2a      	ldr	r3, [pc, #168]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800675c:	4926      	ldr	r1, [pc, #152]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800675e:	4313      	orrs	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800676e:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800677a:	491f      	ldr	r1, [pc, #124]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800677c:	4313      	orrs	r3, r2
 800677e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006792:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006796:	6113      	str	r3, [r2, #16]
 8006798:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80067a2:	4915      	ldr	r1, [pc, #84]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da08      	bge.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	490e      	ldr	r1, [pc, #56]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	4906      	ldr	r1, [pc, #24]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80067e2:	7dbb      	ldrb	r3, [r7, #22]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400

080067fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006800:	f7ff f85a 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8006804:	4602      	mov	r2, r0
 8006806:	4b06      	ldr	r3, [pc, #24]	; (8006820 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	4904      	ldr	r1, [pc, #16]	; (8006824 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006812:	5ccb      	ldrb	r3, [r1, r3]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800681c:	4618      	mov	r0, r3
 800681e:	bd80      	pop	{r7, pc}
 8006820:	58024400 	.word	0x58024400
 8006824:	080090ac 	.word	0x080090ac

08006828 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006828:	b480      	push	{r7}
 800682a:	b089      	sub	sp, #36	; 0x24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006830:	4ba1      	ldr	r3, [pc, #644]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800683a:	4b9f      	ldr	r3, [pc, #636]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	0b1b      	lsrs	r3, r3, #12
 8006840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006844:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006846:	4b9c      	ldr	r3, [pc, #624]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006852:	4b99      	ldr	r3, [pc, #612]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8111 	beq.w	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f000 8083 	beq.w	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d056      	beq.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006892:	e099      	b.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b88      	ldr	r3, [pc, #544]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a0:	4b85      	ldr	r3, [pc, #532]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	4a84      	ldr	r2, [pc, #528]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b7b      	ldr	r3, [pc, #492]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068fa:	e087      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b6a      	ldr	r3, [pc, #424]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800693e:	e065      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a03 	vldr	s12, [r7, #12]
 8006966:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006982:	e043      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b48      	ldr	r3, [pc, #288]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069c6:	e021      	b.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b37      	ldr	r3, [pc, #220]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	0a5b      	lsrs	r3, r3, #9
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a32:	ee17 2a90 	vmov	r2, s15
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a60:	ee17 2a90 	vmov	r2, s15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a68:	4b13      	ldr	r3, [pc, #76]	; (8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8e:	ee17 2a90 	vmov	r2, s15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	3724      	adds	r7, #36	; 0x24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	03d09000 	.word	0x03d09000
 8006ac0:	46000000 	.word	0x46000000
 8006ac4:	4c742400 	.word	0x4c742400
 8006ac8:	4a742400 	.word	0x4a742400
 8006acc:	4af42400 	.word	0x4af42400

08006ad0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad8:	4ba1      	ldr	r3, [pc, #644]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ae2:	4b9f      	ldr	r3, [pc, #636]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	0d1b      	lsrs	r3, r3, #20
 8006ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006aee:	4b9c      	ldr	r3, [pc, #624]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006afa:	4b99      	ldr	r3, [pc, #612]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8111 	beq.w	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f000 8083 	beq.w	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	f200 80a1 	bhi.w	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d056      	beq.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b3a:	e099      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3c:	4b88      	ldr	r3, [pc, #544]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02d      	beq.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b48:	4b85      	ldr	r3, [pc, #532]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	08db      	lsrs	r3, r3, #3
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	4a84      	ldr	r2, [pc, #528]	; (8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
 8006b58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b7b      	ldr	r3, [pc, #492]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ba2:	e087      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b6a      	ldr	r3, [pc, #424]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006be6:	e065      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b59      	ldr	r3, [pc, #356]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c2a:	e043      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b48      	ldr	r3, [pc, #288]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c6e:	e021      	b.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b37      	ldr	r3, [pc, #220]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006cb4:	4b2a      	ldr	r3, [pc, #168]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cda:	ee17 2a90 	vmov	r2, s15
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d08:	ee17 2a90 	vmov	r2, s15
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d10:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	0e1b      	lsrs	r3, r3, #24
 8006d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d36:	ee17 2a90 	vmov	r2, s15
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d3e:	e008      	b.n	8006d52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]
}
 8006d52:	bf00      	nop
 8006d54:	3724      	adds	r7, #36	; 0x24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
 8006d64:	03d09000 	.word	0x03d09000
 8006d68:	46000000 	.word	0x46000000
 8006d6c:	4c742400 	.word	0x4c742400
 8006d70:	4a742400 	.word	0x4a742400
 8006d74:	4af42400 	.word	0x4af42400

08006d78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d86:	4b53      	ldr	r3, [pc, #332]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d101      	bne.n	8006d96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e099      	b.n	8006eca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d96:	4b4f      	ldr	r3, [pc, #316]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a4e      	ldr	r2, [pc, #312]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006da2:	f7fa fabd 	bl	8001320 <HAL_GetTick>
 8006da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006da8:	e008      	b.n	8006dbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006daa:	f7fa fab9 	bl	8001320 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e086      	b.n	8006eca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dbc:	4b45      	ldr	r3, [pc, #276]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dc8:	4b42      	ldr	r3, [pc, #264]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	493f      	ldr	r1, [pc, #252]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	628b      	str	r3, [r1, #40]	; 0x28
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	025b      	lsls	r3, r3, #9
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	061b      	lsls	r3, r3, #24
 8006e08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e0c:	4931      	ldr	r1, [pc, #196]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e12:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	492d      	ldr	r1, [pc, #180]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e24:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	f023 0220 	bic.w	r2, r3, #32
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	4928      	ldr	r1, [pc, #160]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e36:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e42:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e46:	4b24      	ldr	r3, [pc, #144]	; (8006ed8 <RCCEx_PLL2_Config+0x160>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	69d2      	ldr	r2, [r2, #28]
 8006e4e:	00d2      	lsls	r2, r2, #3
 8006e50:	4920      	ldr	r1, [pc, #128]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e56:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	f043 0310 	orr.w	r3, r3, #16
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d106      	bne.n	8006e76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e68:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e74:	e00f      	b.n	8006e96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e7c:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a14      	ldr	r2, [pc, #80]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e88:	e005      	b.n	8006e96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e8a:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	4a11      	ldr	r2, [pc, #68]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a0e      	ldr	r2, [pc, #56]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea2:	f7fa fa3d 	bl	8001320 <HAL_GetTick>
 8006ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006eaa:	f7fa fa39 	bl	8001320 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e006      	b.n	8006eca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <RCCEx_PLL2_Config+0x15c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	ffff0007 	.word	0xffff0007

08006edc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eea:	4b53      	ldr	r3, [pc, #332]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d101      	bne.n	8006efa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e099      	b.n	800702e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006efa:	4b4f      	ldr	r3, [pc, #316]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a4e      	ldr	r2, [pc, #312]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f06:	f7fa fa0b 	bl	8001320 <HAL_GetTick>
 8006f0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f0c:	e008      	b.n	8006f20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f0e:	f7fa fa07 	bl	8001320 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e086      	b.n	800702e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f20:	4b45      	ldr	r3, [pc, #276]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f0      	bne.n	8006f0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f2c:	4b42      	ldr	r3, [pc, #264]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	051b      	lsls	r3, r3, #20
 8006f3a:	493f      	ldr	r1, [pc, #252]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	628b      	str	r3, [r1, #40]	; 0x28
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	025b      	lsls	r3, r3, #9
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	041b      	lsls	r3, r3, #16
 8006f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f70:	4931      	ldr	r1, [pc, #196]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f76:	4b30      	ldr	r3, [pc, #192]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	492d      	ldr	r1, [pc, #180]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f88:	4b2b      	ldr	r3, [pc, #172]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	4928      	ldr	r1, [pc, #160]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f9a:	4b27      	ldr	r3, [pc, #156]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4a26      	ldr	r2, [pc, #152]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fa6:	4b24      	ldr	r3, [pc, #144]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006faa:	4b24      	ldr	r3, [pc, #144]	; (800703c <RCCEx_PLL3_Config+0x160>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	69d2      	ldr	r2, [r2, #28]
 8006fb2:	00d2      	lsls	r2, r2, #3
 8006fb4:	4920      	ldr	r1, [pc, #128]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fba:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4a19      	ldr	r2, [pc, #100]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fd8:	e00f      	b.n	8006ffa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d106      	bne.n	8006fee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a14      	ldr	r2, [pc, #80]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fec:	e005      	b.n	8006ffa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fee:	4b12      	ldr	r3, [pc, #72]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	4a11      	ldr	r2, [pc, #68]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a0e      	ldr	r2, [pc, #56]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007006:	f7fa f98b 	bl	8001320 <HAL_GetTick>
 800700a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800700c:	e008      	b.n	8007020 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800700e:	f7fa f987 	bl	8001320 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e006      	b.n	800702e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <RCCEx_PLL3_Config+0x15c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	ffff0007 	.word	0xffff0007

08007040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e042      	b.n	80070d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7f9 ff37 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2224      	movs	r2, #36	; 0x24
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0201 	bic.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fbea 	bl	800785c <UART_SetConfig>
 8007088:	4603      	mov	r3, r0
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e022      	b.n	80070d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f946 	bl	800832c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f9cd 	bl	8008470 <UART_CheckIdleState>
 80070d6:	4603      	mov	r3, r0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b0ba      	sub	sp, #232	; 0xe8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007106:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800710a:	f640 030f 	movw	r3, #2063	; 0x80f
 800710e:	4013      	ands	r3, r2
 8007110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11b      	bne.n	8007154 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d009      	beq.n	8007154 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 835a 	beq.w	80077fe <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
      }
      return;
 8007152:	e354      	b.n	80077fe <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 811f 	beq.w	800739c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800715e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007162:	4b8b      	ldr	r3, [pc, #556]	; (8007390 <HAL_UART_IRQHandler+0x2b0>)
 8007164:	4013      	ands	r3, r2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800716a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800716e:	4b89      	ldr	r3, [pc, #548]	; (8007394 <HAL_UART_IRQHandler+0x2b4>)
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8112 	beq.w	800739c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d011      	beq.n	80071a8 <HAL_UART_IRQHandler+0xc8>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d011      	beq.n	80071d8 <HAL_UART_IRQHandler+0xf8>
 80071b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2202      	movs	r2, #2
 80071c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <HAL_UART_IRQHandler+0x128>
 80071e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2204      	movs	r2, #4
 80071f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fe:	f043 0202 	orr.w	r2, r3, #2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d017      	beq.n	8007244 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007224:	4b5a      	ldr	r3, [pc, #360]	; (8007390 <HAL_UART_IRQHandler+0x2b0>)
 8007226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2208      	movs	r2, #8
 8007232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723a:	f043 0208 	orr.w	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <HAL_UART_IRQHandler+0x196>
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 82c0 	beq.w	8007802 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d013      	beq.n	80072b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800728e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800729a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d005      	beq.n	80072da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d04f      	beq.n	800737a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 f9dc 	bl	8008698 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d141      	bne.n	8007372 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800731a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800731e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1d9      	bne.n	80072ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d013      	beq.n	800736a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	4a14      	ldr	r2, [pc, #80]	; (8007398 <HAL_UART_IRQHandler+0x2b8>)
 8007348:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800734e:	4618      	mov	r0, r3
 8007350:	f7fa ffc0 	bl	80022d4 <HAL_DMA_Abort_IT>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00f      	b.n	800738a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa60 	bl	8007830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e00b      	b.n	800738a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa5c 	bl	8007830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e007      	b.n	800738a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa58 	bl	8007830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007388:	e23b      	b.n	8007802 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738a:	bf00      	nop
    return;
 800738c:	e239      	b.n	8007802 <HAL_UART_IRQHandler+0x722>
 800738e:	bf00      	nop
 8007390:	10000001 	.word	0x10000001
 8007394:	04000120 	.word	0x04000120
 8007398:	08008765 	.word	0x08008765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 81ce 	bne.w	8007742 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 81c7 	beq.w	8007742 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 81c0 	beq.w	8007742 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2210      	movs	r2, #16
 80073c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	f040 813b 	bne.w	8007650 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a8b      	ldr	r2, [pc, #556]	; (8007610 <HAL_UART_IRQHandler+0x530>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d059      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a89      	ldr	r2, [pc, #548]	; (8007614 <HAL_UART_IRQHandler+0x534>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d053      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a87      	ldr	r2, [pc, #540]	; (8007618 <HAL_UART_IRQHandler+0x538>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d04d      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a85      	ldr	r2, [pc, #532]	; (800761c <HAL_UART_IRQHandler+0x53c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d047      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a83      	ldr	r2, [pc, #524]	; (8007620 <HAL_UART_IRQHandler+0x540>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d041      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a81      	ldr	r2, [pc, #516]	; (8007624 <HAL_UART_IRQHandler+0x544>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d03b      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a7f      	ldr	r2, [pc, #508]	; (8007628 <HAL_UART_IRQHandler+0x548>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d035      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a7d      	ldr	r2, [pc, #500]	; (800762c <HAL_UART_IRQHandler+0x54c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d02f      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7b      	ldr	r2, [pc, #492]	; (8007630 <HAL_UART_IRQHandler+0x550>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d029      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a79      	ldr	r2, [pc, #484]	; (8007634 <HAL_UART_IRQHandler+0x554>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d023      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a77      	ldr	r2, [pc, #476]	; (8007638 <HAL_UART_IRQHandler+0x558>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d01d      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a75      	ldr	r2, [pc, #468]	; (800763c <HAL_UART_IRQHandler+0x55c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d017      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a73      	ldr	r2, [pc, #460]	; (8007640 <HAL_UART_IRQHandler+0x560>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d011      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a71      	ldr	r2, [pc, #452]	; (8007644 <HAL_UART_IRQHandler+0x564>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00b      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a6f      	ldr	r2, [pc, #444]	; (8007648 <HAL_UART_IRQHandler+0x568>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d005      	beq.n	800749a <HAL_UART_IRQHandler+0x3ba>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a6d      	ldr	r2, [pc, #436]	; (800764c <HAL_UART_IRQHandler+0x56c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d105      	bne.n	80074a6 <HAL_UART_IRQHandler+0x3c6>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	e004      	b.n	80074b0 <HAL_UART_IRQHandler+0x3d0>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 81a4 	beq.w	8007806 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074c8:	429a      	cmp	r2, r3
 80074ca:	f080 819c 	bcs.w	8007806 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	f000 8086 	beq.w	80075f2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007510:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007514:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800751c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1da      	bne.n	80074e6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007554:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007558:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800755c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e1      	bne.n	8007530 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800757c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800757e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007590:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007592:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007596:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800759e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e3      	bne.n	800756c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c2:	f023 0310 	bic.w	r3, r3, #16
 80075c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e4      	bne.n	80075b2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fa fb53 	bl	8001c98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	b29b      	uxth	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f91c 	bl	8007844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800760c:	e0fb      	b.n	8007806 <HAL_UART_IRQHandler+0x726>
 800760e:	bf00      	nop
 8007610:	40020010 	.word	0x40020010
 8007614:	40020028 	.word	0x40020028
 8007618:	40020040 	.word	0x40020040
 800761c:	40020058 	.word	0x40020058
 8007620:	40020070 	.word	0x40020070
 8007624:	40020088 	.word	0x40020088
 8007628:	400200a0 	.word	0x400200a0
 800762c:	400200b8 	.word	0x400200b8
 8007630:	40020410 	.word	0x40020410
 8007634:	40020428 	.word	0x40020428
 8007638:	40020440 	.word	0x40020440
 800763c:	40020458 	.word	0x40020458
 8007640:	40020470 	.word	0x40020470
 8007644:	40020488 	.word	0x40020488
 8007648:	400204a0 	.word	0x400204a0
 800764c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800765c:	b29b      	uxth	r3, r3
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80cc 	beq.w	800780a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80c7 	beq.w	800780a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
 80076a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e4      	bne.n	800767c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3308      	adds	r3, #8
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3a      	ldr	r2, [r7, #32]
 80076c4:	4b54      	ldr	r3, [pc, #336]	; (8007818 <HAL_UART_IRQHandler+0x738>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076d6:	633a      	str	r2, [r7, #48]	; 0x30
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e3      	bne.n	80076b2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	60fb      	str	r3, [r7, #12]
   return(result);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0310 	bic.w	r3, r3, #16
 8007712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	69b9      	ldr	r1, [r7, #24]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	617b      	str	r3, [r7, #20]
   return(result);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e4      	bne.n	80076fe <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f882 	bl	8007844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007740:	e063      	b.n	800780a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00e      	beq.n	800776c <HAL_UART_IRQHandler+0x68c>
 800774e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007762:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f83e 	bl	80087e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800776a:	e051      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007794:	2b00      	cmp	r3, #0
 8007796:	d03a      	beq.n	800780e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
    }
    return;
 80077a0:	e035      	b.n	800780e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <HAL_UART_IRQHandler+0x6e2>
 80077ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 ffe8 	bl	8008790 <UART_EndTransmit_IT>
    return;
 80077c0:	e026      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <HAL_UART_IRQHandler+0x702>
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 f817 	bl	800880e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077e0:	e016      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <HAL_UART_IRQHandler+0x730>
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da0c      	bge.n	8007810 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 ffff 	bl	80087fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077fc:	e008      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
      return;
 80077fe:	bf00      	nop
 8007800:	e006      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
    return;
 8007802:	bf00      	nop
 8007804:	e004      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
      return;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
      return;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_UART_IRQHandler+0x730>
    return;
 800780e:	bf00      	nop
  }
}
 8007810:	37e8      	adds	r7, #232	; 0xe8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	effffffe 	.word	0xeffffffe

0800781c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800785c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007860:	b092      	sub	sp, #72	; 0x48
 8007862:	af00      	add	r7, sp, #0
 8007864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	431a      	orrs	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	431a      	orrs	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	4313      	orrs	r3, r2
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4bbe      	ldr	r3, [pc, #760]	; (8007b84 <UART_SetConfig+0x328>)
 800788c:	4013      	ands	r3, r2
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007894:	430b      	orrs	r3, r1
 8007896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4ab3      	ldr	r2, [pc, #716]	; (8007b88 <UART_SetConfig+0x32c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d004      	beq.n	80078c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c4:	4313      	orrs	r3, r2
 80078c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	4baf      	ldr	r3, [pc, #700]	; (8007b8c <UART_SetConfig+0x330>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d8:	430b      	orrs	r3, r1
 80078da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	f023 010f 	bic.w	r1, r3, #15
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4aa6      	ldr	r2, [pc, #664]	; (8007b90 <UART_SetConfig+0x334>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d177      	bne.n	80079ec <UART_SetConfig+0x190>
 80078fc:	4ba5      	ldr	r3, [pc, #660]	; (8007b94 <UART_SetConfig+0x338>)
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007904:	2b28      	cmp	r3, #40	; 0x28
 8007906:	d86d      	bhi.n	80079e4 <UART_SetConfig+0x188>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0xb4>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	080079b5 	.word	0x080079b5
 8007914:	080079e5 	.word	0x080079e5
 8007918:	080079e5 	.word	0x080079e5
 800791c:	080079e5 	.word	0x080079e5
 8007920:	080079e5 	.word	0x080079e5
 8007924:	080079e5 	.word	0x080079e5
 8007928:	080079e5 	.word	0x080079e5
 800792c:	080079e5 	.word	0x080079e5
 8007930:	080079bd 	.word	0x080079bd
 8007934:	080079e5 	.word	0x080079e5
 8007938:	080079e5 	.word	0x080079e5
 800793c:	080079e5 	.word	0x080079e5
 8007940:	080079e5 	.word	0x080079e5
 8007944:	080079e5 	.word	0x080079e5
 8007948:	080079e5 	.word	0x080079e5
 800794c:	080079e5 	.word	0x080079e5
 8007950:	080079c5 	.word	0x080079c5
 8007954:	080079e5 	.word	0x080079e5
 8007958:	080079e5 	.word	0x080079e5
 800795c:	080079e5 	.word	0x080079e5
 8007960:	080079e5 	.word	0x080079e5
 8007964:	080079e5 	.word	0x080079e5
 8007968:	080079e5 	.word	0x080079e5
 800796c:	080079e5 	.word	0x080079e5
 8007970:	080079cd 	.word	0x080079cd
 8007974:	080079e5 	.word	0x080079e5
 8007978:	080079e5 	.word	0x080079e5
 800797c:	080079e5 	.word	0x080079e5
 8007980:	080079e5 	.word	0x080079e5
 8007984:	080079e5 	.word	0x080079e5
 8007988:	080079e5 	.word	0x080079e5
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079d5 	.word	0x080079d5
 8007994:	080079e5 	.word	0x080079e5
 8007998:	080079e5 	.word	0x080079e5
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079e5 	.word	0x080079e5
 80079ac:	080079e5 	.word	0x080079e5
 80079b0:	080079dd 	.word	0x080079dd
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ba:	e222      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079bc:	2304      	movs	r3, #4
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e21e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079c4:	2308      	movs	r3, #8
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e21a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079cc:	2310      	movs	r3, #16
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e216      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079d4:	2320      	movs	r3, #32
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e212      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e20e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e20a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a69      	ldr	r2, [pc, #420]	; (8007b98 <UART_SetConfig+0x33c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d130      	bne.n	8007a58 <UART_SetConfig+0x1fc>
 80079f6:	4b67      	ldr	r3, [pc, #412]	; (8007b94 <UART_SetConfig+0x338>)
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d826      	bhi.n	8007a50 <UART_SetConfig+0x1f4>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x1ac>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a21 	.word	0x08007a21
 8007a0c:	08007a29 	.word	0x08007a29
 8007a10:	08007a31 	.word	0x08007a31
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	2300      	movs	r3, #0
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a26:	e1ec      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e1e8      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a30:	2308      	movs	r3, #8
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e1e4      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e1e0      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a40:	2320      	movs	r3, #32
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e1dc      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e1d8      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e1d4      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a4f      	ldr	r2, [pc, #316]	; (8007b9c <UART_SetConfig+0x340>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d130      	bne.n	8007ac4 <UART_SetConfig+0x268>
 8007a62:	4b4c      	ldr	r3, [pc, #304]	; (8007b94 <UART_SetConfig+0x338>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b05      	cmp	r3, #5
 8007a6c:	d826      	bhi.n	8007abc <UART_SetConfig+0x260>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0x218>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007a9d 	.word	0x08007a9d
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a92:	e1b6      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e1b2      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e1ae      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e1aa      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007aac:	2320      	movs	r3, #32
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e1a6      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e1a2      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007abc:	2380      	movs	r3, #128	; 0x80
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e19e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a35      	ldr	r2, [pc, #212]	; (8007ba0 <UART_SetConfig+0x344>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d130      	bne.n	8007b30 <UART_SetConfig+0x2d4>
 8007ace:	4b31      	ldr	r3, [pc, #196]	; (8007b94 <UART_SetConfig+0x338>)
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d826      	bhi.n	8007b28 <UART_SetConfig+0x2cc>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0x284>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007afe:	e180      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e17c      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e178      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e174      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e170      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e16c      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e168      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <UART_SetConfig+0x348>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d142      	bne.n	8007bc0 <UART_SetConfig+0x364>
 8007b3a:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <UART_SetConfig+0x338>)
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d838      	bhi.n	8007bb8 <UART_SetConfig+0x35c>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <UART_SetConfig+0x2f0>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b65 	.word	0x08007b65
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	08007b75 	.word	0x08007b75
 8007b58:	08007b7d 	.word	0x08007b7d
 8007b5c:	08007ba9 	.word	0x08007ba9
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b6a:	e14a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b72:	e146      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b74:	2308      	movs	r3, #8
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7a:	e142      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e13e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007b84:	cfff69f3 	.word	0xcfff69f3
 8007b88:	58000c00 	.word	0x58000c00
 8007b8c:	11fff4ff 	.word	0x11fff4ff
 8007b90:	40011000 	.word	0x40011000
 8007b94:	58024400 	.word	0x58024400
 8007b98:	40004400 	.word	0x40004400
 8007b9c:	40004800 	.word	0x40004800
 8007ba0:	40004c00 	.word	0x40004c00
 8007ba4:	40005000 	.word	0x40005000
 8007ba8:	2320      	movs	r3, #32
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bae:	e128      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb6:	e124      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bbe:	e120      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4acb      	ldr	r2, [pc, #812]	; (8007ef4 <UART_SetConfig+0x698>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d176      	bne.n	8007cb8 <UART_SetConfig+0x45c>
 8007bca:	4bcb      	ldr	r3, [pc, #812]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bd2:	2b28      	cmp	r3, #40	; 0x28
 8007bd4:	d86c      	bhi.n	8007cb0 <UART_SetConfig+0x454>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x380>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c81 	.word	0x08007c81
 8007be0:	08007cb1 	.word	0x08007cb1
 8007be4:	08007cb1 	.word	0x08007cb1
 8007be8:	08007cb1 	.word	0x08007cb1
 8007bec:	08007cb1 	.word	0x08007cb1
 8007bf0:	08007cb1 	.word	0x08007cb1
 8007bf4:	08007cb1 	.word	0x08007cb1
 8007bf8:	08007cb1 	.word	0x08007cb1
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007cb1 	.word	0x08007cb1
 8007c04:	08007cb1 	.word	0x08007cb1
 8007c08:	08007cb1 	.word	0x08007cb1
 8007c0c:	08007cb1 	.word	0x08007cb1
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb1 	.word	0x08007cb1
 8007c1c:	08007c91 	.word	0x08007c91
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb1 	.word	0x08007cb1
 8007c2c:	08007cb1 	.word	0x08007cb1
 8007c30:	08007cb1 	.word	0x08007cb1
 8007c34:	08007cb1 	.word	0x08007cb1
 8007c38:	08007cb1 	.word	0x08007cb1
 8007c3c:	08007c99 	.word	0x08007c99
 8007c40:	08007cb1 	.word	0x08007cb1
 8007c44:	08007cb1 	.word	0x08007cb1
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007cb1 	.word	0x08007cb1
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007ca1 	.word	0x08007ca1
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cb1 	.word	0x08007cb1
 8007c68:	08007cb1 	.word	0x08007cb1
 8007c6c:	08007cb1 	.word	0x08007cb1
 8007c70:	08007cb1 	.word	0x08007cb1
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e0bc      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e0b8      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e0b4      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e0b0      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007ca0:	2320      	movs	r3, #32
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e0ac      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cae:	e0a8      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007cb0:	2380      	movs	r3, #128	; 0x80
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb6:	e0a4      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a8f      	ldr	r2, [pc, #572]	; (8007efc <UART_SetConfig+0x6a0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d130      	bne.n	8007d24 <UART_SetConfig+0x4c8>
 8007cc2:	4b8d      	ldr	r3, [pc, #564]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d826      	bhi.n	8007d1c <UART_SetConfig+0x4c0>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <UART_SetConfig+0x478>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ced 	.word	0x08007ced
 8007cd8:	08007cf5 	.word	0x08007cf5
 8007cdc:	08007cfd 	.word	0x08007cfd
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d0d 	.word	0x08007d0d
 8007ce8:	08007d15 	.word	0x08007d15
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e086      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e082      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e07e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d04:	2310      	movs	r3, #16
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e07a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d0c:	2320      	movs	r3, #32
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e076      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e072      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e06e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a75      	ldr	r2, [pc, #468]	; (8007f00 <UART_SetConfig+0x6a4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d130      	bne.n	8007d90 <UART_SetConfig+0x534>
 8007d2e:	4b72      	ldr	r3, [pc, #456]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	d826      	bhi.n	8007d88 <UART_SetConfig+0x52c>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <UART_SetConfig+0x4e4>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d59 	.word	0x08007d59
 8007d44:	08007d61 	.word	0x08007d61
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d79 	.word	0x08007d79
 8007d54:	08007d81 	.word	0x08007d81
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e050      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d60:	2304      	movs	r3, #4
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e04c      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d68:	2308      	movs	r3, #8
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e048      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d70:	2310      	movs	r3, #16
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e044      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d78:	2320      	movs	r3, #32
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e040      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e03c      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e038      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a5b      	ldr	r2, [pc, #364]	; (8007f04 <UART_SetConfig+0x6a8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d130      	bne.n	8007dfc <UART_SetConfig+0x5a0>
 8007d9a:	4b57      	ldr	r3, [pc, #348]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d826      	bhi.n	8007df4 <UART_SetConfig+0x598>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0x550>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dc5 	.word	0x08007dc5
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e01a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e016      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e012      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e00e      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007de4:	2320      	movs	r3, #32
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e00a      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e006      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e002      	b.n	8007e02 <UART_SetConfig+0x5a6>
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a3f      	ldr	r2, [pc, #252]	; (8007f04 <UART_SetConfig+0x6a8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	f040 80f8 	bne.w	8007ffe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	dc46      	bgt.n	8007ea4 <UART_SetConfig+0x648>
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	f2c0 8082 	blt.w	8007f20 <UART_SetConfig+0x6c4>
 8007e1c:	3b02      	subs	r3, #2
 8007e1e:	2b1e      	cmp	r3, #30
 8007e20:	d87e      	bhi.n	8007f20 <UART_SetConfig+0x6c4>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <UART_SetConfig+0x5cc>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007eab 	.word	0x08007eab
 8007e2c:	08007f21 	.word	0x08007f21
 8007e30:	08007eb3 	.word	0x08007eb3
 8007e34:	08007f21 	.word	0x08007f21
 8007e38:	08007f21 	.word	0x08007f21
 8007e3c:	08007f21 	.word	0x08007f21
 8007e40:	08007ec3 	.word	0x08007ec3
 8007e44:	08007f21 	.word	0x08007f21
 8007e48:	08007f21 	.word	0x08007f21
 8007e4c:	08007f21 	.word	0x08007f21
 8007e50:	08007f21 	.word	0x08007f21
 8007e54:	08007f21 	.word	0x08007f21
 8007e58:	08007f21 	.word	0x08007f21
 8007e5c:	08007f21 	.word	0x08007f21
 8007e60:	08007ed3 	.word	0x08007ed3
 8007e64:	08007f21 	.word	0x08007f21
 8007e68:	08007f21 	.word	0x08007f21
 8007e6c:	08007f21 	.word	0x08007f21
 8007e70:	08007f21 	.word	0x08007f21
 8007e74:	08007f21 	.word	0x08007f21
 8007e78:	08007f21 	.word	0x08007f21
 8007e7c:	08007f21 	.word	0x08007f21
 8007e80:	08007f21 	.word	0x08007f21
 8007e84:	08007f21 	.word	0x08007f21
 8007e88:	08007f21 	.word	0x08007f21
 8007e8c:	08007f21 	.word	0x08007f21
 8007e90:	08007f21 	.word	0x08007f21
 8007e94:	08007f21 	.word	0x08007f21
 8007e98:	08007f21 	.word	0x08007f21
 8007e9c:	08007f21 	.word	0x08007f21
 8007ea0:	08007f13 	.word	0x08007f13
 8007ea4:	2b40      	cmp	r3, #64	; 0x40
 8007ea6:	d037      	beq.n	8007f18 <UART_SetConfig+0x6bc>
 8007ea8:	e03a      	b.n	8007f20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eaa:	f7fe fca7 	bl	80067fc <HAL_RCCEx_GetD3PCLK1Freq>
 8007eae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eb0:	e03c      	b.n	8007f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fcb6 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec0:	e034      	b.n	8007f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec2:	f107 0318 	add.w	r3, r7, #24
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fe02 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed0:	e02c      	b.n	8007f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d016      	beq.n	8007f0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ede:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <UART_SetConfig+0x69c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	08db      	lsrs	r3, r3, #3
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <UART_SetConfig+0x6ac>)
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ef0:	e01c      	b.n	8007f2c <UART_SetConfig+0x6d0>
 8007ef2:	bf00      	nop
 8007ef4:	40011400 	.word	0x40011400
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	40007800 	.word	0x40007800
 8007f00:	40007c00 	.word	0x40007c00
 8007f04:	58000c00 	.word	0x58000c00
 8007f08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b9d      	ldr	r3, [pc, #628]	; (8008184 <UART_SetConfig+0x928>)
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f10:	e00c      	b.n	8007f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f12:	4b9d      	ldr	r3, [pc, #628]	; (8008188 <UART_SetConfig+0x92c>)
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f16:	e009      	b.n	8007f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1e:	e005      	b.n	8007f2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 81de 	beq.w	80082f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f38:	4a94      	ldr	r2, [pc, #592]	; (800818c <UART_SetConfig+0x930>)
 8007f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d305      	bcc.n	8007f64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d903      	bls.n	8007f6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f6a:	e1c1      	b.n	80082f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	60fa      	str	r2, [r7, #12]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	4a84      	ldr	r2, [pc, #528]	; (800818c <UART_SetConfig+0x930>)
 8007f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2200      	movs	r2, #0
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f8e:	f7f8 f9a3 	bl	80002d8 <__aeabi_uldivmod>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	f04f 0200 	mov.w	r2, #0
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	020b      	lsls	r3, r1, #8
 8007fa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fa8:	0202      	lsls	r2, r0, #8
 8007faa:	6979      	ldr	r1, [r7, #20]
 8007fac:	6849      	ldr	r1, [r1, #4]
 8007fae:	0849      	lsrs	r1, r1, #1
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	eb12 0804 	adds.w	r8, r2, r4
 8007fba:	eb43 0905 	adc.w	r9, r3, r5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	469a      	mov	sl, r3
 8007fc6:	4693      	mov	fp, r2
 8007fc8:	4652      	mov	r2, sl
 8007fca:	465b      	mov	r3, fp
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 f982 	bl	80002d8 <__aeabi_uldivmod>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4613      	mov	r3, r2
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe2:	d308      	bcc.n	8007ff6 <UART_SetConfig+0x79a>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fea:	d204      	bcs.n	8007ff6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff2:	60da      	str	r2, [r3, #12]
 8007ff4:	e17c      	b.n	80082f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ffc:	e178      	b.n	80082f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008006:	f040 80c5 	bne.w	8008194 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800800a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800800e:	2b20      	cmp	r3, #32
 8008010:	dc48      	bgt.n	80080a4 <UART_SetConfig+0x848>
 8008012:	2b00      	cmp	r3, #0
 8008014:	db7b      	blt.n	800810e <UART_SetConfig+0x8b2>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d879      	bhi.n	800810e <UART_SetConfig+0x8b2>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x7c4>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080b3 	.word	0x080080b3
 8008028:	0800810f 	.word	0x0800810f
 800802c:	0800810f 	.word	0x0800810f
 8008030:	080080bb 	.word	0x080080bb
 8008034:	0800810f 	.word	0x0800810f
 8008038:	0800810f 	.word	0x0800810f
 800803c:	0800810f 	.word	0x0800810f
 8008040:	080080cb 	.word	0x080080cb
 8008044:	0800810f 	.word	0x0800810f
 8008048:	0800810f 	.word	0x0800810f
 800804c:	0800810f 	.word	0x0800810f
 8008050:	0800810f 	.word	0x0800810f
 8008054:	0800810f 	.word	0x0800810f
 8008058:	0800810f 	.word	0x0800810f
 800805c:	0800810f 	.word	0x0800810f
 8008060:	080080db 	.word	0x080080db
 8008064:	0800810f 	.word	0x0800810f
 8008068:	0800810f 	.word	0x0800810f
 800806c:	0800810f 	.word	0x0800810f
 8008070:	0800810f 	.word	0x0800810f
 8008074:	0800810f 	.word	0x0800810f
 8008078:	0800810f 	.word	0x0800810f
 800807c:	0800810f 	.word	0x0800810f
 8008080:	0800810f 	.word	0x0800810f
 8008084:	0800810f 	.word	0x0800810f
 8008088:	0800810f 	.word	0x0800810f
 800808c:	0800810f 	.word	0x0800810f
 8008090:	0800810f 	.word	0x0800810f
 8008094:	0800810f 	.word	0x0800810f
 8008098:	0800810f 	.word	0x0800810f
 800809c:	0800810f 	.word	0x0800810f
 80080a0:	08008101 	.word	0x08008101
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d02e      	beq.n	8008106 <UART_SetConfig+0x8aa>
 80080a8:	e031      	b.n	800810e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080aa:	f7fd fc35 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 80080ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080b0:	e033      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b2:	f7fd fc47 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 80080b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080b8:	e02f      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fbb2 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c8:	e027      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ca:	f107 0318 	add.w	r3, r7, #24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fcfe 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d8:	e01f      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080da:	4b2d      	ldr	r3, [pc, #180]	; (8008190 <UART_SetConfig+0x934>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080e6:	4b2a      	ldr	r3, [pc, #168]	; (8008190 <UART_SetConfig+0x934>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	08db      	lsrs	r3, r3, #3
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	4a24      	ldr	r2, [pc, #144]	; (8008184 <UART_SetConfig+0x928>)
 80080f2:	fa22 f303 	lsr.w	r3, r2, r3
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080f8:	e00f      	b.n	800811a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80080fa:	4b22      	ldr	r3, [pc, #136]	; (8008184 <UART_SetConfig+0x928>)
 80080fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fe:	e00c      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008100:	4b21      	ldr	r3, [pc, #132]	; (8008188 <UART_SetConfig+0x92c>)
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008104:	e009      	b.n	800811a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e005      	b.n	800811a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800811a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80e7 	beq.w	80082f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	4a19      	ldr	r2, [pc, #100]	; (800818c <UART_SetConfig+0x930>)
 8008128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800812c:	461a      	mov	r2, r3
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008130:	fbb3 f3f2 	udiv	r3, r3, r2
 8008134:	005a      	lsls	r2, r3, #1
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	441a      	add	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	2b0f      	cmp	r3, #15
 800814c:	d916      	bls.n	800817c <UART_SetConfig+0x920>
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008154:	d212      	bcs.n	800817c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	b29b      	uxth	r3, r3
 800815a:	f023 030f 	bic.w	r3, r3, #15
 800815e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	b29a      	uxth	r2, r3
 800816c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800816e:	4313      	orrs	r3, r2
 8008170:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e0b9      	b.n	80082f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008182:	e0b5      	b.n	80082f0 <UART_SetConfig+0xa94>
 8008184:	03d09000 	.word	0x03d09000
 8008188:	003d0900 	.word	0x003d0900
 800818c:	080090c4 	.word	0x080090c4
 8008190:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008194:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008198:	2b20      	cmp	r3, #32
 800819a:	dc49      	bgt.n	8008230 <UART_SetConfig+0x9d4>
 800819c:	2b00      	cmp	r3, #0
 800819e:	db7c      	blt.n	800829a <UART_SetConfig+0xa3e>
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	d87a      	bhi.n	800829a <UART_SetConfig+0xa3e>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <UART_SetConfig+0x950>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	08008237 	.word	0x08008237
 80081b0:	0800823f 	.word	0x0800823f
 80081b4:	0800829b 	.word	0x0800829b
 80081b8:	0800829b 	.word	0x0800829b
 80081bc:	08008247 	.word	0x08008247
 80081c0:	0800829b 	.word	0x0800829b
 80081c4:	0800829b 	.word	0x0800829b
 80081c8:	0800829b 	.word	0x0800829b
 80081cc:	08008257 	.word	0x08008257
 80081d0:	0800829b 	.word	0x0800829b
 80081d4:	0800829b 	.word	0x0800829b
 80081d8:	0800829b 	.word	0x0800829b
 80081dc:	0800829b 	.word	0x0800829b
 80081e0:	0800829b 	.word	0x0800829b
 80081e4:	0800829b 	.word	0x0800829b
 80081e8:	0800829b 	.word	0x0800829b
 80081ec:	08008267 	.word	0x08008267
 80081f0:	0800829b 	.word	0x0800829b
 80081f4:	0800829b 	.word	0x0800829b
 80081f8:	0800829b 	.word	0x0800829b
 80081fc:	0800829b 	.word	0x0800829b
 8008200:	0800829b 	.word	0x0800829b
 8008204:	0800829b 	.word	0x0800829b
 8008208:	0800829b 	.word	0x0800829b
 800820c:	0800829b 	.word	0x0800829b
 8008210:	0800829b 	.word	0x0800829b
 8008214:	0800829b 	.word	0x0800829b
 8008218:	0800829b 	.word	0x0800829b
 800821c:	0800829b 	.word	0x0800829b
 8008220:	0800829b 	.word	0x0800829b
 8008224:	0800829b 	.word	0x0800829b
 8008228:	0800829b 	.word	0x0800829b
 800822c:	0800828d 	.word	0x0800828d
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d02e      	beq.n	8008292 <UART_SetConfig+0xa36>
 8008234:	e031      	b.n	800829a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008236:	f7fd fb6f 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 800823a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800823c:	e033      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800823e:	f7fd fb81 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 8008242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008244:	e02f      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe faec 	bl	8006828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008254:	e027      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008256:	f107 0318 	add.w	r3, r7, #24
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fc38 	bl	8006ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008264:	e01f      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008266:	4b2d      	ldr	r3, [pc, #180]	; (800831c <UART_SetConfig+0xac0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <UART_SetConfig+0xac0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	08db      	lsrs	r3, r3, #3
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	4a28      	ldr	r2, [pc, #160]	; (8008320 <UART_SetConfig+0xac4>)
 800827e:	fa22 f303 	lsr.w	r3, r2, r3
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008284:	e00f      	b.n	80082a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008286:	4b26      	ldr	r3, [pc, #152]	; (8008320 <UART_SetConfig+0xac4>)
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828a:	e00c      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800828c:	4b25      	ldr	r3, [pc, #148]	; (8008324 <UART_SetConfig+0xac8>)
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082a4:	bf00      	nop
    }

    if (pclk != 0U)
 80082a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d021      	beq.n	80082f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	4a1d      	ldr	r2, [pc, #116]	; (8008328 <UART_SetConfig+0xacc>)
 80082b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b6:	461a      	mov	r2, r3
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	441a      	add	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	2b0f      	cmp	r3, #15
 80082d4:	d909      	bls.n	80082ea <UART_SetConfig+0xa8e>
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d205      	bcs.n	80082ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e002      	b.n	80082f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2200      	movs	r2, #0
 800830a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800830c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008310:	4618      	mov	r0, r3
 8008312:	3748      	adds	r7, #72	; 0x48
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800831a:	bf00      	nop
 800831c:	58024400 	.word	0x58024400
 8008320:	03d09000 	.word	0x03d09000
 8008324:	003d0900 	.word	0x003d0900
 8008328:	080090c4 	.word	0x080090c4

0800832c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01a      	beq.n	8008442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842a:	d10a      	bne.n	8008442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af02      	add	r7, sp, #8
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008480:	f7f8 ff4e 	bl	8001320 <HAL_GetTick>
 8008484:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b08      	cmp	r3, #8
 8008492:	d10e      	bne.n	80084b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f82f 	bl	8008506 <UART_WaitOnFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e025      	b.n	80084fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d10e      	bne.n	80084de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f819 	bl	8008506 <UART_WaitOnFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e00f      	b.n	80084fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b09c      	sub	sp, #112	; 0x70
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	603b      	str	r3, [r7, #0]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008516:	e0a9      	b.n	800866c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851e:	f000 80a5 	beq.w	800866c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008522:	f7f8 fefd 	bl	8001320 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800852e:	429a      	cmp	r2, r3
 8008530:	d302      	bcc.n	8008538 <UART_WaitOnFlagUntilTimeout+0x32>
 8008532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008534:	2b00      	cmp	r3, #0
 8008536:	d140      	bne.n	80085ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800854c:	667b      	str	r3, [r7, #100]	; 0x64
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008558:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800855c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	663b      	str	r3, [r7, #96]	; 0x60
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800858a:	64ba      	str	r2, [r7, #72]	; 0x48
 800858c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e069      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d051      	beq.n	800866c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085d6:	d149      	bne.n	800866c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
 8008602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	613b      	str	r3, [r7, #16]
   return(result);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	66bb      	str	r3, [r7, #104]	; 0x68
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008634:	623a      	str	r2, [r7, #32]
 8008636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	61bb      	str	r3, [r7, #24]
   return(result);
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e010      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69da      	ldr	r2, [r3, #28]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	4013      	ands	r3, r2
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	429a      	cmp	r2, r3
 800867a:	bf0c      	ite	eq
 800867c:	2301      	moveq	r3, #1
 800867e:	2300      	movne	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	429a      	cmp	r2, r3
 8008688:	f43f af46 	beq.w	8008518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3770      	adds	r7, #112	; 0x70
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b095      	sub	sp, #84	; 0x54
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	643b      	str	r3, [r7, #64]	; 0x40
 80086c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	4b1e      	ldr	r3, [pc, #120]	; (8008760 <UART_EndRxTransfer+0xc8>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e5      	bne.n	80086d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d118      	bne.n	8008740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60bb      	str	r3, [r7, #8]
   return(result);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f023 0310 	bic.w	r3, r3, #16
 8008722:	647b      	str	r3, [r7, #68]	; 0x44
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	613b      	str	r3, [r7, #16]
   return(result);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008754:	bf00      	nop
 8008756:	3754      	adds	r7, #84	; 0x54
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	effffffe 	.word	0xeffffffe

08008764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff f854 	bl	8007830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ac:	61fb      	str	r3, [r7, #28]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	61bb      	str	r3, [r7, #24]
 80087b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6979      	ldr	r1, [r7, #20]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	613b      	str	r3, [r7, #16]
   return(result);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e6      	bne.n	8008798 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff f81f 	bl	800781c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087de:	bf00      	nop
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_UARTEx_DisableFifoMode+0x16>
 8008834:	2302      	movs	r3, #2
 8008836:	e027      	b.n	8008888 <HAL_UARTEx_DisableFifoMode+0x66>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2224      	movs	r2, #36	; 0x24
 8008844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008866:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e02d      	b.n	8008908 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2224      	movs	r2, #36	; 0x24
 80088b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f84f 	bl	800898c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008924:	2302      	movs	r3, #2
 8008926:	e02d      	b.n	8008984 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2224      	movs	r2, #36	; 0x24
 8008934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f811 	bl	800898c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008998:	2b00      	cmp	r3, #0
 800899a:	d108      	bne.n	80089ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089ac:	e031      	b.n	8008a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089ae:	2310      	movs	r3, #16
 80089b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089b2:	2310      	movs	r3, #16
 80089b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	0e5b      	lsrs	r3, r3, #25
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	0f5b      	lsrs	r3, r3, #29
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	7b3a      	ldrb	r2, [r7, #12]
 80089da:	4911      	ldr	r1, [pc, #68]	; (8008a20 <UARTEx_SetNbDataToProcess+0x94>)
 80089dc:	5c8a      	ldrb	r2, [r1, r2]
 80089de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089e2:	7b3a      	ldrb	r2, [r7, #12]
 80089e4:	490f      	ldr	r1, [pc, #60]	; (8008a24 <UARTEx_SetNbDataToProcess+0x98>)
 80089e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	7b7a      	ldrb	r2, [r7, #13]
 80089f8:	4909      	ldr	r1, [pc, #36]	; (8008a20 <UARTEx_SetNbDataToProcess+0x94>)
 80089fa:	5c8a      	ldrb	r2, [r1, r2]
 80089fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a00:	7b7a      	ldrb	r2, [r7, #13]
 8008a02:	4908      	ldr	r1, [pc, #32]	; (8008a24 <UARTEx_SetNbDataToProcess+0x98>)
 8008a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	080090dc 	.word	0x080090dc
 8008a24:	080090e4 	.word	0x080090e4

08008a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a28:	b084      	sub	sp, #16
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	f107 001c 	add.w	r0, r7, #28
 8008a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d120      	bne.n	8008a82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	4b2a      	ldr	r3, [pc, #168]	; (8008afc <USB_CoreInit+0xd4>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d105      	bne.n	8008a76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 faac 	bl	8008fd4 <USB_CoreReset>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e01a      	b.n	8008ab8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 faa0 	bl	8008fd4 <USB_CoreReset>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8008aaa:	e005      	b.n	8008ab8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d116      	bne.n	8008aec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008acc:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <USB_CoreInit+0xd8>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f043 0206 	orr.w	r2, r3, #6
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f043 0220 	orr.w	r2, r3, #32
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008af8:	b004      	add	sp, #16
 8008afa:	4770      	bx	lr
 8008afc:	ffbdffbf 	.word	0xffbdffbf
 8008b00:	03ee0000 	.word	0x03ee0000

08008b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f023 0201 	bic.w	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d115      	bne.n	8008b74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b54:	2001      	movs	r0, #1
 8008b56:	f7f8 fbef 	bl	8001338 <HAL_Delay>
      ms++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa29 	bl	8008fb8 <USB_GetMode>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d01e      	beq.n	8008baa <USB_SetCurrentMode+0x84>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b31      	cmp	r3, #49	; 0x31
 8008b70:	d9f0      	bls.n	8008b54 <USB_SetCurrentMode+0x2e>
 8008b72:	e01a      	b.n	8008baa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d115      	bne.n	8008ba6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b86:	2001      	movs	r0, #1
 8008b88:	f7f8 fbd6 	bl	8001338 <HAL_Delay>
      ms++;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa10 	bl	8008fb8 <USB_GetMode>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <USB_SetCurrentMode+0x84>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b31      	cmp	r3, #49	; 0x31
 8008ba2:	d9f0      	bls.n	8008b86 <USB_SetCurrentMode+0x60>
 8008ba4:	e001      	b.n	8008baa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e005      	b.n	8008bb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b32      	cmp	r3, #50	; 0x32
 8008bae:	d101      	bne.n	8008bb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	e009      	b.n	8008bf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	3340      	adds	r3, #64	; 0x40
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b0e      	cmp	r3, #14
 8008bf8:	d9f2      	bls.n	8008be0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11c      	bne.n	8008c3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0e:	f043 0302 	orr.w	r3, r3, #2
 8008c12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e005      	b.n	8008c46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	4619      	mov	r1, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c60:	461a      	mov	r2, r3
 8008c62:	680b      	ldr	r3, [r1, #0]
 8008c64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d10c      	bne.n	8008c86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c72:	2100      	movs	r1, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f965 	bl	8008f44 <USB_SetDevSpeed>
 8008c7a:	e008      	b.n	8008c8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f960 	bl	8008f44 <USB_SetDevSpeed>
 8008c84:	e003      	b.n	8008c8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c86:	2103      	movs	r1, #3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f95b 	bl	8008f44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c8e:	2110      	movs	r1, #16
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8f3 	bl	8008e7c <USB_FlushTxFifo>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f91f 	bl	8008ee4 <USB_FlushRxFifo>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	2300      	movs	r3, #0
 8008cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cce:	461a      	mov	r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	e043      	b.n	8008d62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf0:	d118      	bne.n	8008d24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	461a      	mov	r2, r3
 8008d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	e013      	b.n	8008d36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	e008      	b.n	8008d36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d30:	461a      	mov	r2, r3
 8008d32:	2300      	movs	r3, #0
 8008d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d42:	461a      	mov	r2, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	461a      	mov	r2, r3
 8008d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d3b7      	bcc.n	8008cda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	e043      	b.n	8008df8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d86:	d118      	bne.n	8008dba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e013      	b.n	8008dcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db0:	461a      	mov	r2, r3
 8008db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e008      	b.n	8008dcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd8:	461a      	mov	r2, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	461a      	mov	r2, r3
 8008dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	3301      	adds	r3, #1
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3b7      	bcc.n	8008d70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d105      	bne.n	8008e34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699b      	ldr	r3, [r3, #24]
 8008e2c:	f043 0210 	orr.w	r2, r3, #16
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699a      	ldr	r2, [r3, #24]
 8008e38:	4b0e      	ldr	r3, [pc, #56]	; (8008e74 <USB_DevInit+0x2b4>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f043 0208 	orr.w	r2, r3, #8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d105      	bne.n	8008e64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <USB_DevInit+0x2b8>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e70:	b004      	add	sp, #16
 8008e72:	4770      	bx	lr
 8008e74:	803c3800 	.word	0x803c3800
 8008e78:	40000004 	.word	0x40000004

08008e7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <USB_FlushTxFifo+0x64>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d901      	bls.n	8008e9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e01b      	b.n	8008ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	daf2      	bge.n	8008e8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	019b      	lsls	r3, r3, #6
 8008eac:	f043 0220 	orr.w	r2, r3, #32
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <USB_FlushTxFifo+0x64>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e006      	b.n	8008ed4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d0f0      	beq.n	8008eb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	00030d40 	.word	0x00030d40

08008ee4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	4a11      	ldr	r2, [pc, #68]	; (8008f40 <USB_FlushRxFifo+0x5c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d901      	bls.n	8008f02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e018      	b.n	8008f34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	daf2      	bge.n	8008ef0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2210      	movs	r2, #16
 8008f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4a08      	ldr	r2, [pc, #32]	; (8008f40 <USB_FlushRxFifo+0x5c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e006      	b.n	8008f34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b10      	cmp	r3, #16
 8008f30:	d0f0      	beq.n	8008f14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	00030d40 	.word	0x00030d40

08008f44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f64:	4313      	orrs	r3, r2
 8008f66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa4:	f043 0302 	orr.w	r3, r3, #2
 8008fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4a13      	ldr	r2, [pc, #76]	; (8009038 <USB_CoreReset+0x64>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d901      	bls.n	8008ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e01b      	b.n	800902a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	daf2      	bge.n	8008fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f043 0201 	orr.w	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3301      	adds	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a09      	ldr	r2, [pc, #36]	; (8009038 <USB_CoreReset+0x64>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d901      	bls.n	800901c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e006      	b.n	800902a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b01      	cmp	r3, #1
 8009026:	d0f0      	beq.n	800900a <USB_CoreReset+0x36>

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	00030d40 	.word	0x00030d40

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4d0d      	ldr	r5, [pc, #52]	; (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	; (8009078 <__libc_init_array+0x3c>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2600      	movs	r6, #0
 8009048:	42a6      	cmp	r6, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4d0b      	ldr	r5, [pc, #44]	; (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	; (8009080 <__libc_init_array+0x44>)
 8009050:	f000 f820 	bl	8009094 <_init>
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2600      	movs	r6, #0
 800905a:	42a6      	cmp	r6, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f855 3b04 	ldr.w	r3, [r5], #4
 8009064:	4798      	blx	r3
 8009066:	3601      	adds	r6, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f855 3b04 	ldr.w	r3, [r5], #4
 800906e:	4798      	blx	r3
 8009070:	3601      	adds	r6, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	080090f4 	.word	0x080090f4
 8009078:	080090f4 	.word	0x080090f4
 800907c:	080090f4 	.word	0x080090f4
 8009080:	080090f8 	.word	0x080090f8

08009084 <memset>:
 8009084:	4402      	add	r2, r0
 8009086:	4603      	mov	r3, r0
 8009088:	4293      	cmp	r3, r2
 800908a:	d100      	bne.n	800908e <memset+0xa>
 800908c:	4770      	bx	lr
 800908e:	f803 1b01 	strb.w	r1, [r3], #1
 8009092:	e7f9      	b.n	8009088 <memset+0x4>

08009094 <_init>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr

080090a0 <_fini>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	bf00      	nop
 80090a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a6:	bc08      	pop	{r3}
 80090a8:	469e      	mov	lr, r3
 80090aa:	4770      	bx	lr
