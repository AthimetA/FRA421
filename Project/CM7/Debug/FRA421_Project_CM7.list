
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c8  0800ddf4  0800ddf4  0001ddf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5bc  0800f5bc  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5bc  0800f5bc  0001f5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5c4  0800f5c4  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5c4  0800f5c4  0001f5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5c8  0800f5c8  0001f5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800f5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800f654  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800f6b4  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  0800f714  00020148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  0800f714  00020ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025e62  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00045fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a60  00000000  00000000  00049bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001988  00000000  00000000  0004b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0004cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022b18  00000000  00000000  0008a9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00193741  00000000  00000000  000ad50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00240c4c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000075e4  00000000  00000000  00240c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dddc 	.word	0x0800dddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800dddc 	.word	0x0800dddc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	3318      	adds	r3, #24
 800077e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80c4 	bne.w	8000926 <Player_Reading_Card+0x1d2>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	3310      	adds	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	3301      	adds	r3, #1
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
 80007cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080e:	3310      	adds	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	3301      	adds	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	3310      	adds	r3, #16
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3301      	adds	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		if (player->turn == first && flag_played == 0) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000858:	2b00      	cmp	r3, #0
 800085a:	d12f      	bne.n	80008bc <Player_Reading_Card+0x168>
 800085c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000860:	2b00      	cmp	r3, #0
 8000862:	d12b      	bne.n	80008bc <Player_Reading_Card+0x168>

			if (ptrYugiohCard_src->standPosition < 6)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	799b      	ldrb	r3, [r3, #6]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d85c      	bhi.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f8e0 	bl	8000a32 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	6978      	ldr	r0, [r7, #20]
 8000876:	f7ff ff05 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	799a      	ldrb	r2, [r3, #6]
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <Player_Reading_Card+0x1dc>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	0899      	lsrs	r1, r3, #2
 8000886:	460b      	mov	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	2200      	movs	r2, #0
 800089a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2201      	movs	r2, #1
 80008a0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80008a2:	69b8      	ldr	r0, [r7, #24]
 80008a4:	f7ff ff3a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80008ba:	e034      	b.n	8000926 <Player_Reading_Card+0x1d2>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12f      	bne.n	8000926 <Player_Reading_Card+0x1d2>
 80008c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d12b      	bne.n	8000926 <Player_Reading_Card+0x1d2>
			if (ptrYugiohCard_src->standPosition >= 6)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d927      	bls.n	8000926 <Player_Reading_Card+0x1d2>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f8ab 	bl	8000a32 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff fed0 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	799a      	ldrb	r2, [r3, #6]
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <Player_Reading_Card+0x1dc>)
 80008ea:	fba3 1302 	umull	r1, r3, r3, r2
 80008ee:	0899      	lsrs	r1, r3, #2
 80008f0:	460b      	mov	r3, r1
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2200      	movs	r2, #0
 8000904:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2201      	movs	r2, #1
 800090a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f7ff ff05 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	2200      	movs	r2, #0
 8000916:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000924:	e7ff      	b.n	8000926 <Player_Reading_Card+0x1d2>
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	aaaaaaab 	.word	0xaaaaaaab

08000934 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000950:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000952:	2300      	movs	r3, #0
 8000954:	76fb      	strb	r3, [r7, #27]
 8000956:	e00b      	b.n	8000970 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	69f9      	ldr	r1, [r7, #28]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe90 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	3310      	adds	r3, #16
 8000968:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800096a:	7efb      	ldrb	r3, [r7, #27]
 800096c:	3301      	adds	r3, #1
 800096e:	76fb      	strb	r3, [r7, #27]
 8000970:	7efb      	ldrb	r3, [r7, #27]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d9f0      	bls.n	8000958 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800099c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800099e:	2300      	movs	r3, #0
 80009a0:	76fb      	strb	r3, [r7, #27]
 80009a2:	e00b      	b.n	80009bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	69f9      	ldr	r1, [r7, #28]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe6a 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	3310      	adds	r3, #16
 80009b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80009b6:	7efb      	ldrb	r3, [r7, #27]
 80009b8:	3301      	adds	r3, #1
 80009ba:	76fb      	strb	r3, [r7, #27]
 80009bc:	7efb      	ldrb	r3, [r7, #27]
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d9f0      	bls.n	80009a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3368      	adds	r3, #104	; 0x68
 80009c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80009c8:	2300      	movs	r3, #0
 80009ca:	76bb      	strb	r3, [r7, #26]
 80009cc:	e00b      	b.n	80009e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	69f9      	ldr	r1, [r7, #28]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe55 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3310      	adds	r3, #16
 80009de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80009e0:	7ebb      	ldrb	r3, [r7, #26]
 80009e2:	3301      	adds	r3, #1
 80009e4:	76bb      	strb	r3, [r7, #26]
 80009e6:	7ebb      	ldrb	r3, [r7, #26]
 80009e8:	2b13      	cmp	r3, #19
 80009ea:	d9f0      	bls.n	80009ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3308      	adds	r3, #8
 80009f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80009f2:	2300      	movs	r3, #0
 80009f4:	767b      	strb	r3, [r7, #25]
 80009f6:	e00b      	b.n	8000a10 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	69f9      	ldr	r1, [r7, #28]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe40 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	3310      	adds	r3, #16
 8000a08:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000a0a:	7e7b      	ldrb	r3, [r7, #25]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	767b      	strb	r3, [r7, #25]
 8000a10:	7e7b      	ldrb	r3, [r7, #25]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d9f0      	bls.n	80009f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000a1c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	69f9      	ldr	r1, [r7, #28]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe2d 	bl	8000684 <YUGIOH_card_copy>
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000a40:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000a48:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000a50:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000a58:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e00c      	b.n	8000a7a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff fe0e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3b10      	subs	r3, #16
 8000a6c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3b10      	subs	r3, #16
 8000a72:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dcef      	bgt.n	8000a60 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000a98:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000aa0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000aa8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000ab0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e02c      	b.n	8000b12 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000ab8:	6939      	ldr	r1, [r7, #16]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff fde2 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	1e50      	subs	r0, r2, #1
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	440b      	add	r3, r1
 8000ade:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3b02      	subs	r3, #2
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	1e50      	subs	r0, r2, #1
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3b10      	subs	r3, #16
 8000b04:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	3b10      	subs	r3, #16
 8000b0a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dccf      	bgt.n	8000ab8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b08a      	sub	sp, #40	; 0x28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3368      	adds	r3, #104	; 0x68
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3368      	adds	r3, #104	; 0x68
 8000b4c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000b54:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000b56:	2314      	movs	r3, #20
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e00c      	b.n	8000b76 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000b5c:	6a39      	ldr	r1, [r7, #32]
 8000b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b60:	f7ff fd90 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b10      	subs	r3, #16
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3b10      	subs	r3, #16
 8000b6e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dcef      	bgt.n	8000b5c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3368      	adds	r3, #104	; 0x68
 8000b84:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000b86:	6a39      	ldr	r1, [r7, #32]
 8000b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b8a:	f7ff fd7b 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b96:	6a38      	ldr	r0, [r7, #32]
 8000b98:	f7ff fd74 	bl	8000684 <YUGIOH_card_copy>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000bc6:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000be4:	2108      	movs	r1, #8
 8000be6:	48ad      	ldr	r0, [pc, #692]	; (8000e9c <GAME_PLAY_Management+0x2f8>)
 8000be8:	f006 ffa0 	bl	8007b2c <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	48aa      	ldr	r0, [pc, #680]	; (8000ea0 <GAME_PLAY_Management+0x2fc>)
 8000bf8:	f006 ff98 	bl	8007b2c <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000c04:	2104      	movs	r1, #4
 8000c06:	48a5      	ldr	r0, [pc, #660]	; (8000e9c <GAME_PLAY_Management+0x2f8>)
 8000c08:	f006 ff90 	bl	8007b2c <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c18:	48a2      	ldr	r0, [pc, #648]	; (8000ea4 <GAME_PLAY_Management+0x300>)
 8000c1a:	f006 ff87 	bl	8007b2c <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000c2c:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3304      	adds	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	f200 82c7 	bhi.w	80011d0 <GAME_PLAY_Management+0x62c>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <GAME_PLAY_Management+0xa4>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c5d 	.word	0x08000c5d
 8000c4c:	08000ed9 	.word	0x08000ed9
 8000c50:	08001037 	.word	0x08001037
 8000c54:	080010b5 	.word	0x080010b5
 8000c58:	0800115d 	.word	0x0800115d
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c5c:	4b92      	ldr	r3, [pc, #584]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	9202      	str	r2, [sp, #8]
 8000c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a8f      	ldr	r2, [pc, #572]	; (8000eac <GAME_PLAY_Management+0x308>)
 8000c70:	2105      	movs	r1, #5
 8000c72:	2005      	movs	r0, #5
 8000c74:	f002 ff97 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c78:	4b8b      	ldr	r3, [pc, #556]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9202      	str	r2, [sp, #8]
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a89      	ldr	r2, [pc, #548]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f002 ff89 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c94:	4b87      	ldr	r3, [pc, #540]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a84      	ldr	r2, [pc, #528]	; (8000eb8 <GAME_PLAY_Management+0x314>)
 8000ca8:	2123      	movs	r1, #35	; 0x23
 8000caa:	2008      	movs	r0, #8
 8000cac:	f002 ff7b 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000cb0:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	9202      	str	r2, [sp, #8]
 8000cb6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7e      	ldr	r2, [pc, #504]	; (8000ebc <GAME_PLAY_Management+0x318>)
 8000cc4:	213c      	movs	r1, #60	; 0x3c
 8000cc6:	2019      	movs	r0, #25
 8000cc8:	f002 ff6d 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ccc:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a74      	ldr	r2, [pc, #464]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000ce0:	214b      	movs	r1, #75	; 0x4b
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f002 ff5f 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	9202      	str	r2, [sp, #8]
 8000cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a71      	ldr	r2, [pc, #452]	; (8000ec0 <GAME_PLAY_Management+0x31c>)
 8000cfc:	215a      	movs	r1, #90	; 0x5a
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f002 ff51 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d04:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	9202      	str	r2, [sp, #8]
 8000d0a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d0e:	9201      	str	r2, [sp, #4]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6b      	ldr	r2, [pc, #428]	; (8000ec4 <GAME_PLAY_Management+0x320>)
 8000d18:	215a      	movs	r1, #90	; 0x5a
 8000d1a:	205d      	movs	r0, #93	; 0x5d
 8000d1c:	f002 ff43 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d20:	4b61      	ldr	r3, [pc, #388]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	9202      	str	r2, [sp, #8]
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	9201      	str	r2, [sp, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a65      	ldr	r2, [pc, #404]	; (8000ec8 <GAME_PLAY_Management+0x324>)
 8000d34:	2169      	movs	r1, #105	; 0x69
 8000d36:	2000      	movs	r0, #0
 8000d38:	f002 ff35 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	9202      	str	r2, [sp, #8]
 8000d42:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <GAME_PLAY_Management+0x328>)
 8000d50:	2169      	movs	r1, #105	; 0x69
 8000d52:	2064      	movs	r0, #100	; 0x64
 8000d54:	f002 ff27 	bl	8003ba6 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	9202      	str	r2, [sp, #8]
 8000d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a59      	ldr	r2, [pc, #356]	; (8000ed0 <GAME_PLAY_Management+0x32c>)
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f002 ff63 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	9202      	str	r2, [sp, #8]
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	9201      	str	r2, [sp, #4]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000d88:	210f      	movs	r1, #15
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f002 ff55 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	9202      	str	r2, [sp, #8]
 8000d96:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	9200      	str	r2, [sp, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <GAME_PLAY_Management+0x314>)
 8000da4:	2123      	movs	r1, #35	; 0x23
 8000da6:	2008      	movs	r0, #8
 8000da8:	f002 ff47 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <GAME_PLAY_Management+0x310>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <GAME_PLAY_Management+0x318>)
 8000dc0:	213c      	movs	r1, #60	; 0x3c
 8000dc2:	2014      	movs	r0, #20
 8000dc4:	f002 ff39 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <GAME_PLAY_Management+0x30c>)
 8000ddc:	214b      	movs	r1, #75	; 0x4b
 8000dde:	2000      	movs	r0, #0
 8000de0:	f002 ff2b 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000de4:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	9202      	str	r2, [sp, #8]
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	9201      	str	r2, [sp, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <GAME_PLAY_Management+0x31c>)
 8000df8:	215a      	movs	r1, #90	; 0x5a
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f002 ff1d 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	9202      	str	r2, [sp, #8]
 8000e06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e0a:	9201      	str	r2, [sp, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <GAME_PLAY_Management+0x320>)
 8000e14:	215a      	movs	r1, #90	; 0x5a
 8000e16:	205d      	movs	r0, #93	; 0x5d
 8000e18:	f002 ff0f 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	9202      	str	r2, [sp, #8]
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a26      	ldr	r2, [pc, #152]	; (8000ec8 <GAME_PLAY_Management+0x324>)
 8000e30:	2169      	movs	r1, #105	; 0x69
 8000e32:	2000      	movs	r0, #0
 8000e34:	f002 ff01 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <GAME_PLAY_Management+0x304>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	9202      	str	r2, [sp, #8]
 8000e3e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e42:	9201      	str	r2, [sp, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <GAME_PLAY_Management+0x328>)
 8000e4c:	2169      	movs	r1, #105	; 0x69
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f002 fef3 	bl	8003c3a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000e54:	2108      	movs	r1, #8
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <GAME_PLAY_Management+0x330>)
 8000e58:	f006 fe68 	bl	8007b2c <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10a      	bne.n	8000e78 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f003 f906 	bl	8004074 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f003 f914 	bl	8004096 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000e76:	e1ab      	b.n	80011d0 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000e98:	e19a      	b.n	80011d0 <GAME_PLAY_Management+0x62c>
 8000e9a:	bf00      	nop
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58020400 	.word	0x58020400
 8000ea4:	58021400 	.word	0x58021400
 8000ea8:	2400000c 	.word	0x2400000c
 8000eac:	0800ddf4 	.word	0x0800ddf4
 8000eb0:	0800de00 	.word	0x0800de00
 8000eb4:	24000014 	.word	0x24000014
 8000eb8:	0800de14 	.word	0x0800de14
 8000ebc:	0800de20 	.word	0x0800de20
 8000ec0:	0800de28 	.word	0x0800de28
 8000ec4:	0800de38 	.word	0x0800de38
 8000ec8:	0800de40 	.word	0x0800de40
 8000ecc:	0800de50 	.word	0x0800de50
 8000ed0:	0800de54 	.word	0x0800de54
 8000ed4:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ed8:	4b96      	ldr	r3, [pc, #600]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	9202      	str	r2, [sp, #8]
 8000ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a93      	ldr	r2, [pc, #588]	; (8001138 <GAME_PLAY_Management+0x594>)
 8000eec:	2105      	movs	r1, #5
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f002 fe59 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	9202      	str	r2, [sp, #8]
 8000efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efe:	9201      	str	r2, [sp, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a8d      	ldr	r2, [pc, #564]	; (800113c <GAME_PLAY_Management+0x598>)
 8000f08:	210f      	movs	r1, #15
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f002 fe4b 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <GAME_PLAY_Management+0x59c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	9202      	str	r2, [sp, #8]
 8000f16:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	9200      	str	r2, [sp, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a88      	ldr	r2, [pc, #544]	; (8001144 <GAME_PLAY_Management+0x5a0>)
 8000f24:	2123      	movs	r1, #35	; 0x23
 8000f26:	2019      	movs	r0, #25
 8000f28:	f002 fe3d 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000f2c:	4b84      	ldr	r3, [pc, #528]	; (8001140 <GAME_PLAY_Management+0x59c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	9202      	str	r2, [sp, #8]
 8000f32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000f36:	9201      	str	r2, [sp, #4]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a82      	ldr	r2, [pc, #520]	; (8001148 <GAME_PLAY_Management+0x5a4>)
 8000f40:	213c      	movs	r1, #60	; 0x3c
 8000f42:	2021      	movs	r0, #33	; 0x21
 8000f44:	f002 fe2f 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f48:	4b7a      	ldr	r3, [pc, #488]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	9202      	str	r2, [sp, #8]
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	9201      	str	r2, [sp, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a78      	ldr	r2, [pc, #480]	; (800113c <GAME_PLAY_Management+0x598>)
 8000f5c:	214b      	movs	r1, #75	; 0x4b
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f002 fe21 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f64:	4b73      	ldr	r3, [pc, #460]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	9202      	str	r2, [sp, #8]
 8000f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a75      	ldr	r2, [pc, #468]	; (800114c <GAME_PLAY_Management+0x5a8>)
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	f002 fe5d 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000f80:	4b6c      	ldr	r3, [pc, #432]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	9202      	str	r2, [sp, #8]
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <GAME_PLAY_Management+0x598>)
 8000f94:	210f      	movs	r1, #15
 8000f96:	2000      	movs	r0, #0
 8000f98:	f002 fe4f 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000f9c:	4b68      	ldr	r3, [pc, #416]	; (8001140 <GAME_PLAY_Management+0x59c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	9202      	str	r2, [sp, #8]
 8000fa2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a65      	ldr	r2, [pc, #404]	; (8001144 <GAME_PLAY_Management+0x5a0>)
 8000fb0:	2123      	movs	r1, #35	; 0x23
 8000fb2:	2019      	movs	r0, #25
 8000fb4:	f002 fe41 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <GAME_PLAY_Management+0x59c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	9202      	str	r2, [sp, #8]
 8000fbe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a61      	ldr	r2, [pc, #388]	; (8001150 <GAME_PLAY_Management+0x5ac>)
 8000fcc:	213c      	movs	r1, #60	; 0x3c
 8000fce:	2025      	movs	r0, #37	; 0x25
 8000fd0:	f002 fe33 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000fd4:	4b57      	ldr	r3, [pc, #348]	; (8001134 <GAME_PLAY_Management+0x590>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	9202      	str	r2, [sp, #8]
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a55      	ldr	r2, [pc, #340]	; (800113c <GAME_PLAY_Management+0x598>)
 8000fe8:	214b      	movs	r1, #75	; 0x4b
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 fe25 	bl	8003c3a <ST7735_WriteString1>
		HAL_Delay(3000);
 8000ff0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ff4:	f003 fc4c 	bl	8004890 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f003 f83b 	bl	8004074 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f003 f849 	bl	8004096 <ST7735_FillScreen1>
		MainGUI();
 8001004:	f001 fdd4 	bl	8002bb0 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800100e:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001016:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001018:	69f8      	ldr	r0, [r7, #28]
 800101a:	f7ff fcb1 	bl	8000980 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800101e:	69b8      	ldr	r0, [r7, #24]
 8001020:	f7ff fcae 	bl	8000980 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8001034:	e0cc      	b.n	80011d0 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12b      	bne.n	8001098 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001040:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <GAME_PLAY_Management+0x59c>)
 8001042:	2200      	movs	r2, #0
 8001044:	9202      	str	r2, [sp, #8]
 8001046:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a40      	ldr	r2, [pc, #256]	; (8001154 <GAME_PLAY_Management+0x5b0>)
 8001054:	215a      	movs	r1, #90	; 0x5a
 8001056:	200f      	movs	r0, #15
 8001058:	f002 fdef 	bl	8003c3a <ST7735_WriteString1>
			HAL_Delay(2000);
 800105c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001060:	f003 fc16 	bl	8004890 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2326      	movs	r3, #38	; 0x26
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	215a      	movs	r1, #90	; 0x5a
 800106e:	2000      	movs	r0, #0
 8001070:	f002 ff02 	bl	8003e78 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <GAME_PLAY_Management+0x5b4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <GAME_PLAY_Management+0x5b4>)
 8001096:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3304      	adds	r3, #4
 800109c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80010a4:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f899 	bl	80011e4 <GAME_PLAY_Phase_Management>
		break;
 80010b2:	e08d      	b.n	80011d0 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d12b      	bne.n	8001116 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <GAME_PLAY_Management+0x59c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	9202      	str	r2, [sp, #8]
 80010c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	9200      	str	r2, [sp, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <GAME_PLAY_Management+0x5b0>)
 80010d2:	215a      	movs	r1, #90	; 0x5a
 80010d4:	200f      	movs	r0, #15
 80010d6:	f002 fd66 	bl	8003ba6 <ST7735_WriteString>
			HAL_Delay(2000);
 80010da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010de:	f003 fbd7 	bl	8004890 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2326      	movs	r3, #38	; 0x26
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	215a      	movs	r1, #90	; 0x5a
 80010ec:	2000      	movs	r0, #0
 80010ee:	f002 fe4f 	bl	8003d90 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <GAME_PLAY_Management+0x5b4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <GAME_PLAY_Management+0x5b4>)
 8001114:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800111c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f85a 	bl	80011e4 <GAME_PLAY_Phase_Management>
		break;
 8001130:	e04e      	b.n	80011d0 <GAME_PLAY_Management+0x62c>
 8001132:	bf00      	nop
 8001134:	2400000c 	.word	0x2400000c
 8001138:	0800ddf4 	.word	0x0800ddf4
 800113c:	0800de00 	.word	0x0800de00
 8001140:	24000014 	.word	0x24000014
 8001144:	0800de60 	.word	0x0800de60
 8001148:	0800de68 	.word	0x0800de68
 800114c:	0800de54 	.word	0x0800de54
 8001150:	0800de70 	.word	0x0800de70
 8001154:	0800de78 	.word	0x0800de78
 8001158:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2326      	movs	r3, #38	; 0x26
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	215a      	movs	r1, #90	; 0x5a
 800116a:	2000      	movs	r0, #0
 800116c:	f002 fef8 	bl	8003f60 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2300      	movs	r3, #0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2326      	movs	r3, #38	; 0x26
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	215a      	movs	r1, #90	; 0x5a
 800117e:	2000      	movs	r0, #0
 8001180:	f002 feee 	bl	8003f60 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001184:	20c8      	movs	r0, #200	; 0xc8
 8001186:	f003 fb83 	bl	8004890 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <GAME_PLAY_Management+0x634>)
 800118c:	2201      	movs	r2, #1
 800118e:	9203      	str	r2, [sp, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	9202      	str	r2, [sp, #8]
 8001194:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <GAME_PLAY_Management+0x638>)
 80011a2:	215a      	movs	r1, #90	; 0x5a
 80011a4:	2014      	movs	r0, #20
 80011a6:	f002 fd92 	bl	8003cce <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <GAME_PLAY_Management+0x634>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	9203      	str	r2, [sp, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	9202      	str	r2, [sp, #8]
 80011b4:	221f      	movs	r2, #31
 80011b6:	9201      	str	r2, [sp, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <GAME_PLAY_Management+0x63c>)
 80011c0:	215a      	movs	r1, #90	; 0x5a
 80011c2:	200f      	movs	r0, #15
 80011c4:	f002 fd83 	bl	8003cce <ST7735_WriteStringNSS>
		HAL_Delay(200);
 80011c8:	20c8      	movs	r0, #200	; 0xc8
 80011ca:	f003 fb61 	bl	8004890 <HAL_Delay>
		break;
 80011ce:	bf00      	nop
	}
}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24000014 	.word	0x24000014
 80011dc:	0800de84 	.word	0x0800de84
 80011e0:	0800de8c 	.word	0x0800de8c

080011e4 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b092      	sub	sp, #72	; 0x48
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 80011f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8001202:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800120c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 8001210:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001214:	2b03      	cmp	r3, #3
 8001216:	f201 829a 	bhi.w	800274e <GAME_PLAY_Phase_Management+0x156a>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <GAME_PLAY_Phase_Management+0x3c>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08002741 	.word	0x08002741
 8001224:	08001231 	.word	0x08001231
 8001228:	080012fd 	.word	0x080012fd
 800122c:	08002011 	.word	0x08002011
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001230:	48ab      	ldr	r0, [pc, #684]	; (80014e0 <GAME_PLAY_Phase_Management+0x2fc>)
 8001232:	f009 fe01 	bl	800ae38 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 fd79 	bl	8002d30 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800123e:	4ba9      	ldr	r3, [pc, #676]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 8001240:	2200      	movs	r2, #0
 8001242:	9202      	str	r2, [sp, #8]
 8001244:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	9200      	str	r2, [sp, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4aa5      	ldr	r2, [pc, #660]	; (80014e8 <GAME_PLAY_Phase_Management+0x304>)
 8001252:	2123      	movs	r1, #35	; 0x23
 8001254:	206e      	movs	r0, #110	; 0x6e
 8001256:	f002 fca6 	bl	8003ba6 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800125a:	4ba2      	ldr	r3, [pc, #648]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 800125c:	2200      	movs	r2, #0
 800125e:	9202      	str	r2, [sp, #8]
 8001260:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	9200      	str	r2, [sp, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a9e      	ldr	r2, [pc, #632]	; (80014e8 <GAME_PLAY_Phase_Management+0x304>)
 800126e:	2123      	movs	r1, #35	; 0x23
 8001270:	206e      	movs	r0, #110	; 0x6e
 8001272:	f002 fce2 	bl	8003c3a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	4b9a      	ldr	r3, [pc, #616]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 800127c:	9203      	str	r2, [sp, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	9202      	str	r2, [sp, #8]
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a97      	ldr	r2, [pc, #604]	; (80014ec <GAME_PLAY_Phase_Management+0x308>)
 8001290:	215a      	movs	r1, #90	; 0x5a
 8001292:	2005      	movs	r0, #5
 8001294:	f002 fd1b 	bl	8003cce <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 800129e:	9203      	str	r2, [sp, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	9202      	str	r2, [sp, #8]
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a8f      	ldr	r2, [pc, #572]	; (80014f0 <GAME_PLAY_Phase_Management+0x30c>)
 80012b2:	215a      	movs	r1, #90	; 0x5a
 80012b4:	2005      	movs	r0, #5
 80012b6:	f002 fd0a 	bl	8003cce <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80012ba:	2101      	movs	r1, #1
 80012bc:	488d      	ldr	r0, [pc, #564]	; (80014f4 <GAME_PLAY_Phase_Management+0x310>)
 80012be:	f006 fc35 	bl	8007b2c <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f041 823d 	bne.w	8002744 <GAME_PLAY_Phase_Management+0x1560>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f002 fed2 	bl	8004074 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f002 fee0 	bl	8004096 <ST7735_FillScreen1>
			MainGUI();
 80012d6:	f001 fc6b 	bl	8002bb0 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 80012f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012f4:	f003 facc 	bl	8004890 <HAL_Delay>
		}
		break;
 80012f8:	f001 ba24 	b.w	8002744 <GAME_PLAY_Phase_Management+0x1560>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 fd16 	bl	8002d30 <LCDvalue>

		switch (PMS)
 8001304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001308:	2b07      	cmp	r3, #7
 800130a:	f201 821d 	bhi.w	8002748 <GAME_PLAY_Phase_Management+0x1564>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <GAME_PLAY_Phase_Management+0x130>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001ff5 	.word	0x08001ff5
 8001318:	08001335 	.word	0x08001335
 800131c:	08001401 	.word	0x08001401
 8001320:	08001501 	.word	0x08001501
 8001324:	080018d1 	.word	0x080018d1
 8001328:	08001c6d 	.word	0x08001c6d
 800132c:	08001b67 	.word	0x08001b67
 8001330:	08001a6d 	.word	0x08001a6d
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d147      	bne.n	80013cc <GAME_PLAY_Phase_Management+0x1e8>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 800133e:	2200      	movs	r2, #0
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <GAME_PLAY_Phase_Management+0x314>)
 8001350:	2123      	movs	r1, #35	; 0x23
 8001352:	206e      	movs	r0, #110	; 0x6e
 8001354:	f002 fc27 	bl	8003ba6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001358:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 800135a:	2200      	movs	r2, #0
 800135c:	9202      	str	r2, [sp, #8]
 800135e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	9200      	str	r2, [sp, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <GAME_PLAY_Phase_Management+0x314>)
 800136c:	2123      	movs	r1, #35	; 0x23
 800136e:	206e      	movs	r0, #110	; 0x6e
 8001370:	f002 fc63 	bl	8003c3a <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001374:	2101      	movs	r1, #1
 8001376:	485f      	ldr	r0, [pc, #380]	; (80014f4 <GAME_PLAY_Phase_Management+0x310>)
 8001378:	f006 fbd8 	bl	8007b2c <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11d      	bne.n	80013be <GAME_PLAY_Phase_Management+0x1da>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001382:	2000      	movs	r0, #0
 8001384:	f002 fe76 	bl	8004074 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001388:	2000      	movs	r0, #0
 800138a:	f002 fe84 	bl	8004096 <ST7735_FillScreen1>
					MainGUI();
 800138e:	f001 fc0f 	bl	8002bb0 <MainGUI>
					state_game->action = 50;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2232      	movs	r2, #50	; 0x32
 8001396:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f001 fbe4 	bl	8002b6e <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 80013b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013ba:	f003 fa69 	bl	8004890 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff f9c6 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 80013c8:	f000 be16 	b.w	8001ff8 <GAME_PLAY_Phase_Management+0xe14>
			else if (state_game->action == 1)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 8611 	bne.w	8001ff8 <GAME_PLAY_Phase_Management+0xe14>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2326      	movs	r3, #38	; 0x26
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	215a      	movs	r1, #90	; 0x5a
 80013e6:	2000      	movs	r0, #0
 80013e8:	f002 fdba 	bl	8003f60 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80013fc:	f000 bdfc 	b.w	8001ff8 <GAME_PLAY_Phase_Management+0xe14>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <GAME_PLAY_Phase_Management+0x300>)
 8001406:	9203      	str	r2, [sp, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	9202      	str	r2, [sp, #8]
 800140c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a38      	ldr	r2, [pc, #224]	; (80014fc <GAME_PLAY_Phase_Management+0x318>)
 800141a:	215a      	movs	r1, #90	; 0x5a
 800141c:	2005      	movs	r0, #5
 800141e:	f002 fc56 	bl	8003cce <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001430:	637b      	str	r3, [r7, #52]	; 0x34

			if (state_game->action == 1)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d129      	bne.n	800148e <GAME_PLAY_Phase_Management+0x2aa>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	789b      	ldrb	r3, [r3, #2]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <GAME_PLAY_Phase_Management+0x26e>
					ptrYugiohCard_src->cardState = 0;
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2200      	movs	r2, #0
 8001446:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2202      	movs	r2, #2
 800144c:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 800144e:	f000 bdd5 	b.w	8001ffc <GAME_PLAY_Phase_Management+0xe18>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 85d0 	bne.w	8001ffc <GAME_PLAY_Phase_Management+0xe18>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 800145c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f001 fb38 	bl	8002ad4 <YUGIOH_Check_Spell_On_board>
 8001464:	4603      	mov	r3, r0
 8001466:	74fb      	strb	r3, [r7, #19]
					if (idxC != 255) {
 8001468:	7cfb      	ldrb	r3, [r7, #19]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d007      	beq.n	800147e <GAME_PLAY_Phase_Management+0x29a>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	3308      	adds	r3, #8
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f93a 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	2201      	movs	r2, #1
 8001482:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
			break;
 800148a:	f000 bdb7 	b.w	8001ffc <GAME_PLAY_Phase_Management+0xe18>
			else if (state_game->action == 2)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	f040 85b2 	bne.w	8001ffc <GAME_PLAY_Phase_Management+0xe18>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2326      	movs	r3, #38	; 0x26
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	215a      	movs	r1, #90	; 0x5a
 80014a8:	2000      	movs	r0, #0
 80014aa:	f002 fd59 	bl	8003f60 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2326      	movs	r3, #38	; 0x26
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	215a      	movs	r1, #90	; 0x5a
 80014be:	2000      	movs	r0, #0
 80014c0:	f002 fd4e 	bl	8003f60 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80014c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c8:	f7ff f8dc 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80014da:	f000 bd8f 	b.w	8001ffc <GAME_PLAY_Phase_Management+0xe18>
 80014de:	bf00      	nop
 80014e0:	240002e8 	.word	0x240002e8
 80014e4:	2400000c 	.word	0x2400000c
 80014e8:	0800de98 	.word	0x0800de98
 80014ec:	0800de9c 	.word	0x0800de9c
 80014f0:	0800deac 	.word	0x0800deac
 80014f4:	58020800 	.word	0x58020800
 80014f8:	0800deb8 	.word	0x0800deb8
 80014fc:	0800debc 	.word	0x0800debc
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 3)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	f040 8577 	bne.w	8002000 <GAME_PLAY_Phase_Management+0xe1c>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d15e      	bne.n	80015d8 <GAME_PLAY_Phase_Management+0x3f4>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4ba0      	ldr	r3, [pc, #640]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001520:	9203      	str	r2, [sp, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	9202      	str	r2, [sp, #8]
 8001526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	9200      	str	r2, [sp, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a9c      	ldr	r2, [pc, #624]	; (80017a4 <GAME_PLAY_Phase_Management+0x5c0>)
 8001534:	215a      	movs	r1, #90	; 0x5a
 8001536:	2005      	movs	r0, #5
 8001538:	f002 fbc9 	bl	8003cce <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	4b97      	ldr	r3, [pc, #604]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001542:	9203      	str	r2, [sp, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	9202      	str	r2, [sp, #8]
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	9200      	str	r2, [sp, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a94      	ldr	r2, [pc, #592]	; (80017a8 <GAME_PLAY_Phase_Management+0x5c4>)
 8001556:	215a      	movs	r1, #90	; 0x5a
 8001558:	2005      	movs	r0, #5
 800155a:	f002 fbb8 	bl	8003cce <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	4b8f      	ldr	r3, [pc, #572]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001564:	9203      	str	r2, [sp, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156e:	9201      	str	r2, [sp, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	9200      	str	r2, [sp, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a8d      	ldr	r2, [pc, #564]	; (80017ac <GAME_PLAY_Phase_Management+0x5c8>)
 8001578:	2169      	movs	r1, #105	; 0x69
 800157a:	2005      	movs	r0, #5
 800157c:	f002 fba7 	bl	8003cce <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	799a      	ldrb	r2, [r3, #6]
 800158a:	4b89      	ldr	r3, [pc, #548]	; (80017b0 <GAME_PLAY_Phase_Management+0x5cc>)
 800158c:	fba3 1302 	umull	r1, r3, r3, r2
 8001590:	0899      	lsrs	r1, r3, #2
 8001592:	460b      	mov	r3, r1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	440b      	add	r3, r1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	753b      	strb	r3, [r7, #20]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	3308      	adds	r3, #8
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ae:	f7ff f869 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff f9be 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f85f 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80015d4:	f000 bd14 	b.w	8002000 <GAME_PLAY_Phase_Management+0xe1c>
				else if (ptrYugiohCard_src->cardType == 2)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	785b      	ldrb	r3, [r3, #1]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	f040 80ef 	bne.w	80017c0 <GAME_PLAY_Phase_Management+0x5dc>
					state_game->count_chain = 1;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2201      	movs	r2, #1
 80015e6:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d17b      	bne.n	80016e8 <GAME_PLAY_Phase_Management+0x504>
						ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 80015f6:	9203      	str	r2, [sp, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	9202      	str	r2, [sp, #8]
 80015fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001600:	9201      	str	r2, [sp, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <GAME_PLAY_Phase_Management+0x5d0>)
 800160a:	215a      	movs	r1, #90	; 0x5a
 800160c:	2005      	movs	r0, #5
 800160e:	f002 fb5e 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001618:	9203      	str	r2, [sp, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001622:	9201      	str	r2, [sp, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	9200      	str	r2, [sp, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <GAME_PLAY_Phase_Management+0x5d4>)
 800162c:	2169      	movs	r1, #105	; 0x69
 800162e:	2005      	movs	r0, #5
 8001630:	f002 fb4d 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 800163a:	9203      	str	r2, [sp, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	9202      	str	r2, [sp, #8]
 8001640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001644:	9201      	str	r2, [sp, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <GAME_PLAY_Phase_Management+0x5d8>)
 800164e:	215a      	movs	r1, #90	; 0x5a
 8001650:	2005      	movs	r0, #5
 8001652:	f002 fb3c 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 800165c:	9203      	str	r2, [sp, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	9202      	str	r2, [sp, #8]
 8001662:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <GAME_PLAY_Phase_Management+0x5d4>)
 8001670:	2169      	movs	r1, #105	; 0x69
 8001672:	2005      	movs	r0, #5
 8001674:	f002 fb2b 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2326      	movs	r3, #38	; 0x26
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	215a      	movs	r1, #90	; 0x5a
 8001688:	2000      	movs	r0, #0
 800168a:	f002 fc69 	bl	8003f60 <ST7735_FillRectangleNSS>
						state_game->action = 4;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2204      	movs	r2, #4
 8001692:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7ff f9f8 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80016a0:	4619      	mov	r1, r3
 80016a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a4:	f7fe ffee 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80016be:	3301      	adds	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff f933 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80016d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ffd4 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2207      	movs	r2, #7
 80016e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80016e4:	f000 bc8c 	b.w	8002000 <GAME_PLAY_Phase_Management+0xe1c>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 80016ee:	9203      	str	r2, [sp, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	9202      	str	r2, [sp, #8]
 80016f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <GAME_PLAY_Phase_Management+0x5c0>)
 8001702:	215a      	movs	r1, #90	; 0x5a
 8001704:	2005      	movs	r0, #5
 8001706:	f002 fae2 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001710:	9203      	str	r2, [sp, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	9202      	str	r2, [sp, #8]
 8001716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <GAME_PLAY_Phase_Management+0x5c4>)
 8001724:	215a      	movs	r1, #90	; 0x5a
 8001726:	2005      	movs	r0, #5
 8001728:	f002 fad1 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <GAME_PLAY_Phase_Management+0x5bc>)
 8001732:	9203      	str	r2, [sp, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	9202      	str	r2, [sp, #8]
 8001738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173c:	9201      	str	r2, [sp, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <GAME_PLAY_Phase_Management+0x5c8>)
 8001746:	2169      	movs	r1, #105	; 0x69
 8001748:	2005      	movs	r0, #5
 800174a:	f002 fac0 	bl	8003cce <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800174e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001750:	799a      	ldrb	r2, [r3, #6]
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <GAME_PLAY_Phase_Management+0x5cc>)
 8001754:	fba3 1302 	umull	r1, r3, r3, r2
 8001758:	0899      	lsrs	r1, r3, #2
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	757b      	strb	r3, [r7, #21]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001766:	7d7b      	ldrb	r3, [r7, #21]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	3308      	adds	r3, #8
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001776:	f7fe ff85 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff f8da 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe ff7b 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800179c:	f000 bc30 	b.w	8002000 <GAME_PLAY_Phase_Management+0xe1c>
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	0800decc 	.word	0x0800decc
 80017a8:	0800dedc 	.word	0x0800dedc
 80017ac:	0800deec 	.word	0x0800deec
 80017b0:	aaaaaaab 	.word	0xaaaaaaab
 80017b4:	0800def4 	.word	0x0800def4
 80017b8:	0800df04 	.word	0x0800df04
 80017bc:	0800df14 	.word	0x0800df14
				else if (ptrYugiohCard_src->cardType == 1)
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 841b 	bne.w	8002000 <GAME_PLAY_Phase_Management+0xe1c>
					state_game->test = 2;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	78db      	ldrb	r3, [r3, #3]
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d86f      	bhi.n	80018ba <GAME_PLAY_Phase_Management+0x6d6>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	4b9e      	ldr	r3, [pc, #632]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 80017e0:	9203      	str	r2, [sp, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	9202      	str	r2, [sp, #8]
 80017e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a9a      	ldr	r2, [pc, #616]	; (8001a5c <GAME_PLAY_Phase_Management+0x878>)
 80017f4:	215a      	movs	r1, #90	; 0x5a
 80017f6:	2005      	movs	r0, #5
 80017f8:	f002 fa69 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	4b95      	ldr	r3, [pc, #596]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 8001802:	9203      	str	r2, [sp, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a92      	ldr	r2, [pc, #584]	; (8001a60 <GAME_PLAY_Phase_Management+0x87c>)
 8001816:	2169      	movs	r1, #105	; 0x69
 8001818:	2005      	movs	r0, #5
 800181a:	f002 fa58 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	4b8d      	ldr	r3, [pc, #564]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 8001824:	9203      	str	r2, [sp, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	9202      	str	r2, [sp, #8]
 800182a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182e:	9201      	str	r2, [sp, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	9200      	str	r2, [sp, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a8b      	ldr	r2, [pc, #556]	; (8001a64 <GAME_PLAY_Phase_Management+0x880>)
 8001838:	215a      	movs	r1, #90	; 0x5a
 800183a:	2005      	movs	r0, #5
 800183c:	f002 fa47 	bl	8003cce <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 8001846:	9203      	str	r2, [sp, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	9202      	str	r2, [sp, #8]
 800184c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001850:	9201      	str	r2, [sp, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a81      	ldr	r2, [pc, #516]	; (8001a60 <GAME_PLAY_Phase_Management+0x87c>)
 800185a:	2169      	movs	r1, #105	; 0x69
 800185c:	2005      	movs	r0, #5
 800185e:	f002 fa36 	bl	8003cce <ST7735_WriteStringNSS>
						state_game->test = 1;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	799a      	ldrb	r2, [r3, #6]
 800186e:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <GAME_PLAY_Phase_Management+0x884>)
 8001870:	fba3 1302 	umull	r1, r3, r3, r2
 8001874:	0899      	lsrs	r1, r3, #2
 8001876:	460b      	mov	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	75bb      	strb	r3, [r7, #22]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001882:	7dbb      	ldrb	r3, [r7, #22]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	3308      	adds	r3, #8
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800188e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001892:	f7fe fef7 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff f84c 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80018a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe feed 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80018b8:	e3a2      	b.n	8002000 <GAME_PLAY_Phase_Management+0xe1c>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff f83a 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2204      	movs	r2, #4
 80018c4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2204      	movs	r2, #4
 80018ca:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80018ce:	e397      	b.n	8002000 <GAME_PLAY_Phase_Management+0xe1c>
		case advance_summon:
			// Current state_game->action = 4



			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 4)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d105      	bne.n	80018ec <GAME_PLAY_Phase_Management+0x708>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7fe ff35 	bl	8000754 <Player_Reading_Card>
 80018ea:	e070      	b.n	80019ce <GAME_PLAY_Phase_Management+0x7ea>
			}
			else if (state_game->action == 5)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d105      	bne.n	8001900 <GAME_PLAY_Phase_Management+0x71c>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7fe ff2b 	bl	8000754 <Player_Reading_Card>
 80018fe:	e066      	b.n	80019ce <GAME_PLAY_Phase_Management+0x7ea>
			}
			else if (state_game->action == 6)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b06      	cmp	r3, #6
 8001906:	d162      	bne.n	80019ce <GAME_PLAY_Phase_Management+0x7ea>
			{
				uint8_t monsterflag = 0 ;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	78db      	ldrb	r3, [r3, #3]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d804      	bhi.n	8001928 <GAME_PLAY_Phase_Management+0x744>
				{
					monsterflag += 1;
 800191e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001922:	3301      	adds	r3, #1
 8001924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}
				ptrYugiohCard_dst++;
 8001928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192a:	3310      	adds	r3, #16
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001930:	78db      	ldrb	r3, [r3, #3]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d804      	bhi.n	8001940 <GAME_PLAY_Phase_Management+0x75c>
				{
					monsterflag += 1;
 8001936:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800193a:	3301      	adds	r3, #1
 800193c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}

				if (monsterflag == 2)
 8001940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001944:	2b02      	cmp	r3, #2
 8001946:	d135      	bne.n	80019b4 <GAME_PLAY_Phase_Management+0x7d0>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	799a      	ldrb	r2, [r3, #6]
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <GAME_PLAY_Phase_Management+0x884>)
 800194e:	fba3 1302 	umull	r1, r3, r3, r2
 8001952:	0899      	lsrs	r1, r3, #2
 8001954:	460b      	mov	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	440b      	add	r3, r1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	75fb      	strb	r3, [r7, #23]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	3308      	adds	r3, #8
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800196c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800196e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001970:	f7fe fe88 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff f8d0 	bl	8000b22 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff f8c9 	bl	8000b22 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe ffcf 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800199c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fe70 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80019b2:	e00c      	b.n	80019ce <GAME_PLAY_Phase_Management+0x7ea>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe ffbd 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f7fe fe5b 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 80019d4:	9203      	str	r2, [sp, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	9202      	str	r2, [sp, #8]
 80019da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	9200      	str	r2, [sp, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <GAME_PLAY_Phase_Management+0x878>)
 80019e8:	215a      	movs	r1, #90	; 0x5a
 80019ea:	2005      	movs	r0, #5
 80019ec:	f002 f96f 	bl	8003cce <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 80019f6:	9203      	str	r2, [sp, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	9200      	str	r2, [sp, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <GAME_PLAY_Phase_Management+0x87c>)
 8001a0a:	2169      	movs	r1, #105	; 0x69
 8001a0c:	2005      	movs	r0, #5
 8001a0e:	f002 f95e 	bl	8003cce <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 8001a18:	9203      	str	r2, [sp, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	9202      	str	r2, [sp, #8]
 8001a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	9200      	str	r2, [sp, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <GAME_PLAY_Phase_Management+0x880>)
 8001a2c:	215a      	movs	r1, #90	; 0x5a
 8001a2e:	2005      	movs	r0, #5
 8001a30:	f002 f94d 	bl	8003cce <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <GAME_PLAY_Phase_Management+0x874>)
 8001a3a:	9203      	str	r2, [sp, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	9202      	str	r2, [sp, #8]
 8001a40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a44:	9201      	str	r2, [sp, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	9200      	str	r2, [sp, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <GAME_PLAY_Phase_Management+0x87c>)
 8001a4e:	2169      	movs	r1, #105	; 0x69
 8001a50:	2005      	movs	r0, #5
 8001a52:	f002 f93c 	bl	8003cce <ST7735_WriteStringNSS>
			break;
 8001a56:	e2da      	b.n	800200e <GAME_PLAY_Phase_Management+0xe2a>
 8001a58:	2400000c 	.word	0x2400000c
 8001a5c:	0800df28 	.word	0x0800df28
 8001a60:	0800df34 	.word	0x0800df34
 8001a64:	0800df40 	.word	0x0800df40
 8001a68:	aaaaaaab 	.word	0xaaaaaaab
		case chaining_main_DEF:

			// Current state_game->action = 4

			//    ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <GAME_PLAY_Phase_Management+0xa80>)
 8001a72:	9203      	str	r2, [sp, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	9202      	str	r2, [sp, #8]
 8001a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a78      	ldr	r2, [pc, #480]	; (8001c68 <GAME_PLAY_Phase_Management+0xa84>)
 8001a86:	215a      	movs	r1, #90	; 0x5a
 8001a88:	2005      	movs	r0, #5
 8001a8a:	f002 f920 	bl	8003cce <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d11b      	bne.n	8001ace <GAME_PLAY_Phase_Management+0x8ea>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	789b      	ldrb	r3, [r3, #2]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d111      	bne.n	8001ac2 <GAME_PLAY_Phase_Management+0x8de>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2326      	movs	r3, #38	; 0x26
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	215a      	movs	r1, #90	; 0x5a
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f002 fa56 	bl	8003f60 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7fe fe44 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8001acc:	e29a      	b.n	8002004 <GAME_PLAY_Phase_Management+0xe20>
			else if ((state_game->action == 5 )){
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	f040 8296 	bne.w	8002004 <GAME_PLAY_Phase_Management+0xe20>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2326      	movs	r3, #38	; 0x26
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	215a      	movs	r1, #90	; 0x5a
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f002 fa39 	bl	8003f60 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8001af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f000 ffbf 	bl	8002a7c <YUGIOH_Check_Trap_On_board>
 8001afe:	4603      	mov	r3, r0
 8001b00:	767b      	strb	r3, [r7, #25]
				if (idx != 255)
 8001b02:	7e7b      	ldrb	r3, [r7, #25]
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d02a      	beq.n	8001b5e <GAME_PLAY_Phase_Management+0x97a>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f7fe ffbe 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8001b0e:	7e7b      	ldrb	r3, [r7, #25]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	3308      	adds	r3, #8
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001b26:	4619      	mov	r1, r3
 8001b28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b2a:	f7fe fdab 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2206      	movs	r2, #6
 8001b52:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	701a      	strb	r2, [r3, #0]
			break;
 8001b5c:	e252      	b.n	8002004 <GAME_PLAY_Phase_Management+0xe20>
					state_game->action = 4;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2204      	movs	r2, #4
 8001b62:	701a      	strb	r2, [r3, #0]
			break;
 8001b64:	e24e      	b.n	8002004 <GAME_PLAY_Phase_Management+0xe20>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <GAME_PLAY_Phase_Management+0xa80>)
 8001b6c:	9203      	str	r2, [sp, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	9202      	str	r2, [sp, #8]
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	9200      	str	r2, [sp, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3a      	ldr	r2, [pc, #232]	; (8001c68 <GAME_PLAY_Phase_Management+0xa84>)
 8001b80:	215a      	movs	r1, #90	; 0x5a
 8001b82:	2005      	movs	r0, #5
 8001b84:	f002 f8a3 	bl	8003cce <ST7735_WriteStringNSS>
			//ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
			if(state_game->action == 4)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d127      	bne.n	8001be0 <GAME_PLAY_Phase_Management+0x9fc>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f7fe fddd 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	789b      	ldrb	r3, [r3, #2]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 8232 	bne.w	8002008 <GAME_PLAY_Phase_Management+0xe24>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2326      	movs	r3, #38	; 0x26
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	215a      	movs	r1, #90	; 0x5a
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f002 f9d3 	bl	8003f60 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2326      	movs	r3, #38	; 0x26
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	215a      	movs	r1, #90	; 0x5a
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f002 f9c8 	bl	8003f60 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8001bde:	e213      	b.n	8002008 <GAME_PLAY_Phase_Management+0xe24>
			else if ((state_game->action == 5 )){
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	f040 820f 	bne.w	8002008 <GAME_PLAY_Phase_Management+0xe24>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 ff41 	bl	8002a7c <YUGIOH_Check_Trap_On_board>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	763b      	strb	r3, [r7, #24]
				if (idx != 255)
 8001bfe:	7e3b      	ldrb	r3, [r7, #24]
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	d02a      	beq.n	8001c5a <GAME_PLAY_Phase_Management+0xa76>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7fe ff40 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001c0a:	7e3b      	ldrb	r3, [r7, #24]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	3308      	adds	r3, #8
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8001c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c18:	2200      	movs	r2, #0
 8001c1a:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001c22:	4619      	mov	r1, r3
 8001c24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c26:	f7fe fd2d 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2204      	movs	r2, #4
 8001c56:	701a      	strb	r2, [r3, #0]
			break;
 8001c58:	e1d6      	b.n	8002008 <GAME_PLAY_Phase_Management+0xe24>
					state_game->action = 4;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	701a      	strb	r2, [r3, #0]
			break;
 8001c60:	e1d2      	b.n	8002008 <GAME_PLAY_Phase_Management+0xe24>
 8001c62:	bf00      	nop
 8001c64:	2400000c 	.word	0x2400000c
 8001c68:	0800df50 	.word	0x0800df50
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	4b82      	ldr	r3, [pc, #520]	; (8001e7c <GAME_PLAY_Phase_Management+0xc98>)
 8001c72:	9203      	str	r2, [sp, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	9202      	str	r2, [sp, #8]
 8001c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7c:	9201      	str	r2, [sp, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <GAME_PLAY_Phase_Management+0xc9c>)
 8001c86:	215a      	movs	r1, #90	; 0x5a
 8001c88:	2005      	movs	r0, #5
 8001c8a:	f002 f820 	bl	8003cce <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <GAME_PLAY_Phase_Management+0xc98>)
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	9202      	str	r2, [sp, #8]
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	9201      	str	r2, [sp, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	9200      	str	r2, [sp, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <GAME_PLAY_Phase_Management+0xca0>)
 8001ca8:	215a      	movs	r1, #90	; 0x5a
 8001caa:	2005      	movs	r0, #5
 8001cac:	f002 f80f 	bl	8003cce <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	623b      	str	r3, [r7, #32]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	61fb      	str	r3, [r7, #28]

			if(state_game->action == 4)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	f040 80be 	bne.w	8001e5a <GAME_PLAY_Phase_Management+0xc76>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	785a      	ldrb	r2, [r3, #1]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f080 8098 	bcs.w	8001e1e <GAME_PLAY_Phase_Management+0xc3a>
				{
					state_game->test = 165;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	22a5      	movs	r2, #165	; 0xa5
 8001cf2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	785b      	ldrb	r3, [r3, #1]
 8001cfa:	3344      	adds	r3, #68	; 0x44
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28

					if (ptrYugiohCard_src->cardSignature == 11)
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b0b      	cmp	r3, #11
 8001d0c:	d111      	bne.n	8001d32 <GAME_PLAY_Phase_Management+0xb4e>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fd38 	bl	8002788 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe feff 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	785b      	ldrb	r3, [r3, #1]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	705a      	strb	r2, [r3, #1]
					state_game->action = 4;
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
					state_game->count_chain++;
				}
			}
			break;
 8001d30:	e16c      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if (ptrYugiohCard_src->cardSignature == 12)
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d114      	bne.n	8001d64 <GAME_PLAY_Phase_Management+0xb80>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 fd3f 	bl	80027c8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fee6 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	705a      	strb	r2, [r3, #1]
			break;
 8001d62:	e153      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b0d      	cmp	r3, #13
 8001d6a:	d107      	bne.n	8001d7c <GAME_PLAY_Phase_Management+0xb98>
						state_game->test = 166;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	22a6      	movs	r2, #166	; 0xa6
 8001d70:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2205      	movs	r2, #5
 8001d78:	701a      	strb	r2, [r3, #0]
			break;
 8001d7a:	e147      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b0e      	cmp	r3, #14
 8001d82:	d003      	beq.n	8001d8c <GAME_PLAY_Phase_Management+0xba8>
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d118      	bne.n	8001dbe <GAME_PLAY_Phase_Management+0xbda>
						state_game->test = 133;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2285      	movs	r2, #133	; 0x85
 8001d90:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 fde6 	bl	8002970 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe feb9 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	705a      	strb	r2, [r3, #1]
			break;
 8001dbc:	e126      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d107      	bne.n	8001dd6 <GAME_PLAY_Phase_Management+0xbf2>
						state_game->test = 124;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	227c      	movs	r2, #124	; 0x7c
 8001dca:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	701a      	strb	r2, [r3, #0]
			break;
 8001dd4:	e11a      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b11      	cmp	r3, #17
 8001ddc:	d103      	bne.n	8001de6 <GAME_PLAY_Phase_Management+0xc02>
						state_game->action = 5;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2205      	movs	r2, #5
 8001de2:	701a      	strb	r2, [r3, #0]
			break;
 8001de4:	e112      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d004      	beq.n	8001df8 <GAME_PLAY_Phase_Management+0xc14>
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b13      	cmp	r3, #19
 8001df4:	f040 810a 	bne.w	800200c <GAME_PLAY_Phase_Management+0xe28>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 8104 	bne.w	800200c <GAME_PLAY_Phase_Management+0xe28>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fe89 	bl	8000b22 <YUGIOH_To_GY>
							state_game->count_chain++;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	785b      	ldrb	r3, [r3, #1]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	705a      	strb	r2, [r3, #1]
			break;
 8001e1c:	e0f6      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2326      	movs	r3, #38	; 0x26
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	215a      	movs	r1, #90	; 0x5a
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f002 f896 	bl	8003f60 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2326      	movs	r3, #38	; 0x26
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	215a      	movs	r1, #90	; 0x5a
 8001e44:	2000      	movs	r0, #0
 8001e46:	f002 f88b 	bl	8003f60 <ST7735_FillRectangleNSS>
					state_game->action = 0;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001e58:	e0d8      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
			else if (state_game->action == 5)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d112      	bne.n	8001e88 <GAME_PLAY_Phase_Management+0xca4>
				state_game->test = 167;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	22a7      	movs	r2, #167	; 0xa7
 8001e66:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7fe fc6e 	bl	8000754 <Player_Reading_Card>
			break;
 8001e78:	e0c8      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
 8001e7a:	bf00      	nop
 8001e7c:	2400000c 	.word	0x2400000c
 8001e80:	0800df6c 	.word	0x0800df6c
 8001e84:	0800df84 	.word	0x0800df84
			else if (state_game->action == 6)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	f040 80bd 	bne.w	800200c <GAME_PLAY_Phase_Management+0xe28>
				state_game->test = 169;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	22a9      	movs	r2, #169	; 0xa9
 8001e96:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	3344      	adds	r3, #68	; 0x44
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_src->cardSignature == 13)
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b0d      	cmp	r3, #13
 8001eb0:	d16b      	bne.n	8001f8a <GAME_PLAY_Phase_Management+0xda6>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d130      	bne.n	8001f1e <GAME_PLAY_Phase_Management+0xd3a>
						state_game->test = 170;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	22aa      	movs	r2, #170	; 0xaa
 8001ec0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001edc:	4619      	mov	r1, r3
 8001ede:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ee0:	f7fe fbd0 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fcab 	bl	8002844 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f000 fc2d 	bl	8002758 <Test_EFF>
						state_game->action = 4;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2204      	movs	r2, #4
 8001f02:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fe09 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	705a      	strb	r2, [r3, #1]
			break;
 8001f1c:	e076      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d171      	bne.n	800200c <GAME_PLAY_Phase_Management+0xe28>
						state_game->test = 171;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	22ab      	movs	r2, #171	; 0xab
 8001f2c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f4c:	f7fe fb9a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fc75 	bl	8002844 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 fbf7 	bl	8002758 <Test_EFF>
						state_game->action = 4;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fdd3 	bl	8000b22 <YUGIOH_To_GY>
						state_game->count_chain++;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	705a      	strb	r2, [r3, #1]
			break;
 8001f88:	e040      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d114      	bne.n	8001fbc <GAME_PLAY_Phase_Management+0xdd8>
					YUGIOH_Ancient_Rules(*ptrUser);
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fcbe 	bl	8002918 <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fdba 	bl	8000b22 <YUGIOH_To_GY>
					state_game->count_chain++;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	705a      	strb	r2, [r3, #1]
			break;
 8001fba:	e027      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b11      	cmp	r3, #17
 8001fc2:	d123      	bne.n	800200c <GAME_PLAY_Phase_Management+0xe28>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fd1e 	bl	8002a10 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd9e 	bl	8000b22 <YUGIOH_To_GY>
					state_game->count_chain++;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	705a      	strb	r2, [r3, #1]
			break;
 8001ff2:	e00b      	b.n	800200c <GAME_PLAY_Phase_Management+0xe28>
			break;
 8001ff4:	bf00      	nop
 8001ff6:	e3a7      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 8001ff8:	bf00      	nop
 8001ffa:	e3a5      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 8001ffc:	bf00      	nop
 8001ffe:	e3a3      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 8002000:	bf00      	nop
 8002002:	e3a1      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 8002004:	bf00      	nop
 8002006:	e39f      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 8002008:	bf00      	nop
 800200a:	e39d      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
			break;
 800200c:	bf00      	nop
		}
		break;
 800200e:	e39b      	b.n	8002748 <GAME_PLAY_Phase_Management+0x1564>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fe8c 	bl	8002d30 <LCDvalue>
			LCDvalue(playerAtk,playerDef);
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fe88 	bl	8002d30 <LCDvalue>
			ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8002020:	4bab      	ldr	r3, [pc, #684]	; (80022d0 <GAME_PLAY_Phase_Management+0x10ec>)
 8002022:	2200      	movs	r2, #0
 8002024:	9202      	str	r2, [sp, #8]
 8002026:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800202a:	9201      	str	r2, [sp, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4aa8      	ldr	r2, [pc, #672]	; (80022d4 <GAME_PLAY_Phase_Management+0x10f0>)
 8002034:	2123      	movs	r1, #35	; 0x23
 8002036:	206e      	movs	r0, #110	; 0x6e
 8002038:	f001 fdb5 	bl	8003ba6 <ST7735_WriteString>
			ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <GAME_PLAY_Phase_Management+0x10ec>)
 800203e:	2200      	movs	r2, #0
 8002040:	9202      	str	r2, [sp, #8]
 8002042:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002046:	9201      	str	r2, [sp, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	9200      	str	r2, [sp, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4aa1      	ldr	r2, [pc, #644]	; (80022d4 <GAME_PLAY_Phase_Management+0x10f0>)
 8002050:	2123      	movs	r1, #35	; 0x23
 8002052:	206e      	movs	r0, #110	; 0x6e
 8002054:	f001 fdf1 	bl	8003c3a <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <GAME_PLAY_Phase_Management+0x10ec>)
 800205e:	9203      	str	r2, [sp, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002068:	9201      	str	r2, [sp, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	9200      	str	r2, [sp, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a99      	ldr	r2, [pc, #612]	; (80022d8 <GAME_PLAY_Phase_Management+0x10f4>)
 8002072:	215a      	movs	r1, #90	; 0x5a
 8002074:	2005      	movs	r0, #5
 8002076:	f001 fe2a 	bl	8003cce <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <GAME_PLAY_Phase_Management+0x10ec>)
 8002080:	9203      	str	r2, [sp, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	9202      	str	r2, [sp, #8]
 8002086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a92      	ldr	r2, [pc, #584]	; (80022dc <GAME_PLAY_Phase_Management+0x10f8>)
 8002094:	215a      	movs	r1, #90	; 0x5a
 8002096:	2005      	movs	r0, #5
 8002098:	f001 fe19 	bl	8003cce <ST7735_WriteStringNSS>
			switch(PBS){
 800209c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	f200 8353 	bhi.w	800274c <GAME_PLAY_Phase_Management+0x1568>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <GAME_PLAY_Phase_Management+0xec8>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	08002729 	.word	0x08002729
 80020b0:	080020c9 	.word	0x080020c9
 80020b4:	080023d1 	.word	0x080023d1
 80020b8:	08002325 	.word	0x08002325
 80020bc:	08002453 	.word	0x08002453
 80020c0:	08002535 	.word	0x08002535
 80020c4:	080026ed 	.word	0x080026ed
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b32      	cmp	r3, #50	; 0x32
 80020ce:	d165      	bne.n	800219c <GAME_PLAY_Phase_Management+0xfb8>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe fb3d 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80020da:	2101      	movs	r1, #1
 80020dc:	4880      	ldr	r0, [pc, #512]	; (80022e0 <GAME_PLAY_Phase_Management+0x10fc>)
 80020de:	f005 fd25 	bl	8007b2c <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 8321 	bne.w	800272c <GAME_PLAY_Phase_Management+0x1548>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80020ea:	487e      	ldr	r0, [pc, #504]	; (80022e4 <GAME_PLAY_Phase_Management+0x1100>)
 80020ec:	f008 ff1c 	bl	800af28 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 80020f0:	497d      	ldr	r1, [pc, #500]	; (80022e8 <GAME_PLAY_Phase_Management+0x1104>)
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2326      	movs	r3, #38	; 0x26
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	215a      	movs	r1, #90	; 0x5a
 800210e:	2000      	movs	r0, #0
 8002110:	f001 ff26 	bl	8003f60 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b74      	ldr	r3, [pc, #464]	; (80022ec <GAME_PLAY_Phase_Management+0x1108>)
 800211a:	9203      	str	r2, [sp, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	9202      	str	r2, [sp, #8]
 8002120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002124:	9201      	str	r2, [sp, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a70      	ldr	r2, [pc, #448]	; (80022f0 <GAME_PLAY_Phase_Management+0x110c>)
 800212e:	215a      	movs	r1, #90	; 0x5a
 8002130:	200f      	movs	r0, #15
 8002132:	f001 fdcc 	bl	8003cce <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8002136:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800213a:	f002 fba9 	bl	8004890 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2326      	movs	r3, #38	; 0x26
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	215a      	movs	r1, #90	; 0x5a
 800214e:	2000      	movs	r0, #0
 8002150:	f001 ff06 	bl	8003f60 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2326      	movs	r3, #38	; 0x26
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	215a      	movs	r1, #90	; 0x5a
 8002164:	2000      	movs	r0, #0
 8002166:	f001 fefb 	bl	8003f60 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fcdb 	bl	8002b2c <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800217c:	2b02      	cmp	r3, #2
 800217e:	d104      	bne.n	800218a <GAME_PLAY_Phase_Management+0xfa6>
							state_game->MainGame_State = second_player;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2203      	movs	r2, #3
 8002184:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8002188:	e003      	b.n	8002192 <GAME_PLAY_Phase_Management+0xfae>
						}
						else{
							state_game->MainGame_State = first_player;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 800219a:	e2c7      	b.n	800272c <GAME_PLAY_Phase_Management+0x1548>
				else if(state_game->action == 51){
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b33      	cmp	r3, #51	; 0x33
 80021a2:	f040 82c3 	bne.w	800272c <GAME_PLAY_Phase_Management+0x1548>
					uint8_t check_def_mon = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	799b      	ldrb	r3, [r3, #6]
 80021b8:	76bb      	strb	r3, [r7, #26]
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3338      	adds	r3, #56	; 0x38
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80021c6:	e010      	b.n	80021ea <GAME_PLAY_Phase_Management+0x1006>
						if(ptrYugiohCard_dst->cardData == 0){
 80021c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <GAME_PLAY_Phase_Management+0xff6>
							check_def_mon++;
 80021d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80021d4:	3301      	adds	r3, #1
 80021d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						ptrYugiohCard_dst++;
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	3310      	adds	r3, #16
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 80021e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80021e4:	3301      	adds	r3, #1
 80021e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80021ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d9ea      	bls.n	80021c8 <GAME_PLAY_Phase_Management+0xfe4>
					uint8_t flag_can_atk = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3338      	adds	r3, #56	; 0x38
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8002206:	2300      	movs	r3, #0
 8002208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800220c:	e018      	b.n	8002240 <GAME_PLAY_Phase_Management+0x105c>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	d10a      	bne.n	8002230 <GAME_PLAY_Phase_Management+0x104c>
							if(ptrYugiohCard_dst->cardState == 1){
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	789b      	ldrb	r3, [r3, #2]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d103      	bne.n	800222a <GAME_PLAY_Phase_Management+0x1046>
								flag_can_atk = 2;
 8002222:	2302      	movs	r3, #2
 8002224:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								break;
 8002228:	e00e      	b.n	8002248 <GAME_PLAY_Phase_Management+0x1064>
								flag_can_atk = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						ptrYugiohCard_dst++;
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	3310      	adds	r3, #16
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8002236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800223a:	3301      	adds	r3, #1
 800223c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002244:	2b02      	cmp	r3, #2
 8002246:	d9e2      	bls.n	800220e <GAME_PLAY_Phase_Management+0x102a>
					if (check_def_mon < 3)
 8002248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800224c:	2b02      	cmp	r3, #2
 800224e:	d80b      	bhi.n	8002268 <GAME_PLAY_Phase_Management+0x1084>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8002250:	7ebb      	ldrb	r3, [r7, #26]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <GAME_PLAY_Phase_Management+0x1084>
							flag_can_atk = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					if (flag_can_atk == 2) {
 8002268:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800226c:	2b02      	cmp	r3, #2
 800226e:	d14d      	bne.n	800230c <GAME_PLAY_Phase_Management+0x1128>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	7a1b      	ldrb	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03d      	beq.n	80022f4 <GAME_PLAY_Phase_Management+0x1110>
 8002278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227a:	789b      	ldrb	r3, [r3, #2]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d139      	bne.n	80022f4 <GAME_PLAY_Phase_Management+0x1110>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	7a1b      	ldrb	r3, [r3, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002292:	4619      	mov	r1, r3
 8002294:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002296:	f7fe f9f5 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
							if(check_def_mon == 3){
 80022a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d103      	bne.n	80022b2 <GAME_PLAY_Phase_Management+0x10ce>
								ptrYugiohCard_dst->targetPosition = 99;
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ac:	2263      	movs	r2, #99	; 0x63
 80022ae:	71da      	strb	r2, [r3, #7]
 80022b0:	e002      	b.n	80022b8 <GAME_PLAY_Phase_Management+0x10d4>
								ptrYugiohCard_dst->targetPosition = targetpos;
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	7eba      	ldrb	r2, [r7, #26]
 80022b6:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 80022b8:	6838      	ldr	r0, [r7, #0]
 80022ba:	f7fe fb3b 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2234      	movs	r2, #52	; 0x34
 80022c2:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80022cc:	e22e      	b.n	800272c <GAME_PLAY_Phase_Management+0x1548>
 80022ce:	bf00      	nop
 80022d0:	2400000c 	.word	0x2400000c
 80022d4:	0800df98 	.word	0x0800df98
 80022d8:	0800df9c 	.word	0x0800df9c
 80022dc:	0800dfac 	.word	0x0800dfac
 80022e0:	58020800 	.word	0x58020800
 80022e4:	240002e8 	.word	0x240002e8
 80022e8:	24000ea0 	.word	0x24000ea0
 80022ec:	24000014 	.word	0x24000014
 80022f0:	0800dfbc 	.word	0x0800dfbc
							state_game->test = 222;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	22de      	movs	r2, #222	; 0xde
 80022f8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2232      	movs	r2, #50	; 0x32
 8002300:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800230a:	e20f      	b.n	800272c <GAME_PLAY_Phase_Management+0x1548>
						state_game->test = 223;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	22df      	movs	r2, #223	; 0xdf
 8002310:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2232      	movs	r2, #50	; 0x32
 8002318:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002322:	e203      	b.n	800272c <GAME_PLAY_Phase_Management+0x1548>
			case counter_DEF:
				//action 52
				if(state_game->action == 52)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b34      	cmp	r3, #52	; 0x34
 800232a:	d110      	bne.n	800234e <GAME_PLAY_Phase_Management+0x116a>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	789b      	ldrb	r3, [r3, #2]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <GAME_PLAY_Phase_Management+0x115e>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2205      	movs	r2, #5
 8002338:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7fe fa04 	bl	8000754 <Player_Reading_Card>
				}




				break;
 800234c:	e1f0      	b.n	8002730 <GAME_PLAY_Phase_Management+0x154c>
				else if ((state_game->action == 53 )){
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b35      	cmp	r3, #53	; 0x35
 8002354:	f040 81ec 	bne.w	8002730 <GAME_PLAY_Phase_Management+0x154c>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f000 fb8a 	bl	8002a7c <YUGIOH_Check_Trap_On_board>
 8002368:	4603      	mov	r3, r0
 800236a:	76fb      	strb	r3, [r7, #27]
					if (idx != 255)
 800236c:	7efb      	ldrb	r3, [r7, #27]
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d02a      	beq.n	80023c8 <GAME_PLAY_Phase_Management+0x11e4>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7fe fb89 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8002378:	7efb      	ldrb	r3, [r7, #27]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	3308      	adds	r3, #8
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4413      	add	r3, r2
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	2200      	movs	r2, #0
 8002388:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002390:	4619      	mov	r1, r3
 8002392:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002394:	f7fe f976 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80023ae:	3301      	adds	r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2206      	movs	r2, #6
 80023bc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 52;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2234      	movs	r2, #52	; 0x34
 80023c4:	701a      	strb	r2, [r3, #0]
				break;
 80023c6:	e1b3      	b.n	8002730 <GAME_PLAY_Phase_Management+0x154c>
						state_game->action = 52;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2234      	movs	r2, #52	; 0x34
 80023cc:	701a      	strb	r2, [r3, #0]
				break;
 80023ce:	e1af      	b.n	8002730 <GAME_PLAY_Phase_Management+0x154c>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b36      	cmp	r3, #54	; 0x36
 80023d6:	d111      	bne.n	80023fc <GAME_PLAY_Phase_Management+0x1218>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7fe f9b9 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	789b      	ldrb	r3, [r3, #2]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 81a4 	bne.w	8002734 <GAME_PLAY_Phase_Management+0x1550>
						//affect
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	705a      	strb	r2, [r3, #1]

					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 54;
				}

				break;
 80023fa:	e19b      	b.n	8002734 <GAME_PLAY_Phase_Management+0x1550>
				else if ((state_game->action == 55 )){
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b37      	cmp	r3, #55	; 0x37
 8002402:	f040 8197 	bne.w	8002734 <GAME_PLAY_Phase_Management+0x1550>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	f7fe fb3b 	bl	8000a8a <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800241a:	4619      	mov	r1, r3
 800241c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241e:	f7fe f931 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2236      	movs	r2, #54	; 0x36
 800244e:	701a      	strb	r2, [r3, #0]
				break;
 8002450:	e170      	b.n	8002734 <GAME_PLAY_Phase_Management+0x1550>
			case chain_effect:
				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4413      	add	r3, r2
 8002460:	3304      	adds	r3, #4
 8002462:	623b      	str	r3, [r7, #32]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	61fb      	str	r3, [r7, #28]

				if(state_game->action == 54)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b36      	cmp	r3, #54	; 0x36
 800247c:	f040 815c 	bne.w	8002738 <GAME_PLAY_Phase_Management+0x1554>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	785a      	ldrb	r2, [r3, #1]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800248a:	429a      	cmp	r2, r3
 800248c:	d24a      	bcs.n	8002524 <GAME_PLAY_Phase_Management+0x1340>
					{
						state_game->test = 165;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	22a5      	movs	r2, #165	; 0xa5
 8002492:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	3344      	adds	r3, #68	; 0x44
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28

						if (ptrYugiohCard_src->cardSignature == 11)
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b0b      	cmp	r3, #11
 80024ac:	d10b      	bne.n	80024c6 <GAME_PLAY_Phase_Management+0x12e2>
						{
							YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f968 	bl	8002788 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
							state_game->count_chain++;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 80024c4:	e138      	b.n	8002738 <GAME_PLAY_Phase_Management+0x1554>
						else if (ptrYugiohCard_src->cardSignature == 12)
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d10e      	bne.n	80024ec <GAME_PLAY_Phase_Management+0x1308>
							YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 f975 	bl	80027c8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
							state_game->count_chain++;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	705a      	strb	r2, [r3, #1]
				break;
 80024ea:	e125      	b.n	8002738 <GAME_PLAY_Phase_Management+0x1554>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b0e      	cmp	r3, #14
 80024f2:	d004      	beq.n	80024fe <GAME_PLAY_Phase_Management+0x131a>
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	f040 811d 	bne.w	8002738 <GAME_PLAY_Phase_Management+0x1554>
							state_game->test = 133;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2285      	movs	r2, #133	; 0x85
 8002502:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f000 fa2d 	bl	8002970 <YUGIOH_Gift_of_the_Mystical_Elf>
							state_game->count_chain++;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	705a      	strb	r2, [r3, #1]
				break;
 8002522:	e109      	b.n	8002738 <GAME_PLAY_Phase_Management+0x1554>
						state_game->action = 50;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2232      	movs	r2, #50	; 0x32
 8002528:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002532:	e101      	b.n	8002738 <GAME_PLAY_Phase_Management+0x1554>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	791b      	ldrb	r3, [r3, #4]
 8002540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(ptrYugiohCard_src->targetPosition == 99)
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	79db      	ldrb	r3, [r3, #7]
 8002548:	2b63      	cmp	r3, #99	; 0x63
 800254a:	d116      	bne.n	800257a <GAME_PLAY_Phase_Management+0x1396>
				{
					playerDef->life_point -= atk*100;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	889a      	ldrh	r2, [r3, #4]
 8002550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002554:	b29b      	uxth	r3, r3
 8002556:	4619      	mov	r1, r3
 8002558:	0249      	lsls	r1, r1, #9
 800255a:	1ac9      	subs	r1, r1, r3
 800255c:	0089      	lsls	r1, r1, #2
 800255e:	4419      	add	r1, r3
 8002560:	00c9      	lsls	r1, r1, #3
 8002562:	1acb      	subs	r3, r1, r3
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b29a      	uxth	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2206      	movs	r2, #6
 8002574:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8002578:	e0e0      	b.n	800273c <GAME_PLAY_Phase_Management+0x1558>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	3308      	adds	r3, #8
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	79db      	ldrb	r3, [r3, #7]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	3308      	adds	r3, #8
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
					state_game->test = 54;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2236      	movs	r2, #54	; 0x36
 8002592:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	789b      	ldrb	r3, [r3, #2]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d140      	bne.n	8002620 <GAME_PLAY_Phase_Management+0x143c>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	795b      	ldrb	r3, [r3, #5]
 80025a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(atk < def){
 80025a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d226      	bcs.n	8002600 <GAME_PLAY_Phase_Management+0x141c>
							playerAtk->life_point -= (def-atk)*100;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	889a      	ldrh	r2, [r3, #4]
 80025b6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80025ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025be:	1acb      	subs	r3, r1, r3
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	0249      	lsls	r1, r1, #9
 80025c6:	1ac9      	subs	r1, r1, r3
 80025c8:	0089      	lsls	r1, r1, #2
 80025ca:	4419      	add	r1, r3
 80025cc:	00c9      	lsls	r1, r1, #3
 80025ce:	1acb      	subs	r3, r1, r3
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	3308      	adds	r3, #8
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fa99 	bl	8000b22 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe f99f 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2206      	movs	r2, #6
 80025fa:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80025fe:	e09d      	b.n	800273c <GAME_PLAY_Phase_Management+0x1558>
						else if(atk > def){
 8002600:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002604:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002608:	429a      	cmp	r2, r3
 800260a:	f240 8097 	bls.w	800273c <GAME_PLAY_Phase_Management+0x1558>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 800260e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f7fe fa86 	bl	8000b22 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2206      	movs	r2, #6
 800261a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800261e:	e08d      	b.n	800273c <GAME_PLAY_Phase_Management+0x1558>
					else if(ptrYugiohCard_dst->cardState == 1){
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	789b      	ldrb	r3, [r3, #2]
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 8089 	bne.w	800273c <GAME_PLAY_Phase_Management+0x1558>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 800262a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						state_game->test = 60;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	223c      	movs	r2, #60	; 0x3c
 8002636:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 800263a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800263e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002642:	429a      	cmp	r2, r3
 8002644:	d22a      	bcs.n	800269c <GAME_PLAY_Phase_Management+0x14b8>
							state_game->test = 61;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	223d      	movs	r2, #61	; 0x3d
 800264a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	889a      	ldrh	r2, [r3, #4]
 8002652:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8002656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800265a:	1acb      	subs	r3, r1, r3
 800265c:	b29b      	uxth	r3, r3
 800265e:	4619      	mov	r1, r3
 8002660:	0249      	lsls	r1, r1, #9
 8002662:	1ac9      	subs	r1, r1, r3
 8002664:	0089      	lsls	r1, r1, #2
 8002666:	4419      	add	r1, r3
 8002668:	00c9      	lsls	r1, r1, #3
 800266a:	1acb      	subs	r3, r1, r3
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	b29b      	uxth	r3, r3
 8002670:	4413      	add	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	799b      	ldrb	r3, [r3, #6]
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3308      	adds	r3, #8
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fa4b 	bl	8000b22 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fe f951 	bl	8000934 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2206      	movs	r2, #6
 8002696:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800269a:	e04f      	b.n	800273c <GAME_PLAY_Phase_Management+0x1558>
						else if(atk > atk2){
 800269c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80026a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d949      	bls.n	800273c <GAME_PLAY_Phase_Management+0x1558>
							state_game->test = 70;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2246      	movs	r2, #70	; 0x46
 80026ac:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	889a      	ldrh	r2, [r3, #4]
 80026b4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80026b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026bc:	1acb      	subs	r3, r1, r3
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	0249      	lsls	r1, r1, #9
 80026c4:	1ac9      	subs	r1, r1, r3
 80026c6:	0089      	lsls	r1, r1, #2
 80026c8:	4419      	add	r1, r3
 80026ca:	00c9      	lsls	r1, r1, #3
 80026cc:	1acb      	subs	r3, r1, r3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80026da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	f7fe fa20 	bl	8000b22 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2206      	movs	r2, #6
 80026e6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80026ea:	e027      	b.n	800273c <GAME_PLAY_Phase_Management+0x1558>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
				YUGIOH_card_clear(ptrYugiohCard_src);
 80026f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f6:	f7fd fffc 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	889b      	ldrh	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <GAME_PLAY_Phase_Management+0x152a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	889b      	ldrh	r3, [r3, #4]
 8002706:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800270a:	4293      	cmp	r3, r2
 800270c:	d904      	bls.n	8002718 <GAME_PLAY_Phase_Management+0x1534>
					state_game->MainGame_State = Game_Ended;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2204      	movs	r2, #4
 8002712:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8002716:	e012      	b.n	800273e <GAME_PLAY_Phase_Management+0x155a>
					state_game->action = 50;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2232      	movs	r2, #50	; 0x32
 800271c:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002726:	e00a      	b.n	800273e <GAME_PLAY_Phase_Management+0x155a>
				break;
 8002728:	bf00      	nop
 800272a:	e00f      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
				break;
 800272c:	bf00      	nop
 800272e:	e00d      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
				break;
 8002730:	bf00      	nop
 8002732:	e00b      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
				break;
 8002734:	bf00      	nop
 8002736:	e009      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
				break;
 8002738:	bf00      	nop
 800273a:	e007      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
				break;
 800273c:	bf00      	nop
			}
			break;
 800273e:	e005      	b.n	800274c <GAME_PLAY_Phase_Management+0x1568>
		break;
 8002740:	bf00      	nop
 8002742:	e004      	b.n	800274e <GAME_PLAY_Phase_Management+0x156a>
		break;
 8002744:	bf00      	nop
 8002746:	e002      	b.n	800274e <GAME_PLAY_Phase_Management+0x156a>
		break;
 8002748:	bf00      	nop
 800274a:	e000      	b.n	800274e <GAME_PLAY_Phase_Management+0x156a>
			break;
 800274c:	bf00      	nop

	}
}
 800274e:	bf00      	nop
 8002750:	3738      	adds	r7, #56	; 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop

08002758 <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	889b      	ldrh	r3, [r3, #4]
 8002766:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	889b      	ldrh	r3, [r3, #4]
 8002774:	3b64      	subs	r3, #100	; 0x64
 8002776:	b29a      	uxth	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	809a      	strh	r2, [r3, #4]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3338      	adds	r3, #56	; 0x38
 8002794:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002796:	2300      	movs	r3, #0
 8002798:	72fb      	strb	r3, [r7, #11]
 800279a:	e00d      	b.n	80027b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f9bb 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3310      	adds	r3, #16
 80027b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	3301      	adds	r3, #1
 80027b6:	72fb      	strb	r3, [r7, #11]
 80027b8:	7afb      	ldrb	r3, [r7, #11]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d9ee      	bls.n	800279c <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3308      	adds	r3, #8
 80027d6:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3338      	adds	r3, #56	; 0x38
 80027dc:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3308      	adds	r3, #8
 80027e2:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3338      	adds	r3, #56	; 0x38
 80027e8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e00d      	b.n	800280c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 80027f8:	6979      	ldr	r1, [r7, #20]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe f991 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3310      	adds	r3, #16
 8002804:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	3301      	adds	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d9ee      	bls.n	80027f0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002812:	2300      	movs	r3, #0
 8002814:	73bb      	strb	r3, [r7, #14]
 8002816:	e00d      	b.n	8002834 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8002820:	6939      	ldr	r1, [r7, #16]
 8002822:	6838      	ldr	r0, [r7, #0]
 8002824:	f7fe f97d 	bl	8000b22 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	3310      	adds	r3, #16
 800282c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	3301      	adds	r3, #1
 8002832:	73bb      	strb	r3, [r7, #14]
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d9ee      	bls.n	8002818 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800285a:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3368      	adds	r3, #104	; 0x68
 8002860:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3368      	adds	r3, #104	; 0x68
 8002866:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8002868:	2300      	movs	r3, #0
 800286a:	74fb      	strb	r3, [r7, #19]
 800286c:	e010      	b.n	8002890 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	429a      	cmp	r2, r3
 8002878:	d104      	bne.n	8002884 <YUGIOH_Reborn+0x40>
			flag = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	77bb      	strb	r3, [r7, #30]
			break;
 8002882:	e008      	b.n	8002896 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3310      	adds	r3, #16
 8002888:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	3301      	adds	r3, #1
 800288e:	74fb      	strb	r3, [r7, #19]
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b13      	cmp	r3, #19
 8002894:	d9eb      	bls.n	800286e <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3338      	adds	r3, #56	; 0x38
 800289a:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 800289c:	7ffb      	ldrb	r3, [r7, #31]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d134      	bne.n	800290c <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	799a      	ldrb	r2, [r3, #6]
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <YUGIOH_Reborn+0xd0>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	0899      	lsrs	r1, r3, #2
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	3308      	adds	r3, #8
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	69b8      	ldr	r0, [r7, #24]
 80028c8:	f7fd fedc 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80028cc:	7fbb      	ldrb	r3, [r7, #30]
 80028ce:	3301      	adds	r3, #1
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	3368      	adds	r3, #104	; 0x68
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80028da:	7fbb      	ldrb	r3, [r7, #30]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3368      	adds	r3, #104	; 0x68
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80028e6:	7fbb      	ldrb	r3, [r7, #30]
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e00c      	b.n	8002906 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	69b8      	ldr	r0, [r7, #24]
 80028f0:	f7fd fec8 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	3310      	adds	r3, #16
 80028f8:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3310      	adds	r3, #16
 80028fe:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b13      	cmp	r3, #19
 800290a:	ddef      	ble.n	80028ec <YUGIOH_Reborn+0xa8>
		}


	}
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	aaaaaaab 	.word	0xaaaaaaab

08002918 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002926:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800292e:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	799a      	ldrb	r2, [r3, #6]
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <YUGIOH_Ancient_Rules+0x54>)
 8002936:	fba3 1302 	umull	r1, r3, r3, r2
 800293a:	0899      	lsrs	r1, r3, #2
 800293c:	460b      	mov	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3308      	adds	r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3308      	adds	r3, #8
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f7fd fe91 	bl	8000684 <YUGIOH_card_copy>

}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab

08002970 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3308      	adds	r3, #8
 800297e:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3338      	adds	r3, #56	; 0x38
 8002984:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3308      	adds	r3, #8
 800298a:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3338      	adds	r3, #56	; 0x38
 8002990:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002996:	2300      	movs	r3, #0
 8002998:	73bb      	strb	r3, [r7, #14]
 800299a:	e00c      	b.n	80029b6 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d102      	bne.n	80029aa <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	3301      	adds	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	3310      	adds	r3, #16
 80029ae:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3301      	adds	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d9ef      	bls.n	800299c <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80029bc:	2300      	movs	r3, #0
 80029be:	737b      	strb	r3, [r7, #13]
 80029c0:	e00c      	b.n	80029dc <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3301      	adds	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3310      	adds	r3, #16
 80029d4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80029d6:	7b7b      	ldrb	r3, [r7, #13]
 80029d8:	3301      	adds	r3, #1
 80029da:	737b      	strb	r3, [r7, #13]
 80029dc:	7b7b      	ldrb	r3, [r7, #13]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d9ef      	bls.n	80029c2 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	889a      	ldrh	r2, [r3, #4]
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	0089      	lsls	r1, r1, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	4619      	mov	r1, r3
 80029f2:	0109      	lsls	r1, r1, #4
 80029f4:	1acb      	subs	r3, r1, r3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	809a      	strh	r2, [r3, #4]

}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a20:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a28:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	799a      	ldrb	r2, [r3, #6]
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <YUGIOH_Stop_Defense+0x68>)
 8002a30:	fba3 1302 	umull	r1, r3, r3, r2
 8002a34:	0899      	lsrs	r1, r3, #2
 8002a36:	460b      	mov	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	440b      	add	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	3308      	adds	r3, #8
 8002a46:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	789b      	ldrb	r3, [r3, #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <YUGIOH_Stop_Defense+0x5a>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	709a      	strb	r2, [r3, #2]
	}

}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	aaaaaaab 	.word	0xaaaaaaab

08002a7c <YUGIOH_Check_Trap_On_board>:
//
//}


uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3308      	adds	r3, #8
 8002a8a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	e016      	b.n	8002ac0 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10a      	bne.n	8002ab4 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	7a5b      	ldrb	r3, [r3, #9]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <YUGIOH_Check_Trap_On_board+0x38>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d102      	bne.n	8002ab4 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e009      	b.n	8002ac8 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	dde5      	ble.n	8002a92 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8002ac6:	23ff      	movs	r3, #255	; 0xff
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	e016      	b.n	8002b18 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10a      	bne.n	8002b0c <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7a5b      	ldrb	r3, [r3, #9]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <YUGIOH_Check_Spell_On_board+0x38>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d102      	bne.n	8002b0c <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e009      	b.n	8002b20 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3310      	adds	r3, #16
 8002b10:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	dde5      	ble.n	8002aea <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8002b1e:	23ff      	movs	r3, #255	; 0xff
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3308      	adds	r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	e00c      	b.n	8002b5a <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3310      	adds	r3, #16
 8002b52:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	ddef      	ble.n	8002b40 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3338      	adds	r3, #56	; 0x38
 8002b7a:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	e00c      	b.n	8002b9c <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3310      	adds	r3, #16
 8002b94:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	ddef      	ble.n	8002b82 <YUGIOH_Monster_Activated+0x14>
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <MainGUI>:


void MainGUI(){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8002bb6:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <MainGUI+0x15c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002bc0:	9201      	str	r2, [sp, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	; (8002d10 <MainGUI+0x160>)
 8002bca:	2105      	movs	r1, #5
 8002bcc:	2005      	movs	r0, #5
 8002bce:	f001 f834 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <MainGUI+0x15c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	9202      	str	r2, [sp, #8]
 8002bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bdc:	9201      	str	r2, [sp, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <MainGUI+0x164>)
 8002be6:	2114      	movs	r1, #20
 8002be8:	2005      	movs	r0, #5
 8002bea:	f001 f826 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <MainGUI+0x15c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	9202      	str	r2, [sp, #8]
 8002bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	9200      	str	r2, [sp, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a45      	ldr	r2, [pc, #276]	; (8002d18 <MainGUI+0x168>)
 8002c02:	2123      	movs	r1, #35	; 0x23
 8002c04:	2005      	movs	r0, #5
 8002c06:	f001 f818 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c0a:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <MainGUI+0x15c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	9202      	str	r2, [sp, #8]
 8002c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c14:	9201      	str	r2, [sp, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	9200      	str	r2, [sp, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <MainGUI+0x16c>)
 8002c1e:	2123      	movs	r1, #35	; 0x23
 8002c20:	203c      	movs	r0, #60	; 0x3c
 8002c22:	f000 ffc0 	bl	8003ba6 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <MainGUI+0x15c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	9202      	str	r2, [sp, #8]
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a39      	ldr	r2, [pc, #228]	; (8002d20 <MainGUI+0x170>)
 8002c3a:	2132      	movs	r1, #50	; 0x32
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 fffc 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c42:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <MainGUI+0x15c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	9202      	str	r2, [sp, #8]
 8002c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c4c:	9201      	str	r2, [sp, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	9200      	str	r2, [sp, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <MainGUI+0x174>)
 8002c56:	213c      	movs	r1, #60	; 0x3c
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f000 ffee 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <MainGUI+0x15c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	9202      	str	r2, [sp, #8]
 8002c64:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002c68:	9201      	str	r2, [sp, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <MainGUI+0x178>)
 8002c72:	2105      	movs	r1, #5
 8002c74:	2005      	movs	r0, #5
 8002c76:	f000 ff96 	bl	8003ba6 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <MainGUI+0x15c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	9202      	str	r2, [sp, #8]
 8002c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <MainGUI+0x164>)
 8002c8e:	2114      	movs	r1, #20
 8002c90:	2005      	movs	r0, #5
 8002c92:	f000 ff88 	bl	8003ba6 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <MainGUI+0x15c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	9202      	str	r2, [sp, #8]
 8002c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca0:	9201      	str	r2, [sp, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	9200      	str	r2, [sp, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <MainGUI+0x17c>)
 8002caa:	2123      	movs	r1, #35	; 0x23
 8002cac:	2005      	movs	r0, #5
 8002cae:	f000 ff7a 	bl	8003ba6 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <MainGUI+0x15c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	9202      	str	r2, [sp, #8]
 8002cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <MainGUI+0x16c>)
 8002cc6:	2123      	movs	r1, #35	; 0x23
 8002cc8:	203c      	movs	r0, #60	; 0x3c
 8002cca:	f000 ffb6 	bl	8003c3a <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <MainGUI+0x15c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	9202      	str	r2, [sp, #8]
 8002cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <MainGUI+0x170>)
 8002ce2:	2132      	movs	r1, #50	; 0x32
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f000 ff5e 	bl	8003ba6 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <MainGUI+0x15c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	9202      	str	r2, [sp, #8]
 8002cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	9200      	str	r2, [sp, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <MainGUI+0x174>)
 8002cfe:	213c      	movs	r1, #60	; 0x3c
 8002d00:	2000      	movs	r0, #0
 8002d02:	f000 ff50 	bl	8003ba6 <ST7735_WriteString>
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	2400000c 	.word	0x2400000c
 8002d10:	0800de54 	.word	0x0800de54
 8002d14:	0800dfc8 	.word	0x0800dfc8
 8002d18:	0800dfd8 	.word	0x0800dfd8
 8002d1c:	0800dfe0 	.word	0x0800dfe0
 8002d20:	0800dfe8 	.word	0x0800dfe8
 8002d24:	0800de00 	.word	0x0800de00
 8002d28:	0800ddf4 	.word	0x0800ddf4
 8002d2c:	0800dffc 	.word	0x0800dffc

08002d30 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af04      	add	r7, sp, #16
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <LCDvalue+0x1d8>)
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <LCDvalue+0x1dc>)
 8002d44:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8002d46:	4b72      	ldr	r3, [pc, #456]	; (8002f10 <LCDvalue+0x1e0>)
 8002d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d4c:	4a71      	ldr	r2, [pc, #452]	; (8002f14 <LCDvalue+0x1e4>)
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	f7fd fb15 	bl	8000380 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	817b      	strh	r3, [r7, #10]
	time -= a;
 8002d5e:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <LCDvalue+0x1dc>)
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <LCDvalue+0x1dc>)
 8002d6a:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8002d6c:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <LCDvalue+0x1dc>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4969      	ldr	r1, [pc, #420]	; (8002f18 <LCDvalue+0x1e8>)
 8002d74:	4869      	ldr	r0, [pc, #420]	; (8002f1c <LCDvalue+0x1ec>)
 8002d76:	f00a fcb3 	bl	800d6e0 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e012      	b.n	8002da6 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8002d80:	4a66      	ldr	r2, [pc, #408]	; (8002f1c <LCDvalue+0x1ec>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <LCDvalue+0x70>
			t_c[i] = 32;
 8002d8c:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <LCDvalue+0x1ec>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	2220      	movs	r2, #32
 8002d94:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <LCDvalue+0x1ec>)
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3301      	adds	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	dde9      	ble.n	8002d80 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8002dac:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <LCDvalue+0x1dc>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <LCDvalue+0x90>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002db4:	485a      	ldr	r0, [pc, #360]	; (8002f20 <LCDvalue+0x1f0>)
 8002db6:	f008 f8b7 	bl	800af28 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8002dba:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <LCDvalue+0x1dc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	801a      	strh	r2, [r3, #0]
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	889b      	ldrh	r3, [r3, #4]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4954      	ldr	r1, [pc, #336]	; (8002f18 <LCDvalue+0x1e8>)
 8002dc8:	4856      	ldr	r0, [pc, #344]	; (8002f24 <LCDvalue+0x1f4>)
 8002dca:	f00a fc89 	bl	800d6e0 <siprintf>
	if(C_LP_ATK[3] == 0){
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <LCDvalue+0x1f4>)
 8002dd0:	78db      	ldrb	r3, [r3, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <LCDvalue+0xc4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <LCDvalue+0x1f4>)
 8002dd8:	789a      	ldrb	r2, [r3, #2]
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <LCDvalue+0x1f4>)
 8002ddc:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <LCDvalue+0x1f4>)
 8002de0:	785a      	ldrb	r2, [r3, #1]
 8002de2:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <LCDvalue+0x1f4>)
 8002de4:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8002de6:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <LCDvalue+0x1f4>)
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <LCDvalue+0x1f4>)
 8002dec:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8002dee:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <LCDvalue+0x1f4>)
 8002df0:	2220      	movs	r2, #32
 8002df2:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <LCDvalue+0x1f8>)
 8002dfa:	9203      	str	r2, [sp, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e04:	9201      	str	r2, [sp, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	9200      	str	r2, [sp, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <LCDvalue+0x1f4>)
 8002e0e:	2114      	movs	r1, #20
 8002e10:	205a      	movs	r0, #90	; 0x5a
 8002e12:	f000 ff5c 	bl	8003cce <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	4b43      	ldr	r3, [pc, #268]	; (8002f28 <LCDvalue+0x1f8>)
 8002e1c:	9203      	str	r2, [sp, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	9202      	str	r2, [sp, #8]
 8002e22:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e26:	9201      	str	r2, [sp, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <LCDvalue+0x1ec>)
 8002e30:	2132      	movs	r1, #50	; 0x32
 8002e32:	2069      	movs	r0, #105	; 0x69
 8002e34:	f000 ff4b 	bl	8003cce <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	889b      	ldrh	r3, [r3, #4]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4936      	ldr	r1, [pc, #216]	; (8002f18 <LCDvalue+0x1e8>)
 8002e40:	483a      	ldr	r0, [pc, #232]	; (8002f2c <LCDvalue+0x1fc>)
 8002e42:	f00a fc4d 	bl	800d6e0 <siprintf>
	if(C_LP_DEF[3] == 0){
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <LCDvalue+0x1fc>)
 8002e48:	78db      	ldrb	r3, [r3, #3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <LCDvalue+0x13c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <LCDvalue+0x1fc>)
 8002e50:	789a      	ldrb	r2, [r3, #2]
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <LCDvalue+0x1fc>)
 8002e54:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002e56:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <LCDvalue+0x1fc>)
 8002e58:	785a      	ldrb	r2, [r3, #1]
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <LCDvalue+0x1fc>)
 8002e5c:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8002e5e:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <LCDvalue+0x1fc>)
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <LCDvalue+0x1fc>)
 8002e64:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <LCDvalue+0x1fc>)
 8002e68:	2220      	movs	r2, #32
 8002e6a:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <LCDvalue+0x1f8>)
 8002e72:	9203      	str	r2, [sp, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	9202      	str	r2, [sp, #8]
 8002e78:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e7c:	9201      	str	r2, [sp, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	9200      	str	r2, [sp, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <LCDvalue+0x1fc>)
 8002e86:	2114      	movs	r1, #20
 8002e88:	205a      	movs	r0, #90	; 0x5a
 8002e8a:	f000 ff20 	bl	8003cce <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <LCDvalue+0x1f8>)
 8002e94:	9203      	str	r2, [sp, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	9202      	str	r2, [sp, #8]
 8002e9a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e9e:	9201      	str	r2, [sp, #4]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	9200      	str	r2, [sp, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <LCDvalue+0x200>)
 8002ea8:	2132      	movs	r1, #50	; 0x32
 8002eaa:	2069      	movs	r0, #105	; 0x69
 8002eac:	f000 ff0f 	bl	8003cce <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <LCDvalue+0x204>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4918      	ldr	r1, [pc, #96]	; (8002f18 <LCDvalue+0x1e8>)
 8002eb8:	481f      	ldr	r0, [pc, #124]	; (8002f38 <LCDvalue+0x208>)
 8002eba:	f00a fc11 	bl	800d6e0 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <LCDvalue+0x1f8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	9203      	str	r2, [sp, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	9202      	str	r2, [sp, #8]
 8002ec8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ecc:	9201      	str	r2, [sp, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	9200      	str	r2, [sp, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <LCDvalue+0x208>)
 8002ed6:	2123      	movs	r1, #35	; 0x23
 8002ed8:	2032      	movs	r0, #50	; 0x32
 8002eda:	f000 fef8 	bl	8003cce <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <LCDvalue+0x1f8>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	9203      	str	r2, [sp, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	9202      	str	r2, [sp, #8]
 8002ee8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <LCDvalue+0x208>)
 8002ef6:	2123      	movs	r1, #35	; 0x23
 8002ef8:	2032      	movs	r0, #50	; 0x32
 8002efa:	f000 fee8 	bl	8003cce <ST7735_WriteStringNSS>

}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	24000000 	.word	0x24000000
 8002f0c:	24000174 	.word	0x24000174
 8002f10:	24000ea0 	.word	0x24000ea0
 8002f14:	000f4240 	.word	0x000f4240
 8002f18:	0800e004 	.word	0x0800e004
 8002f1c:	24000170 	.word	0x24000170
 8002f20:	240002e8 	.word	0x240002e8
 8002f24:	24000164 	.word	0x24000164
 8002f28:	2400000c 	.word	0x2400000c
 8002f2c:	24000168 	.word	0x24000168
 8002f30:	0800de50 	.word	0x0800de50
 8002f34:	24000176 	.word	0x24000176
 8002f38:	2400016c 	.word	0x2400016c

08002f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f40:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <SystemInit+0xfc>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <SystemInit+0xfc>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <SystemInit+0xfc>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <SystemInit+0xfc>)
 8002f56:	f043 0310 	orr.w	r3, r3, #16
 8002f5a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <SystemInit+0x100>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d807      	bhi.n	8002f78 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <SystemInit+0x100>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 030f 	bic.w	r3, r3, #15
 8002f70:	4a32      	ldr	r2, [pc, #200]	; (800303c <SystemInit+0x100>)
 8002f72:	f043 0307 	orr.w	r3, r3, #7
 8002f76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <SystemInit+0x104>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a30      	ldr	r2, [pc, #192]	; (8003040 <SystemInit+0x104>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f84:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <SystemInit+0x104>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <SystemInit+0x104>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	492c      	ldr	r1, [pc, #176]	; (8003040 <SystemInit+0x104>)
 8002f90:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <SystemInit+0x108>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <SystemInit+0x100>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <SystemInit+0x100>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <SystemInit+0x100>)
 8002fac:	f043 0307 	orr.w	r3, r3, #7
 8002fb0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <SystemInit+0x104>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <SystemInit+0x104>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <SystemInit+0x104>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <SystemInit+0x104>)
 8002fc6:	4a20      	ldr	r2, [pc, #128]	; (8003048 <SystemInit+0x10c>)
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <SystemInit+0x104>)
 8002fcc:	4a1f      	ldr	r2, [pc, #124]	; (800304c <SystemInit+0x110>)
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <SystemInit+0x104>)
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <SystemInit+0x114>)
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <SystemInit+0x104>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <SystemInit+0x104>)
 8002fde:	4a1c      	ldr	r2, [pc, #112]	; (8003050 <SystemInit+0x114>)
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <SystemInit+0x104>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <SystemInit+0x104>)
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <SystemInit+0x114>)
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <SystemInit+0x104>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <SystemInit+0x104>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <SystemInit+0x104>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <SystemInit+0x104>)
 8003002:	2200      	movs	r2, #0
 8003004:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <SystemInit+0x118>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <SystemInit+0x118>)
 800300c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003010:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <SystemInit+0x11c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <SystemInit+0x120>)
 8003018:	4013      	ands	r3, r2
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301e:	d202      	bcs.n	8003026 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <SystemInit+0x124>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <SystemInit+0x128>)
 8003028:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800302c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	52002000 	.word	0x52002000
 8003040:	58024400 	.word	0x58024400
 8003044:	eaf6ed7f 	.word	0xeaf6ed7f
 8003048:	02020200 	.word	0x02020200
 800304c:	01ff0000 	.word	0x01ff0000
 8003050:	01010280 	.word	0x01010280
 8003054:	580000c0 	.word	0x580000c0
 8003058:	5c001000 	.word	0x5c001000
 800305c:	ffff0000 	.word	0xffff0000
 8003060:	51008108 	.word	0x51008108
 8003064:	52004000 	.word	0x52004000

08003068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800306e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003072:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003074:	bf00      	nop
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <main+0xec>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <main+0x24>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	dcf4      	bgt.n	8003076 <main+0xe>
	if ( timeout < 0 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	da01      	bge.n	8003096 <main+0x2e>
	{
		Error_Handler();
 8003092:	f000 fbeb 	bl	800386c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003096:	f001 fb69 	bl	800476c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800309a:	f000 f863 	bl	8003164 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800309e:	f000 f8e5 	bl	800326c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80030a2:	4b2c      	ldr	r3, [pc, #176]	; (8003154 <main+0xec>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <main+0xec>)
 80030aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <main+0xec>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f004 fd7f 	bl	8007bc4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80030c6:	2100      	movs	r1, #0
 80030c8:	2000      	movs	r0, #0
 80030ca:	f004 fd95 	bl	8007bf8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80030ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80030d4:	bf00      	nop
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <main+0xec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <main+0x84>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dcf4      	bgt.n	80030d6 <main+0x6e>
	if ( timeout < 0 )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da01      	bge.n	80030f6 <main+0x8e>
	{
		Error_Handler();
 80030f2:	f000 fbbb 	bl	800386c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030f6:	f000 fa6d 	bl	80035d4 <MX_GPIO_Init>
  MX_ETH_Init();
 80030fa:	f000 f8e9 	bl	80032d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80030fe:	f000 f9c1 	bl	8003484 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8003102:	f000 fa3f 	bl	8003584 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003106:	f000 fa0b 	bl	8003520 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800310a:	f000 f92d 	bl	8003368 <MX_SPI3_Init>
  MX_TIM7_Init();
 800310e:	f000 f983 	bl	8003418 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8003112:	f000 fcb3 	bl	8003a7c <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8003116:	2000      	movs	r0, #0
 8003118:	f000 ffbd 	bl	8004096 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 800311c:	2000      	movs	r0, #0
 800311e:	f000 ffa9 	bl	8004074 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8003122:	f001 fba9 	bl	8004878 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <main+0xf0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2bc8      	cmp	r3, #200	; 0xc8
 8003130:	d9f7      	bls.n	8003122 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8003132:	f001 fba1 	bl	8004878 <HAL_GetTick>
 8003136:	4603      	mov	r3, r0
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <main+0xf0>)
 800313a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800313c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003140:	4806      	ldr	r0, [pc, #24]	; (800315c <main+0xf4>)
 8003142:	f004 fd24 	bl	8007b8e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8003146:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800314a:	4905      	ldr	r1, [pc, #20]	; (8003160 <main+0xf8>)
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fd29 	bl	8000ba4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8003152:	e7e6      	b.n	8003122 <main+0xba>
 8003154:	58024400 	.word	0x58024400
 8003158:	24000e98 	.word	0x24000e98
 800315c:	58020400 	.word	0x58020400
 8003160:	240009c0 	.word	0x240009c0

08003164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b09c      	sub	sp, #112	; 0x70
 8003168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800316a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316e:	224c      	movs	r2, #76	; 0x4c
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f00a f9bc 	bl	800d4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	2220      	movs	r2, #32
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f00a f9b6 	bl	800d4f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003184:	2004      	movs	r0, #4
 8003186:	f004 fe93 	bl	8007eb0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4b34      	ldr	r3, [pc, #208]	; (8003260 <SystemClock_Config+0xfc>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4a33      	ldr	r2, [pc, #204]	; (8003260 <SystemClock_Config+0xfc>)
 8003194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003198:	6193      	str	r3, [r2, #24]
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <SystemClock_Config+0xfc>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <SystemClock_Config+0x100>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <SystemClock_Config+0x100>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031b0:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <SystemClock_Config+0x100>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80031bc:	bf00      	nop
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <SystemClock_Config+0xfc>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ca:	d1f8      	bne.n	80031be <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80031cc:	4b26      	ldr	r3, [pc, #152]	; (8003268 <SystemClock_Config+0x104>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	f023 0303 	bic.w	r3, r3, #3
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <SystemClock_Config+0x104>)
 80031d6:	f043 0302 	orr.w	r3, r3, #2
 80031da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e6:	2302      	movs	r3, #2
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ea:	2302      	movs	r3, #2
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80031f2:	2378      	movs	r3, #120	; 0x78
 80031f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80031f6:	2302      	movs	r3, #2
 80031f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031fa:	2302      	movs	r3, #2
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031fe:	2302      	movs	r3, #2
 8003200:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003202:	230c      	movs	r3, #12
 8003204:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003206:	2300      	movs	r3, #0
 8003208:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f004 feb6 	bl	8007f84 <HAL_RCC_OscConfig>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800321e:	f000 fb25 	bl	800386c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003222:	233f      	movs	r3, #63	; 0x3f
 8003224:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003226:	2303      	movs	r3, #3
 8003228:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800322e:	2308      	movs	r3, #8
 8003230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800323a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003240:	2340      	movs	r3, #64	; 0x40
 8003242:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	2104      	movs	r1, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fac9 	bl	80087e0 <HAL_RCC_ClockConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003254:	f000 fb0a 	bl	800386c <Error_Handler>
  }
}
 8003258:	bf00      	nop
 800325a:	3770      	adds	r7, #112	; 0x70
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	58024800 	.word	0x58024800
 8003264:	58000400 	.word	0x58000400
 8003268:	58024400 	.word	0x58024400

0800326c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b0b0      	sub	sp, #192	; 0xc0
 8003270:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	22bc      	movs	r2, #188	; 0xbc
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f00a f939 	bl	800d4f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 800327e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8003282:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003284:	2301      	movs	r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8003288:	2318      	movs	r3, #24
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800328c:	2302      	movs	r3, #2
 800328e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8003290:	2304      	movs	r3, #4
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003294:	2302      	movs	r3, #2
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003298:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800329e:	2300      	movs	r3, #0
 80032a0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80032a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032aa:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80032ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 fe1e 	bl	8008ef8 <HAL_RCCEx_PeriphCLKConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80032c2:	f000 fad3 	bl	800386c <Error_Handler>
  }
}
 80032c6:	bf00      	nop
 80032c8:	37c0      	adds	r7, #192	; 0xc0
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80032d4:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <MX_ETH_Init+0x80>)
 80032d6:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <MX_ETH_Init+0x84>)
 80032d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <MX_ETH_Init+0x88>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <MX_ETH_Init+0x88>)
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <MX_ETH_Init+0x88>)
 80032e8:	22e1      	movs	r2, #225	; 0xe1
 80032ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <MX_ETH_Init+0x88>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <MX_ETH_Init+0x88>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <MX_ETH_Init+0x88>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <MX_ETH_Init+0x80>)
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <MX_ETH_Init+0x88>)
 8003302:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <MX_ETH_Init+0x80>)
 8003306:	2201      	movs	r2, #1
 8003308:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <MX_ETH_Init+0x80>)
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <MX_ETH_Init+0x8c>)
 800330e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <MX_ETH_Init+0x80>)
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <MX_ETH_Init+0x90>)
 8003314:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <MX_ETH_Init+0x80>)
 8003318:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800331c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800331e:	480c      	ldr	r0, [pc, #48]	; (8003350 <MX_ETH_Init+0x80>)
 8003320:	f003 fe30 	bl	8006f84 <HAL_ETH_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800332a:	f000 fa9f 	bl	800386c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800332e:	2238      	movs	r2, #56	; 0x38
 8003330:	2100      	movs	r1, #0
 8003332:	480c      	ldr	r0, [pc, #48]	; (8003364 <MX_ETH_Init+0x94>)
 8003334:	f00a f8dc 	bl	800d4f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <MX_ETH_Init+0x94>)
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <MX_ETH_Init+0x94>)
 8003340:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003344:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <MX_ETH_Init+0x94>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	240001b0 	.word	0x240001b0
 8003354:	40028000 	.word	0x40028000
 8003358:	24000ea8 	.word	0x24000ea8
 800335c:	240000e8 	.word	0x240000e8
 8003360:	24000088 	.word	0x24000088
 8003364:	24000178 	.word	0x24000178

08003368 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <MX_SPI3_Init+0xa8>)
 800336e:	4a29      	ldr	r2, [pc, #164]	; (8003414 <MX_SPI3_Init+0xac>)
 8003370:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <MX_SPI3_Init+0xa8>)
 8003374:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003378:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <MX_SPI3_Init+0xa8>)
 800337c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003380:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <MX_SPI3_Init+0xa8>)
 8003384:	2207      	movs	r2, #7
 8003386:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <MX_SPI3_Init+0xa8>)
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <MX_SPI3_Init+0xa8>)
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <MX_SPI3_Init+0xa8>)
 8003396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800339a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800339c:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <MX_SPI3_Init+0xa8>)
 800339e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <MX_SPI3_Init+0xa8>)
 80033fc:	f007 f8e4 	bl	800a5c8 <HAL_SPI_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8003406:	f000 fa31 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	24000260 	.word	0x24000260
 8003414:	40003c00 	.word	0x40003c00

08003418 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_TIM7_Init+0x64>)
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <MX_TIM7_Init+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <MX_TIM7_Init+0x64>)
 8003430:	22ef      	movs	r2, #239	; 0xef
 8003432:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_TIM7_Init+0x64>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <MX_TIM7_Init+0x64>)
 800343c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003440:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_TIM7_Init+0x64>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003448:	480c      	ldr	r0, [pc, #48]	; (800347c <MX_TIM7_Init+0x64>)
 800344a:	f007 fc9e 	bl	800ad8a <HAL_TIM_Base_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003454:	f000 fa0a 	bl	800386c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_TIM7_Init+0x64>)
 8003466:	f007 ff6f 	bl	800b348 <HAL_TIMEx_MasterConfigSynchronization>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003470:	f000 f9fc 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	240002e8 	.word	0x240002e8
 8003480:	40001400 	.word	0x40001400

08003484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003488:	4b22      	ldr	r3, [pc, #136]	; (8003514 <MX_USART3_UART_Init+0x90>)
 800348a:	4a23      	ldr	r2, [pc, #140]	; (8003518 <MX_USART3_UART_Init+0x94>)
 800348c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800348e:	4b21      	ldr	r3, [pc, #132]	; (8003514 <MX_USART3_UART_Init+0x90>)
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <MX_USART3_UART_Init+0x98>)
 8003492:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <MX_USART3_UART_Init+0x90>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <MX_USART3_UART_Init+0x90>)
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034a8:	220c      	movs	r2, #12
 80034aa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034cc:	f007 ffe8 	bl	800b4a0 <HAL_UART_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80034d6:	f000 f9c9 	bl	800386c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034da:	2100      	movs	r1, #0
 80034dc:	480d      	ldr	r0, [pc, #52]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034de:	f009 fc09 	bl	800ccf4 <HAL_UARTEx_SetTxFifoThreshold>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80034e8:	f000 f9c0 	bl	800386c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034ec:	2100      	movs	r1, #0
 80034ee:	4809      	ldr	r0, [pc, #36]	; (8003514 <MX_USART3_UART_Init+0x90>)
 80034f0:	f009 fc3e 	bl	800cd70 <HAL_UARTEx_SetRxFifoThreshold>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80034fa:	f000 f9b7 	bl	800386c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <MX_USART3_UART_Init+0x90>)
 8003500:	f009 fbbf 	bl	800cc82 <HAL_UARTEx_DisableFifoMode>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800350a:	f000 f9af 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	24000334 	.word	0x24000334
 8003518:	40004800 	.word	0x40004800
 800351c:	0005dc00 	.word	0x0005dc00

08003520 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8003528:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800352c:	2209      	movs	r2, #9
 800352e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003532:	2202      	movs	r2, #2
 8003534:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800353e:	2202      	movs	r2, #2
 8003540:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003556:	2201      	movs	r2, #1
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800355c:	2201      	movs	r2, #1
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003568:	f004 fb5a 	bl	8007c20 <HAL_PCD_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003572:	f000 f97b 	bl	800386c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	240004b4 	.word	0x240004b4
 8003580:	40080000 	.word	0x40080000

08003584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <MX_DMA_Init+0x4c>)
 800358c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003590:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <MX_DMA_Init+0x4c>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <MX_DMA_Init+0x4c>)
 800359c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	200c      	movs	r0, #12
 80035ae:	f001 fa8e 	bl	8004ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80035b2:	200c      	movs	r0, #12
 80035b4:	f001 faa5 	bl	8004b02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	200f      	movs	r0, #15
 80035be:	f001 fa86 	bl	8004ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80035c2:	200f      	movs	r0, #15
 80035c4:	f001 fa9d 	bl	8004b02 <HAL_NVIC_EnableIRQ>

}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58024400 	.word	0x58024400

080035d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ea:	4b8a      	ldr	r3, [pc, #552]	; (8003814 <MX_GPIO_Init+0x240>)
 80035ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f0:	4a88      	ldr	r2, [pc, #544]	; (8003814 <MX_GPIO_Init+0x240>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035fa:	4b86      	ldr	r3, [pc, #536]	; (8003814 <MX_GPIO_Init+0x240>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003608:	4b82      	ldr	r3, [pc, #520]	; (8003814 <MX_GPIO_Init+0x240>)
 800360a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800360e:	4a81      	ldr	r2, [pc, #516]	; (8003814 <MX_GPIO_Init+0x240>)
 8003610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003618:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <MX_GPIO_Init+0x240>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <MX_GPIO_Init+0x240>)
 8003628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362c:	4a79      	ldr	r2, [pc, #484]	; (8003814 <MX_GPIO_Init+0x240>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003636:	4b77      	ldr	r3, [pc, #476]	; (8003814 <MX_GPIO_Init+0x240>)
 8003638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003644:	4b73      	ldr	r3, [pc, #460]	; (8003814 <MX_GPIO_Init+0x240>)
 8003646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364a:	4a72      	ldr	r2, [pc, #456]	; (8003814 <MX_GPIO_Init+0x240>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003654:	4b6f      	ldr	r3, [pc, #444]	; (8003814 <MX_GPIO_Init+0x240>)
 8003656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <MX_GPIO_Init+0x240>)
 8003664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <MX_GPIO_Init+0x240>)
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003672:	4b68      	ldr	r3, [pc, #416]	; (8003814 <MX_GPIO_Init+0x240>)
 8003674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003680:	4b64      	ldr	r3, [pc, #400]	; (8003814 <MX_GPIO_Init+0x240>)
 8003682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003686:	4a63      	ldr	r2, [pc, #396]	; (8003814 <MX_GPIO_Init+0x240>)
 8003688:	f043 0310 	orr.w	r3, r3, #16
 800368c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003690:	4b60      	ldr	r3, [pc, #384]	; (8003814 <MX_GPIO_Init+0x240>)
 8003692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800369e:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <MX_GPIO_Init+0x240>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	4a5b      	ldr	r2, [pc, #364]	; (8003814 <MX_GPIO_Init+0x240>)
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ae:	4b59      	ldr	r3, [pc, #356]	; (8003814 <MX_GPIO_Init+0x240>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036bc:	4b55      	ldr	r3, [pc, #340]	; (8003814 <MX_GPIO_Init+0x240>)
 80036be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c2:	4a54      	ldr	r2, [pc, #336]	; (8003814 <MX_GPIO_Init+0x240>)
 80036c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <MX_GPIO_Init+0x240>)
 80036ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80036da:	2201      	movs	r2, #1
 80036dc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80036e0:	484d      	ldr	r0, [pc, #308]	; (8003818 <MX_GPIO_Init+0x244>)
 80036e2:	f004 fa3b 	bl	8007b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80036e6:	2200      	movs	r2, #0
 80036e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ec:	484a      	ldr	r0, [pc, #296]	; (8003818 <MX_GPIO_Init+0x244>)
 80036ee:	f004 fa35 	bl	8007b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80036f2:	2200      	movs	r2, #0
 80036f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036f8:	4848      	ldr	r0, [pc, #288]	; (800381c <MX_GPIO_Init+0x248>)
 80036fa:	f004 fa2f 	bl	8007b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80036fe:	2200      	movs	r2, #0
 8003700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003704:	4846      	ldr	r0, [pc, #280]	; (8003820 <MX_GPIO_Init+0x24c>)
 8003706:	f004 fa29 	bl	8007b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003710:	4844      	ldr	r0, [pc, #272]	; (8003824 <MX_GPIO_Init+0x250>)
 8003712:	f004 fa23 	bl	8007b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8003716:	230d      	movs	r3, #13
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371a:	2300      	movs	r3, #0
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003726:	4619      	mov	r1, r3
 8003728:	483f      	ldr	r0, [pc, #252]	; (8003828 <MX_GPIO_Init+0x254>)
 800372a:	f004 f84f 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800372e:	2308      	movs	r3, #8
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003732:	2300      	movs	r3, #0
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800373a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373e:	4619      	mov	r1, r3
 8003740:	483a      	ldr	r0, [pc, #232]	; (800382c <MX_GPIO_Init+0x258>)
 8003742:	f004 f843 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8003746:	2302      	movs	r3, #2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800374a:	2300      	movs	r3, #0
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	4619      	mov	r1, r3
 8003758:	4830      	ldr	r0, [pc, #192]	; (800381c <MX_GPIO_Init+0x248>)
 800375a:	f004 f837 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800375e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	4619      	mov	r1, r3
 8003772:	482f      	ldr	r0, [pc, #188]	; (8003830 <MX_GPIO_Init+0x25c>)
 8003774:	f004 f82a 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8003778:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377e:	2301      	movs	r3, #1
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003786:	2300      	movs	r3, #0
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	4821      	ldr	r0, [pc, #132]	; (8003818 <MX_GPIO_Init+0x244>)
 8003792:	f004 f81b 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003796:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379c:	2301      	movs	r3, #1
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	481b      	ldr	r0, [pc, #108]	; (800381c <MX_GPIO_Init+0x248>)
 80037b0:	f004 f80c 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80037b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80037c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ca:	4619      	mov	r1, r3
 80037cc:	4814      	ldr	r0, [pc, #80]	; (8003820 <MX_GPIO_Init+0x24c>)
 80037ce:	f003 fffd 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80037e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e4:	4619      	mov	r1, r3
 80037e6:	480f      	ldr	r0, [pc, #60]	; (8003824 <MX_GPIO_Init+0x250>)
 80037e8:	f003 fff0 	bl	80077cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80037ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f2:	2301      	movs	r3, #1
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	2300      	movs	r3, #0
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003802:	4619      	mov	r1, r3
 8003804:	4807      	ldr	r0, [pc, #28]	; (8003824 <MX_GPIO_Init+0x250>)
 8003806:	f003 ffe1 	bl	80077cc <HAL_GPIO_Init>

}
 800380a:	bf00      	nop
 800380c:	3738      	adds	r7, #56	; 0x38
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	58024400 	.word	0x58024400
 8003818:	58021000 	.word	0x58021000
 800381c:	58020400 	.word	0x58020400
 8003820:	58020c00 	.word	0x58020c00
 8003824:	58021800 	.word	0x58021800
 8003828:	58020800 	.word	0x58020800
 800382c:	58020000 	.word	0x58020000
 8003830:	58021400 	.word	0x58021400

08003834 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003834:	b4b0      	push	{r4, r5, r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10a      	bne.n	800385a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800384e:	1854      	adds	r4, r2, r1
 8003850:	f143 0500 	adc.w	r5, r3, #0
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003856:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bcb0      	pop	{r4, r5, r7}
 8003862:	4770      	bx	lr
 8003864:	240002e8 	.word	0x240002e8
 8003868:	24000ea0 	.word	0x24000ea0

0800386c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003870:	b672      	cpsid	i
}
 8003872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003874:	e7fe      	b.n	8003874 <Error_Handler+0x8>
	...

08003878 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003882:	4802      	ldr	r0, [pc, #8]	; (800388c <ST7735_Select+0x14>)
 8003884:	f004 f96a 	bl	8007b5c <HAL_GPIO_WritePin>
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}
 800388c:	58021000 	.word	0x58021000

08003890 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800389a:	4802      	ldr	r0, [pc, #8]	; (80038a4 <ST7735_Unselect+0x14>)
 800389c:	f004 f95e 	bl	8007b5c <HAL_GPIO_WritePin>
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	58021000 	.word	0x58021000

080038a8 <ST7735_Select1>:
static void ST7735_Select1() {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b2:	4802      	ldr	r0, [pc, #8]	; (80038bc <ST7735_Select1+0x14>)
 80038b4:	f004 f952 	bl	8007b5c <HAL_GPIO_WritePin>
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58021000 	.word	0x58021000

080038c0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80038c4:	2201      	movs	r2, #1
 80038c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ca:	4802      	ldr	r0, [pc, #8]	; (80038d4 <ST7735_Unselect1+0x14>)
 80038cc:	f004 f946 	bl	8007b5c <HAL_GPIO_WritePin>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	58021000 	.word	0x58021000

080038d8 <ST7735_Reset>:

static void ST7735_Reset() {
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038e2:	4807      	ldr	r0, [pc, #28]	; (8003900 <ST7735_Reset+0x28>)
 80038e4:	f004 f93a 	bl	8007b5c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80038e8:	2005      	movs	r0, #5
 80038ea:	f000 ffd1 	bl	8004890 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80038ee:	2201      	movs	r2, #1
 80038f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <ST7735_Reset+0x28>)
 80038f6:	f004 f931 	bl	8007b5c <HAL_GPIO_WritePin>
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	58021000 	.word	0x58021000

08003904 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800390e:	2200      	movs	r2, #0
 8003910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003914:	4806      	ldr	r0, [pc, #24]	; (8003930 <ST7735_WriteCommand+0x2c>)
 8003916:	f004 f921 	bl	8007b5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800391a:	1df9      	adds	r1, r7, #7
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	2201      	movs	r2, #1
 8003922:	4804      	ldr	r0, [pc, #16]	; (8003934 <ST7735_WriteCommand+0x30>)
 8003924:	f006 ff56 	bl	800a7d4 <HAL_SPI_Transmit>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58021800 	.word	0x58021800
 8003934:	24000260 	.word	0x24000260

08003938 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003942:	2201      	movs	r2, #1
 8003944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003948:	4807      	ldr	r0, [pc, #28]	; (8003968 <ST7735_WriteData+0x30>)
 800394a:	f004 f907 	bl	8007b5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <ST7735_WriteData+0x34>)
 800395a:	f006 ff3b 	bl	800a7d4 <HAL_SPI_Transmit>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	58021800 	.word	0x58021800
 800396c:	24000260 	.word	0x24000260

08003970 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8003982:	e034      	b.n	80039ee <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ffb7 	bl	8003904 <ST7735_WriteCommand>

		numArgs = *addr++;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80039a0:	7abb      	ldrb	r3, [r7, #10]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 80039aa:	7abb      	ldrb	r3, [r7, #10]
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80039b2:	7abb      	ldrb	r3, [r7, #10]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80039b8:	7abb      	ldrb	r3, [r7, #10]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffbb 	bl	8003938 <ST7735_WriteData>
			addr += numArgs;
 80039c2:	7abb      	ldrb	r3, [r7, #10]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80039ca:	89bb      	ldrh	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80039da:	89bb      	ldrh	r3, [r7, #12]
 80039dc:	2bff      	cmp	r3, #255	; 0xff
 80039de:	d102      	bne.n	80039e6 <ST7735_ExecuteCommandList+0x76>
 80039e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039e4:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80039e6:	89bb      	ldrh	r3, [r7, #12]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 ff51 	bl	8004890 <HAL_Delay>
	while(numCommands--) {
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	73fa      	strb	r2, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1c5      	bne.n	8003984 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003a02:	b590      	push	{r4, r7, lr}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4623      	mov	r3, r4
 8003a12:	71fb      	strb	r3, [r7, #7]
 8003a14:	4603      	mov	r3, r0
 8003a16:	71bb      	strb	r3, [r7, #6]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	717b      	strb	r3, [r7, #5]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8003a20:	202a      	movs	r0, #42	; 0x2a
 8003a22:	f7ff ff6f 	bl	8003904 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003a26:	2300      	movs	r3, #0
 8003a28:	733b      	strb	r3, [r7, #12]
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	737b      	strb	r3, [r7, #13]
 8003a32:	2300      	movs	r3, #0
 8003a34:	73bb      	strb	r3, [r7, #14]
 8003a36:	797b      	ldrb	r3, [r7, #5]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	2104      	movs	r1, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff77 	bl	8003938 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8003a4a:	202b      	movs	r0, #43	; 0x2b
 8003a4c:	f7ff ff5a 	bl	8003904 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8003a50:	79bb      	ldrb	r3, [r7, #6]
 8003a52:	3301      	adds	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8003a58:	793b      	ldrb	r3, [r7, #4]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	2104      	movs	r1, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff66 	bl	8003938 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8003a6c:	202c      	movs	r0, #44	; 0x2c
 8003a6e:	f7ff ff49 	bl	8003904 <ST7735_WriteCommand>
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
	...

08003a7c <ST7735_Init>:

void ST7735_Init() {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8003a80:	f7ff fefa 	bl	8003878 <ST7735_Select>
	ST7735_Select1();
 8003a84:	f7ff ff10 	bl	80038a8 <ST7735_Select1>
	ST7735_Reset();
 8003a88:	f7ff ff26 	bl	80038d8 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8003a8c:	4807      	ldr	r0, [pc, #28]	; (8003aac <ST7735_Init+0x30>)
 8003a8e:	f7ff ff6f 	bl	8003970 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8003a92:	4807      	ldr	r0, [pc, #28]	; (8003ab0 <ST7735_Init+0x34>)
 8003a94:	f7ff ff6c 	bl	8003970 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8003a98:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <ST7735_Init+0x38>)
 8003a9a:	f7ff ff69 	bl	8003970 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8003a9e:	f7ff fef7 	bl	8003890 <ST7735_Unselect>
	ST7735_Unselect1();
 8003aa2:	f7ff ff0d 	bl	80038c0 <ST7735_Unselect1>
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	0800f4e0 	.word	0x0800f4e0
 8003ab0:	0800f51c 	.word	0x0800f51c
 8003ab4:	0800f52c 	.word	0x0800f52c

08003ab8 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003ab8:	b082      	sub	sp, #8
 8003aba:	b590      	push	{r4, r7, lr}
 8003abc:	b089      	sub	sp, #36	; 0x24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	80bb      	strh	r3, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	b2d8      	uxtb	r0, r3
 8003ad2:	88bb      	ldrh	r3, [r7, #4]
 8003ad4:	b2d9      	uxtb	r1, r3
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ade:	4413      	add	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2dc      	uxtb	r4, r3
 8003ae6:	88bb      	ldrh	r3, [r7, #4]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003aee:	4413      	add	r3, r2
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4622      	mov	r2, r4
 8003af8:	f7ff ff83 	bl	8003a02 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e043      	b.n	8003b8a <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8003b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	3b20      	subs	r3, #32
 8003b08:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4619      	mov	r1, r3
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	440b      	add	r3, r1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e029      	b.n	8003b78 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8003b34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	743b      	strb	r3, [r7, #16]
 8003b3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8003b44:	f107 0310 	add.w	r3, r7, #16
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fef4 	bl	8003938 <ST7735_WriteData>
 8003b50:	e00f      	b.n	8003b72 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003b52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	733b      	strb	r3, [r7, #12]
 8003b5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fee3 	bl	8003938 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d3cf      	bcc.n	8003b24 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003b8e:	461a      	mov	r2, r3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d3b5      	bcc.n	8003b02 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	3724      	adds	r7, #36	; 0x24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003ba2:	b002      	add	sp, #8
 8003ba4:	4770      	bx	lr

08003ba6 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af04      	add	r7, sp, #16
 8003bae:	603a      	str	r2, [r7, #0]
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	80fb      	strh	r3, [r7, #6]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8003bba:	f7ff fe5d 	bl	8003878 <ST7735_Select>

	while(*str) {
 8003bbe:	e02d      	b.n	8003c1c <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	7d3a      	ldrb	r2, [r7, #20]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc8:	dd13      	ble.n	8003bf2 <ST7735_WriteString+0x4c>
			x = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003bce:	7d7b      	ldrb	r3, [r7, #21]
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	88bb      	ldrh	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8003bd8:	88bb      	ldrh	r3, [r7, #4]
 8003bda:	7d7a      	ldrb	r2, [r7, #21]
 8003bdc:	4413      	add	r3, r2
 8003bde:	2b7f      	cmp	r3, #127	; 0x7f
 8003be0:	dc21      	bgt.n	8003c26 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d103      	bne.n	8003bf2 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	603b      	str	r3, [r7, #0]
				continue;
 8003bf0:	e014      	b.n	8003c1c <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	88b9      	ldrh	r1, [r7, #4]
 8003bf8:	88f8      	ldrh	r0, [r7, #6]
 8003bfa:	8c3b      	ldrh	r3, [r7, #32]
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	8bbb      	ldrh	r3, [r7, #28]
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f7ff ff56 	bl	8003ab8 <ST7735_WriteChar>
		x += font.width;
 8003c0c:	7d3b      	ldrb	r3, [r7, #20]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	4413      	add	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
		str++;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1cd      	bne.n	8003bc0 <ST7735_WriteString+0x1a>
 8003c24:	e000      	b.n	8003c28 <ST7735_WriteString+0x82>
				break;
 8003c26:	bf00      	nop
	}

	ST7735_Unselect();
 8003c28:	f7ff fe32 	bl	8003890 <ST7735_Unselect>
}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c36:	b002      	add	sp, #8
 8003c38:	4770      	bx	lr

08003c3a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af04      	add	r7, sp, #16
 8003c42:	603a      	str	r2, [r7, #0]
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	4603      	mov	r3, r0
 8003c48:	80fb      	strh	r3, [r7, #6]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8003c4e:	f7ff fe2b 	bl	80038a8 <ST7735_Select1>

	while(*str) {
 8003c52:	e02d      	b.n	8003cb0 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	7d3a      	ldrb	r2, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5c:	dd13      	ble.n	8003c86 <ST7735_WriteString1+0x4c>
			x = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003c62:	7d7b      	ldrb	r3, [r7, #21]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	88bb      	ldrh	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8003c6c:	88bb      	ldrh	r3, [r7, #4]
 8003c6e:	7d7a      	ldrb	r2, [r7, #21]
 8003c70:	4413      	add	r3, r2
 8003c72:	2b7f      	cmp	r3, #127	; 0x7f
 8003c74:	dc21      	bgt.n	8003cba <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d103      	bne.n	8003c86 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	603b      	str	r3, [r7, #0]
				continue;
 8003c84:	e014      	b.n	8003cb0 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	88b9      	ldrh	r1, [r7, #4]
 8003c8c:	88f8      	ldrh	r0, [r7, #6]
 8003c8e:	8c3b      	ldrh	r3, [r7, #32]
 8003c90:	9302      	str	r3, [sp, #8]
 8003c92:	8bbb      	ldrh	r3, [r7, #28]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f7ff ff0c 	bl	8003ab8 <ST7735_WriteChar>
		x += font.width;
 8003ca0:	7d3b      	ldrb	r3, [r7, #20]
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
		str++;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1cd      	bne.n	8003c54 <ST7735_WriteString1+0x1a>
 8003cb8:	e000      	b.n	8003cbc <ST7735_WriteString1+0x82>
				break;
 8003cba:	bf00      	nop
	}

	ST7735_Unselect1();
 8003cbc:	f7ff fe00 	bl	80038c0 <ST7735_Unselect1>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cca:	b002      	add	sp, #8
 8003ccc:	4770      	bx	lr

08003cce <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8003cce:	b082      	sub	sp, #8
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	603a      	str	r2, [r7, #0]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8003ce2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8003cea:	f7ff fdc5 	bl	8003878 <ST7735_Select>
 8003cee:	e034      	b.n	8003d5a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8003cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d130      	bne.n	8003d5a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8003cf8:	f7ff fdd6 	bl	80038a8 <ST7735_Select1>

	}


	while(*str) {
 8003cfc:	e02d      	b.n	8003d5a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	7d3a      	ldrb	r2, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	2b7f      	cmp	r3, #127	; 0x7f
 8003d06:	dd13      	ble.n	8003d30 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003d0c:	7d7b      	ldrb	r3, [r7, #21]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	88bb      	ldrh	r3, [r7, #4]
 8003d12:	4413      	add	r3, r2
 8003d14:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8003d16:	88bb      	ldrh	r3, [r7, #4]
 8003d18:	7d7a      	ldrb	r2, [r7, #21]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1e:	dc21      	bgt.n	8003d64 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d103      	bne.n	8003d30 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	603b      	str	r3, [r7, #0]
				continue;
 8003d2e:	e014      	b.n	8003d5a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781a      	ldrb	r2, [r3, #0]
 8003d34:	88b9      	ldrh	r1, [r7, #4]
 8003d36:	88f8      	ldrh	r0, [r7, #6]
 8003d38:	8c3b      	ldrh	r3, [r7, #32]
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	8bbb      	ldrh	r3, [r7, #28]
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f7ff feb7 	bl	8003ab8 <ST7735_WriteChar>
		x += font.width;
 8003d4a:	7d3b      	ldrb	r3, [r7, #20]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	4413      	add	r3, r2
 8003d52:	80fb      	strh	r3, [r7, #6]
		str++;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1cd      	bne.n	8003cfe <ST7735_WriteStringNSS+0x30>
 8003d62:	e000      	b.n	8003d66 <ST7735_WriteStringNSS+0x98>
				break;
 8003d64:	bf00      	nop
	}
	if(NSS == 0){
 8003d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8003d6e:	f7ff fd8f 	bl	8003890 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8003d72:	e005      	b.n	8003d80 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8003d74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8003d7c:	f7ff fda0 	bl	80038c0 <ST7735_Unselect1>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d8a:	b002      	add	sp, #8
 8003d8c:	4770      	bx	lr
	...

08003d90 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	80fb      	strh	r3, [r7, #6]
 8003da2:	4603      	mov	r3, r0
 8003da4:	80bb      	strh	r3, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]
 8003daa:	4613      	mov	r3, r2
 8003dac:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b7f      	cmp	r3, #127	; 0x7f
 8003db2:	d858      	bhi.n	8003e66 <ST7735_FillRectangle+0xd6>
 8003db4:	88bb      	ldrh	r3, [r7, #4]
 8003db6:	2b7f      	cmp	r3, #127	; 0x7f
 8003db8:	d855      	bhi.n	8003e66 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	dd03      	ble.n	8003dcc <ST7735_FillRectangle+0x3c>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003dca:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003dcc:	88ba      	ldrh	r2, [r7, #4]
 8003dce:	883b      	ldrh	r3, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	dd03      	ble.n	8003dde <ST7735_FillRectangle+0x4e>
 8003dd6:	88bb      	ldrh	r3, [r7, #4]
 8003dd8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003ddc:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8003dde:	f7ff fd4b 	bl	8003878 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	b2d8      	uxtb	r0, r3
 8003de6:	88bb      	ldrh	r3, [r7, #4]
 8003de8:	b2d9      	uxtb	r1, r3
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b2dc      	uxtb	r4, r3
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	883b      	ldrh	r3, [r7, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	f7ff fdf9 	bl	8003a02 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003e10:	8c3b      	ldrh	r3, [r7, #32]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	733b      	strb	r3, [r7, #12]
 8003e1a:	8c3b      	ldrh	r3, [r7, #32]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003e20:	2201      	movs	r2, #1
 8003e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e26:	4812      	ldr	r0, [pc, #72]	; (8003e70 <ST7735_FillRectangle+0xe0>)
 8003e28:	f003 fe98 	bl	8007b5c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003e2c:	883b      	ldrh	r3, [r7, #0]
 8003e2e:	80bb      	strh	r3, [r7, #4]
 8003e30:	e013      	b.n	8003e5a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	80fb      	strh	r3, [r7, #6]
 8003e36:	e00a      	b.n	8003e4e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003e38:	f107 010c 	add.w	r1, r7, #12
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	2202      	movs	r2, #2
 8003e42:	480c      	ldr	r0, [pc, #48]	; (8003e74 <ST7735_FillRectangle+0xe4>)
 8003e44:	f006 fcc6 	bl	800a7d4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	80fb      	strh	r3, [r7, #6]
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f1      	bne.n	8003e38 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	80bb      	strh	r3, [r7, #4]
 8003e5a:	88bb      	ldrh	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e8      	bne.n	8003e32 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8003e60:	f7ff fd16 	bl	8003890 <ST7735_Unselect>
 8003e64:	e000      	b.n	8003e68 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003e66:	bf00      	nop
}
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd90      	pop	{r4, r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58021800 	.word	0x58021800
 8003e74:	24000260 	.word	0x24000260

08003e78 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4604      	mov	r4, r0
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	80fb      	strh	r3, [r7, #6]
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80bb      	strh	r3, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
 8003e92:	4613      	mov	r3, r2
 8003e94:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9a:	d858      	bhi.n	8003f4e <ST7735_FillRectangle1+0xd6>
 8003e9c:	88bb      	ldrh	r3, [r7, #4]
 8003e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea0:	d855      	bhi.n	8003f4e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	dd03      	ble.n	8003eb4 <ST7735_FillRectangle1+0x3c>
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003eb2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003eb4:	88ba      	ldrh	r2, [r7, #4]
 8003eb6:	883b      	ldrh	r3, [r7, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	dd03      	ble.n	8003ec6 <ST7735_FillRectangle1+0x4e>
 8003ebe:	88bb      	ldrh	r3, [r7, #4]
 8003ec0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003ec4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8003ec6:	f7ff fcef 	bl	80038a8 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	b2d8      	uxtb	r0, r3
 8003ece:	88bb      	ldrh	r3, [r7, #4]
 8003ed0:	b2d9      	uxtb	r1, r3
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b2dc      	uxtb	r4, r3
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	883b      	ldrh	r3, [r7, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	f7ff fd85 	bl	8003a02 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003ef8:	8c3b      	ldrh	r3, [r7, #32]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	733b      	strb	r3, [r7, #12]
 8003f02:	8c3b      	ldrh	r3, [r7, #32]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0e:	4812      	ldr	r0, [pc, #72]	; (8003f58 <ST7735_FillRectangle1+0xe0>)
 8003f10:	f003 fe24 	bl	8007b5c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003f14:	883b      	ldrh	r3, [r7, #0]
 8003f16:	80bb      	strh	r3, [r7, #4]
 8003f18:	e013      	b.n	8003f42 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	80fb      	strh	r3, [r7, #6]
 8003f1e:	e00a      	b.n	8003f36 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003f20:	f107 010c 	add.w	r1, r7, #12
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295
 8003f28:	2202      	movs	r2, #2
 8003f2a:	480c      	ldr	r0, [pc, #48]	; (8003f5c <ST7735_FillRectangle1+0xe4>)
 8003f2c:	f006 fc52 	bl	800a7d4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	80fb      	strh	r3, [r7, #6]
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f1      	bne.n	8003f20 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	80bb      	strh	r3, [r7, #4]
 8003f42:	88bb      	ldrh	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e8      	bne.n	8003f1a <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8003f48:	f7ff fcba 	bl	80038c0 <ST7735_Unselect1>
 8003f4c:	e000      	b.n	8003f50 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003f4e:	bf00      	nop
}
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd90      	pop	{r4, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	58021800 	.word	0x58021800
 8003f5c:	24000260 	.word	0x24000260

08003f60 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	80fb      	strh	r3, [r7, #6]
 8003f72:	4603      	mov	r3, r0
 8003f74:	80bb      	strh	r3, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	807b      	strh	r3, [r7, #2]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	2b7f      	cmp	r3, #127	; 0x7f
 8003f82:	d86e      	bhi.n	8004062 <ST7735_FillRectangleNSS+0x102>
 8003f84:	88bb      	ldrh	r3, [r7, #4]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d86b      	bhi.n	8004062 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	4413      	add	r3, r2
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	dd03      	ble.n	8003f9c <ST7735_FillRectangleNSS+0x3c>
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003f9a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003f9c:	88ba      	ldrh	r2, [r7, #4]
 8003f9e:	883b      	ldrh	r3, [r7, #0]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	dd03      	ble.n	8003fae <ST7735_FillRectangleNSS+0x4e>
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003fac:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8003fae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8003fb6:	f7ff fc5f 	bl	8003878 <ST7735_Select>
 8003fba:	e005      	b.n	8003fc8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8003fbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8003fc4:	f7ff fc70 	bl	80038a8 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	b2d8      	uxtb	r0, r3
 8003fcc:	88bb      	ldrh	r3, [r7, #4]
 8003fce:	b2d9      	uxtb	r1, r3
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b2dc      	uxtb	r4, r3
 8003fe0:	88bb      	ldrh	r3, [r7, #4]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	f7ff fd06 	bl	8003a02 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003ff6:	8c3b      	ldrh	r3, [r7, #32]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	733b      	strb	r3, [r7, #12]
 8004000:	8c3b      	ldrh	r3, [r7, #32]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004006:	2201      	movs	r2, #1
 8004008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800400c:	4817      	ldr	r0, [pc, #92]	; (800406c <ST7735_FillRectangleNSS+0x10c>)
 800400e:	f003 fda5 	bl	8007b5c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8004012:	883b      	ldrh	r3, [r7, #0]
 8004014:	80bb      	strh	r3, [r7, #4]
 8004016:	e013      	b.n	8004040 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	80fb      	strh	r3, [r7, #6]
 800401c:	e00a      	b.n	8004034 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800401e:	f107 010c 	add.w	r1, r7, #12
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	2202      	movs	r2, #2
 8004028:	4811      	ldr	r0, [pc, #68]	; (8004070 <ST7735_FillRectangleNSS+0x110>)
 800402a:	f006 fbd3 	bl	800a7d4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	3b01      	subs	r3, #1
 8004032:	80fb      	strh	r3, [r7, #6]
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f1      	bne.n	800401e <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 800403a:	88bb      	ldrh	r3, [r7, #4]
 800403c:	3b01      	subs	r3, #1
 800403e:	80bb      	strh	r3, [r7, #4]
 8004040:	88bb      	ldrh	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e8      	bne.n	8004018 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8004046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 800404e:	f7ff fc1f 	bl	8003890 <ST7735_Unselect>
 8004052:	e007      	b.n	8004064 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8004054:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004058:	2b01      	cmp	r3, #1
 800405a:	d103      	bne.n	8004064 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 800405c:	f7ff fc30 	bl	80038c0 <ST7735_Unselect1>
 8004060:	e000      	b.n	8004064 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004062:	bf00      	nop
	}
}
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	58021800 	.word	0x58021800
 8004070:	24000260 	.word	0x24000260

08004074 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af02      	add	r7, sp, #8
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	2100      	movs	r1, #0
 8004088:	2000      	movs	r0, #0
 800408a:	f7ff fe81 	bl	8003d90 <ST7735_FillRectangle>
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af02      	add	r7, sp, #8
 800409c:	4603      	mov	r3, r0
 800409e:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	2100      	movs	r1, #0
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7ff fee4 	bl	8003e78 <ST7735_FillRectangle1>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_MspInit+0x30>)
 80040c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_MspInit+0x30>)
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_MspInit+0x30>)
 80040d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	58024400 	.word	0x58024400

080040ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	; 0x38
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a59      	ldr	r2, [pc, #356]	; (8004270 <HAL_ETH_MspInit+0x184>)
 800410a:	4293      	cmp	r3, r2
 800410c:	f040 80ab 	bne.w	8004266 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004110:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004120:	4b54      	ldr	r3, [pc, #336]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004122:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800412e:	4b51      	ldr	r3, [pc, #324]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004134:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800413e:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800414e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004152:	4a48      	ldr	r2, [pc, #288]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800415c:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800415e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800416a:	4b42      	ldr	r3, [pc, #264]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800416c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004170:	4a40      	ldr	r2, [pc, #256]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800417a:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800417c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004188:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800418a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800418e:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800419a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ac:	4a31      	ldr	r2, [pc, #196]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041c4:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80041e2:	2332      	movs	r3, #50	; 0x32
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2302      	movs	r3, #2
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041f2:	230b      	movs	r3, #11
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041fa:	4619      	mov	r1, r3
 80041fc:	481e      	ldr	r0, [pc, #120]	; (8004278 <HAL_ETH_MspInit+0x18c>)
 80041fe:	f003 fae5 	bl	80077cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004202:	2386      	movs	r3, #134	; 0x86
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004212:	230b      	movs	r3, #11
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800421a:	4619      	mov	r1, r3
 800421c:	4817      	ldr	r0, [pc, #92]	; (800427c <HAL_ETH_MspInit+0x190>)
 800421e:	f003 fad5 	bl	80077cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004234:	230b      	movs	r3, #11
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800423c:	4619      	mov	r1, r3
 800423e:	4810      	ldr	r0, [pc, #64]	; (8004280 <HAL_ETH_MspInit+0x194>)
 8004240:	f003 fac4 	bl	80077cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004244:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424a:	2302      	movs	r3, #2
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004252:	2300      	movs	r3, #0
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004256:	230b      	movs	r3, #11
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800425a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425e:	4619      	mov	r1, r3
 8004260:	4808      	ldr	r0, [pc, #32]	; (8004284 <HAL_ETH_MspInit+0x198>)
 8004262:	f003 fab3 	bl	80077cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004266:	bf00      	nop
 8004268:	3738      	adds	r7, #56	; 0x38
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40028000 	.word	0x40028000
 8004274:	58024400 	.word	0x58024400
 8004278:	58020800 	.word	0x58020800
 800427c:	58020000 	.word	0x58020000
 8004280:	58020400 	.word	0x58020400
 8004284:	58021800 	.word	0x58021800

08004288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <HAL_SPI_MspInit+0xc8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d14d      	bne.n	8004346 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042b0:	4a28      	ldr	r2, [pc, #160]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042ba:	4b26      	ldr	r3, [pc, #152]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ce:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f6:	4b17      	ldr	r3, [pc, #92]	; (8004354 <HAL_SPI_MspInit+0xcc>)
 80042f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004304:	2304      	movs	r3, #4
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800430c:	2302      	movs	r3, #2
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004314:	2307      	movs	r3, #7
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4619      	mov	r1, r3
 800431e:	480e      	ldr	r0, [pc, #56]	; (8004358 <HAL_SPI_MspInit+0xd0>)
 8004320:	f003 fa54 	bl	80077cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800432e:	2302      	movs	r3, #2
 8004330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004336:	2306      	movs	r3, #6
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800433a:	f107 0314 	add.w	r3, r7, #20
 800433e:	4619      	mov	r1, r3
 8004340:	4806      	ldr	r0, [pc, #24]	; (800435c <HAL_SPI_MspInit+0xd4>)
 8004342:	f003 fa43 	bl	80077cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004346:	bf00      	nop
 8004348:	3728      	adds	r7, #40	; 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40003c00 	.word	0x40003c00
 8004354:	58024400 	.word	0x58024400
 8004358:	58020400 	.word	0x58020400
 800435c:	58020800 	.word	0x58020800

08004360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0e      	ldr	r2, [pc, #56]	; (80043a8 <HAL_TIM_Base_MspInit+0x48>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d116      	bne.n	80043a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_TIM_Base_MspInit+0x4c>)
 8004374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <HAL_TIM_Base_MspInit+0x4c>)
 800437a:	f043 0320 	orr.w	r3, r3, #32
 800437e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_TIM_Base_MspInit+0x4c>)
 8004384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	2100      	movs	r1, #0
 8004394:	2037      	movs	r0, #55	; 0x37
 8004396:	f000 fb9a 	bl	8004ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800439a:	2037      	movs	r0, #55	; 0x37
 800439c:	f000 fbb1 	bl	8004b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40001400 	.word	0x40001400
 80043ac:	58024400 	.word	0x58024400

080043b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0b8      	sub	sp, #224	; 0xe0
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	22bc      	movs	r2, #188	; 0xbc
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f009 f88d 	bl	800d4f0 <memset>
  if(huart->Instance==USART3)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a57      	ldr	r2, [pc, #348]	; (8004538 <HAL_UART_MspInit+0x188>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	f040 80a6 	bne.w	800452e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80043e2:	2302      	movs	r3, #2
 80043e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fd81 	bl	8008ef8 <HAL_RCCEx_PeriphCLKConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80043fc:	f7ff fa36 	bl	800386c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004400:	4b4e      	ldr	r3, [pc, #312]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004406:	4a4d      	ldr	r2, [pc, #308]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004410:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	4a45      	ldr	r2, [pc, #276]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004426:	f043 0308 	orr.w	r3, r3, #8
 800442a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800442e:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_UART_MspInit+0x18c>)
 8004430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800443c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004456:	2307      	movs	r3, #7
 8004458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800445c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004460:	4619      	mov	r1, r3
 8004462:	4837      	ldr	r0, [pc, #220]	; (8004540 <HAL_UART_MspInit+0x190>)
 8004464:	f003 f9b2 	bl	80077cc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004468:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_UART_MspInit+0x194>)
 800446a:	4a37      	ldr	r2, [pc, #220]	; (8004548 <HAL_UART_MspInit+0x198>)
 800446c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800446e:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_UART_MspInit+0x194>)
 8004470:	222d      	movs	r2, #45	; 0x2d
 8004472:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_UART_MspInit+0x194>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_UART_MspInit+0x194>)
 800447c:	2200      	movs	r2, #0
 800447e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <HAL_UART_MspInit+0x194>)
 8004482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004486:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <HAL_UART_MspInit+0x194>)
 800448a:	2200      	movs	r2, #0
 800448c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800448e:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_UART_MspInit+0x194>)
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <HAL_UART_MspInit+0x194>)
 8004496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800449a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_UART_MspInit+0x194>)
 800449e:	2200      	movs	r2, #0
 80044a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044a2:	4b28      	ldr	r3, [pc, #160]	; (8004544 <HAL_UART_MspInit+0x194>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044a8:	4826      	ldr	r0, [pc, #152]	; (8004544 <HAL_UART_MspInit+0x194>)
 80044aa:	f000 fb45 	bl	8004b38 <HAL_DMA_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80044b4:	f7ff f9da 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a22      	ldr	r2, [pc, #136]	; (8004544 <HAL_UART_MspInit+0x194>)
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_UART_MspInit+0x194>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044c6:	4a22      	ldr	r2, [pc, #136]	; (8004550 <HAL_UART_MspInit+0x1a0>)
 80044c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044cc:	222e      	movs	r2, #46	; 0x2e
 80044ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044d2:	2240      	movs	r2, #64	; 0x40
 80044d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d6:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ea:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <HAL_UART_MspInit+0x19c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004502:	4812      	ldr	r0, [pc, #72]	; (800454c <HAL_UART_MspInit+0x19c>)
 8004504:	f000 fb18 	bl	8004b38 <HAL_DMA_Init>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800450e:	f7ff f9ad 	bl	800386c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <HAL_UART_MspInit+0x19c>)
 8004516:	679a      	str	r2, [r3, #120]	; 0x78
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <HAL_UART_MspInit+0x19c>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2100      	movs	r1, #0
 8004522:	2027      	movs	r0, #39	; 0x27
 8004524:	f000 fad3 	bl	8004ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004528:	2027      	movs	r0, #39	; 0x27
 800452a:	f000 faea 	bl	8004b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800452e:	bf00      	nop
 8004530:	37e0      	adds	r7, #224	; 0xe0
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40004800 	.word	0x40004800
 800453c:	58024400 	.word	0x58024400
 8004540:	58020c00 	.word	0x58020c00
 8004544:	240003c4 	.word	0x240003c4
 8004548:	40020028 	.word	0x40020028
 800454c:	2400043c 	.word	0x2400043c
 8004550:	40020070 	.word	0x40020070

08004554 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_PCD_MspInit+0xa8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d13d      	bne.n	80045f2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004576:	f003 fcf5 	bl	8007f64 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_PCD_MspInit+0xac>)
 800457c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_PCD_MspInit+0xac>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_PCD_MspInit+0xac>)
 800458c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8004598:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800459c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	2302      	movs	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80045aa:	230a      	movs	r3, #10
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ae:	f107 0314 	add.w	r3, r7, #20
 80045b2:	4619      	mov	r1, r3
 80045b4:	4813      	ldr	r0, [pc, #76]	; (8004604 <HAL_PCD_MspInit+0xb0>)
 80045b6:	f003 f909 	bl	80077cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	4619      	mov	r1, r3
 80045ce:	480d      	ldr	r0, [pc, #52]	; (8004604 <HAL_PCD_MspInit+0xb0>)
 80045d0:	f003 f8fc 	bl	80077cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_PCD_MspInit+0xac>)
 80045d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_PCD_MspInit+0xac>)
 80045dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_PCD_MspInit+0xac>)
 80045e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80045f2:	bf00      	nop
 80045f4:	3728      	adds	r7, #40	; 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40080000 	.word	0x40080000
 8004600:	58024400 	.word	0x58024400
 8004604:	58020000 	.word	0x58020000

08004608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800460c:	e7fe      	b.n	800460c <NMI_Handler+0x4>

0800460e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004612:	e7fe      	b.n	8004612 <HardFault_Handler+0x4>

08004614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004618:	e7fe      	b.n	8004618 <MemManage_Handler+0x4>

0800461a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800461e:	e7fe      	b.n	800461e <BusFault_Handler+0x4>

08004620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004624:	e7fe      	b.n	8004624 <UsageFault_Handler+0x4>

08004626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004654:	f000 f8fc 	bl	8004850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}

0800465c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <DMA1_Stream1_IRQHandler+0x10>)
 8004662:	f001 fb29 	bl	8005cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	240003c4 	.word	0x240003c4

08004670 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <DMA1_Stream4_IRQHandler+0x10>)
 8004676:	f001 fb1f 	bl	8005cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2400043c 	.word	0x2400043c

08004684 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <USART3_IRQHandler+0x10>)
 800468a:	f006 ff59 	bl	800b540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	24000334 	.word	0x24000334

08004698 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800469c:	4802      	ldr	r0, [pc, #8]	; (80046a8 <TIM7_IRQHandler+0x10>)
 800469e:	f006 fc72 	bl	800af86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	240002e8 	.word	0x240002e8

080046ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <_sbrk+0x5c>)
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <_sbrk+0x60>)
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <_sbrk+0x64>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <_sbrk+0x64>)
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <_sbrk+0x68>)
 80046cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <_sbrk+0x64>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d207      	bcs.n	80046ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046dc:	f008 fede 	bl	800d49c <__errno>
 80046e0:	4603      	mov	r3, r0
 80046e2:	220c      	movs	r2, #12
 80046e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	e009      	b.n	8004700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046ec:	4b08      	ldr	r3, [pc, #32]	; (8004710 <_sbrk+0x64>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046f2:	4b07      	ldr	r3, [pc, #28]	; (8004710 <_sbrk+0x64>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	4a05      	ldr	r2, [pc, #20]	; (8004710 <_sbrk+0x64>)
 80046fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	24080000 	.word	0x24080000
 800470c:	00000400 	.word	0x00000400
 8004710:	24000eb0 	.word	0x24000eb0
 8004714:	24000ec8 	.word	0x24000ec8

08004718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004750 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800471c:	f7fe fc0e 	bl	8002f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004720:	480c      	ldr	r0, [pc, #48]	; (8004754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004722:	490d      	ldr	r1, [pc, #52]	; (8004758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004728:	e002      	b.n	8004730 <LoopCopyDataInit>

0800472a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800472c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800472e:	3304      	adds	r3, #4

08004730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004734:	d3f9      	bcc.n	800472a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004738:	4c0a      	ldr	r4, [pc, #40]	; (8004764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800473a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800473c:	e001      	b.n	8004742 <LoopFillZerobss>

0800473e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800473e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004740:	3204      	adds	r2, #4

08004742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004744:	d3fb      	bcc.n	800473e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004746:	f008 feaf 	bl	800d4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800474a:	f7fe fc8d 	bl	8003068 <main>
  bx  lr
 800474e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004750:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004754:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004758:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800475c:	0800f5cc 	.word	0x0800f5cc
  ldr r2, =_sbss
 8004760:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8004764:	24000ec8 	.word	0x24000ec8

08004768 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004768:	e7fe      	b.n	8004768 <ADC3_IRQHandler>
	...

0800476c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004772:	2003      	movs	r0, #3
 8004774:	f000 f9a0 	bl	8004ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004778:	f004 f9e8 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_Init+0x68>)
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	4913      	ldr	r1, [pc, #76]	; (80047d8 <HAL_Init+0x6c>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <HAL_Init+0x68>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_Init+0x6c>)
 80047a0:	5cd3      	ldrb	r3, [r2, r3]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_Init+0x70>)
 80047ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b0:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <HAL_Init+0x74>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 f814 	bl	80047e4 <HAL_InitTick>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e002      	b.n	80047cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80047c6:	f7ff fc77 	bl	80040b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	58024400 	.word	0x58024400
 80047d8:	0800e008 	.word	0x0800e008
 80047dc:	24000008 	.word	0x24000008
 80047e0:	24000004 	.word	0x24000004

080047e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_InitTick+0x60>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e021      	b.n	800483c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_InitTick+0x64>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_InitTick+0x60>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004806:	fbb3 f3f1 	udiv	r3, r3, r1
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f985 	bl	8004b1e <HAL_SYSTICK_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e00e      	b.n	800483c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d80a      	bhi.n	800483a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004824:	2200      	movs	r2, #0
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f000 f94f 	bl	8004ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004830:	4a06      	ldr	r2, [pc, #24]	; (800484c <HAL_InitTick+0x68>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	24000020 	.word	0x24000020
 8004848:	24000004 	.word	0x24000004
 800484c:	2400001c 	.word	0x2400001c

08004850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_IncTick+0x20>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_IncTick+0x24>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4413      	add	r3, r2
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <HAL_IncTick+0x24>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	24000020 	.word	0x24000020
 8004874:	24000eb4 	.word	0x24000eb4

08004878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return uwTick;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_GetTick+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	24000eb4 	.word	0x24000eb4

08004890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7ff ffee 	bl	8004878 <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d005      	beq.n	80048b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_Delay+0x44>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048b6:	bf00      	nop
 80048b8:	f7ff ffde 	bl	8004878 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d8f7      	bhi.n	80048b8 <HAL_Delay+0x28>
  {
  }
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	24000020 	.word	0x24000020

080048d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_GetREVID+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0c1b      	lsrs	r3, r3, #16
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	5c001000 	.word	0x5c001000

080048f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	58000400 	.word	0x58000400

08004918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <__NVIC_SetPriorityGrouping+0x40>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <__NVIC_SetPriorityGrouping+0x44>)
 8004942:	4313      	orrs	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <__NVIC_SetPriorityGrouping+0x40>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60d3      	str	r3, [r2, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000ed00 	.word	0xe000ed00
 800495c:	05fa0000 	.word	0x05fa0000

08004960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <__NVIC_GetPriorityGrouping+0x18>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 0307 	and.w	r3, r3, #7
}
 800496e:	4618      	mov	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	e000ed00 	.word	0xe000ed00

0800497c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db0b      	blt.n	80049a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	f003 021f 	and.w	r2, r3, #31
 8004994:	4907      	ldr	r1, [pc, #28]	; (80049b4 <__NVIC_EnableIRQ+0x38>)
 8004996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2001      	movs	r0, #1
 800499e:	fa00 f202 	lsl.w	r2, r0, r2
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	e000e100 	.word	0xe000e100

080049b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	6039      	str	r1, [r7, #0]
 80049c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	db0a      	blt.n	80049e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	490c      	ldr	r1, [pc, #48]	; (8004a04 <__NVIC_SetPriority+0x4c>)
 80049d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d6:	0112      	lsls	r2, r2, #4
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	440b      	add	r3, r1
 80049dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049e0:	e00a      	b.n	80049f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	4908      	ldr	r1, [pc, #32]	; (8004a08 <__NVIC_SetPriority+0x50>)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	3b04      	subs	r3, #4
 80049f0:	0112      	lsls	r2, r2, #4
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	440b      	add	r3, r1
 80049f6:	761a      	strb	r2, [r3, #24]
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000e100 	.word	0xe000e100
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f1c3 0307 	rsb	r3, r3, #7
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	bf28      	it	cs
 8004a2a:	2304      	movcs	r3, #4
 8004a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d902      	bls.n	8004a3c <NVIC_EncodePriority+0x30>
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3b03      	subs	r3, #3
 8004a3a:	e000      	b.n	8004a3e <NVIC_EncodePriority+0x32>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	401a      	ands	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a54:	f04f 31ff 	mov.w	r1, #4294967295
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	43d9      	mvns	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a64:	4313      	orrs	r3, r2
         );
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a84:	d301      	bcc.n	8004a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a86:	2301      	movs	r3, #1
 8004a88:	e00f      	b.n	8004aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <SysTick_Config+0x40>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a92:	210f      	movs	r1, #15
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	f7ff ff8e 	bl	80049b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <SysTick_Config+0x40>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aa2:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <SysTick_Config+0x40>)
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	e000e010 	.word	0xe000e010

08004ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ff29 	bl	8004918 <__NVIC_SetPriorityGrouping>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b086      	sub	sp, #24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004adc:	f7ff ff40 	bl	8004960 <__NVIC_GetPriorityGrouping>
 8004ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	6978      	ldr	r0, [r7, #20]
 8004ae8:	f7ff ff90 	bl	8004a0c <NVIC_EncodePriority>
 8004aec:	4602      	mov	r2, r0
 8004aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ff5f 	bl	80049b8 <__NVIC_SetPriority>
}
 8004afa:	bf00      	nop
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff33 	bl	800497c <__NVIC_EnableIRQ>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ffa4 	bl	8004a74 <SysTick_Config>
 8004b2c:	4603      	mov	r3, r0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7ff fe9a 	bl	8004878 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e316      	b.n	800517e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_DMA_Init+0x1b8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d04a      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_DMA_Init+0x1bc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d045      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a63      	ldr	r2, [pc, #396]	; (8004cf8 <HAL_DMA_Init+0x1c0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d040      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a62      	ldr	r2, [pc, #392]	; (8004cfc <HAL_DMA_Init+0x1c4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d03b      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a60      	ldr	r2, [pc, #384]	; (8004d00 <HAL_DMA_Init+0x1c8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d036      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5f      	ldr	r2, [pc, #380]	; (8004d04 <HAL_DMA_Init+0x1cc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d031      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <HAL_DMA_Init+0x1d0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02c      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5c      	ldr	r2, [pc, #368]	; (8004d0c <HAL_DMA_Init+0x1d4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d027      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_DMA_Init+0x1d8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a59      	ldr	r2, [pc, #356]	; (8004d14 <HAL_DMA_Init+0x1dc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01d      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_DMA_Init+0x1e0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a56      	ldr	r2, [pc, #344]	; (8004d1c <HAL_DMA_Init+0x1e4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <HAL_DMA_Init+0x1e8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <HAL_DMA_Init+0x1ec>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a51      	ldr	r2, [pc, #324]	; (8004d28 <HAL_DMA_Init+0x1f0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_DMA_Init+0xb8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a50      	ldr	r2, [pc, #320]	; (8004d2c <HAL_DMA_Init+0x1f4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_DMA_Init+0xbc>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_Init+0xbe>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 813b 	beq.w	8004e72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <HAL_DMA_Init+0x1b8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d04a      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_DMA_Init+0x1bc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d045      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a34      	ldr	r2, [pc, #208]	; (8004cf8 <HAL_DMA_Init+0x1c0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d040      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	; (8004cfc <HAL_DMA_Init+0x1c4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d03b      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a31      	ldr	r2, [pc, #196]	; (8004d00 <HAL_DMA_Init+0x1c8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d036      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <HAL_DMA_Init+0x1cc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d031      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <HAL_DMA_Init+0x1d0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d02c      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2d      	ldr	r2, [pc, #180]	; (8004d0c <HAL_DMA_Init+0x1d4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <HAL_DMA_Init+0x1d8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_DMA_Init+0x1dc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <HAL_DMA_Init+0x1e0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <HAL_DMA_Init+0x1e4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <HAL_DMA_Init+0x1e8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <HAL_DMA_Init+0x1ec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Init+0x1f0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Init+0x174>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_DMA_Init+0x1f4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <HAL_DMA_Init+0x186>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e007      	b.n	8004cce <HAL_DMA_Init+0x196>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cce:	e02f      	b.n	8004d30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cd0:	f7ff fdd2 	bl	8004878 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d928      	bls.n	8004d30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e246      	b.n	800517e <HAL_DMA_Init+0x646>
 8004cf0:	40020010 	.word	0x40020010
 8004cf4:	40020028 	.word	0x40020028
 8004cf8:	40020040 	.word	0x40020040
 8004cfc:	40020058 	.word	0x40020058
 8004d00:	40020070 	.word	0x40020070
 8004d04:	40020088 	.word	0x40020088
 8004d08:	400200a0 	.word	0x400200a0
 8004d0c:	400200b8 	.word	0x400200b8
 8004d10:	40020410 	.word	0x40020410
 8004d14:	40020428 	.word	0x40020428
 8004d18:	40020440 	.word	0x40020440
 8004d1c:	40020458 	.word	0x40020458
 8004d20:	40020470 	.word	0x40020470
 8004d24:	40020488 	.word	0x40020488
 8004d28:	400204a0 	.word	0x400204a0
 8004d2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c8      	bne.n	8004cd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <HAL_DMA_Init+0x420>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d107      	bne.n	8004d94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d94:	4b71      	ldr	r3, [pc, #452]	; (8004f5c <HAL_DMA_Init+0x424>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b71      	ldr	r3, [pc, #452]	; (8004f60 <HAL_DMA_Init+0x428>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da0:	d328      	bcc.n	8004df4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b28      	cmp	r3, #40	; 0x28
 8004da8:	d903      	bls.n	8004db2 <HAL_DMA_Init+0x27a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b2e      	cmp	r3, #46	; 0x2e
 8004db0:	d917      	bls.n	8004de2 <HAL_DMA_Init+0x2aa>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b3e      	cmp	r3, #62	; 0x3e
 8004db8:	d903      	bls.n	8004dc2 <HAL_DMA_Init+0x28a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b42      	cmp	r3, #66	; 0x42
 8004dc0:	d90f      	bls.n	8004de2 <HAL_DMA_Init+0x2aa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b46      	cmp	r3, #70	; 0x46
 8004dc8:	d903      	bls.n	8004dd2 <HAL_DMA_Init+0x29a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b48      	cmp	r3, #72	; 0x48
 8004dd0:	d907      	bls.n	8004de2 <HAL_DMA_Init+0x2aa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b4e      	cmp	r3, #78	; 0x4e
 8004dd8:	d905      	bls.n	8004de6 <HAL_DMA_Init+0x2ae>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b52      	cmp	r3, #82	; 0x52
 8004de0:	d801      	bhi.n	8004de6 <HAL_DMA_Init+0x2ae>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_DMA_Init+0x2b0>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0307 	bic.w	r3, r3, #7
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d117      	bne.n	8004e4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 ff1d 	bl	8006c70 <DMA_CheckFifoParam>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e197      	b.n	800517e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fe58 	bl	8006b0c <DMA_CalcBaseAndBitshift>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	223f      	movs	r2, #63	; 0x3f
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	e0cd      	b.n	800500e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <HAL_DMA_Init+0x42c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a39      	ldr	r2, [pc, #228]	; (8004f68 <HAL_DMA_Init+0x430>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a38      	ldr	r2, [pc, #224]	; (8004f6c <HAL_DMA_Init+0x434>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a36      	ldr	r2, [pc, #216]	; (8004f70 <HAL_DMA_Init+0x438>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a35      	ldr	r2, [pc, #212]	; (8004f74 <HAL_DMA_Init+0x43c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a33      	ldr	r2, [pc, #204]	; (8004f78 <HAL_DMA_Init+0x440>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a32      	ldr	r2, [pc, #200]	; (8004f7c <HAL_DMA_Init+0x444>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_DMA_Init+0x38a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <HAL_DMA_Init+0x448>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d101      	bne.n	8004ec6 <HAL_DMA_Init+0x38e>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_DMA_Init+0x390>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8097 	beq.w	8004ffc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <HAL_DMA_Init+0x42c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d021      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a22      	ldr	r2, [pc, #136]	; (8004f68 <HAL_DMA_Init+0x430>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01c      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <HAL_DMA_Init+0x434>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d017      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <HAL_DMA_Init+0x438>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d012      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_DMA_Init+0x43c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00d      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_DMA_Init+0x440>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d008      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_DMA_Init+0x444>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <HAL_DMA_Init+0x3e4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_DMA_Init+0x448>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_DMA_Init+0x44c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d020      	beq.n	8004f88 <HAL_DMA_Init+0x450>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	d102      	bne.n	8004f54 <HAL_DMA_Init+0x41c>
 8004f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f52:	e01a      	b.n	8004f8a <HAL_DMA_Init+0x452>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e018      	b.n	8004f8a <HAL_DMA_Init+0x452>
 8004f58:	fe10803f 	.word	0xfe10803f
 8004f5c:	5c001000 	.word	0x5c001000
 8004f60:	ffff0000 	.word	0xffff0000
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025444 	.word	0x58025444
 8004f74:	58025458 	.word	0x58025458
 8004f78:	5802546c 	.word	0x5802546c
 8004f7c:	58025480 	.word	0x58025480
 8004f80:	58025494 	.word	0x58025494
 8004f84:	fffe000f 	.word	0xfffe000f
 8004f88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68d2      	ldr	r2, [r2, #12]
 8004f8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004f98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b6e      	ldr	r3, [pc, #440]	; (8005188 <HAL_DMA_Init+0x650>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4a6e      	ldr	r2, [pc, #440]	; (800518c <HAL_DMA_Init+0x654>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 fd93 	bl	8006b0c <DMA_CalcBaseAndBitshift>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e008      	b.n	800500e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2203      	movs	r2, #3
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e0b7      	b.n	800517e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a5f      	ldr	r2, [pc, #380]	; (8005190 <HAL_DMA_Init+0x658>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d072      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a5d      	ldr	r2, [pc, #372]	; (8005194 <HAL_DMA_Init+0x65c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d06d      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a5c      	ldr	r2, [pc, #368]	; (8005198 <HAL_DMA_Init+0x660>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d068      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5a      	ldr	r2, [pc, #360]	; (800519c <HAL_DMA_Init+0x664>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d063      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a59      	ldr	r2, [pc, #356]	; (80051a0 <HAL_DMA_Init+0x668>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d05e      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a57      	ldr	r2, [pc, #348]	; (80051a4 <HAL_DMA_Init+0x66c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d059      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a56      	ldr	r2, [pc, #344]	; (80051a8 <HAL_DMA_Init+0x670>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d054      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a54      	ldr	r2, [pc, #336]	; (80051ac <HAL_DMA_Init+0x674>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d04f      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a53      	ldr	r2, [pc, #332]	; (80051b0 <HAL_DMA_Init+0x678>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d04a      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a51      	ldr	r2, [pc, #324]	; (80051b4 <HAL_DMA_Init+0x67c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d045      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a50      	ldr	r2, [pc, #320]	; (80051b8 <HAL_DMA_Init+0x680>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d040      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a4e      	ldr	r2, [pc, #312]	; (80051bc <HAL_DMA_Init+0x684>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d03b      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4d      	ldr	r2, [pc, #308]	; (80051c0 <HAL_DMA_Init+0x688>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d036      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_DMA_Init+0x68c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d031      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <HAL_DMA_Init+0x690>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02c      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a48      	ldr	r2, [pc, #288]	; (80051cc <HAL_DMA_Init+0x694>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d027      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a47      	ldr	r2, [pc, #284]	; (80051d0 <HAL_DMA_Init+0x698>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a45      	ldr	r2, [pc, #276]	; (80051d4 <HAL_DMA_Init+0x69c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a44      	ldr	r2, [pc, #272]	; (80051d8 <HAL_DMA_Init+0x6a0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a42      	ldr	r2, [pc, #264]	; (80051dc <HAL_DMA_Init+0x6a4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a41      	ldr	r2, [pc, #260]	; (80051e0 <HAL_DMA_Init+0x6a8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3f      	ldr	r2, [pc, #252]	; (80051e4 <HAL_DMA_Init+0x6ac>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3e      	ldr	r2, [pc, #248]	; (80051e8 <HAL_DMA_Init+0x6b0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_Init+0x5c6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a3c      	ldr	r2, [pc, #240]	; (80051ec <HAL_DMA_Init+0x6b4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <HAL_DMA_Init+0x5ca>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_DMA_Init+0x5cc>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d032      	beq.n	800516e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 fe2d 	bl	8006d68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d102      	bne.n	800511c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005130:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_DMA_Init+0x624>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b08      	cmp	r3, #8
 8005140:	d80c      	bhi.n	800515c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 feaa 	bl	8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e008      	b.n	800516e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	a7fdabf8 	.word	0xa7fdabf8
 800518c:	cccccccd 	.word	0xcccccccd
 8005190:	40020010 	.word	0x40020010
 8005194:	40020028 	.word	0x40020028
 8005198:	40020040 	.word	0x40020040
 800519c:	40020058 	.word	0x40020058
 80051a0:	40020070 	.word	0x40020070
 80051a4:	40020088 	.word	0x40020088
 80051a8:	400200a0 	.word	0x400200a0
 80051ac:	400200b8 	.word	0x400200b8
 80051b0:	40020410 	.word	0x40020410
 80051b4:	40020428 	.word	0x40020428
 80051b8:	40020440 	.word	0x40020440
 80051bc:	40020458 	.word	0x40020458
 80051c0:	40020470 	.word	0x40020470
 80051c4:	40020488 	.word	0x40020488
 80051c8:	400204a0 	.word	0x400204a0
 80051cc:	400204b8 	.word	0x400204b8
 80051d0:	58025408 	.word	0x58025408
 80051d4:	5802541c 	.word	0x5802541c
 80051d8:	58025430 	.word	0x58025430
 80051dc:	58025444 	.word	0x58025444
 80051e0:	58025458 	.word	0x58025458
 80051e4:	5802546c 	.word	0x5802546c
 80051e8:	58025480 	.word	0x58025480
 80051ec:	58025494 	.word	0x58025494

080051f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80051f8:	f7ff fb3e 	bl	8004878 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e2dc      	b.n	80057c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d008      	beq.n	8005226 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e2cd      	b.n	80057c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a76      	ldr	r2, [pc, #472]	; (8005404 <HAL_DMA_Abort+0x214>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d04a      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a74      	ldr	r2, [pc, #464]	; (8005408 <HAL_DMA_Abort+0x218>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d045      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a73      	ldr	r2, [pc, #460]	; (800540c <HAL_DMA_Abort+0x21c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d040      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a71      	ldr	r2, [pc, #452]	; (8005410 <HAL_DMA_Abort+0x220>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d03b      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a70      	ldr	r2, [pc, #448]	; (8005414 <HAL_DMA_Abort+0x224>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d036      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a6e      	ldr	r2, [pc, #440]	; (8005418 <HAL_DMA_Abort+0x228>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d031      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a6d      	ldr	r2, [pc, #436]	; (800541c <HAL_DMA_Abort+0x22c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d02c      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a6b      	ldr	r2, [pc, #428]	; (8005420 <HAL_DMA_Abort+0x230>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d027      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6a      	ldr	r2, [pc, #424]	; (8005424 <HAL_DMA_Abort+0x234>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d022      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a68      	ldr	r2, [pc, #416]	; (8005428 <HAL_DMA_Abort+0x238>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01d      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a67      	ldr	r2, [pc, #412]	; (800542c <HAL_DMA_Abort+0x23c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d018      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a65      	ldr	r2, [pc, #404]	; (8005430 <HAL_DMA_Abort+0x240>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a64      	ldr	r2, [pc, #400]	; (8005434 <HAL_DMA_Abort+0x244>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a62      	ldr	r2, [pc, #392]	; (8005438 <HAL_DMA_Abort+0x248>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a61      	ldr	r2, [pc, #388]	; (800543c <HAL_DMA_Abort+0x24c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_DMA_Abort+0xd6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5f      	ldr	r2, [pc, #380]	; (8005440 <HAL_DMA_Abort+0x250>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_DMA_Abort+0xda>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_DMA_Abort+0xdc>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 021e 	bic.w	r2, r2, #30
 80052de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e00a      	b.n	800530e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 020e 	bic.w	r2, r2, #14
 8005306:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3c      	ldr	r2, [pc, #240]	; (8005404 <HAL_DMA_Abort+0x214>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d072      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3a      	ldr	r2, [pc, #232]	; (8005408 <HAL_DMA_Abort+0x218>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d06d      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a39      	ldr	r2, [pc, #228]	; (800540c <HAL_DMA_Abort+0x21c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d068      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a37      	ldr	r2, [pc, #220]	; (8005410 <HAL_DMA_Abort+0x220>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d063      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a36      	ldr	r2, [pc, #216]	; (8005414 <HAL_DMA_Abort+0x224>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d05e      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a34      	ldr	r2, [pc, #208]	; (8005418 <HAL_DMA_Abort+0x228>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d059      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a33      	ldr	r2, [pc, #204]	; (800541c <HAL_DMA_Abort+0x22c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d054      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a31      	ldr	r2, [pc, #196]	; (8005420 <HAL_DMA_Abort+0x230>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d04f      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a30      	ldr	r2, [pc, #192]	; (8005424 <HAL_DMA_Abort+0x234>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04a      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <HAL_DMA_Abort+0x238>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_DMA_Abort+0x23c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d040      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2b      	ldr	r2, [pc, #172]	; (8005430 <HAL_DMA_Abort+0x240>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d03b      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_DMA_Abort+0x244>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d036      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a28      	ldr	r2, [pc, #160]	; (8005438 <HAL_DMA_Abort+0x248>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d031      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a27      	ldr	r2, [pc, #156]	; (800543c <HAL_DMA_Abort+0x24c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d02c      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <HAL_DMA_Abort+0x250>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d027      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_DMA_Abort+0x254>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a22      	ldr	r2, [pc, #136]	; (8005448 <HAL_DMA_Abort+0x258>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a21      	ldr	r2, [pc, #132]	; (800544c <HAL_DMA_Abort+0x25c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <HAL_DMA_Abort+0x260>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_DMA_Abort+0x264>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <HAL_DMA_Abort+0x268>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_DMA_Abort+0x26c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_DMA_Abort+0x20e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_DMA_Abort+0x270>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d132      	bne.n	8005464 <HAL_DMA_Abort+0x274>
 80053fe:	2301      	movs	r3, #1
 8005400:	e031      	b.n	8005466 <HAL_DMA_Abort+0x276>
 8005402:	bf00      	nop
 8005404:	40020010 	.word	0x40020010
 8005408:	40020028 	.word	0x40020028
 800540c:	40020040 	.word	0x40020040
 8005410:	40020058 	.word	0x40020058
 8005414:	40020070 	.word	0x40020070
 8005418:	40020088 	.word	0x40020088
 800541c:	400200a0 	.word	0x400200a0
 8005420:	400200b8 	.word	0x400200b8
 8005424:	40020410 	.word	0x40020410
 8005428:	40020428 	.word	0x40020428
 800542c:	40020440 	.word	0x40020440
 8005430:	40020458 	.word	0x40020458
 8005434:	40020470 	.word	0x40020470
 8005438:	40020488 	.word	0x40020488
 800543c:	400204a0 	.word	0x400204a0
 8005440:	400204b8 	.word	0x400204b8
 8005444:	58025408 	.word	0x58025408
 8005448:	5802541c 	.word	0x5802541c
 800544c:	58025430 	.word	0x58025430
 8005450:	58025444 	.word	0x58025444
 8005454:	58025458 	.word	0x58025458
 8005458:	5802546c 	.word	0x5802546c
 800545c:	58025480 	.word	0x58025480
 8005460:	58025494 	.word	0x58025494
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6d      	ldr	r2, [pc, #436]	; (8005634 <HAL_DMA_Abort+0x444>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d04a      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6b      	ldr	r2, [pc, #428]	; (8005638 <HAL_DMA_Abort+0x448>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d045      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6a      	ldr	r2, [pc, #424]	; (800563c <HAL_DMA_Abort+0x44c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d040      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a68      	ldr	r2, [pc, #416]	; (8005640 <HAL_DMA_Abort+0x450>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d03b      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a67      	ldr	r2, [pc, #412]	; (8005644 <HAL_DMA_Abort+0x454>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d036      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_DMA_Abort+0x458>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d031      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a64      	ldr	r2, [pc, #400]	; (800564c <HAL_DMA_Abort+0x45c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d02c      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a62      	ldr	r2, [pc, #392]	; (8005650 <HAL_DMA_Abort+0x460>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d027      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a61      	ldr	r2, [pc, #388]	; (8005654 <HAL_DMA_Abort+0x464>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_DMA_Abort+0x468>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01d      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5e      	ldr	r2, [pc, #376]	; (800565c <HAL_DMA_Abort+0x46c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a5c      	ldr	r2, [pc, #368]	; (8005660 <HAL_DMA_Abort+0x470>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a5b      	ldr	r2, [pc, #364]	; (8005664 <HAL_DMA_Abort+0x474>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_DMA_Abort+0x478>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a58      	ldr	r2, [pc, #352]	; (800566c <HAL_DMA_Abort+0x47c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_DMA_Abort+0x32a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a56      	ldr	r2, [pc, #344]	; (8005670 <HAL_DMA_Abort+0x480>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <HAL_DMA_Abort+0x33c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e007      	b.n	800553c <HAL_DMA_Abort+0x34c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800553c:	e013      	b.n	8005566 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800553e:	f7ff f99b 	bl	8004878 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b05      	cmp	r3, #5
 800554a:	d90c      	bls.n	8005566 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2203      	movs	r2, #3
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e12d      	b.n	80057c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <HAL_DMA_Abort+0x444>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d04a      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <HAL_DMA_Abort+0x448>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d045      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <HAL_DMA_Abort+0x44c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d040      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <HAL_DMA_Abort+0x450>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d03b      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a29      	ldr	r2, [pc, #164]	; (8005644 <HAL_DMA_Abort+0x454>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d036      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a27      	ldr	r2, [pc, #156]	; (8005648 <HAL_DMA_Abort+0x458>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d031      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <HAL_DMA_Abort+0x45c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d02c      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <HAL_DMA_Abort+0x460>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d027      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a23      	ldr	r2, [pc, #140]	; (8005654 <HAL_DMA_Abort+0x464>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d022      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a21      	ldr	r2, [pc, #132]	; (8005658 <HAL_DMA_Abort+0x468>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01d      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a20      	ldr	r2, [pc, #128]	; (800565c <HAL_DMA_Abort+0x46c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d018      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <HAL_DMA_Abort+0x470>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_DMA_Abort+0x474>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_DMA_Abort+0x478>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1a      	ldr	r2, [pc, #104]	; (800566c <HAL_DMA_Abort+0x47c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_DMA_Abort+0x422>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_DMA_Abort+0x480>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <HAL_DMA_Abort+0x426>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <HAL_DMA_Abort+0x428>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02b      	beq.n	8005674 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	223f      	movs	r2, #63	; 0x3f
 800562c:	409a      	lsls	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	e02a      	b.n	800568a <HAL_DMA_Abort+0x49a>
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a4f      	ldr	r2, [pc, #316]	; (80057cc <HAL_DMA_Abort+0x5dc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d072      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a4d      	ldr	r2, [pc, #308]	; (80057d0 <HAL_DMA_Abort+0x5e0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d06d      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4c      	ldr	r2, [pc, #304]	; (80057d4 <HAL_DMA_Abort+0x5e4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d068      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a4a      	ldr	r2, [pc, #296]	; (80057d8 <HAL_DMA_Abort+0x5e8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d063      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a49      	ldr	r2, [pc, #292]	; (80057dc <HAL_DMA_Abort+0x5ec>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d05e      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a47      	ldr	r2, [pc, #284]	; (80057e0 <HAL_DMA_Abort+0x5f0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d059      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a46      	ldr	r2, [pc, #280]	; (80057e4 <HAL_DMA_Abort+0x5f4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d054      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a44      	ldr	r2, [pc, #272]	; (80057e8 <HAL_DMA_Abort+0x5f8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d04f      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a43      	ldr	r2, [pc, #268]	; (80057ec <HAL_DMA_Abort+0x5fc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d04a      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a41      	ldr	r2, [pc, #260]	; (80057f0 <HAL_DMA_Abort+0x600>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d045      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a40      	ldr	r2, [pc, #256]	; (80057f4 <HAL_DMA_Abort+0x604>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d040      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a3e      	ldr	r2, [pc, #248]	; (80057f8 <HAL_DMA_Abort+0x608>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d03b      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3d      	ldr	r2, [pc, #244]	; (80057fc <HAL_DMA_Abort+0x60c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d036      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3b      	ldr	r2, [pc, #236]	; (8005800 <HAL_DMA_Abort+0x610>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d031      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3a      	ldr	r2, [pc, #232]	; (8005804 <HAL_DMA_Abort+0x614>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d02c      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a38      	ldr	r2, [pc, #224]	; (8005808 <HAL_DMA_Abort+0x618>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d027      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a37      	ldr	r2, [pc, #220]	; (800580c <HAL_DMA_Abort+0x61c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a35      	ldr	r2, [pc, #212]	; (8005810 <HAL_DMA_Abort+0x620>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01d      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a34      	ldr	r2, [pc, #208]	; (8005814 <HAL_DMA_Abort+0x624>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a32      	ldr	r2, [pc, #200]	; (8005818 <HAL_DMA_Abort+0x628>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a31      	ldr	r2, [pc, #196]	; (800581c <HAL_DMA_Abort+0x62c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2f      	ldr	r2, [pc, #188]	; (8005820 <HAL_DMA_Abort+0x630>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <HAL_DMA_Abort+0x634>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_DMA_Abort+0x58a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <HAL_DMA_Abort+0x638>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_DMA_Abort+0x58e>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_DMA_Abort+0x590>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800578c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
 800580c:	58025408 	.word	0x58025408
 8005810:	5802541c 	.word	0x5802541c
 8005814:	58025430 	.word	0x58025430
 8005818:	58025444 	.word	0x58025444
 800581c:	58025458 	.word	0x58025458
 8005820:	5802546c 	.word	0x5802546c
 8005824:	58025480 	.word	0x58025480
 8005828:	58025494 	.word	0x58025494

0800582c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e237      	b.n	8005cae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e22c      	b.n	8005cae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a5c      	ldr	r2, [pc, #368]	; (80059cc <HAL_DMA_Abort_IT+0x1a0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d04a      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5b      	ldr	r2, [pc, #364]	; (80059d0 <HAL_DMA_Abort_IT+0x1a4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d045      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a59      	ldr	r2, [pc, #356]	; (80059d4 <HAL_DMA_Abort_IT+0x1a8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d040      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a58      	ldr	r2, [pc, #352]	; (80059d8 <HAL_DMA_Abort_IT+0x1ac>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d03b      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a56      	ldr	r2, [pc, #344]	; (80059dc <HAL_DMA_Abort_IT+0x1b0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d036      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a55      	ldr	r2, [pc, #340]	; (80059e0 <HAL_DMA_Abort_IT+0x1b4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d031      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a53      	ldr	r2, [pc, #332]	; (80059e4 <HAL_DMA_Abort_IT+0x1b8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02c      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a52      	ldr	r2, [pc, #328]	; (80059e8 <HAL_DMA_Abort_IT+0x1bc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d027      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a50      	ldr	r2, [pc, #320]	; (80059ec <HAL_DMA_Abort_IT+0x1c0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4f      	ldr	r2, [pc, #316]	; (80059f0 <HAL_DMA_Abort_IT+0x1c4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01d      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a4d      	ldr	r2, [pc, #308]	; (80059f4 <HAL_DMA_Abort_IT+0x1c8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4c      	ldr	r2, [pc, #304]	; (80059f8 <HAL_DMA_Abort_IT+0x1cc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a4a      	ldr	r2, [pc, #296]	; (80059fc <HAL_DMA_Abort_IT+0x1d0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a49      	ldr	r2, [pc, #292]	; (8005a00 <HAL_DMA_Abort_IT+0x1d4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a47      	ldr	r2, [pc, #284]	; (8005a04 <HAL_DMA_Abort_IT+0x1d8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xc8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a46      	ldr	r2, [pc, #280]	; (8005a08 <HAL_DMA_Abort_IT+0x1dc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <HAL_DMA_Abort_IT+0xcc>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_DMA_Abort_IT+0xce>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 8086 	beq.w	8005a0c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2204      	movs	r2, #4
 8005904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <HAL_DMA_Abort_IT+0x1a0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04a      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_DMA_Abort_IT+0x1a4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d045      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_DMA_Abort_IT+0x1a8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d040      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_DMA_Abort_IT+0x1ac>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d03b      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <HAL_DMA_Abort_IT+0x1b0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d036      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_DMA_Abort_IT+0x1b4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d031      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <HAL_DMA_Abort_IT+0x1b8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02c      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_DMA_Abort_IT+0x1bc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d027      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_DMA_Abort_IT+0x1c0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_DMA_Abort_IT+0x1c4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01d      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_DMA_Abort_IT+0x1c8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_DMA_Abort_IT+0x1cc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_DMA_Abort_IT+0x1d0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_DMA_Abort_IT+0x1d4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_DMA_Abort_IT+0x1d8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x17c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_DMA_Abort_IT+0x1dc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <HAL_DMA_Abort_IT+0x18e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e178      	b.n	8005cac <HAL_DMA_Abort_IT+0x480>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e16f      	b.n	8005cac <HAL_DMA_Abort_IT+0x480>
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 020e 	bic.w	r2, r2, #14
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a6c      	ldr	r2, [pc, #432]	; (8005bd4 <HAL_DMA_Abort_IT+0x3a8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04a      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6b      	ldr	r2, [pc, #428]	; (8005bd8 <HAL_DMA_Abort_IT+0x3ac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d045      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a69      	ldr	r2, [pc, #420]	; (8005bdc <HAL_DMA_Abort_IT+0x3b0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d040      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a68      	ldr	r2, [pc, #416]	; (8005be0 <HAL_DMA_Abort_IT+0x3b4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d03b      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a66      	ldr	r2, [pc, #408]	; (8005be4 <HAL_DMA_Abort_IT+0x3b8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d036      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a65      	ldr	r2, [pc, #404]	; (8005be8 <HAL_DMA_Abort_IT+0x3bc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d031      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a63      	ldr	r2, [pc, #396]	; (8005bec <HAL_DMA_Abort_IT+0x3c0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02c      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a62      	ldr	r2, [pc, #392]	; (8005bf0 <HAL_DMA_Abort_IT+0x3c4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d027      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a60      	ldr	r2, [pc, #384]	; (8005bf4 <HAL_DMA_Abort_IT+0x3c8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d022      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a5f      	ldr	r2, [pc, #380]	; (8005bf8 <HAL_DMA_Abort_IT+0x3cc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d01d      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a5d      	ldr	r2, [pc, #372]	; (8005bfc <HAL_DMA_Abort_IT+0x3d0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a5c      	ldr	r2, [pc, #368]	; (8005c00 <HAL_DMA_Abort_IT+0x3d4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a5a      	ldr	r2, [pc, #360]	; (8005c04 <HAL_DMA_Abort_IT+0x3d8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a59      	ldr	r2, [pc, #356]	; (8005c08 <HAL_DMA_Abort_IT+0x3dc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a57      	ldr	r2, [pc, #348]	; (8005c0c <HAL_DMA_Abort_IT+0x3e0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_DMA_Abort_IT+0x290>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a56      	ldr	r2, [pc, #344]	; (8005c10 <HAL_DMA_Abort_IT+0x3e4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <HAL_DMA_Abort_IT+0x2a2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e007      	b.n	8005ade <HAL_DMA_Abort_IT+0x2b2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <HAL_DMA_Abort_IT+0x3a8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d072      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3a      	ldr	r2, [pc, #232]	; (8005bd8 <HAL_DMA_Abort_IT+0x3ac>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d06d      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a39      	ldr	r2, [pc, #228]	; (8005bdc <HAL_DMA_Abort_IT+0x3b0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d068      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <HAL_DMA_Abort_IT+0x3b4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d063      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a36      	ldr	r2, [pc, #216]	; (8005be4 <HAL_DMA_Abort_IT+0x3b8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d05e      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <HAL_DMA_Abort_IT+0x3bc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d059      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a33      	ldr	r2, [pc, #204]	; (8005bec <HAL_DMA_Abort_IT+0x3c0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d054      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a31      	ldr	r2, [pc, #196]	; (8005bf0 <HAL_DMA_Abort_IT+0x3c4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d04f      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a30      	ldr	r2, [pc, #192]	; (8005bf4 <HAL_DMA_Abort_IT+0x3c8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04a      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <HAL_DMA_Abort_IT+0x3cc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d045      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <HAL_DMA_Abort_IT+0x3d0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d040      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <HAL_DMA_Abort_IT+0x3d4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d03b      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <HAL_DMA_Abort_IT+0x3d8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d036      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_DMA_Abort_IT+0x3dc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d031      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_DMA_Abort_IT+0x3e0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d02c      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_DMA_Abort_IT+0x3e4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d027      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <HAL_DMA_Abort_IT+0x3e8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <HAL_DMA_Abort_IT+0x3ec>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01d      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_DMA_Abort_IT+0x3f0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <HAL_DMA_Abort_IT+0x3f4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <HAL_DMA_Abort_IT+0x3f8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <HAL_DMA_Abort_IT+0x3fc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <HAL_DMA_Abort_IT+0x400>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_DMA_Abort_IT+0x3a2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <HAL_DMA_Abort_IT+0x404>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d132      	bne.n	8005c34 <HAL_DMA_Abort_IT+0x408>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e031      	b.n	8005c36 <HAL_DMA_Abort_IT+0x40a>
 8005bd2:	bf00      	nop
 8005bd4:	40020010 	.word	0x40020010
 8005bd8:	40020028 	.word	0x40020028
 8005bdc:	40020040 	.word	0x40020040
 8005be0:	40020058 	.word	0x40020058
 8005be4:	40020070 	.word	0x40020070
 8005be8:	40020088 	.word	0x40020088
 8005bec:	400200a0 	.word	0x400200a0
 8005bf0:	400200b8 	.word	0x400200b8
 8005bf4:	40020410 	.word	0x40020410
 8005bf8:	40020428 	.word	0x40020428
 8005bfc:	40020440 	.word	0x40020440
 8005c00:	40020458 	.word	0x40020458
 8005c04:	40020470 	.word	0x40020470
 8005c08:	40020488 	.word	0x40020488
 8005c0c:	400204a0 	.word	0x400204a0
 8005c10:	400204b8 	.word	0x400204b8
 8005c14:	58025408 	.word	0x58025408
 8005c18:	5802541c 	.word	0x5802541c
 8005c1c:	58025430 	.word	0x58025430
 8005c20:	58025444 	.word	0x58025444
 8005c24:	58025458 	.word	0x58025458
 8005c28:	5802546c 	.word	0x5802546c
 8005c2c:	58025480 	.word	0x58025480
 8005c30:	58025494 	.word	0x58025494
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d028      	beq.n	8005c8c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2201      	movs	r2, #1
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00c      	beq.n	8005c8c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop

08005cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cc4:	4b67      	ldr	r3, [pc, #412]	; (8005e64 <HAL_DMA_IRQHandler+0x1ac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a67      	ldr	r2, [pc, #412]	; (8005e68 <HAL_DMA_IRQHandler+0x1b0>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	0a9b      	lsrs	r3, r3, #10
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5f      	ldr	r2, [pc, #380]	; (8005e6c <HAL_DMA_IRQHandler+0x1b4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_DMA_IRQHandler+0x1b8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a5c      	ldr	r2, [pc, #368]	; (8005e74 <HAL_DMA_IRQHandler+0x1bc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a5a      	ldr	r2, [pc, #360]	; (8005e78 <HAL_DMA_IRQHandler+0x1c0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a59      	ldr	r2, [pc, #356]	; (8005e7c <HAL_DMA_IRQHandler+0x1c4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a57      	ldr	r2, [pc, #348]	; (8005e80 <HAL_DMA_IRQHandler+0x1c8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a56      	ldr	r2, [pc, #344]	; (8005e84 <HAL_DMA_IRQHandler+0x1cc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <HAL_DMA_IRQHandler+0x1d0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a53      	ldr	r2, [pc, #332]	; (8005e8c <HAL_DMA_IRQHandler+0x1d4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a51      	ldr	r2, [pc, #324]	; (8005e90 <HAL_DMA_IRQHandler+0x1d8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a50      	ldr	r2, [pc, #320]	; (8005e94 <HAL_DMA_IRQHandler+0x1dc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4e      	ldr	r2, [pc, #312]	; (8005e98 <HAL_DMA_IRQHandler+0x1e0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4d      	ldr	r2, [pc, #308]	; (8005e9c <HAL_DMA_IRQHandler+0x1e4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a4b      	ldr	r2, [pc, #300]	; (8005ea0 <HAL_DMA_IRQHandler+0x1e8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a4a      	ldr	r2, [pc, #296]	; (8005ea4 <HAL_DMA_IRQHandler+0x1ec>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_IRQHandler+0xd2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a48      	ldr	r2, [pc, #288]	; (8005ea8 <HAL_DMA_IRQHandler+0x1f0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_IRQHandler+0xd6>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_DMA_IRQHandler+0xd8>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 842b 	beq.w	80065ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2208      	movs	r2, #8
 8005da0:	409a      	lsls	r2, r3
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a2 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2e      	ldr	r2, [pc, #184]	; (8005e6c <HAL_DMA_IRQHandler+0x1b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d04a      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2d      	ldr	r2, [pc, #180]	; (8005e70 <HAL_DMA_IRQHandler+0x1b8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d045      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2b      	ldr	r2, [pc, #172]	; (8005e74 <HAL_DMA_IRQHandler+0x1bc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d040      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <HAL_DMA_IRQHandler+0x1c0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d03b      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <HAL_DMA_IRQHandler+0x1c4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d036      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <HAL_DMA_IRQHandler+0x1c8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d031      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a25      	ldr	r2, [pc, #148]	; (8005e84 <HAL_DMA_IRQHandler+0x1cc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d02c      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <HAL_DMA_IRQHandler+0x1d0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d027      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <HAL_DMA_IRQHandler+0x1d4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d022      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <HAL_DMA_IRQHandler+0x1d8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d01d      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <HAL_DMA_IRQHandler+0x1dc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d018      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <HAL_DMA_IRQHandler+0x1e0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d013      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_DMA_IRQHandler+0x1e4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00e      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <HAL_DMA_IRQHandler+0x1e8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_DMA_IRQHandler+0x1ec>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x194>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_DMA_IRQHandler+0x1f0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d12f      	bne.n	8005eac <HAL_DMA_IRQHandler+0x1f4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bf14      	ite	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	2300      	moveq	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	e02e      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x208>
 8005e62:	bf00      	nop
 8005e64:	24000004 	.word	0x24000004
 8005e68:	1b4e81b5 	.word	0x1b4e81b5
 8005e6c:	40020010 	.word	0x40020010
 8005e70:	40020028 	.word	0x40020028
 8005e74:	40020040 	.word	0x40020040
 8005e78:	40020058 	.word	0x40020058
 8005e7c:	40020070 	.word	0x40020070
 8005e80:	40020088 	.word	0x40020088
 8005e84:	400200a0 	.word	0x400200a0
 8005e88:	400200b8 	.word	0x400200b8
 8005e8c:	40020410 	.word	0x40020410
 8005e90:	40020428 	.word	0x40020428
 8005e94:	40020440 	.word	0x40020440
 8005e98:	40020458 	.word	0x40020458
 8005e9c:	40020470 	.word	0x40020470
 8005ea0:	40020488 	.word	0x40020488
 8005ea4:	400204a0 	.word	0x400204a0
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bf14      	ite	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	2300      	moveq	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0204 	bic.w	r2, r2, #4
 8005ed2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	2208      	movs	r2, #8
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d06e      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a69      	ldr	r2, [pc, #420]	; (80060b0 <HAL_DMA_IRQHandler+0x3f8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d04a      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a67      	ldr	r2, [pc, #412]	; (80060b4 <HAL_DMA_IRQHandler+0x3fc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d045      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a66      	ldr	r2, [pc, #408]	; (80060b8 <HAL_DMA_IRQHandler+0x400>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d040      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a64      	ldr	r2, [pc, #400]	; (80060bc <HAL_DMA_IRQHandler+0x404>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d03b      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a63      	ldr	r2, [pc, #396]	; (80060c0 <HAL_DMA_IRQHandler+0x408>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d036      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a61      	ldr	r2, [pc, #388]	; (80060c4 <HAL_DMA_IRQHandler+0x40c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d031      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a60      	ldr	r2, [pc, #384]	; (80060c8 <HAL_DMA_IRQHandler+0x410>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d02c      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5e      	ldr	r2, [pc, #376]	; (80060cc <HAL_DMA_IRQHandler+0x414>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d027      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5d      	ldr	r2, [pc, #372]	; (80060d0 <HAL_DMA_IRQHandler+0x418>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d022      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5b      	ldr	r2, [pc, #364]	; (80060d4 <HAL_DMA_IRQHandler+0x41c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01d      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5a      	ldr	r2, [pc, #360]	; (80060d8 <HAL_DMA_IRQHandler+0x420>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d018      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a58      	ldr	r2, [pc, #352]	; (80060dc <HAL_DMA_IRQHandler+0x424>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <HAL_DMA_IRQHandler+0x428>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a55      	ldr	r2, [pc, #340]	; (80060e4 <HAL_DMA_IRQHandler+0x42c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_DMA_IRQHandler+0x430>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x2ee>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a52      	ldr	r2, [pc, #328]	; (80060ec <HAL_DMA_IRQHandler+0x434>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10a      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x304>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e003      	b.n	8005fc4 <HAL_DMA_IRQHandler+0x30c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f043 0202 	orr.w	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2204      	movs	r2, #4
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 808f 	beq.w	8006118 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2c      	ldr	r2, [pc, #176]	; (80060b0 <HAL_DMA_IRQHandler+0x3f8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d04a      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <HAL_DMA_IRQHandler+0x3fc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d045      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <HAL_DMA_IRQHandler+0x400>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d040      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a27      	ldr	r2, [pc, #156]	; (80060bc <HAL_DMA_IRQHandler+0x404>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <HAL_DMA_IRQHandler+0x408>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d036      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a24      	ldr	r2, [pc, #144]	; (80060c4 <HAL_DMA_IRQHandler+0x40c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d031      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <HAL_DMA_IRQHandler+0x410>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d02c      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a21      	ldr	r2, [pc, #132]	; (80060cc <HAL_DMA_IRQHandler+0x414>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d027      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <HAL_DMA_IRQHandler+0x418>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d022      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <HAL_DMA_IRQHandler+0x41c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1d      	ldr	r2, [pc, #116]	; (80060d8 <HAL_DMA_IRQHandler+0x420>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_DMA_IRQHandler+0x424>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <HAL_DMA_IRQHandler+0x428>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_DMA_IRQHandler+0x42c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <HAL_DMA_IRQHandler+0x430>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_DMA_IRQHandler+0x3e2>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a15      	ldr	r2, [pc, #84]	; (80060ec <HAL_DMA_IRQHandler+0x434>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d12a      	bne.n	80060f0 <HAL_DMA_IRQHandler+0x438>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e023      	b.n	80060f8 <HAL_DMA_IRQHandler+0x440>
 80060b0:	40020010 	.word	0x40020010
 80060b4:	40020028 	.word	0x40020028
 80060b8:	40020040 	.word	0x40020040
 80060bc:	40020058 	.word	0x40020058
 80060c0:	40020070 	.word	0x40020070
 80060c4:	40020088 	.word	0x40020088
 80060c8:	400200a0 	.word	0x400200a0
 80060cc:	400200b8 	.word	0x400200b8
 80060d0:	40020410 	.word	0x40020410
 80060d4:	40020428 	.word	0x40020428
 80060d8:	40020440 	.word	0x40020440
 80060dc:	40020458 	.word	0x40020458
 80060e0:	40020470 	.word	0x40020470
 80060e4:	40020488 	.word	0x40020488
 80060e8:	400204a0 	.word	0x400204a0
 80060ec:	400204b8 	.word	0x400204b8
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2204      	movs	r2, #4
 8006106:	409a      	lsls	r2, r3
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	f043 0204 	orr.w	r2, r3, #4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2210      	movs	r2, #16
 8006122:	409a      	lsls	r2, r3
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a6 	beq.w	800627a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a85      	ldr	r2, [pc, #532]	; (8006348 <HAL_DMA_IRQHandler+0x690>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d04a      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a83      	ldr	r2, [pc, #524]	; (800634c <HAL_DMA_IRQHandler+0x694>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d045      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a82      	ldr	r2, [pc, #520]	; (8006350 <HAL_DMA_IRQHandler+0x698>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d040      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a80      	ldr	r2, [pc, #512]	; (8006354 <HAL_DMA_IRQHandler+0x69c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d03b      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7f      	ldr	r2, [pc, #508]	; (8006358 <HAL_DMA_IRQHandler+0x6a0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d036      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a7d      	ldr	r2, [pc, #500]	; (800635c <HAL_DMA_IRQHandler+0x6a4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d031      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7c      	ldr	r2, [pc, #496]	; (8006360 <HAL_DMA_IRQHandler+0x6a8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d02c      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a7a      	ldr	r2, [pc, #488]	; (8006364 <HAL_DMA_IRQHandler+0x6ac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d027      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a79      	ldr	r2, [pc, #484]	; (8006368 <HAL_DMA_IRQHandler+0x6b0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a77      	ldr	r2, [pc, #476]	; (800636c <HAL_DMA_IRQHandler+0x6b4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01d      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a76      	ldr	r2, [pc, #472]	; (8006370 <HAL_DMA_IRQHandler+0x6b8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a74      	ldr	r2, [pc, #464]	; (8006374 <HAL_DMA_IRQHandler+0x6bc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a73      	ldr	r2, [pc, #460]	; (8006378 <HAL_DMA_IRQHandler+0x6c0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a71      	ldr	r2, [pc, #452]	; (800637c <HAL_DMA_IRQHandler+0x6c4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a70      	ldr	r2, [pc, #448]	; (8006380 <HAL_DMA_IRQHandler+0x6c8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_DMA_IRQHandler+0x516>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a6e      	ldr	r2, [pc, #440]	; (8006384 <HAL_DMA_IRQHandler+0x6cc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d10a      	bne.n	80061e4 <HAL_DMA_IRQHandler+0x52c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e009      	b.n	80061f8 <HAL_DMA_IRQHandler+0x540>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d03e      	beq.n	800627a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2210      	movs	r2, #16
 8006206:	409a      	lsls	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d024      	beq.n	800627a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	e01f      	b.n	800627a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01b      	beq.n	800627a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	e016      	b.n	800627a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0208 	bic.w	r2, r2, #8
 8006268:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2220      	movs	r2, #32
 8006284:	409a      	lsls	r2, r3
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8110 	beq.w	80064b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <HAL_DMA_IRQHandler+0x690>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d04a      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2b      	ldr	r2, [pc, #172]	; (800634c <HAL_DMA_IRQHandler+0x694>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d045      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a29      	ldr	r2, [pc, #164]	; (8006350 <HAL_DMA_IRQHandler+0x698>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d040      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a28      	ldr	r2, [pc, #160]	; (8006354 <HAL_DMA_IRQHandler+0x69c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d03b      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a26      	ldr	r2, [pc, #152]	; (8006358 <HAL_DMA_IRQHandler+0x6a0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d036      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a25      	ldr	r2, [pc, #148]	; (800635c <HAL_DMA_IRQHandler+0x6a4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d031      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a23      	ldr	r2, [pc, #140]	; (8006360 <HAL_DMA_IRQHandler+0x6a8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02c      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a22      	ldr	r2, [pc, #136]	; (8006364 <HAL_DMA_IRQHandler+0x6ac>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d027      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a20      	ldr	r2, [pc, #128]	; (8006368 <HAL_DMA_IRQHandler+0x6b0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d022      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_DMA_IRQHandler+0x6b4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d01d      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_DMA_IRQHandler+0x6b8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d018      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_DMA_IRQHandler+0x6bc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1a      	ldr	r2, [pc, #104]	; (8006378 <HAL_DMA_IRQHandler+0x6c0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_DMA_IRQHandler+0x6c4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d009      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <HAL_DMA_IRQHandler+0x6c8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_DMA_IRQHandler+0x678>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_DMA_IRQHandler+0x6cc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d12b      	bne.n	8006388 <HAL_DMA_IRQHandler+0x6d0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e02a      	b.n	800639c <HAL_DMA_IRQHandler+0x6e4>
 8006346:	bf00      	nop
 8006348:	40020010 	.word	0x40020010
 800634c:	40020028 	.word	0x40020028
 8006350:	40020040 	.word	0x40020040
 8006354:	40020058 	.word	0x40020058
 8006358:	40020070 	.word	0x40020070
 800635c:	40020088 	.word	0x40020088
 8006360:	400200a0 	.word	0x400200a0
 8006364:	400200b8 	.word	0x400200b8
 8006368:	40020410 	.word	0x40020410
 800636c:	40020428 	.word	0x40020428
 8006370:	40020440 	.word	0x40020440
 8006374:	40020458 	.word	0x40020458
 8006378:	40020470 	.word	0x40020470
 800637c:	40020488 	.word	0x40020488
 8006380:	400204a0 	.word	0x400204a0
 8006384:	400204b8 	.word	0x400204b8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8087 	beq.w	80064b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	2220      	movs	r2, #32
 80063ac:	409a      	lsls	r2, r3
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d139      	bne.n	8006432 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0216 	bic.w	r2, r2, #22
 80063cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <HAL_DMA_IRQHandler+0x736>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0208 	bic.w	r2, r2, #8
 80063fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	223f      	movs	r2, #63	; 0x3f
 8006408:	409a      	lsls	r2, r3
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 834a 	beq.w	8006abc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
          }
          return;
 8006430:	e344      	b.n	8006abc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d018      	beq.n	8006472 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	2b00      	cmp	r3, #0
 8006454:	d02c      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
 800645e:	e027      	b.n	80064b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d023      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
 8006470:	e01e      	b.n	80064b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0210 	bic.w	r2, r2, #16
 800648e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8306 	beq.w	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8088 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a7a      	ldr	r2, [pc, #488]	; (80066c0 <HAL_DMA_IRQHandler+0xa08>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a79      	ldr	r2, [pc, #484]	; (80066c4 <HAL_DMA_IRQHandler+0xa0c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <HAL_DMA_IRQHandler+0xa10>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a76      	ldr	r2, [pc, #472]	; (80066cc <HAL_DMA_IRQHandler+0xa14>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a74      	ldr	r2, [pc, #464]	; (80066d0 <HAL_DMA_IRQHandler+0xa18>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a73      	ldr	r2, [pc, #460]	; (80066d4 <HAL_DMA_IRQHandler+0xa1c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a71      	ldr	r2, [pc, #452]	; (80066d8 <HAL_DMA_IRQHandler+0xa20>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a70      	ldr	r2, [pc, #448]	; (80066dc <HAL_DMA_IRQHandler+0xa24>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a6e      	ldr	r2, [pc, #440]	; (80066e0 <HAL_DMA_IRQHandler+0xa28>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a6d      	ldr	r2, [pc, #436]	; (80066e4 <HAL_DMA_IRQHandler+0xa2c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a6b      	ldr	r2, [pc, #428]	; (80066e8 <HAL_DMA_IRQHandler+0xa30>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a6a      	ldr	r2, [pc, #424]	; (80066ec <HAL_DMA_IRQHandler+0xa34>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a68      	ldr	r2, [pc, #416]	; (80066f0 <HAL_DMA_IRQHandler+0xa38>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a67      	ldr	r2, [pc, #412]	; (80066f4 <HAL_DMA_IRQHandler+0xa3c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a65      	ldr	r2, [pc, #404]	; (80066f8 <HAL_DMA_IRQHandler+0xa40>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_IRQHandler+0x8b8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a64      	ldr	r2, [pc, #400]	; (80066fc <HAL_DMA_IRQHandler+0xa44>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d108      	bne.n	8006582 <HAL_DMA_IRQHandler+0x8ca>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e007      	b.n	8006592 <HAL_DMA_IRQHandler+0x8da>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	429a      	cmp	r2, r3
 800659c:	d307      	bcc.n	80065ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f2      	bne.n	8006592 <HAL_DMA_IRQHandler+0x8da>
 80065ac:	e000      	b.n	80065b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80065ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2203      	movs	r2, #3
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80065c6:	e003      	b.n	80065d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8272 	beq.w	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
 80065ea:	e26c      	b.n	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a43      	ldr	r2, [pc, #268]	; (8006700 <HAL_DMA_IRQHandler+0xa48>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a42      	ldr	r2, [pc, #264]	; (8006704 <HAL_DMA_IRQHandler+0xa4c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01d      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a40      	ldr	r2, [pc, #256]	; (8006708 <HAL_DMA_IRQHandler+0xa50>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3f      	ldr	r2, [pc, #252]	; (800670c <HAL_DMA_IRQHandler+0xa54>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3d      	ldr	r2, [pc, #244]	; (8006710 <HAL_DMA_IRQHandler+0xa58>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3c      	ldr	r2, [pc, #240]	; (8006714 <HAL_DMA_IRQHandler+0xa5c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a3a      	ldr	r2, [pc, #232]	; (8006718 <HAL_DMA_IRQHandler+0xa60>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_DMA_IRQHandler+0x984>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a39      	ldr	r2, [pc, #228]	; (800671c <HAL_DMA_IRQHandler+0xa64>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d101      	bne.n	8006640 <HAL_DMA_IRQHandler+0x988>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <HAL_DMA_IRQHandler+0x98a>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 823f 	beq.w	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2204      	movs	r2, #4
 800665a:	409a      	lsls	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80cd 	beq.w	8006800 <HAL_DMA_IRQHandler+0xb48>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80c7 	beq.w	8006800 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2204      	movs	r2, #4
 800667c:	409a      	lsls	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d049      	beq.n	8006720 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8210 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066a8:	e20a      	b.n	8006ac0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8206 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066bc:	e200      	b.n	8006ac0 <HAL_DMA_IRQHandler+0xe08>
 80066be:	bf00      	nop
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
 8006700:	58025408 	.word	0x58025408
 8006704:	5802541c 	.word	0x5802541c
 8006708:	58025430 	.word	0x58025430
 800670c:	58025444 	.word	0x58025444
 8006710:	58025458 	.word	0x58025458
 8006714:	5802546c 	.word	0x5802546c
 8006718:	58025480 	.word	0x58025480
 800671c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d160      	bne.n	80067ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a7f      	ldr	r2, [pc, #508]	; (800692c <HAL_DMA_IRQHandler+0xc74>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d04a      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a7d      	ldr	r2, [pc, #500]	; (8006930 <HAL_DMA_IRQHandler+0xc78>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d045      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7c      	ldr	r2, [pc, #496]	; (8006934 <HAL_DMA_IRQHandler+0xc7c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d040      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a7a      	ldr	r2, [pc, #488]	; (8006938 <HAL_DMA_IRQHandler+0xc80>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d03b      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a79      	ldr	r2, [pc, #484]	; (800693c <HAL_DMA_IRQHandler+0xc84>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d036      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a77      	ldr	r2, [pc, #476]	; (8006940 <HAL_DMA_IRQHandler+0xc88>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d031      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a76      	ldr	r2, [pc, #472]	; (8006944 <HAL_DMA_IRQHandler+0xc8c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d02c      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a74      	ldr	r2, [pc, #464]	; (8006948 <HAL_DMA_IRQHandler+0xc90>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d027      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a73      	ldr	r2, [pc, #460]	; (800694c <HAL_DMA_IRQHandler+0xc94>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d022      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a71      	ldr	r2, [pc, #452]	; (8006950 <HAL_DMA_IRQHandler+0xc98>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01d      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a70      	ldr	r2, [pc, #448]	; (8006954 <HAL_DMA_IRQHandler+0xc9c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d018      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a6e      	ldr	r2, [pc, #440]	; (8006958 <HAL_DMA_IRQHandler+0xca0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a6d      	ldr	r2, [pc, #436]	; (800695c <HAL_DMA_IRQHandler+0xca4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00e      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6b      	ldr	r2, [pc, #428]	; (8006960 <HAL_DMA_IRQHandler+0xca8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6a      	ldr	r2, [pc, #424]	; (8006964 <HAL_DMA_IRQHandler+0xcac>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d004      	beq.n	80067ca <HAL_DMA_IRQHandler+0xb12>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_DMA_IRQHandler+0xcb0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d108      	bne.n	80067dc <HAL_DMA_IRQHandler+0xb24>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0208 	bic.w	r2, r2, #8
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e007      	b.n	80067ec <HAL_DMA_IRQHandler+0xb34>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0204 	bic.w	r2, r2, #4
 80067ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8165 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067fe:	e15f      	b.n	8006ac0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2202      	movs	r2, #2
 800680a:	409a      	lsls	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80c5 	beq.w	80069a0 <HAL_DMA_IRQHandler+0xce8>
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80bf 	beq.w	80069a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2202      	movs	r2, #2
 800682c:	409a      	lsls	r2, r3
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d018      	beq.n	800686e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 813a 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006858:	e134      	b.n	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8130 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800686c:	e12a      	b.n	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 8089 	bne.w	800698c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2b      	ldr	r2, [pc, #172]	; (800692c <HAL_DMA_IRQHandler+0xc74>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d04a      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a29      	ldr	r2, [pc, #164]	; (8006930 <HAL_DMA_IRQHandler+0xc78>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d045      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a28      	ldr	r2, [pc, #160]	; (8006934 <HAL_DMA_IRQHandler+0xc7c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d040      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a26      	ldr	r2, [pc, #152]	; (8006938 <HAL_DMA_IRQHandler+0xc80>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d03b      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a25      	ldr	r2, [pc, #148]	; (800693c <HAL_DMA_IRQHandler+0xc84>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d036      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a23      	ldr	r2, [pc, #140]	; (8006940 <HAL_DMA_IRQHandler+0xc88>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d031      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <HAL_DMA_IRQHandler+0xc8c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d02c      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a20      	ldr	r2, [pc, #128]	; (8006948 <HAL_DMA_IRQHandler+0xc90>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d027      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1f      	ldr	r2, [pc, #124]	; (800694c <HAL_DMA_IRQHandler+0xc94>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d022      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <HAL_DMA_IRQHandler+0xc98>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01d      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <HAL_DMA_IRQHandler+0xc9c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d018      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <HAL_DMA_IRQHandler+0xca0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a19      	ldr	r2, [pc, #100]	; (800695c <HAL_DMA_IRQHandler+0xca4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a17      	ldr	r2, [pc, #92]	; (8006960 <HAL_DMA_IRQHandler+0xca8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a16      	ldr	r2, [pc, #88]	; (8006964 <HAL_DMA_IRQHandler+0xcac>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_DMA_IRQHandler+0xc62>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <HAL_DMA_IRQHandler+0xcb0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d128      	bne.n	800696c <HAL_DMA_IRQHandler+0xcb4>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0214 	bic.w	r2, r2, #20
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e027      	b.n	800697c <HAL_DMA_IRQHandler+0xcc4>
 800692c:	40020010 	.word	0x40020010
 8006930:	40020028 	.word	0x40020028
 8006934:	40020040 	.word	0x40020040
 8006938:	40020058 	.word	0x40020058
 800693c:	40020070 	.word	0x40020070
 8006940:	40020088 	.word	0x40020088
 8006944:	400200a0 	.word	0x400200a0
 8006948:	400200b8 	.word	0x400200b8
 800694c:	40020410 	.word	0x40020410
 8006950:	40020428 	.word	0x40020428
 8006954:	40020440 	.word	0x40020440
 8006958:	40020458 	.word	0x40020458
 800695c:	40020470 	.word	0x40020470
 8006960:	40020488 	.word	0x40020488
 8006964:	400204a0 	.word	0x400204a0
 8006968:	400204b8 	.word	0x400204b8
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 020a 	bic.w	r2, r2, #10
 800697a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8097 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800699e:	e091      	b.n	8006ac4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2208      	movs	r2, #8
 80069aa:	409a      	lsls	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8088 	beq.w	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8082 	beq.w	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a41      	ldr	r2, [pc, #260]	; (8006acc <HAL_DMA_IRQHandler+0xe14>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d04a      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a3f      	ldr	r2, [pc, #252]	; (8006ad0 <HAL_DMA_IRQHandler+0xe18>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d045      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3e      	ldr	r2, [pc, #248]	; (8006ad4 <HAL_DMA_IRQHandler+0xe1c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d040      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a3c      	ldr	r2, [pc, #240]	; (8006ad8 <HAL_DMA_IRQHandler+0xe20>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d03b      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a3b      	ldr	r2, [pc, #236]	; (8006adc <HAL_DMA_IRQHandler+0xe24>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d036      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a39      	ldr	r2, [pc, #228]	; (8006ae0 <HAL_DMA_IRQHandler+0xe28>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d031      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a38      	ldr	r2, [pc, #224]	; (8006ae4 <HAL_DMA_IRQHandler+0xe2c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d02c      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a36      	ldr	r2, [pc, #216]	; (8006ae8 <HAL_DMA_IRQHandler+0xe30>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d027      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a35      	ldr	r2, [pc, #212]	; (8006aec <HAL_DMA_IRQHandler+0xe34>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a33      	ldr	r2, [pc, #204]	; (8006af0 <HAL_DMA_IRQHandler+0xe38>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <HAL_DMA_IRQHandler+0xe3c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a30      	ldr	r2, [pc, #192]	; (8006af8 <HAL_DMA_IRQHandler+0xe40>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <HAL_DMA_IRQHandler+0xe44>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <HAL_DMA_IRQHandler+0xe48>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_DMA_IRQHandler+0xe4c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xdaa>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a2a      	ldr	r2, [pc, #168]	; (8006b08 <HAL_DMA_IRQHandler+0xe50>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d108      	bne.n	8006a74 <HAL_DMA_IRQHandler+0xdbc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 021c 	bic.w	r2, r2, #28
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e007      	b.n	8006a84 <HAL_DMA_IRQHandler+0xdcc>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 020e 	bic.w	r2, r2, #14
 8006a82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	e004      	b.n	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ac6:	3728      	adds	r7, #40	; 0x28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40020010 	.word	0x40020010
 8006ad0:	40020028 	.word	0x40020028
 8006ad4:	40020040 	.word	0x40020040
 8006ad8:	40020058 	.word	0x40020058
 8006adc:	40020070 	.word	0x40020070
 8006ae0:	40020088 	.word	0x40020088
 8006ae4:	400200a0 	.word	0x400200a0
 8006ae8:	400200b8 	.word	0x400200b8
 8006aec:	40020410 	.word	0x40020410
 8006af0:	40020428 	.word	0x40020428
 8006af4:	40020440 	.word	0x40020440
 8006af8:	40020458 	.word	0x40020458
 8006afc:	40020470 	.word	0x40020470
 8006b00:	40020488 	.word	0x40020488
 8006b04:	400204a0 	.word	0x400204a0
 8006b08:	400204b8 	.word	0x400204b8

08006b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a42      	ldr	r2, [pc, #264]	; (8006c24 <DMA_CalcBaseAndBitshift+0x118>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d04a      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <DMA_CalcBaseAndBitshift+0x11c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d045      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a3f      	ldr	r2, [pc, #252]	; (8006c2c <DMA_CalcBaseAndBitshift+0x120>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d040      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a3e      	ldr	r2, [pc, #248]	; (8006c30 <DMA_CalcBaseAndBitshift+0x124>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d03b      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <DMA_CalcBaseAndBitshift+0x128>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d036      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <DMA_CalcBaseAndBitshift+0x12c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d031      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <DMA_CalcBaseAndBitshift+0x130>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d02c      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a38      	ldr	r2, [pc, #224]	; (8006c40 <DMA_CalcBaseAndBitshift+0x134>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d027      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a36      	ldr	r2, [pc, #216]	; (8006c44 <DMA_CalcBaseAndBitshift+0x138>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d022      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a35      	ldr	r2, [pc, #212]	; (8006c48 <DMA_CalcBaseAndBitshift+0x13c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d01d      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a33      	ldr	r2, [pc, #204]	; (8006c4c <DMA_CalcBaseAndBitshift+0x140>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d018      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a32      	ldr	r2, [pc, #200]	; (8006c50 <DMA_CalcBaseAndBitshift+0x144>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a30      	ldr	r2, [pc, #192]	; (8006c54 <DMA_CalcBaseAndBitshift+0x148>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2f      	ldr	r2, [pc, #188]	; (8006c58 <DMA_CalcBaseAndBitshift+0x14c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2d      	ldr	r2, [pc, #180]	; (8006c5c <DMA_CalcBaseAndBitshift+0x150>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <DMA_CalcBaseAndBitshift+0xa8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <DMA_CalcBaseAndBitshift+0x154>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <DMA_CalcBaseAndBitshift+0xac>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <DMA_CalcBaseAndBitshift+0xae>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d024      	beq.n	8006c08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	3b10      	subs	r3, #16
 8006bc6:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <DMA_CalcBaseAndBitshift+0x158>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	4a24      	ldr	r2, [pc, #144]	; (8006c68 <DMA_CalcBaseAndBitshift+0x15c>)
 8006bd8:	5cd3      	ldrb	r3, [r2, r3]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d908      	bls.n	8006bf8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <DMA_CalcBaseAndBitshift+0x160>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	1d1a      	adds	r2, r3, #4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	659a      	str	r2, [r3, #88]	; 0x58
 8006bf6:	e00d      	b.n	8006c14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <DMA_CalcBaseAndBitshift+0x160>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6593      	str	r3, [r2, #88]	; 0x58
 8006c06:	e005      	b.n	8006c14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40020010 	.word	0x40020010
 8006c28:	40020028 	.word	0x40020028
 8006c2c:	40020040 	.word	0x40020040
 8006c30:	40020058 	.word	0x40020058
 8006c34:	40020070 	.word	0x40020070
 8006c38:	40020088 	.word	0x40020088
 8006c3c:	400200a0 	.word	0x400200a0
 8006c40:	400200b8 	.word	0x400200b8
 8006c44:	40020410 	.word	0x40020410
 8006c48:	40020428 	.word	0x40020428
 8006c4c:	40020440 	.word	0x40020440
 8006c50:	40020458 	.word	0x40020458
 8006c54:	40020470 	.word	0x40020470
 8006c58:	40020488 	.word	0x40020488
 8006c5c:	400204a0 	.word	0x400204a0
 8006c60:	400204b8 	.word	0x400204b8
 8006c64:	aaaaaaab 	.word	0xaaaaaaab
 8006c68:	0800f558 	.word	0x0800f558
 8006c6c:	fffffc00 	.word	0xfffffc00

08006c70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d120      	bne.n	8006cc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d858      	bhi.n	8006d3e <DMA_CheckFifoParam+0xce>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <DMA_CheckFifoParam+0x24>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cb7 	.word	0x08006cb7
 8006c9c:	08006ca5 	.word	0x08006ca5
 8006ca0:	08006d3f 	.word	0x08006d3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d048      	beq.n	8006d42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cb4:	e045      	b.n	8006d42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cbe:	d142      	bne.n	8006d46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cc4:	e03f      	b.n	8006d46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cce:	d123      	bne.n	8006d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d838      	bhi.n	8006d4a <DMA_CheckFifoParam+0xda>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <DMA_CheckFifoParam+0x70>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006cf1 	.word	0x08006cf1
 8006ce4:	08006cf7 	.word	0x08006cf7
 8006ce8:	08006cf1 	.word	0x08006cf1
 8006cec:	08006d09 	.word	0x08006d09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
        break;
 8006cf4:	e030      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d025      	beq.n	8006d4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d06:	e022      	b.n	8006d4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d10:	d11f      	bne.n	8006d52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d16:	e01c      	b.n	8006d52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d902      	bls.n	8006d26 <DMA_CheckFifoParam+0xb6>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d003      	beq.n	8006d2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d24:	e018      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
        break;
 8006d2a:	e015      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3c:	e00b      	b.n	8006d56 <DMA_CheckFifoParam+0xe6>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e00a      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        break;
 8006d42:	bf00      	nop
 8006d44:	e008      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        break;
 8006d46:	bf00      	nop
 8006d48:	e006      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e004      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        break;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
        break;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <DMA_CheckFifoParam+0xe8>
    break;
 8006d56:	bf00      	nop
    }
  }

  return status;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a38      	ldr	r2, [pc, #224]	; (8006e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d022      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a36      	ldr	r2, [pc, #216]	; (8006e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d01d      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d018      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a33      	ldr	r2, [pc, #204]	; (8006e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a32      	ldr	r2, [pc, #200]	; (8006e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d009      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d004      	beq.n	8006dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01a      	beq.n	8006e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	3b08      	subs	r3, #8
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	091b      	lsrs	r3, r3, #4
 8006de0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4b26      	ldr	r3, [pc, #152]	; (8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a24      	ldr	r2, [pc, #144]	; (8006e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e04:	e024      	b.n	8006e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	3b10      	subs	r3, #16
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e10:	fba2 2303 	umull	r2, r3, r2, r3
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a1c      	ldr	r2, [pc, #112]	; (8006e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d806      	bhi.n	8006e2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d902      	bls.n	8006e2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2201      	movs	r2, #1
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	58025408 	.word	0x58025408
 8006e60:	5802541c 	.word	0x5802541c
 8006e64:	58025430 	.word	0x58025430
 8006e68:	58025444 	.word	0x58025444
 8006e6c:	58025458 	.word	0x58025458
 8006e70:	5802546c 	.word	0x5802546c
 8006e74:	58025480 	.word	0x58025480
 8006e78:	58025494 	.word	0x58025494
 8006e7c:	cccccccd 	.word	0xcccccccd
 8006e80:	16009600 	.word	0x16009600
 8006e84:	58025880 	.word	0x58025880
 8006e88:	aaaaaaab 	.word	0xaaaaaaab
 8006e8c:	400204b8 	.word	0x400204b8
 8006e90:	4002040f 	.word	0x4002040f
 8006e94:	10008200 	.word	0x10008200
 8006e98:	40020880 	.word	0x40020880

08006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d04a      	beq.n	8006f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d847      	bhi.n	8006f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a25      	ldr	r2, [pc, #148]	; (8006f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d022      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a24      	ldr	r2, [pc, #144]	; (8006f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d01d      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a21      	ldr	r2, [pc, #132]	; (8006f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1c      	ldr	r2, [pc, #112]	; (8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d101      	bne.n	8006f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f24:	671a      	str	r2, [r3, #112]	; 0x70
 8006f26:	e009      	b.n	8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a11      	ldr	r2, [pc, #68]	; (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f3a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2201      	movs	r2, #1
 8006f42:	409a      	lsls	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	58025408 	.word	0x58025408
 8006f58:	5802541c 	.word	0x5802541c
 8006f5c:	58025430 	.word	0x58025430
 8006f60:	58025444 	.word	0x58025444
 8006f64:	58025458 	.word	0x58025458
 8006f68:	5802546c 	.word	0x5802546c
 8006f6c:	58025480 	.word	0x58025480
 8006f70:	58025494 	.word	0x58025494
 8006f74:	1600963f 	.word	0x1600963f
 8006f78:	58025940 	.word	0x58025940
 8006f7c:	1000823f 	.word	0x1000823f
 8006f80:	40020940 	.word	0x40020940

08006f84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0cf      	b.n	8007136 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2223      	movs	r2, #35	; 0x23
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fd f89f 	bl	80040ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fae:	4b64      	ldr	r3, [pc, #400]	; (8007140 <HAL_ETH_Init+0x1bc>)
 8006fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fb4:	4a62      	ldr	r2, [pc, #392]	; (8007140 <HAL_ETH_Init+0x1bc>)
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006fbe:	4b60      	ldr	r3, [pc, #384]	; (8007140 <HAL_ETH_Init+0x1bc>)
 8006fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7a1b      	ldrb	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7fd fc8b 	bl	80048f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8006fda:	e003      	b.n	8006fe4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006fdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006fe0:	f7fd fc86 	bl	80048f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006fe4:	4b57      	ldr	r3, [pc, #348]	; (8007144 <HAL_ETH_Init+0x1c0>)
 8006fe6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007000:	f7fd fc3a 	bl	8004878 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007006:	e011      	b.n	800702c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007008:	f7fd fc36 	bl	8004878 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007016:	d909      	bls.n	800702c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2204      	movs	r2, #4
 800701c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	22e0      	movs	r2, #224	; 0xe0
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e084      	b.n	8007136 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e4      	bne.n	8007008 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f886 	bl	8007150 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007044:	f001 fefc 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8007048:	4603      	mov	r3, r0
 800704a:	4a3f      	ldr	r2, [pc, #252]	; (8007148 <HAL_ETH_Init+0x1c4>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	0c9a      	lsrs	r2, r3, #18
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3a01      	subs	r2, #1
 8007058:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa71 	bl	8007544 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800706a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800706e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800707a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800707e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	22e0      	movs	r2, #224	; 0xe0
 800709a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e049      	b.n	8007136 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80070ae:	4b27      	ldr	r3, [pc, #156]	; (800714c <HAL_ETH_Init+0x1c8>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6952      	ldr	r2, [r2, #20]
 80070b6:	0051      	lsls	r1, r2, #1
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fad9 	bl	800767e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb1f 	bl	8007710 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	3305      	adds	r3, #5
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	021a      	lsls	r2, r3, #8
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	3303      	adds	r3, #3
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	061a      	lsls	r2, r3, #24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	3302      	adds	r3, #2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	3301      	adds	r3, #1
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007110:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800711e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007120:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2210      	movs	r2, #16
 8007130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400
 8007144:	58000400 	.word	0x58000400
 8007148:	431bde83 	.word	0x431bde83
 800714c:	ffff8001 	.word	0xffff8001

08007150 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007160:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007168:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800716a:	f001 fe69 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 800716e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d908      	bls.n	800718a <HAL_ETH_SetMDIOClockRange+0x3a>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d804      	bhi.n	800718a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	e027      	b.n	80071da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d908      	bls.n	80071a4 <HAL_ETH_SetMDIOClockRange+0x54>
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d204      	bcs.n	80071a4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e01a      	b.n	80071da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d303      	bcc.n	80071b4 <HAL_ETH_SetMDIOClockRange+0x64>
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d911      	bls.n	80071d8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4a10      	ldr	r2, [pc, #64]	; (80071f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d908      	bls.n	80071ce <HAL_ETH_SetMDIOClockRange+0x7e>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4a0f      	ldr	r2, [pc, #60]	; (80071fc <HAL_ETH_SetMDIOClockRange+0xac>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d804      	bhi.n	80071ce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e005      	b.n	80071da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e000      	b.n	80071da <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80071d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	01312cff 	.word	0x01312cff
 80071f0:	02160ebf 	.word	0x02160ebf
 80071f4:	03938700 	.word	0x03938700
 80071f8:	05f5e0ff 	.word	0x05f5e0ff
 80071fc:	08f0d17f 	.word	0x08f0d17f

08007200 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007212:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800721a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	7b1b      	ldrb	r3, [r3, #12]
 8007220:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b5b      	ldrb	r3, [r3, #13]
 8007228:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800722a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	7b9b      	ldrb	r3, [r3, #14]
 8007230:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	7bdb      	ldrb	r3, [r3, #15]
 8007238:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800723a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	7c12      	ldrb	r2, [r2, #16]
 8007240:	2a00      	cmp	r2, #0
 8007242:	d102      	bne.n	800724a <ETH_SetMACConfig+0x4a>
 8007244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007248:	e000      	b.n	800724c <ETH_SetMACConfig+0x4c>
 800724a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800724c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	7c52      	ldrb	r2, [r2, #17]
 8007252:	2a00      	cmp	r2, #0
 8007254:	d102      	bne.n	800725c <ETH_SetMACConfig+0x5c>
 8007256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800725a:	e000      	b.n	800725e <ETH_SetMACConfig+0x5e>
 800725c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800725e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	7c9b      	ldrb	r3, [r3, #18]
 8007264:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007266:	431a      	orrs	r2, r3
               macconf->Speed |
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800726c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007272:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	7f1b      	ldrb	r3, [r3, #28]
 8007278:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800727a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	7f5b      	ldrb	r3, [r3, #29]
 8007280:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007282:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	7f92      	ldrb	r2, [r2, #30]
 8007288:	2a00      	cmp	r2, #0
 800728a:	d102      	bne.n	8007292 <ETH_SetMACConfig+0x92>
 800728c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007290:	e000      	b.n	8007294 <ETH_SetMACConfig+0x94>
 8007292:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007294:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	7fdb      	ldrb	r3, [r3, #31]
 800729a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800729c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	d102      	bne.n	80072ae <ETH_SetMACConfig+0xae>
 80072a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ac:	e000      	b.n	80072b0 <ETH_SetMACConfig+0xb0>
 80072ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80072b0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80072b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072be:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80072c0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4b56      	ldr	r3, [pc, #344]	; (800742c <ETH_SetMACConfig+0x22c>)
 80072d2:	4013      	ands	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	430b      	orrs	r3, r1
 80072dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80072ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80072ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80072f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072fe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007300:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007308:	2a00      	cmp	r2, #0
 800730a:	d102      	bne.n	8007312 <ETH_SetMACConfig+0x112>
 800730c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007310:	e000      	b.n	8007314 <ETH_SetMACConfig+0x114>
 8007312:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007314:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	4b42      	ldr	r3, [pc, #264]	; (8007430 <ETH_SetMACConfig+0x230>)
 8007326:	4013      	ands	r3, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	430b      	orrs	r3, r1
 8007330:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007338:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	4b3a      	ldr	r3, [pc, #232]	; (8007434 <ETH_SetMACConfig+0x234>)
 800734a:	4013      	ands	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	430b      	orrs	r3, r1
 8007354:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800735c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007362:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800736a:	2a00      	cmp	r2, #0
 800736c:	d101      	bne.n	8007372 <ETH_SetMACConfig+0x172>
 800736e:	2280      	movs	r2, #128	; 0x80
 8007370:	e000      	b.n	8007374 <ETH_SetMACConfig+0x174>
 8007372:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007374:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007386:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800738a:	4013      	ands	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	430b      	orrs	r3, r1
 8007394:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800739c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80073a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f023 0103 	bic.w	r1, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	430a      	orrs	r2, r1
 80073be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80073ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d101      	bne.n	80073ee <ETH_SetMACConfig+0x1ee>
 80073ea:	2240      	movs	r2, #64	; 0x40
 80073ec:	e000      	b.n	80073f0 <ETH_SetMACConfig+0x1f0>
 80073ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80073f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80073fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007402:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007410:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	430a      	orrs	r2, r1
 800741c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	00048083 	.word	0x00048083
 8007430:	c0f88000 	.word	0xc0f88000
 8007434:	fffffef0 	.word	0xfffffef0

08007438 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	4b38      	ldr	r3, [pc, #224]	; (8007530 <ETH_SetDMAConfig+0xf8>)
 800744e:	4013      	ands	r3, r2
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	6811      	ldr	r1, [r2, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	430b      	orrs	r3, r1
 800745a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800745e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	791b      	ldrb	r3, [r3, #4]
 8007464:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800746a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	7b1b      	ldrb	r3, [r3, #12]
 8007470:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <ETH_SetDMAConfig+0xfc>)
 8007482:	4013      	ands	r3, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	68f9      	ldr	r1, [r7, #12]
 800748a:	430b      	orrs	r3, r1
 800748c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007490:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	7b5b      	ldrb	r3, [r3, #13]
 8007496:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80074ac:	4b22      	ldr	r3, [pc, #136]	; (8007538 <ETH_SetDMAConfig+0x100>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	68f9      	ldr	r1, [r7, #12]
 80074b6:	430b      	orrs	r3, r1
 80074b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	7d1b      	ldrb	r3, [r3, #20]
 80074c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80074ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	7f5b      	ldrb	r3, [r3, #29]
 80074d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80074e2:	4b16      	ldr	r3, [pc, #88]	; (800753c <ETH_SetDMAConfig+0x104>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	430b      	orrs	r3, r1
 80074ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	7f1b      	ldrb	r3, [r3, #28]
 80074fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <ETH_SetDMAConfig+0x108>)
 8007512:	4013      	ands	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	430b      	orrs	r3, r1
 800751c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007520:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	ffff87fd 	.word	0xffff87fd
 8007534:	ffff2ffe 	.word	0xffff2ffe
 8007538:	fffec000 	.word	0xfffec000
 800753c:	ffc0efef 	.word	0xffc0efef
 8007540:	7fc0ffff 	.word	0x7fc0ffff

08007544 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b0a4      	sub	sp, #144	; 0x90
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007552:	2300      	movs	r3, #0
 8007554:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007556:	2300      	movs	r3, #0
 8007558:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800755c:	2300      	movs	r3, #0
 800755e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800757a:	2301      	movs	r3, #1
 800757c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007584:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800758c:	2300      	movs	r3, #0
 800758e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007590:	2300      	movs	r3, #0
 8007592:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007596:	2300      	movs	r3, #0
 8007598:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800759c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80075a0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80075a8:	2300      	movs	r3, #0
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80075be:	2300      	movs	r3, #0
 80075c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80075c6:	2300      	movs	r3, #0
 80075c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80075dc:	2320      	movs	r3, #32
 80075de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80075ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80075f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075f8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007600:	2302      	movs	r3, #2
 8007602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007606:	2300      	movs	r3, #0
 8007608:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800761e:	2300      	movs	r3, #0
 8007620:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fde6 	bl	8007200 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007634:	2301      	movs	r3, #1
 8007636:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007638:	2301      	movs	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800763c:	2300      	movs	r3, #0
 800763e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007640:	2300      	movs	r3, #0
 8007642:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007646:	2300      	movs	r3, #0
 8007648:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800764a:	2300      	movs	r3, #0
 800764c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800764e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007652:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007654:	2300      	movs	r3, #0
 8007656:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800765c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800765e:	2300      	movs	r3, #0
 8007660:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007664:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fee1 	bl	8007438 <ETH_SetDMAConfig>
}
 8007676:	bf00      	nop
 8007678:	3790      	adds	r7, #144	; 0x90
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e01d      	b.n	80076c8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68d9      	ldr	r1, [r3, #12]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	440b      	add	r3, r1
 800769c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80076b6:	68b9      	ldr	r1, [r7, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	3206      	adds	r2, #6
 80076be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d9de      	bls.n	800768c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076dc:	461a      	mov	r2, r3
 80076de:	2303      	movs	r3, #3
 80076e0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007700:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e023      	b.n	8007766 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6919      	ldr	r1, [r3, #16]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	440b      	add	r3, r1
 800772e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2200      	movs	r2, #0
 8007752:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	3212      	adds	r2, #18
 800775c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3301      	adds	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d9d8      	bls.n	800771e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	461a      	mov	r2, r3
 8007794:	2303      	movs	r3, #3
 8007796:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80077da:	4b89      	ldr	r3, [pc, #548]	; (8007a00 <HAL_GPIO_Init+0x234>)
 80077dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077de:	e194      	b.n	8007b0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	2101      	movs	r1, #1
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	4013      	ands	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8186 	beq.w	8007b04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d005      	beq.n	8007810 <HAL_GPIO_Init+0x44>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d130      	bne.n	8007872 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	2203      	movs	r2, #3
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	4313      	orrs	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007846:	2201      	movs	r2, #1
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	43db      	mvns	r3, r3
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	4013      	ands	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	f003 0201 	and.w	r2, r3, #1
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4313      	orrs	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d017      	beq.n	80078ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	2203      	movs	r2, #3
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	4013      	ands	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d123      	bne.n	8007902 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	08da      	lsrs	r2, r3, #3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3208      	adds	r2, #8
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	220f      	movs	r2, #15
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	43db      	mvns	r3, r3
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	4013      	ands	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	08da      	lsrs	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3208      	adds	r2, #8
 80078fc:	69b9      	ldr	r1, [r7, #24]
 80078fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	2203      	movs	r2, #3
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0203 	and.w	r2, r3, #3
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	4313      	orrs	r3, r2
 800792e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80e0 	beq.w	8007b04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007944:	4b2f      	ldr	r3, [pc, #188]	; (8007a04 <HAL_GPIO_Init+0x238>)
 8007946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800794a:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <HAL_GPIO_Init+0x238>)
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007954:	4b2b      	ldr	r3, [pc, #172]	; (8007a04 <HAL_GPIO_Init+0x238>)
 8007956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007962:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <HAL_GPIO_Init+0x23c>)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	089b      	lsrs	r3, r3, #2
 8007968:	3302      	adds	r3, #2
 800796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0303 	and.w	r3, r3, #3
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	220f      	movs	r2, #15
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43db      	mvns	r3, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4013      	ands	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <HAL_GPIO_Init+0x240>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d052      	beq.n	8007a34 <HAL_GPIO_Init+0x268>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <HAL_GPIO_Init+0x244>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d031      	beq.n	80079fa <HAL_GPIO_Init+0x22e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <HAL_GPIO_Init+0x248>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d02b      	beq.n	80079f6 <HAL_GPIO_Init+0x22a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_GPIO_Init+0x24c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d025      	beq.n	80079f2 <HAL_GPIO_Init+0x226>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_GPIO_Init+0x250>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01f      	beq.n	80079ee <HAL_GPIO_Init+0x222>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <HAL_GPIO_Init+0x254>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d019      	beq.n	80079ea <HAL_GPIO_Init+0x21e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <HAL_GPIO_Init+0x258>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_GPIO_Init+0x21a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <HAL_GPIO_Init+0x25c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00d      	beq.n	80079e2 <HAL_GPIO_Init+0x216>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <HAL_GPIO_Init+0x260>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d007      	beq.n	80079de <HAL_GPIO_Init+0x212>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a17      	ldr	r2, [pc, #92]	; (8007a30 <HAL_GPIO_Init+0x264>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <HAL_GPIO_Init+0x20e>
 80079d6:	2309      	movs	r3, #9
 80079d8:	e02d      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079da:	230a      	movs	r3, #10
 80079dc:	e02b      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079de:	2308      	movs	r3, #8
 80079e0:	e029      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079e2:	2307      	movs	r3, #7
 80079e4:	e027      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079e6:	2306      	movs	r3, #6
 80079e8:	e025      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079ea:	2305      	movs	r3, #5
 80079ec:	e023      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079ee:	2304      	movs	r3, #4
 80079f0:	e021      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079f2:	2303      	movs	r3, #3
 80079f4:	e01f      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e01d      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e01b      	b.n	8007a36 <HAL_GPIO_Init+0x26a>
 80079fe:	bf00      	nop
 8007a00:	58000080 	.word	0x58000080
 8007a04:	58024400 	.word	0x58024400
 8007a08:	58000400 	.word	0x58000400
 8007a0c:	58020000 	.word	0x58020000
 8007a10:	58020400 	.word	0x58020400
 8007a14:	58020800 	.word	0x58020800
 8007a18:	58020c00 	.word	0x58020c00
 8007a1c:	58021000 	.word	0x58021000
 8007a20:	58021400 	.word	0x58021400
 8007a24:	58021800 	.word	0x58021800
 8007a28:	58021c00 	.word	0x58021c00
 8007a2c:	58022000 	.word	0x58022000
 8007a30:	58022400 	.word	0x58022400
 8007a34:	2300      	movs	r3, #0
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	f002 0203 	and.w	r2, r2, #3
 8007a3c:	0092      	lsls	r2, r2, #2
 8007a3e:	4093      	lsls	r3, r2
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a46:	4938      	ldr	r1, [pc, #224]	; (8007b28 <HAL_GPIO_Init+0x35c>)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	089b      	lsrs	r3, r3, #2
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4013      	ands	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	4013      	ands	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	3301      	adds	r3, #1
 8007b08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f ae63 	bne.w	80077e0 <HAL_GPIO_Init+0x14>
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	3724      	adds	r7, #36	; 0x24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	58000400 	.word	0x58000400

08007b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	887b      	ldrh	r3, [r7, #2]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]
 8007b48:	e001      	b.n	8007b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b6c:	787b      	ldrb	r3, [r7, #1]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b72:	887a      	ldrh	r2, [r7, #2]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b78:	e003      	b.n	8007b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b7a:	887b      	ldrh	r3, [r7, #2]
 8007b7c:	041a      	lsls	r2, r3, #16
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	619a      	str	r2, [r3, #24]
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ba0:	887a      	ldrh	r2, [r7, #2]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	041a      	lsls	r2, r3, #16
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	43d9      	mvns	r1, r3
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	400b      	ands	r3, r1
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	619a      	str	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007bcc:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <HAL_HSEM_FastTake+0x2c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3320      	adds	r3, #32
 8007bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd6:	4a07      	ldr	r2, [pc, #28]	; (8007bf4 <HAL_HSEM_FastTake+0x30>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d101      	bne.n	8007be0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	58026400 	.word	0x58026400
 8007bf4:	80000300 	.word	0x80000300

08007bf8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007c02:	4906      	ldr	r1, [pc, #24]	; (8007c1c <HAL_HSEM_Release+0x24>)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	58026400 	.word	0x58026400

08007c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c22:	b08f      	sub	sp, #60	; 0x3c
 8007c24:	af0a      	add	r7, sp, #40	; 0x28
 8007c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e116      	b.n	8007e60 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d106      	bne.n	8007c52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7fc fc81 	bl	8004554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2203      	movs	r2, #3
 8007c56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d102      	bne.n	8007c6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f005 f977 	bl	800cf64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	687e      	ldr	r6, [r7, #4]
 8007c7e:	466d      	mov	r5, sp
 8007c80:	f106 0410 	add.w	r4, r6, #16
 8007c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8007c94:	1d33      	adds	r3, r6, #4
 8007c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c98:	6838      	ldr	r0, [r7, #0]
 8007c9a:	f005 f8f5 	bl	800ce88 <USB_CoreInit>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0d7      	b.n	8007e60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f005 f965 	bl	800cf86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	e04a      	b.n	8007d58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	333d      	adds	r3, #61	; 0x3d
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cd6:	7bfa      	ldrb	r2, [r7, #15]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	333c      	adds	r3, #60	; 0x3c
 8007ce6:	7bfa      	ldrb	r2, [r7, #15]
 8007ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007cea:	7bfa      	ldrb	r2, [r7, #15]
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	b298      	uxth	r0, r3
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	3344      	adds	r3, #68	; 0x44
 8007cfe:	4602      	mov	r2, r0
 8007d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d02:	7bfa      	ldrb	r2, [r7, #15]
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3340      	adds	r3, #64	; 0x40
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	3348      	adds	r3, #72	; 0x48
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	334c      	adds	r3, #76	; 0x4c
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d3e:	7bfa      	ldrb	r2, [r7, #15]
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3354      	adds	r3, #84	; 0x54
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	3301      	adds	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	7bfa      	ldrb	r2, [r7, #15]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3af      	bcc.n	8007cc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e044      	b.n	8007df2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007daa:	7bfa      	ldrb	r2, [r7, #15]
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dc0:	7bfa      	ldrb	r2, [r7, #15]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dd6:	7bfa      	ldrb	r2, [r7, #15]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	3301      	adds	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	7bfa      	ldrb	r2, [r7, #15]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b5      	bcc.n	8007d68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	687e      	ldr	r6, [r7, #4]
 8007e04:	466d      	mov	r5, sp
 8007e06:	f106 0410 	add.w	r4, r6, #16
 8007e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e1a:	1d33      	adds	r3, r6, #4
 8007e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e1e:	6838      	ldr	r0, [r7, #0]
 8007e20:	f005 f8fe 	bl	800d020 <USB_DevInit>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e014      	b.n	8007e60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f80a 	bl	8007e68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f005 fabc 	bl	800d3d6 <USB_DevDisconnect>

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <HAL_PCDEx_ActivateLPM+0x44>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	10000003 	.word	0x10000003

08007eb0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007eb8:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d00a      	beq.n	8007eda <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ec4:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d001      	beq.n	8007ed6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e040      	b.n	8007f58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e03e      	b.n	8007f58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007ee2:	491f      	ldr	r1, [pc, #124]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007eea:	f7fc fcc5 	bl	8004878 <HAL_GetTick>
 8007eee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ef0:	e009      	b.n	8007f06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ef2:	f7fc fcc1 	bl	8004878 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f00:	d901      	bls.n	8007f06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e028      	b.n	8007f58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f06:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f12:	d1ee      	bne.n	8007ef2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b1e      	cmp	r3, #30
 8007f18:	d008      	beq.n	8007f2c <HAL_PWREx_ConfigSupply+0x7c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1e:	d005      	beq.n	8007f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b1d      	cmp	r3, #29
 8007f24:	d002      	beq.n	8007f2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b2d      	cmp	r3, #45	; 0x2d
 8007f2a:	d114      	bne.n	8007f56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007f2c:	f7fc fca4 	bl	8004878 <HAL_GetTick>
 8007f30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007f32:	e009      	b.n	8007f48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f34:	f7fc fca0 	bl	8004878 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f42:	d901      	bls.n	8007f48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e007      	b.n	8007f58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <HAL_PWREx_ConfigSupply+0xb0>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d1ee      	bne.n	8007f34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	58024800 	.word	0x58024800

08007f64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f72:	60d3      	str	r3, [r2, #12]
}
 8007f74:	bf00      	nop
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	58024800 	.word	0x58024800

08007f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	; 0x30
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f000 bc1d 	b.w	80087d2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 8087 	beq.w	80080b4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fa6:	4b99      	ldr	r3, [pc, #612]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fb0:	4b96      	ldr	r3, [pc, #600]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d007      	beq.n	8007fcc <HAL_RCC_OscConfig+0x48>
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b18      	cmp	r3, #24
 8007fc0:	d110      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x60>
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d10b      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fcc:	4b8f      	ldr	r3, [pc, #572]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d06c      	beq.n	80080b2 <HAL_RCC_OscConfig+0x12e>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d168      	bne.n	80080b2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e3f6      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fec:	d106      	bne.n	8007ffc <HAL_RCC_OscConfig+0x78>
 8007fee:	4b87      	ldr	r3, [pc, #540]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a86      	ldr	r2, [pc, #536]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8007ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e02e      	b.n	800805a <HAL_RCC_OscConfig+0xd6>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10c      	bne.n	800801e <HAL_RCC_OscConfig+0x9a>
 8008004:	4b81      	ldr	r3, [pc, #516]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a80      	ldr	r2, [pc, #512]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800800a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4b7e      	ldr	r3, [pc, #504]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a7d      	ldr	r2, [pc, #500]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e01d      	b.n	800805a <HAL_RCC_OscConfig+0xd6>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008026:	d10c      	bne.n	8008042 <HAL_RCC_OscConfig+0xbe>
 8008028:	4b78      	ldr	r3, [pc, #480]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a77      	ldr	r2, [pc, #476]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800802e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b75      	ldr	r3, [pc, #468]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a74      	ldr	r2, [pc, #464]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800803a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	e00b      	b.n	800805a <HAL_RCC_OscConfig+0xd6>
 8008042:	4b72      	ldr	r3, [pc, #456]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a71      	ldr	r2, [pc, #452]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	4b6f      	ldr	r3, [pc, #444]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a6e      	ldr	r2, [pc, #440]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008058:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008062:	f7fc fc09 	bl	8004878 <HAL_GetTick>
 8008066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800806a:	f7fc fc05 	bl	8004878 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b64      	cmp	r3, #100	; 0x64
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e3aa      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800807c:	4b63      	ldr	r3, [pc, #396]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0xe6>
 8008088:	e014      	b.n	80080b4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808a:	f7fc fbf5 	bl	8004878 <HAL_GetTick>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008092:	f7fc fbf1 	bl	8004878 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b64      	cmp	r3, #100	; 0x64
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e396      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080a4:	4b59      	ldr	r3, [pc, #356]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <HAL_RCC_OscConfig+0x10e>
 80080b0:	e000      	b.n	80080b4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80cb 	beq.w	8008258 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080c2:	4b52      	ldr	r3, [pc, #328]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080cc:	4b4f      	ldr	r3, [pc, #316]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_RCC_OscConfig+0x164>
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	2b18      	cmp	r3, #24
 80080dc:	d156      	bne.n	800818c <HAL_RCC_OscConfig+0x208>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d151      	bne.n	800818c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e8:	4b48      	ldr	r3, [pc, #288]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_RCC_OscConfig+0x17c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e368      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008100:	4b42      	ldr	r3, [pc, #264]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f023 0219 	bic.w	r2, r3, #25
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	493f      	ldr	r1, [pc, #252]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800810e:	4313      	orrs	r3, r2
 8008110:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008112:	f7fc fbb1 	bl	8004878 <HAL_GetTick>
 8008116:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800811a:	f7fc fbad 	bl	8004878 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e352      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800812c:	4b37      	ldr	r3, [pc, #220]	; (800820c <HAL_RCC_OscConfig+0x288>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0f0      	beq.n	800811a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008138:	f7fc fbce 	bl	80048d8 <HAL_GetREVID>
 800813c:	4603      	mov	r3, r0
 800813e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008142:	4293      	cmp	r3, r2
 8008144:	d817      	bhi.n	8008176 <HAL_RCC_OscConfig+0x1f2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d108      	bne.n	8008160 <HAL_RCC_OscConfig+0x1dc>
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008156:	4a2d      	ldr	r2, [pc, #180]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800815e:	e07b      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008160:	4b2a      	ldr	r3, [pc, #168]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	031b      	lsls	r3, r3, #12
 800816e:	4927      	ldr	r1, [pc, #156]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008170:	4313      	orrs	r3, r2
 8008172:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008174:	e070      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008176:	4b25      	ldr	r3, [pc, #148]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	061b      	lsls	r3, r3, #24
 8008184:	4921      	ldr	r1, [pc, #132]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008186:	4313      	orrs	r3, r2
 8008188:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800818a:	e065      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d048      	beq.n	8008226 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008194:	4b1d      	ldr	r3, [pc, #116]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f023 0219 	bic.w	r2, r3, #25
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	491a      	ldr	r1, [pc, #104]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a6:	f7fc fb67 	bl	8004878 <HAL_GetTick>
 80081aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ae:	f7fc fb63 	bl	8004878 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e308      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081cc:	f7fc fb84 	bl	80048d8 <HAL_GetREVID>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d81a      	bhi.n	8008210 <HAL_RCC_OscConfig+0x28c>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d108      	bne.n	80081f4 <HAL_RCC_OscConfig+0x270>
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081ea:	4a08      	ldr	r2, [pc, #32]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80081ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f0:	6053      	str	r3, [r2, #4]
 80081f2:	e031      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <HAL_RCC_OscConfig+0x288>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	4902      	ldr	r1, [pc, #8]	; (800820c <HAL_RCC_OscConfig+0x288>)
 8008204:	4313      	orrs	r3, r2
 8008206:	604b      	str	r3, [r1, #4]
 8008208:	e026      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
 800820a:	bf00      	nop
 800820c:	58024400 	.word	0x58024400
 8008210:	4b9a      	ldr	r3, [pc, #616]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	061b      	lsls	r3, r3, #24
 800821e:	4997      	ldr	r1, [pc, #604]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008220:	4313      	orrs	r3, r2
 8008222:	604b      	str	r3, [r1, #4]
 8008224:	e018      	b.n	8008258 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008226:	4b95      	ldr	r3, [pc, #596]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a94      	ldr	r2, [pc, #592]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fc fb21 	bl	8004878 <HAL_GetTick>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800823a:	f7fc fb1d 	bl	8004878 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e2c2      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800824c:	4b8b      	ldr	r3, [pc, #556]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f0      	bne.n	800823a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80a9 	beq.w	80083b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008266:	4b85      	ldr	r3, [pc, #532]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008270:	4b82      	ldr	r3, [pc, #520]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d007      	beq.n	800828c <HAL_RCC_OscConfig+0x308>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b18      	cmp	r3, #24
 8008280:	d13a      	bne.n	80082f8 <HAL_RCC_OscConfig+0x374>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	2b01      	cmp	r3, #1
 800828a:	d135      	bne.n	80082f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800828c:	4b7b      	ldr	r3, [pc, #492]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_RCC_OscConfig+0x320>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d001      	beq.n	80082a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e296      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082a4:	f7fc fb18 	bl	80048d8 <HAL_GetREVID>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d817      	bhi.n	80082e2 <HAL_RCC_OscConfig+0x35e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d108      	bne.n	80082cc <HAL_RCC_OscConfig+0x348>
 80082ba:	4b70      	ldr	r3, [pc, #448]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80082c2:	4a6e      	ldr	r2, [pc, #440]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082ca:	e075      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082cc:	4b6b      	ldr	r3, [pc, #428]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	069b      	lsls	r3, r3, #26
 80082da:	4968      	ldr	r1, [pc, #416]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082e0:	e06a      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082e2:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	061b      	lsls	r3, r3, #24
 80082f0:	4962      	ldr	r1, [pc, #392]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082f6:	e05f      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d042      	beq.n	8008386 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008300:	4b5e      	ldr	r3, [pc, #376]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5d      	ldr	r2, [pc, #372]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830c:	f7fc fab4 	bl	8004878 <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008314:	f7fc fab0 	bl	8004878 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e255      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008326:	4b55      	ldr	r3, [pc, #340]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0f0      	beq.n	8008314 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008332:	f7fc fad1 	bl	80048d8 <HAL_GetREVID>
 8008336:	4603      	mov	r3, r0
 8008338:	f241 0203 	movw	r2, #4099	; 0x1003
 800833c:	4293      	cmp	r3, r2
 800833e:	d817      	bhi.n	8008370 <HAL_RCC_OscConfig+0x3ec>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	2b20      	cmp	r3, #32
 8008346:	d108      	bne.n	800835a <HAL_RCC_OscConfig+0x3d6>
 8008348:	4b4c      	ldr	r3, [pc, #304]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008350:	4a4a      	ldr	r2, [pc, #296]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008356:	6053      	str	r3, [r2, #4]
 8008358:	e02e      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
 800835a:	4b48      	ldr	r3, [pc, #288]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	069b      	lsls	r3, r3, #26
 8008368:	4944      	ldr	r1, [pc, #272]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800836a:	4313      	orrs	r3, r2
 800836c:	604b      	str	r3, [r1, #4]
 800836e:	e023      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
 8008370:	4b42      	ldr	r3, [pc, #264]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	493f      	ldr	r1, [pc, #252]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008380:	4313      	orrs	r3, r2
 8008382:	60cb      	str	r3, [r1, #12]
 8008384:	e018      	b.n	80083b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008386:	4b3d      	ldr	r3, [pc, #244]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a3c      	ldr	r2, [pc, #240]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800838c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008392:	f7fc fa71 	bl	8004878 <HAL_GetTick>
 8008396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008398:	e008      	b.n	80083ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800839a:	f7fc fa6d 	bl	8004878 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d901      	bls.n	80083ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e212      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ac:	4b33      	ldr	r3, [pc, #204]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f0      	bne.n	800839a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d036      	beq.n	8008432 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d019      	beq.n	8008400 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083cc:	4b2b      	ldr	r3, [pc, #172]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80083ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d0:	4a2a      	ldr	r2, [pc, #168]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d8:	f7fc fa4e 	bl	8004878 <HAL_GetTick>
 80083dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083e0:	f7fc fa4a 	bl	8004878 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e1ef      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083f2:	4b22      	ldr	r3, [pc, #136]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 80083f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0x45c>
 80083fe:	e018      	b.n	8008432 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008404:	4a1d      	ldr	r2, [pc, #116]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008406:	f023 0301 	bic.w	r3, r3, #1
 800840a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840c:	f7fc fa34 	bl	8004878 <HAL_GetTick>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008414:	f7fc fa30 	bl	8004878 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e1d5      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f0      	bne.n	8008414 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d039      	beq.n	80084b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01c      	beq.n	8008480 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a0c      	ldr	r2, [pc, #48]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800844c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008450:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008452:	f7fc fa11 	bl	8004878 <HAL_GetTick>
 8008456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800845a:	f7fc fa0d 	bl	8004878 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e1b2      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <HAL_RCC_OscConfig+0x4f8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x4d6>
 8008478:	e01b      	b.n	80084b2 <HAL_RCC_OscConfig+0x52e>
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008480:	4b9b      	ldr	r3, [pc, #620]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a9a      	ldr	r2, [pc, #616]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800848a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800848c:	f7fc f9f4 	bl	8004878 <HAL_GetTick>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008494:	f7fc f9f0 	bl	8004878 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e195      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084a6:	4b92      	ldr	r3, [pc, #584]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f0      	bne.n	8008494 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 8081 	beq.w	80085c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084c0:	4b8c      	ldr	r3, [pc, #560]	; (80086f4 <HAL_RCC_OscConfig+0x770>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a8b      	ldr	r2, [pc, #556]	; (80086f4 <HAL_RCC_OscConfig+0x770>)
 80084c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084cc:	f7fc f9d4 	bl	8004878 <HAL_GetTick>
 80084d0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084d4:	f7fc f9d0 	bl	8004878 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e175      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084e6:	4b83      	ldr	r3, [pc, #524]	; (80086f4 <HAL_RCC_OscConfig+0x770>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d106      	bne.n	8008508 <HAL_RCC_OscConfig+0x584>
 80084fa:	4b7d      	ldr	r3, [pc, #500]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	4a7c      	ldr	r2, [pc, #496]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6713      	str	r3, [r2, #112]	; 0x70
 8008506:	e02d      	b.n	8008564 <HAL_RCC_OscConfig+0x5e0>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10c      	bne.n	800852a <HAL_RCC_OscConfig+0x5a6>
 8008510:	4b77      	ldr	r3, [pc, #476]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008514:	4a76      	ldr	r2, [pc, #472]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	6713      	str	r3, [r2, #112]	; 0x70
 800851c:	4b74      	ldr	r3, [pc, #464]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a73      	ldr	r2, [pc, #460]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008522:	f023 0304 	bic.w	r3, r3, #4
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
 8008528:	e01c      	b.n	8008564 <HAL_RCC_OscConfig+0x5e0>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b05      	cmp	r3, #5
 8008530:	d10c      	bne.n	800854c <HAL_RCC_OscConfig+0x5c8>
 8008532:	4b6f      	ldr	r3, [pc, #444]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008536:	4a6e      	ldr	r2, [pc, #440]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008538:	f043 0304 	orr.w	r3, r3, #4
 800853c:	6713      	str	r3, [r2, #112]	; 0x70
 800853e:	4b6c      	ldr	r3, [pc, #432]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	4a6b      	ldr	r2, [pc, #428]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008544:	f043 0301 	orr.w	r3, r3, #1
 8008548:	6713      	str	r3, [r2, #112]	; 0x70
 800854a:	e00b      	b.n	8008564 <HAL_RCC_OscConfig+0x5e0>
 800854c:	4b68      	ldr	r3, [pc, #416]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800854e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008550:	4a67      	ldr	r2, [pc, #412]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	6713      	str	r3, [r2, #112]	; 0x70
 8008558:	4b65      	ldr	r3, [pc, #404]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a64      	ldr	r2, [pc, #400]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800855e:	f023 0304 	bic.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800856c:	f7fc f984 	bl	8004878 <HAL_GetTick>
 8008570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008572:	e00a      	b.n	800858a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008574:	f7fc f980 	bl	8004878 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e123      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800858a:	4b59      	ldr	r3, [pc, #356]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0ee      	beq.n	8008574 <HAL_RCC_OscConfig+0x5f0>
 8008596:	e014      	b.n	80085c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008598:	f7fc f96e 	bl	8004878 <HAL_GetTick>
 800859c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800859e:	e00a      	b.n	80085b6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085a0:	f7fc f96a 	bl	8004878 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e10d      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085b6:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1ee      	bne.n	80085a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8102 	beq.w	80087d0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085cc:	4b48      	ldr	r3, [pc, #288]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d4:	2b18      	cmp	r3, #24
 80085d6:	f000 80bd 	beq.w	8008754 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b02      	cmp	r3, #2
 80085e0:	f040 809e 	bne.w	8008720 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e4:	4b42      	ldr	r3, [pc, #264]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a41      	ldr	r2, [pc, #260]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80085ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f0:	f7fc f942 	bl	8004878 <HAL_GetTick>
 80085f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085f8:	f7fc f93e 	bl	8004878 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e0e3      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800860a:	4b39      	ldr	r3, [pc, #228]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1f0      	bne.n	80085f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008616:	4b36      	ldr	r3, [pc, #216]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800861a:	4b37      	ldr	r3, [pc, #220]	; (80086f8 <HAL_RCC_OscConfig+0x774>)
 800861c:	4013      	ands	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008626:	0112      	lsls	r2, r2, #4
 8008628:	430a      	orrs	r2, r1
 800862a:	4931      	ldr	r1, [pc, #196]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800862c:	4313      	orrs	r3, r2
 800862e:	628b      	str	r3, [r1, #40]	; 0x28
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	3b01      	subs	r3, #1
 8008636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	3b01      	subs	r3, #1
 8008640:	025b      	lsls	r3, r3, #9
 8008642:	b29b      	uxth	r3, r3
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	3b01      	subs	r3, #1
 800864c:	041b      	lsls	r3, r3, #16
 800864e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008658:	3b01      	subs	r3, #1
 800865a:	061b      	lsls	r3, r3, #24
 800865c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008660:	4923      	ldr	r1, [pc, #140]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008662:	4313      	orrs	r3, r2
 8008664:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008666:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	4a21      	ldr	r2, [pc, #132]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008672:	4b1f      	ldr	r3, [pc, #124]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008676:	4b21      	ldr	r3, [pc, #132]	; (80086fc <HAL_RCC_OscConfig+0x778>)
 8008678:	4013      	ands	r3, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800867e:	00d2      	lsls	r2, r2, #3
 8008680:	491b      	ldr	r1, [pc, #108]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f023 020c 	bic.w	r2, r3, #12
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	4917      	ldr	r1, [pc, #92]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008698:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	f023 0202 	bic.w	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a4:	4912      	ldr	r1, [pc, #72]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086aa:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	4a10      	ldr	r2, [pc, #64]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80086ce:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a07      	ldr	r2, [pc, #28]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <HAL_RCC_OscConfig+0x76c>)
 80086e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e6:	f7fc f8c7 	bl	8004878 <HAL_GetTick>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ec:	e011      	b.n	8008712 <HAL_RCC_OscConfig+0x78e>
 80086ee:	bf00      	nop
 80086f0:	58024400 	.word	0x58024400
 80086f4:	58024800 	.word	0x58024800
 80086f8:	fffffc0c 	.word	0xfffffc0c
 80086fc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008700:	f7fc f8ba 	bl	8004878 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e05f      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008712:	4b32      	ldr	r3, [pc, #200]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0f0      	beq.n	8008700 <HAL_RCC_OscConfig+0x77c>
 800871e:	e057      	b.n	80087d0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008720:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a2d      	ldr	r2, [pc, #180]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 8008726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800872a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7fc f8a4 	bl	8004878 <HAL_GetTick>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008734:	f7fc f8a0 	bl	8004878 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e045      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008746:	4b25      	ldr	r3, [pc, #148]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f0      	bne.n	8008734 <HAL_RCC_OscConfig+0x7b0>
 8008752:	e03d      	b.n	80087d0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008754:	4b21      	ldr	r3, [pc, #132]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800875a:	4b20      	ldr	r3, [pc, #128]	; (80087dc <HAL_RCC_OscConfig+0x858>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b01      	cmp	r3, #1
 8008766:	d031      	beq.n	80087cc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f003 0203 	and.w	r2, r3, #3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008772:	429a      	cmp	r2, r3
 8008774:	d12a      	bne.n	80087cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	091b      	lsrs	r3, r3, #4
 800877a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008782:	429a      	cmp	r2, r3
 8008784:	d122      	bne.n	80087cc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008792:	429a      	cmp	r2, r3
 8008794:	d11a      	bne.n	80087cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	0a5b      	lsrs	r3, r3, #9
 800879a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d111      	bne.n	80087cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d108      	bne.n	80087cc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	0e1b      	lsrs	r3, r3, #24
 80087be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3730      	adds	r7, #48	; 0x30
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	58024400 	.word	0x58024400

080087e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e19c      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087f4:	4b8a      	ldr	r3, [pc, #552]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d910      	bls.n	8008824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008802:	4b87      	ldr	r3, [pc, #540]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f023 020f 	bic.w	r2, r3, #15
 800880a:	4985      	ldr	r1, [pc, #532]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	4313      	orrs	r3, r2
 8008810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008812:	4b83      	ldr	r3, [pc, #524]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d001      	beq.n	8008824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e184      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d010      	beq.n	8008852 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	4b7b      	ldr	r3, [pc, #492]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800883c:	429a      	cmp	r2, r3
 800883e:	d908      	bls.n	8008852 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008840:	4b78      	ldr	r3, [pc, #480]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	4975      	ldr	r1, [pc, #468]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 800884e:	4313      	orrs	r3, r2
 8008850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d010      	beq.n	8008880 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	4b70      	ldr	r3, [pc, #448]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800886a:	429a      	cmp	r2, r3
 800886c:	d908      	bls.n	8008880 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800886e:	4b6d      	ldr	r3, [pc, #436]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	496a      	ldr	r1, [pc, #424]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 800887c:	4313      	orrs	r3, r2
 800887e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699a      	ldr	r2, [r3, #24]
 8008890:	4b64      	ldr	r3, [pc, #400]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008898:	429a      	cmp	r2, r3
 800889a:	d908      	bls.n	80088ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800889c:	4b61      	ldr	r3, [pc, #388]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	495e      	ldr	r1, [pc, #376]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d010      	beq.n	80088dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	4b59      	ldr	r3, [pc, #356]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d908      	bls.n	80088dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088ca:	4b56      	ldr	r3, [pc, #344]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4953      	ldr	r1, [pc, #332]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d010      	beq.n	800890a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	4b4d      	ldr	r3, [pc, #308]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d908      	bls.n	800890a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088f8:	4b4a      	ldr	r3, [pc, #296]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f023 020f 	bic.w	r2, r3, #15
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4947      	ldr	r1, [pc, #284]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008906:	4313      	orrs	r3, r2
 8008908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d055      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008916:	4b43      	ldr	r3, [pc, #268]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	4940      	ldr	r1, [pc, #256]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008924:	4313      	orrs	r3, r2
 8008926:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d107      	bne.n	8008940 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008930:	4b3c      	ldr	r3, [pc, #240]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d121      	bne.n	8008980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0f6      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d107      	bne.n	8008958 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008948:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d115      	bne.n	8008980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0ea      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d107      	bne.n	8008970 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008960:	4b30      	ldr	r3, [pc, #192]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e0de      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008970:	4b2c      	ldr	r3, [pc, #176]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0d6      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f023 0207 	bic.w	r2, r3, #7
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4925      	ldr	r1, [pc, #148]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 800898e:	4313      	orrs	r3, r2
 8008990:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008992:	f7fb ff71 	bl	8004878 <HAL_GetTick>
 8008996:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008998:	e00a      	b.n	80089b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800899a:	f7fb ff6d 	bl	8004878 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e0be      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b0:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	429a      	cmp	r2, r3
 80089c0:	d1eb      	bne.n	800899a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	429a      	cmp	r2, r3
 80089dc:	d208      	bcs.n	80089f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089de:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f023 020f 	bic.w	r2, r3, #15
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	490e      	ldr	r1, [pc, #56]	; (8008a24 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 030f 	and.w	r3, r3, #15
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d214      	bcs.n	8008a28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089fe:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f023 020f 	bic.w	r2, r3, #15
 8008a06:	4906      	ldr	r1, [pc, #24]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <HAL_RCC_ClockConfig+0x240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e086      	b.n	8008b2e <HAL_RCC_ClockConfig+0x34e>
 8008a20:	52002000 	.word	0x52002000
 8008a24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	4b3f      	ldr	r3, [pc, #252]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d208      	bcs.n	8008a56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a44:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	4939      	ldr	r1, [pc, #228]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d010      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	695a      	ldr	r2, [r3, #20]
 8008a66:	4b34      	ldr	r3, [pc, #208]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d208      	bcs.n	8008a84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a72:	4b31      	ldr	r3, [pc, #196]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	492e      	ldr	r1, [pc, #184]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699a      	ldr	r2, [r3, #24]
 8008a94:	4b28      	ldr	r3, [pc, #160]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d208      	bcs.n	8008ab2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	4922      	ldr	r1, [pc, #136]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d010      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d208      	bcs.n	8008ae0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	4917      	ldr	r1, [pc, #92]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ae0:	f000 f834 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	4912      	ldr	r1, [pc, #72]	; (8008b3c <HAL_RCC_ClockConfig+0x35c>)
 8008af2:	5ccb      	ldrb	r3, [r1, r3]
 8008af4:	f003 031f 	and.w	r3, r3, #31
 8008af8:	fa22 f303 	lsr.w	r3, r2, r3
 8008afc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008afe:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <HAL_RCC_ClockConfig+0x358>)
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <HAL_RCC_ClockConfig+0x35c>)
 8008b08:	5cd3      	ldrb	r3, [r2, r3]
 8008b0a:	f003 031f 	and.w	r3, r3, #31
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	4a0a      	ldr	r2, [pc, #40]	; (8008b40 <HAL_RCC_ClockConfig+0x360>)
 8008b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b18:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <HAL_RCC_ClockConfig+0x364>)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b1e:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <HAL_RCC_ClockConfig+0x368>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fb fe5e 	bl	80047e4 <HAL_InitTick>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	0800e008 	.word	0x0800e008
 8008b40:	24000008 	.word	0x24000008
 8008b44:	24000004 	.word	0x24000004
 8008b48:	2400001c 	.word	0x2400001c

08008b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b089      	sub	sp, #36	; 0x24
 8008b50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b52:	4bb3      	ldr	r3, [pc, #716]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b5a:	2b18      	cmp	r3, #24
 8008b5c:	f200 8155 	bhi.w	8008e0a <HAL_RCC_GetSysClockFreq+0x2be>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008bcd 	.word	0x08008bcd
 8008b6c:	08008e0b 	.word	0x08008e0b
 8008b70:	08008e0b 	.word	0x08008e0b
 8008b74:	08008e0b 	.word	0x08008e0b
 8008b78:	08008e0b 	.word	0x08008e0b
 8008b7c:	08008e0b 	.word	0x08008e0b
 8008b80:	08008e0b 	.word	0x08008e0b
 8008b84:	08008e0b 	.word	0x08008e0b
 8008b88:	08008bf3 	.word	0x08008bf3
 8008b8c:	08008e0b 	.word	0x08008e0b
 8008b90:	08008e0b 	.word	0x08008e0b
 8008b94:	08008e0b 	.word	0x08008e0b
 8008b98:	08008e0b 	.word	0x08008e0b
 8008b9c:	08008e0b 	.word	0x08008e0b
 8008ba0:	08008e0b 	.word	0x08008e0b
 8008ba4:	08008e0b 	.word	0x08008e0b
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008e0b 	.word	0x08008e0b
 8008bb0:	08008e0b 	.word	0x08008e0b
 8008bb4:	08008e0b 	.word	0x08008e0b
 8008bb8:	08008e0b 	.word	0x08008e0b
 8008bbc:	08008e0b 	.word	0x08008e0b
 8008bc0:	08008e0b 	.word	0x08008e0b
 8008bc4:	08008e0b 	.word	0x08008e0b
 8008bc8:	08008bff 	.word	0x08008bff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bcc:	4b94      	ldr	r3, [pc, #592]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d009      	beq.n	8008bec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd8:	4b91      	ldr	r3, [pc, #580]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	4a90      	ldr	r2, [pc, #576]	; (8008e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008bea:	e111      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bec:	4b8d      	ldr	r3, [pc, #564]	; (8008e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bee:	61bb      	str	r3, [r7, #24]
    break;
 8008bf0:	e10e      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008bf2:	4b8d      	ldr	r3, [pc, #564]	; (8008e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bf4:	61bb      	str	r3, [r7, #24]
    break;
 8008bf6:	e10b      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008bf8:	4b8c      	ldr	r3, [pc, #560]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008bfa:	61bb      	str	r3, [r7, #24]
    break;
 8008bfc:	e108      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bfe:	4b88      	ldr	r3, [pc, #544]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c08:	4b85      	ldr	r3, [pc, #532]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	091b      	lsrs	r3, r3, #4
 8008c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c14:	4b82      	ldr	r3, [pc, #520]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c1e:	4b80      	ldr	r3, [pc, #512]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	fb02 f303 	mul.w	r3, r2, r3
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80e1 	beq.w	8008e04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	f000 8083 	beq.w	8008d50 <HAL_RCC_GetSysClockFreq+0x204>
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f200 80a1 	bhi.w	8008d94 <HAL_RCC_GetSysClockFreq+0x248>
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_RCC_GetSysClockFreq+0x114>
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d056      	beq.n	8008d0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c5e:	e099      	b.n	8008d94 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c60:	4b6f      	ldr	r3, [pc, #444]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02d      	beq.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c6c:	4b6c      	ldr	r3, [pc, #432]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	08db      	lsrs	r3, r3, #3
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	4a6b      	ldr	r2, [pc, #428]	; (8008e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b62      	ldr	r3, [pc, #392]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008caa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008cc6:	e087      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cda:	4b51      	ldr	r3, [pc, #324]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d0a:	e065      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1e:	4b40      	ldr	r3, [pc, #256]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d32:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4e:	e043      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d62:	4b2f      	ldr	r3, [pc, #188]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d76:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d92:	e021      	b.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	ee07 3a90 	vmov	s15, r3
 8008d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da6:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dd6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	0a5b      	lsrs	r3, r3, #9
 8008dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de2:	3301      	adds	r3, #1
 8008de4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfc:	ee17 3a90 	vmov	r3, s15
 8008e00:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e02:	e005      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
    break;
 8008e08:	e002      	b.n	8008e10 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e0c:	61bb      	str	r3, [r7, #24]
    break;
 8008e0e:	bf00      	nop
  }

  return sysclockfreq;
 8008e10:	69bb      	ldr	r3, [r7, #24]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3724      	adds	r7, #36	; 0x24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	58024400 	.word	0x58024400
 8008e24:	03d09000 	.word	0x03d09000
 8008e28:	003d0900 	.word	0x003d0900
 8008e2c:	007a1200 	.word	0x007a1200
 8008e30:	46000000 	.word	0x46000000
 8008e34:	4c742400 	.word	0x4c742400
 8008e38:	4a742400 	.word	0x4a742400
 8008e3c:	4af42400 	.word	0x4af42400

08008e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e46:	f7ff fe81 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	0a1b      	lsrs	r3, r3, #8
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	490f      	ldr	r1, [pc, #60]	; (8008e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e58:	5ccb      	ldrb	r3, [r1, r3]
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e64:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e6e:	5cd3      	ldrb	r3, [r2, r3]
 8008e70:	f003 031f 	and.w	r3, r3, #31
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7a:	4a07      	ldr	r2, [pc, #28]	; (8008e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e7e:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e86:	681b      	ldr	r3, [r3, #0]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	58024400 	.word	0x58024400
 8008e94:	0800e008 	.word	0x0800e008
 8008e98:	24000008 	.word	0x24000008
 8008e9c:	24000004 	.word	0x24000004

08008ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ea4:	f7ff ffcc 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	091b      	lsrs	r3, r3, #4
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	4904      	ldr	r1, [pc, #16]	; (8008ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eb6:	5ccb      	ldrb	r3, [r1, r3]
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	0800e008 	.word	0x0800e008

08008ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008ed0:	f7ff ffb6 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	4904      	ldr	r1, [pc, #16]	; (8008ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	0800e008 	.word	0x0800e008

08008ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f00:	2300      	movs	r3, #0
 8008f02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f04:	2300      	movs	r3, #0
 8008f06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d03f      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f1c:	d02a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f22:	d824      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f28:	d018      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f2e:	d81e      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f38:	d007      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f3a:	e018      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f3c:	4ba3      	ldr	r3, [pc, #652]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	4aa2      	ldr	r2, [pc, #648]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f48:	e015      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	2102      	movs	r1, #2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f001 f9d5 	bl	800a300 <RCCEx_PLL2_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f5a:	e00c      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3324      	adds	r3, #36	; 0x24
 8008f60:	2102      	movs	r1, #2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fa7e 	bl	800a464 <RCCEx_PLL3_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f6c:	e003      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
      break;
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f7c:	4b93      	ldr	r3, [pc, #588]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f88:	4990      	ldr	r1, [pc, #576]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008f8e:	e001      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d03d      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d826      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008fa8:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fc5 	.word	0x08008fc5
 8008fb4:	08008fd3 	.word	0x08008fd3
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	08008ffd 	.word	0x08008ffd
 8008fc0:	08008ffd 	.word	0x08008ffd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc4:	4b81      	ldr	r3, [pc, #516]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a80      	ldr	r2, [pc, #512]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fd0:	e015      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f991 	bl	800a300 <RCCEx_PLL2_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fe2:	e00c      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3324      	adds	r3, #36	; 0x24
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f001 fa3a 	bl	800a464 <RCCEx_PLL3_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ff4:	e003      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffa:	e000      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009004:	4b71      	ldr	r3, [pc, #452]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009008:	f023 0207 	bic.w	r2, r3, #7
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009010:	496e      	ldr	r1, [pc, #440]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009012:	4313      	orrs	r3, r2
 8009014:	650b      	str	r3, [r1, #80]	; 0x50
 8009016:	e001      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009024:	2b00      	cmp	r3, #0
 8009026:	d042      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009030:	d02b      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009036:	d825      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009038:	2bc0      	cmp	r3, #192	; 0xc0
 800903a:	d028      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800903c:	2bc0      	cmp	r3, #192	; 0xc0
 800903e:	d821      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d016      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009044:	2b80      	cmp	r3, #128	; 0x80
 8009046:	d81d      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d007      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009050:	e018      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009052:	4b5e      	ldr	r3, [pc, #376]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	4a5d      	ldr	r2, [pc, #372]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800905e:	e017      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3304      	adds	r3, #4
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f94a 	bl	800a300 <RCCEx_PLL2_Config>
 800906c:	4603      	mov	r3, r0
 800906e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009070:	e00e      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3324      	adds	r3, #36	; 0x24
 8009076:	2100      	movs	r1, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f001 f9f3 	bl	800a464 <RCCEx_PLL3_Config>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009082:	e005      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]
      break;
 8009088:	e002      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800908e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d109      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009096:	4b4d      	ldr	r3, [pc, #308]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a2:	494a      	ldr	r1, [pc, #296]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	650b      	str	r3, [r1, #80]	; 0x50
 80090a8:	e001      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
 80090ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d049      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090c4:	d030      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80090c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ca:	d82a      	bhi.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090d0:	d02c      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80090d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090d6:	d824      	bhi.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090dc:	d018      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80090de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090e2:	d81e      	bhi.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80090e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090ec:	d007      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80090ee:	e018      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090f0:	4b36      	ldr	r3, [pc, #216]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	4a35      	ldr	r2, [pc, #212]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090fc:	e017      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f001 f8fb 	bl	800a300 <RCCEx_PLL2_Config>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800910e:	e00e      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3324      	adds	r3, #36	; 0x24
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f9a4 	bl	800a464 <RCCEx_PLL3_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009120:	e005      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	75fb      	strb	r3, [r7, #23]
      break;
 8009126:	e002      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009128:	bf00      	nop
 800912a:	e000      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800912c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009134:	4b25      	ldr	r3, [pc, #148]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009138:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009142:	4922      	ldr	r1, [pc, #136]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009144:	4313      	orrs	r3, r2
 8009146:	658b      	str	r3, [r1, #88]	; 0x58
 8009148:	e001      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009156:	2b00      	cmp	r3, #0
 8009158:	d04b      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009164:	d030      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800916a:	d82a      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800916c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009170:	d02e      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009176:	d824      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800917c:	d018      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800917e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009182:	d81e      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800918c:	d007      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800918e:	e018      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009194:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800919c:	e019      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3304      	adds	r3, #4
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f001 f8ab 	bl	800a300 <RCCEx_PLL2_Config>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091ae:	e010      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3324      	adds	r3, #36	; 0x24
 80091b4:	2100      	movs	r1, #0
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 f954 	bl	800a464 <RCCEx_PLL3_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091c0:	e007      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
      break;
 80091c6:	e004      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80091c8:	bf00      	nop
 80091ca:	e002      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091cc:	58024400 	.word	0x58024400
      break;
 80091d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091d8:	4b99      	ldr	r3, [pc, #612]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091e6:	4996      	ldr	r1, [pc, #600]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	658b      	str	r3, [r1, #88]	; 0x58
 80091ec:	e001      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d032      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009202:	2b30      	cmp	r3, #48	; 0x30
 8009204:	d01c      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009206:	2b30      	cmp	r3, #48	; 0x30
 8009208:	d817      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d00c      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800920e:	2b20      	cmp	r3, #32
 8009210:	d813      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d016      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009216:	2b10      	cmp	r3, #16
 8009218:	d10f      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921a:	4b89      	ldr	r3, [pc, #548]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a88      	ldr	r2, [pc, #544]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009226:	e00e      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3304      	adds	r3, #4
 800922c:	2102      	movs	r1, #2
 800922e:	4618      	mov	r0, r3
 8009230:	f001 f866 	bl	800a300 <RCCEx_PLL2_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009238:	e005      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	75fb      	strb	r3, [r7, #23]
      break;
 800923e:	e002      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009240:	bf00      	nop
 8009242:	e000      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800924c:	4b7c      	ldr	r3, [pc, #496]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800924e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009258:	4979      	ldr	r1, [pc, #484]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800925a:	4313      	orrs	r3, r2
 800925c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800925e:	e001      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d047      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009278:	d030      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800927a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800927e:	d82a      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009280:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009284:	d02c      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009286:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800928a:	d824      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800928c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009290:	d018      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009296:	d81e      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a0:	d007      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80092a2:	e018      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a4:	4b66      	ldr	r3, [pc, #408]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	4a65      	ldr	r2, [pc, #404]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092b0:	e017      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3304      	adds	r3, #4
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 f821 	bl	800a300 <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092c2:	e00e      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3324      	adds	r3, #36	; 0x24
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 f8ca 	bl	800a464 <RCCEx_PLL3_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092d4:	e005      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	75fb      	strb	r3, [r7, #23]
      break;
 80092da:	e002      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092dc:	bf00      	nop
 80092de:	e000      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092e8:	4b55      	ldr	r3, [pc, #340]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f4:	4952      	ldr	r1, [pc, #328]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	650b      	str	r3, [r1, #80]	; 0x50
 80092fa:	e001      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
 80092fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d049      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009314:	d02e      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800931a:	d828      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800931c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009320:	d02a      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009326:	d822      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009328:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800932c:	d026      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800932e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009332:	d81c      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009338:	d010      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800933a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800933e:	d816      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01d      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009348:	d111      	bne.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3304      	adds	r3, #4
 800934e:	2101      	movs	r1, #1
 8009350:	4618      	mov	r0, r3
 8009352:	f000 ffd5 	bl	800a300 <RCCEx_PLL2_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800935a:	e012      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	2101      	movs	r1, #1
 8009362:	4618      	mov	r0, r3
 8009364:	f001 f87e 	bl	800a464 <RCCEx_PLL3_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800936c:	e009      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]
      break;
 8009372:	e006      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009374:	bf00      	nop
 8009376:	e004      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009378:	bf00      	nop
 800937a:	e002      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800937c:	bf00      	nop
 800937e:	e000      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009388:	4b2d      	ldr	r3, [pc, #180]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800938a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009394:	492a      	ldr	r1, [pc, #168]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009396:	4313      	orrs	r3, r2
 8009398:	650b      	str	r3, [r1, #80]	; 0x50
 800939a:	e001      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d04d      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b6:	d02e      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80093b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093bc:	d828      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c2:	d02a      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d822      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ce:	d026      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80093d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093d4:	d81c      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093da:	d010      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e0:	d816      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d01d      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80093e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ea:	d111      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	2101      	movs	r1, #1
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff84 	bl	800a300 <RCCEx_PLL2_Config>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80093fc:	e012      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3324      	adds	r3, #36	; 0x24
 8009402:	2101      	movs	r1, #1
 8009404:	4618      	mov	r0, r3
 8009406:	f001 f82d 	bl	800a464 <RCCEx_PLL3_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800940e:	e009      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]
      break;
 8009414:	e006      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009416:	bf00      	nop
 8009418:	e004      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800941a:	bf00      	nop
 800941c:	e002      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800941e:	bf00      	nop
 8009420:	e000      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10c      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800942c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009438:	4901      	ldr	r1, [pc, #4]	; (8009440 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800943a:	4313      	orrs	r3, r2
 800943c:	658b      	str	r3, [r1, #88]	; 0x58
 800943e:	e003      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d02f      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945c:	d00e      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800945e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009462:	d814      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d015      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800946c:	d10f      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946e:	4baf      	ldr	r3, [pc, #700]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	4aae      	ldr	r2, [pc, #696]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009478:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800947a:	e00c      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	2101      	movs	r1, #1
 8009482:	4618      	mov	r0, r3
 8009484:	f000 ff3c 	bl	800a300 <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
      break;
 8009492:	e000      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d109      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800949c:	4ba3      	ldr	r3, [pc, #652]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800949e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	49a0      	ldr	r1, [pc, #640]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	650b      	str	r3, [r1, #80]	; 0x50
 80094ae:	e001      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d032      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d81b      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80094c8:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	08009507 	.word	0x08009507
 80094d4:	080094e1 	.word	0x080094e1
 80094d8:	080094ef 	.word	0x080094ef
 80094dc:	08009507 	.word	0x08009507
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e0:	4b92      	ldr	r3, [pc, #584]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a91      	ldr	r2, [pc, #580]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094ec:	e00c      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3304      	adds	r3, #4
 80094f2:	2102      	movs	r1, #2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 ff03 	bl	800a300 <RCCEx_PLL2_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094fe:	e003      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e000      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800950e:	4b87      	ldr	r3, [pc, #540]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009512:	f023 0203 	bic.w	r2, r3, #3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951a:	4984      	ldr	r1, [pc, #528]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800951c:	4313      	orrs	r3, r2
 800951e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009520:	e001      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8086 	beq.w	8009640 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009534:	4b7e      	ldr	r3, [pc, #504]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a7d      	ldr	r2, [pc, #500]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800953a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800953e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009540:	f7fb f99a 	bl	8004878 <HAL_GetTick>
 8009544:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009546:	e009      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009548:	f7fb f996 	bl	8004878 <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b64      	cmp	r3, #100	; 0x64
 8009554:	d902      	bls.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	75fb      	strb	r3, [r7, #23]
        break;
 800955a:	e005      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800955c:	4b74      	ldr	r3, [pc, #464]	; (8009730 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0ef      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d166      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800956e:	4b6f      	ldr	r3, [pc, #444]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009570:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009578:	4053      	eors	r3, r2
 800957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957e:	2b00      	cmp	r3, #0
 8009580:	d013      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009582:	4b6a      	ldr	r3, [pc, #424]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800958a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800958c:	4b67      	ldr	r3, [pc, #412]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800958e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009590:	4a66      	ldr	r2, [pc, #408]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009596:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009598:	4b64      	ldr	r3, [pc, #400]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	4a63      	ldr	r2, [pc, #396]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80095a4:	4a61      	ldr	r2, [pc, #388]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b4:	d115      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095b6:	f7fb f95f 	bl	8004878 <HAL_GetTick>
 80095ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095bc:	e00b      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095be:	f7fb f95b 	bl	8004878 <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d902      	bls.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	75fb      	strb	r3, [r7, #23]
            break;
 80095d4:	e005      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095d6:	4b55      	ldr	r3, [pc, #340]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ed      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d126      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095f6:	d10d      	bne.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80095f8:	4b4c      	ldr	r3, [pc, #304]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009606:	0919      	lsrs	r1, r3, #4
 8009608:	4b4a      	ldr	r3, [pc, #296]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800960a:	400b      	ands	r3, r1
 800960c:	4947      	ldr	r1, [pc, #284]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800960e:	4313      	orrs	r3, r2
 8009610:	610b      	str	r3, [r1, #16]
 8009612:	e005      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009614:	4b45      	ldr	r3, [pc, #276]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	4a44      	ldr	r2, [pc, #272]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800961a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800961e:	6113      	str	r3, [r2, #16]
 8009620:	4b42      	ldr	r3, [pc, #264]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800962a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962e:	493f      	ldr	r1, [pc, #252]	; (800972c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009630:	4313      	orrs	r3, r2
 8009632:	670b      	str	r3, [r1, #112]	; 0x70
 8009634:	e004      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	75bb      	strb	r3, [r7, #22]
 800963a:	e001      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8085 	beq.w	8009758 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009652:	2b28      	cmp	r3, #40	; 0x28
 8009654:	d866      	bhi.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009656:	a201      	add	r2, pc, #4	; (adr r2, 800965c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965c:	08009739 	.word	0x08009739
 8009660:	08009725 	.word	0x08009725
 8009664:	08009725 	.word	0x08009725
 8009668:	08009725 	.word	0x08009725
 800966c:	08009725 	.word	0x08009725
 8009670:	08009725 	.word	0x08009725
 8009674:	08009725 	.word	0x08009725
 8009678:	08009725 	.word	0x08009725
 800967c:	08009701 	.word	0x08009701
 8009680:	08009725 	.word	0x08009725
 8009684:	08009725 	.word	0x08009725
 8009688:	08009725 	.word	0x08009725
 800968c:	08009725 	.word	0x08009725
 8009690:	08009725 	.word	0x08009725
 8009694:	08009725 	.word	0x08009725
 8009698:	08009725 	.word	0x08009725
 800969c:	08009713 	.word	0x08009713
 80096a0:	08009725 	.word	0x08009725
 80096a4:	08009725 	.word	0x08009725
 80096a8:	08009725 	.word	0x08009725
 80096ac:	08009725 	.word	0x08009725
 80096b0:	08009725 	.word	0x08009725
 80096b4:	08009725 	.word	0x08009725
 80096b8:	08009725 	.word	0x08009725
 80096bc:	08009739 	.word	0x08009739
 80096c0:	08009725 	.word	0x08009725
 80096c4:	08009725 	.word	0x08009725
 80096c8:	08009725 	.word	0x08009725
 80096cc:	08009725 	.word	0x08009725
 80096d0:	08009725 	.word	0x08009725
 80096d4:	08009725 	.word	0x08009725
 80096d8:	08009725 	.word	0x08009725
 80096dc:	08009739 	.word	0x08009739
 80096e0:	08009725 	.word	0x08009725
 80096e4:	08009725 	.word	0x08009725
 80096e8:	08009725 	.word	0x08009725
 80096ec:	08009725 	.word	0x08009725
 80096f0:	08009725 	.word	0x08009725
 80096f4:	08009725 	.word	0x08009725
 80096f8:	08009725 	.word	0x08009725
 80096fc:	08009739 	.word	0x08009739
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	2101      	movs	r1, #1
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fdfa 	bl	800a300 <RCCEx_PLL2_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009710:	e013      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3324      	adds	r3, #36	; 0x24
 8009716:	2101      	movs	r1, #1
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fea3 	bl	800a464 <RCCEx_PLL3_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009722:	e00a      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
      break;
 8009728:	e007      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800972a:	bf00      	nop
 800972c:	58024400 	.word	0x58024400
 8009730:	58024800 	.word	0x58024800
 8009734:	00ffffcf 	.word	0x00ffffcf
      break;
 8009738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d109      	bne.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009740:	4b96      	ldr	r3, [pc, #600]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009744:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974c:	4993      	ldr	r1, [pc, #588]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800974e:	4313      	orrs	r3, r2
 8009750:	654b      	str	r3, [r1, #84]	; 0x54
 8009752:	e001      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d038      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009768:	2b05      	cmp	r3, #5
 800976a:	d821      	bhi.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800976c:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	080097b7 	.word	0x080097b7
 8009778:	0800978d 	.word	0x0800978d
 800977c:	0800979f 	.word	0x0800979f
 8009780:	080097b7 	.word	0x080097b7
 8009784:	080097b7 	.word	0x080097b7
 8009788:	080097b7 	.word	0x080097b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3304      	adds	r3, #4
 8009790:	2101      	movs	r1, #1
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fdb4 	bl	800a300 <RCCEx_PLL2_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800979c:	e00c      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	2101      	movs	r1, #1
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fe5d 	bl	800a464 <RCCEx_PLL3_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097ae:	e003      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75fb      	strb	r3, [r7, #23]
      break;
 80097b4:	e000      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80097b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097be:	4b77      	ldr	r3, [pc, #476]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c2:	f023 0207 	bic.w	r2, r3, #7
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ca:	4974      	ldr	r1, [pc, #464]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	654b      	str	r3, [r1, #84]	; 0x54
 80097d0:	e001      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d03a      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	d821      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80097ec:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009837 	.word	0x08009837
 80097f8:	0800980d 	.word	0x0800980d
 80097fc:	0800981f 	.word	0x0800981f
 8009800:	08009837 	.word	0x08009837
 8009804:	08009837 	.word	0x08009837
 8009808:	08009837 	.word	0x08009837
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	2101      	movs	r1, #1
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fd74 	bl	800a300 <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800981c:	e00c      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2101      	movs	r1, #1
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fe1d 	bl	800a464 <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e000      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800983e:	4b57      	ldr	r3, [pc, #348]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009842:	f023 0207 	bic.w	r2, r3, #7
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984c:	4953      	ldr	r1, [pc, #332]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800984e:	4313      	orrs	r3, r2
 8009850:	658b      	str	r3, [r1, #88]	; 0x58
 8009852:	e001      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d04b      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800986a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800986e:	d02e      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009874:	d828      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d02a      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800987c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009880:	d822      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009882:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009886:	d026      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009888:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800988c:	d81c      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800988e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009892:	d010      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009898:	d816      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01d      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800989e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098a2:	d111      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fd28 	bl	800a300 <RCCEx_PLL2_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098b4:	e012      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3324      	adds	r3, #36	; 0x24
 80098ba:	2102      	movs	r1, #2
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fdd1 	bl	800a464 <RCCEx_PLL3_Config>
 80098c2:	4603      	mov	r3, r0
 80098c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098c6:	e009      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75fb      	strb	r3, [r7, #23]
      break;
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098ce:	bf00      	nop
 80098d0:	e004      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098d2:	bf00      	nop
 80098d4:	e002      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098e2:	4b2e      	ldr	r3, [pc, #184]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f0:	492a      	ldr	r1, [pc, #168]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	654b      	str	r3, [r1, #84]	; 0x54
 80098f6:	e001      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d04d      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800990e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009912:	d02e      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009914:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009918:	d828      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800991a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991e:	d02a      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009924:	d822      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800992a:	d026      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800992c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009930:	d81c      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009936:	d010      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800993c:	d816      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01d      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009946:	d111      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3304      	adds	r3, #4
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fcd6 	bl	800a300 <RCCEx_PLL2_Config>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009958:	e012      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3324      	adds	r3, #36	; 0x24
 800995e:	2102      	movs	r1, #2
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fd7f 	bl	800a464 <RCCEx_PLL3_Config>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800996a:	e009      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	75fb      	strb	r3, [r7, #23]
      break;
 8009970:	e006      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800997e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10c      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009986:	4b05      	ldr	r3, [pc, #20]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009994:	4901      	ldr	r1, [pc, #4]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009996:	4313      	orrs	r3, r2
 8009998:	658b      	str	r3, [r1, #88]	; 0x58
 800999a:	e003      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800999c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d04b      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099ba:	d02e      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80099bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099c0:	d828      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c6:	d02a      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80099c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099cc:	d822      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099d2:	d026      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80099d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099d8:	d81c      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099de:	d010      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80099e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099e4:	d816      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d01d      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80099ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ee:	d111      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fc82 	bl	800a300 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a00:	e012      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3324      	adds	r3, #36	; 0x24
 8009a06:	2102      	movs	r1, #2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fd2b 	bl	800a464 <RCCEx_PLL3_Config>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a12:	e009      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
      break;
 8009a18:	e006      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a1a:	bf00      	nop
 8009a1c:	e004      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a1e:	bf00      	nop
 8009a20:	e002      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a2e:	4b9d      	ldr	r3, [pc, #628]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a3c:	4999      	ldr	r1, [pc, #612]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	658b      	str	r3, [r1, #88]	; 0x58
 8009a42:	e001      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0308 	and.w	r3, r3, #8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5e:	d10a      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3324      	adds	r3, #36	; 0x24
 8009a64:	2102      	movs	r1, #2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fcfc 	bl	800a464 <RCCEx_PLL3_Config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a76:	4b8b      	ldr	r3, [pc, #556]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a84:	4987      	ldr	r1, [pc, #540]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0310 	and.w	r3, r3, #16
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d01a      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa0:	d10a      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3324      	adds	r3, #36	; 0x24
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fcdb 	bl	800a464 <RCCEx_PLL3_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ab8:	4b7a      	ldr	r3, [pc, #488]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac6:	4977      	ldr	r1, [pc, #476]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d034      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae2:	d01d      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ae8:	d817      	bhi.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af2:	d009      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009af4:	e011      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3304      	adds	r3, #4
 8009afa:	2100      	movs	r1, #0
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fbff 	bl	800a300 <RCCEx_PLL2_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b06:	e00c      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3324      	adds	r3, #36	; 0x24
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fca8 	bl	800a464 <RCCEx_PLL3_Config>
 8009b14:	4603      	mov	r3, r0
 8009b16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b18:	e003      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1e:	e000      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b28:	4b5e      	ldr	r3, [pc, #376]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b36:	495b      	ldr	r1, [pc, #364]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8009b3c:	e001      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d033      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b58:	d01c      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009b5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b5e:	d816      	bhi.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b64:	d003      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b6a:	d007      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009b6c:	e00f      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6e:	4b4d      	ldr	r3, [pc, #308]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	4a4c      	ldr	r2, [pc, #304]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b7a:	e00c      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3324      	adds	r3, #36	; 0x24
 8009b80:	2101      	movs	r1, #1
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 fc6e 	bl	800a464 <RCCEx_PLL3_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b8c:	e003      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
      break;
 8009b92:	e000      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b9c:	4b41      	ldr	r3, [pc, #260]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009baa:	493e      	ldr	r1, [pc, #248]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	654b      	str	r3, [r1, #84]	; 0x54
 8009bb0:	e001      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d029      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bce:	d007      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009bd0:	e00f      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd2:	4b34      	ldr	r3, [pc, #208]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4a33      	ldr	r2, [pc, #204]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bde:	e00b      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	2102      	movs	r1, #2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fb8a 	bl	800a300 <RCCEx_PLL2_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bf0:	e002      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bfe:	4b29      	ldr	r3, [pc, #164]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0a:	4926      	ldr	r1, [pc, #152]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c10:	e001      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3324      	adds	r3, #36	; 0x24
 8009c26:	2102      	movs	r1, #2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fc1b 	bl	800a464 <RCCEx_PLL3_Config>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d033      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c4c:	d017      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c52:	d811      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c58:	d013      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c5e:	d80b      	bhi.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d010      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c68:	d106      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	4a0d      	ldr	r2, [pc, #52]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c76:	e007      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c7c:	e004      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c7e:	bf00      	nop
 8009c80:	e002      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c82:	bf00      	nop
 8009c84:	e000      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10c      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c8e:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c9a:	4902      	ldr	r1, [pc, #8]	; (8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8009ca0:	e004      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009ca2:	bf00      	nop
 8009ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009cb8:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	492e      	ldr	r1, [pc, #184]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d009      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009cd6:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ce4:	4926      	ldr	r1, [pc, #152]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d008      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cf6:	4b22      	ldr	r3, [pc, #136]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d02:	491f      	ldr	r1, [pc, #124]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4a19      	ldr	r2, [pc, #100]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d1e:	6113      	str	r3, [r2, #16]
 8009d20:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d2a:	4915      	ldr	r1, [pc, #84]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da08      	bge.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d38:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d44:	490e      	ldr	r1, [pc, #56]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d64:	4906      	ldr	r1, [pc, #24]	; (8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d6a:	7dbb      	ldrb	r3, [r7, #22]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	e000      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	58024400 	.word	0x58024400

08009d84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d88:	f7ff f85a 	bl	8008e40 <HAL_RCC_GetHCLKFreq>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	091b      	lsrs	r3, r3, #4
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	4904      	ldr	r1, [pc, #16]	; (8009dac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d9a:	5ccb      	ldrb	r3, [r1, r3]
 8009d9c:	f003 031f 	and.w	r3, r3, #31
 8009da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	58024400 	.word	0x58024400
 8009dac:	0800e008 	.word	0x0800e008

08009db0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b089      	sub	sp, #36	; 0x24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db8:	4ba1      	ldr	r3, [pc, #644]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbc:	f003 0303 	and.w	r3, r3, #3
 8009dc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009dc2:	4b9f      	ldr	r3, [pc, #636]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	0b1b      	lsrs	r3, r3, #12
 8009dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009dce:	4b9c      	ldr	r3, [pc, #624]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	091b      	lsrs	r3, r3, #4
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009dda:	4b99      	ldr	r3, [pc, #612]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	fb02 f303 	mul.w	r3, r2, r3
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 8111 	beq.w	800a020 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	f000 8083 	beq.w	8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f200 80a1 	bhi.w	8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d056      	beq.n	8009ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009e1a:	e099      	b.n	8009f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1c:	4b88      	ldr	r3, [pc, #544]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02d      	beq.n	8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e28:	4b85      	ldr	r3, [pc, #532]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	08db      	lsrs	r3, r3, #3
 8009e2e:	f003 0303 	and.w	r3, r3, #3
 8009e32:	4a84      	ldr	r2, [pc, #528]	; (800a044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009e34:	fa22 f303 	lsr.w	r3, r2, r3
 8009e38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b7b      	ldr	r3, [pc, #492]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e82:	e087      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e96:	4b6a      	ldr	r3, [pc, #424]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec6:	e065      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eda:	4b59      	ldr	r3, [pc, #356]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f0a:	e043      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1e:	4b48      	ldr	r3, [pc, #288]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f4e:	e021      	b.n	8009f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f62:	4b37      	ldr	r3, [pc, #220]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009f94:	4b2a      	ldr	r3, [pc, #168]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fba:	ee17 2a90 	vmov	r2, s15
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009fc2:	4b1f      	ldr	r3, [pc, #124]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe8:	ee17 2a90 	vmov	r2, s15
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffa:	ee07 3a90 	vmov	s15, r3
 8009ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a00a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a016:	ee17 2a90 	vmov	r2, s15
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a01e:	e008      	b.n	800a032 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	609a      	str	r2, [r3, #8]
}
 800a032:	bf00      	nop
 800a034:	3724      	adds	r7, #36	; 0x24
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	58024400 	.word	0x58024400
 800a044:	03d09000 	.word	0x03d09000
 800a048:	46000000 	.word	0x46000000
 800a04c:	4c742400 	.word	0x4c742400
 800a050:	4a742400 	.word	0x4a742400
 800a054:	4af42400 	.word	0x4af42400

0800a058 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a058:	b480      	push	{r7}
 800a05a:	b089      	sub	sp, #36	; 0x24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a060:	4ba1      	ldr	r3, [pc, #644]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a06a:	4b9f      	ldr	r3, [pc, #636]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	0d1b      	lsrs	r3, r3, #20
 800a070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a074:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a076:	4b9c      	ldr	r3, [pc, #624]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a082:	4b99      	ldr	r3, [pc, #612]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a086:	08db      	lsrs	r3, r3, #3
 800a088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8111 	beq.w	800a2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f000 8083 	beq.w	800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	f200 80a1 	bhi.w	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d056      	beq.n	800a170 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a0c2:	e099      	b.n	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0c4:	4b88      	ldr	r3, [pc, #544]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02d      	beq.n	800a12c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0d0:	4b85      	ldr	r3, [pc, #532]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	08db      	lsrs	r3, r3, #3
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	4a84      	ldr	r2, [pc, #528]	; (800a2ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b7b      	ldr	r3, [pc, #492]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a12a:	e087      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b6a      	ldr	r3, [pc, #424]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a152:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16e:	e065      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b59      	ldr	r3, [pc, #356]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a03 	vldr	s12, [r7, #12]
 800a196:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1b2:	e043      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c6:	4b48      	ldr	r3, [pc, #288]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f6:	e021      	b.n	800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20a:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a21e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a23a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a23c:	4b2a      	ldr	r3, [pc, #168]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	0a5b      	lsrs	r3, r3, #9
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a256:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a262:	ee17 2a90 	vmov	r2, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a26a:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a284:	edd7 6a07 	vldr	s13, [r7, #28]
 800a288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a290:	ee17 2a90 	vmov	r2, s15
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a298:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	0e1b      	lsrs	r3, r3, #24
 800a29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2be:	ee17 2a90 	vmov	r2, s15
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a2c6:	e008      	b.n	800a2da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	609a      	str	r2, [r3, #8]
}
 800a2da:	bf00      	nop
 800a2dc:	3724      	adds	r7, #36	; 0x24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	03d09000 	.word	0x03d09000
 800a2f0:	46000000 	.word	0x46000000
 800a2f4:	4c742400 	.word	0x4c742400
 800a2f8:	4a742400 	.word	0x4a742400
 800a2fc:	4af42400 	.word	0x4af42400

0800a300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a30e:	4b53      	ldr	r3, [pc, #332]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	2b03      	cmp	r3, #3
 800a318:	d101      	bne.n	800a31e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e099      	b.n	800a452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a31e:	4b4f      	ldr	r3, [pc, #316]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a4e      	ldr	r2, [pc, #312]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a32a:	f7fa faa5 	bl	8004878 <HAL_GetTick>
 800a32e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a330:	e008      	b.n	800a344 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a332:	f7fa faa1 	bl	8004878 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d901      	bls.n	800a344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e086      	b.n	800a452 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a344:	4b45      	ldr	r3, [pc, #276]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f0      	bne.n	800a332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a350:	4b42      	ldr	r3, [pc, #264]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	031b      	lsls	r3, r3, #12
 800a35e:	493f      	ldr	r1, [pc, #252]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a360:	4313      	orrs	r3, r2
 800a362:	628b      	str	r3, [r1, #40]	; 0x28
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	3b01      	subs	r3, #1
 800a36a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	3b01      	subs	r3, #1
 800a374:	025b      	lsls	r3, r3, #9
 800a376:	b29b      	uxth	r3, r3
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	061b      	lsls	r3, r3, #24
 800a390:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a394:	4931      	ldr	r1, [pc, #196]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a39a:	4b30      	ldr	r3, [pc, #192]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	492d      	ldr	r1, [pc, #180]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3ac:	4b2b      	ldr	r3, [pc, #172]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	f023 0220 	bic.w	r2, r3, #32
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	4928      	ldr	r1, [pc, #160]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3be:	4b27      	ldr	r3, [pc, #156]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	4a26      	ldr	r2, [pc, #152]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <RCCEx_PLL2_Config+0x160>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	69d2      	ldr	r2, [r2, #28]
 800a3d6:	00d2      	lsls	r2, r2, #3
 800a3d8:	4920      	ldr	r1, [pc, #128]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3de:	4b1f      	ldr	r3, [pc, #124]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	4a1e      	ldr	r2, [pc, #120]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3e4:	f043 0310 	orr.w	r3, r3, #16
 800a3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3f0:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	4a19      	ldr	r2, [pc, #100]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a3f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3fc:	e00f      	b.n	800a41e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d106      	bne.n	800a412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a404:	4b15      	ldr	r3, [pc, #84]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a14      	ldr	r2, [pc, #80]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a40a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a40e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a410:	e005      	b.n	800a41e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	4a11      	ldr	r2, [pc, #68]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a41c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a0e      	ldr	r2, [pc, #56]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a424:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a42a:	f7fa fa25 	bl	8004878 <HAL_GetTick>
 800a42e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a430:	e008      	b.n	800a444 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a432:	f7fa fa21 	bl	8004878 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e006      	b.n	800a452 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <RCCEx_PLL2_Config+0x15c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a450:	7bfb      	ldrb	r3, [r7, #15]
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	58024400 	.word	0x58024400
 800a460:	ffff0007 	.word	0xffff0007

0800a464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a472:	4b53      	ldr	r3, [pc, #332]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d101      	bne.n	800a482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e099      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a482:	4b4f      	ldr	r3, [pc, #316]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a4e      	ldr	r2, [pc, #312]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a48e:	f7fa f9f3 	bl	8004878 <HAL_GetTick>
 800a492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a494:	e008      	b.n	800a4a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a496:	f7fa f9ef 	bl	8004878 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e086      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a8:	4b45      	ldr	r3, [pc, #276]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f0      	bne.n	800a496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4b4:	4b42      	ldr	r3, [pc, #264]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	051b      	lsls	r3, r3, #20
 800a4c2:	493f      	ldr	r1, [pc, #252]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	025b      	lsls	r3, r3, #9
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	061b      	lsls	r3, r3, #24
 800a4f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4f8:	4931      	ldr	r1, [pc, #196]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4fe:	4b30      	ldr	r3, [pc, #192]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	492d      	ldr	r1, [pc, #180]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a510:	4b2b      	ldr	r3, [pc, #172]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	4928      	ldr	r1, [pc, #160]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a522:	4b27      	ldr	r3, [pc, #156]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a526:	4a26      	ldr	r2, [pc, #152]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a52c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a52e:	4b24      	ldr	r3, [pc, #144]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a532:	4b24      	ldr	r3, [pc, #144]	; (800a5c4 <RCCEx_PLL3_Config+0x160>)
 800a534:	4013      	ands	r3, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	69d2      	ldr	r2, [r2, #28]
 800a53a:	00d2      	lsls	r2, r2, #3
 800a53c:	4920      	ldr	r1, [pc, #128]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a542:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	4a1e      	ldr	r2, [pc, #120]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a54c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a554:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a558:	4a19      	ldr	r2, [pc, #100]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a55a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a55e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a560:	e00f      	b.n	800a582 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d106      	bne.n	800a576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a568:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	4a14      	ldr	r2, [pc, #80]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a56e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a572:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a574:	e005      	b.n	800a582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a576:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	4a11      	ldr	r2, [pc, #68]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a57c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a580:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a0e      	ldr	r2, [pc, #56]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a58c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a58e:	f7fa f973 	bl	8004878 <HAL_GetTick>
 800a592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a594:	e008      	b.n	800a5a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a596:	f7fa f96f 	bl	8004878 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d901      	bls.n	800a5a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e006      	b.n	800a5b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <RCCEx_PLL3_Config+0x15c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f0      	beq.n	800a596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	58024400 	.word	0x58024400
 800a5c4:	ffff0007 	.word	0xffff0007

0800a5c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e0f1      	b.n	800a7be <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a78      	ldr	r2, [pc, #480]	; (800a7c8 <HAL_SPI_Init+0x200>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00f      	beq.n	800a60a <HAL_SPI_Init+0x42>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a77      	ldr	r2, [pc, #476]	; (800a7cc <HAL_SPI_Init+0x204>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00a      	beq.n	800a60a <HAL_SPI_Init+0x42>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a75      	ldr	r2, [pc, #468]	; (800a7d0 <HAL_SPI_Init+0x208>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d005      	beq.n	800a60a <HAL_SPI_Init+0x42>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	2b0f      	cmp	r3, #15
 800a604:	d901      	bls.n	800a60a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e0d9      	b.n	800a7be <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fba2 	bl	800ad54 <SPI_GetPacketSize>
 800a610:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a6c      	ldr	r2, [pc, #432]	; (800a7c8 <HAL_SPI_Init+0x200>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00c      	beq.n	800a636 <HAL_SPI_Init+0x6e>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a6a      	ldr	r2, [pc, #424]	; (800a7cc <HAL_SPI_Init+0x204>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d007      	beq.n	800a636 <HAL_SPI_Init+0x6e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a69      	ldr	r2, [pc, #420]	; (800a7d0 <HAL_SPI_Init+0x208>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d002      	beq.n	800a636 <HAL_SPI_Init+0x6e>
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b08      	cmp	r3, #8
 800a634:	d811      	bhi.n	800a65a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a63a:	4a63      	ldr	r2, [pc, #396]	; (800a7c8 <HAL_SPI_Init+0x200>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d009      	beq.n	800a654 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a61      	ldr	r2, [pc, #388]	; (800a7cc <HAL_SPI_Init+0x204>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d004      	beq.n	800a654 <HAL_SPI_Init+0x8c>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a60      	ldr	r2, [pc, #384]	; (800a7d0 <HAL_SPI_Init+0x208>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d104      	bne.n	800a65e <HAL_SPI_Init+0x96>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b10      	cmp	r3, #16
 800a658:	d901      	bls.n	800a65e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e0af      	b.n	800a7be <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	d106      	bne.n	800a678 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7f9 fe08 	bl	8004288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2202      	movs	r2, #2
 800a67c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0201 	bic.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a69a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6a4:	d119      	bne.n	800a6da <HAL_SPI_Init+0x112>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6ae:	d103      	bne.n	800a6b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d008      	beq.n	800a6ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10c      	bne.n	800a6da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a6c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c8:	d107      	bne.n	800a6da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a6d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69da      	ldr	r2, [r3, #28]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ec:	ea42 0103 	orr.w	r1, r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	431a      	orrs	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	431a      	orrs	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	431a      	orrs	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	431a      	orrs	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72e:	431a      	orrs	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	431a      	orrs	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73a:	ea42 0103 	orr.w	r1, r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d113      	bne.n	800a77a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a764:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a778:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 0201 	bic.w	r2, r2, #1
 800a788:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40013000 	.word	0x40013000
 800a7cc:	40003800 	.word	0x40003800
 800a7d0:	40003c00 	.word	0x40003c00

0800a7d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	603b      	str	r3, [r7, #0]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3320      	adds	r3, #32
 800a7ea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_SPI_Transmit+0x2a>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e1d7      	b.n	800abae <HAL_SPI_Transmit+0x3da>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a806:	f7fa f837 	bl	8004878 <HAL_GetTick>
 800a80a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a812:	b2db      	uxtb	r3, r3
 800a814:	2b01      	cmp	r3, #1
 800a816:	d007      	beq.n	800a828 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a818:	2302      	movs	r3, #2
 800a81a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a824:	7efb      	ldrb	r3, [r7, #27]
 800a826:	e1c2      	b.n	800abae <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <HAL_SPI_Transmit+0x60>
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d107      	bne.n	800a844 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a840:	7efb      	ldrb	r3, [r7, #27]
 800a842:	e1b4      	b.n	800abae <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2203      	movs	r2, #3
 800a848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	88fa      	ldrh	r2, [r7, #6]
 800a85e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a894:	d107      	bne.n	800a8a6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	4b96      	ldr	r3, [pc, #600]	; (800ab08 <HAL_SPI_Transmit+0x334>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	88f9      	ldrh	r1, [r7, #6]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	6812      	ldr	r2, [r2, #0]
 800a8b6:	430b      	orrs	r3, r1
 800a8b8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f042 0201 	orr.w	r2, r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8d2:	d107      	bne.n	800a8e4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b0f      	cmp	r3, #15
 800a8ea:	d947      	bls.n	800a97c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a8ec:	e03f      	b.n	800a96e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d114      	bne.n	800a926 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6812      	ldr	r2, [r2, #0]
 800a906:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a924:	e023      	b.n	800a96e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a926:	f7f9 ffa7 	bl	8004878 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	d803      	bhi.n	800a93e <HAL_SPI_Transmit+0x16a>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d102      	bne.n	800a944 <HAL_SPI_Transmit+0x170>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d114      	bne.n	800a96e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 f937 	bl	800abb8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e11f      	b.n	800abae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a974:	b29b      	uxth	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1b9      	bne.n	800a8ee <HAL_SPI_Transmit+0x11a>
 800a97a:	e0f2      	b.n	800ab62 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	2b07      	cmp	r3, #7
 800a982:	f240 80e7 	bls.w	800ab54 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a986:	e05d      	b.n	800aa44 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b02      	cmp	r3, #2
 800a994:	d132      	bne.n	800a9fc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d918      	bls.n	800a9d4 <HAL_SPI_Transmit+0x200>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6812      	ldr	r2, [r2, #0]
 800a9b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ba:	1d1a      	adds	r2, r3, #4
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	3b02      	subs	r3, #2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9d2:	e037      	b.n	800aa44 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d8:	881a      	ldrh	r2, [r3, #0]
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e2:	1c9a      	adds	r2, r3, #2
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9fa:	e023      	b.n	800aa44 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9fc:	f7f9 ff3c 	bl	8004878 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d803      	bhi.n	800aa14 <HAL_SPI_Transmit+0x240>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d102      	bne.n	800aa1a <HAL_SPI_Transmit+0x246>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d114      	bne.n	800aa44 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f8cc 	bl	800abb8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e0b4      	b.n	800abae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d19b      	bne.n	800a988 <HAL_SPI_Transmit+0x1b4>
 800aa50:	e087      	b.n	800ab62 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d155      	bne.n	800ab0c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d918      	bls.n	800aa9e <HAL_SPI_Transmit+0x2ca>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	2b40      	cmp	r3, #64	; 0x40
 800aa72:	d914      	bls.n	800aa9e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6812      	ldr	r2, [r2, #0]
 800aa7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa84:	1d1a      	adds	r2, r3, #4
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	3b04      	subs	r3, #4
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa9c:	e05a      	b.n	800ab54 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d917      	bls.n	800aada <HAL_SPI_Transmit+0x306>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d013      	beq.n	800aada <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	881a      	ldrh	r2, [r3, #0]
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac0:	1c9a      	adds	r2, r3, #2
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aacc:	b29b      	uxth	r3, r3
 800aace:	3b02      	subs	r3, #2
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aad8:	e03c      	b.n	800ab54 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3320      	adds	r3, #32
 800aae4:	7812      	ldrb	r2, [r2, #0]
 800aae6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab04:	e026      	b.n	800ab54 <HAL_SPI_Transmit+0x380>
 800ab06:	bf00      	nop
 800ab08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab0c:	f7f9 feb4 	bl	8004878 <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d803      	bhi.n	800ab24 <HAL_SPI_Transmit+0x350>
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab22:	d102      	bne.n	800ab2a <HAL_SPI_Transmit+0x356>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d114      	bne.n	800ab54 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f844 	bl	800abb8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e02c      	b.n	800abae <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f47f af78 	bne.w	800aa52 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2108      	movs	r1, #8
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 f8c3 	bl	800acf8 <SPI_WaitOnFlagUntilTimeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab7e:	f043 0220 	orr.w	r2, r3, #32
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 f815 	bl	800abb8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e000      	b.n	800abae <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800abac:	7efb      	ldrb	r3, [r7, #27]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3720      	adds	r7, #32
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop

0800abb8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f042 0208 	orr.w	r2, r2, #8
 800abd6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699a      	ldr	r2, [r3, #24]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0210 	orr.w	r2, r2, #16
 800abe6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6919      	ldr	r1, [r3, #16]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	4b3c      	ldr	r3, [pc, #240]	; (800acf4 <SPI_CloseTransfer+0x13c>)
 800ac04:	400b      	ands	r3, r1
 800ac06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac16:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d014      	beq.n	800ac4e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00f      	beq.n	800ac4e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	699a      	ldr	r2, [r3, #24]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0220 	orr.w	r2, r2, #32
 800ac4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d014      	beq.n	800ac84 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00f      	beq.n	800ac84 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac6a:	f043 0204 	orr.w	r2, r3, #4
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac82:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00f      	beq.n	800acae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac94:	f043 0201 	orr.w	r2, r3, #1
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	699a      	ldr	r2, [r3, #24]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00f      	beq.n	800acd8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acbe:	f043 0208 	orr.w	r2, r3, #8
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	699a      	ldr	r2, [r3, #24]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acd6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	fffffc90 	.word	0xfffffc90

0800acf8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	4613      	mov	r3, r2
 800ad06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ad08:	e010      	b.n	800ad2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad0a:	f7f9 fdb5 	bl	8004878 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d803      	bhi.n	800ad22 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad20:	d102      	bne.n	800ad28 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e00f      	b.n	800ad4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695a      	ldr	r2, [r3, #20]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	4013      	ands	r3, r2
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2301      	moveq	r3, #1
 800ad3e:	2300      	movne	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	461a      	mov	r2, r3
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d0df      	beq.n	800ad0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad60:	095b      	lsrs	r3, r3, #5
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	3307      	adds	r3, #7
 800ad72:	08db      	lsrs	r3, r3, #3
 800ad74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e049      	b.n	800ae30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d106      	bne.n	800adb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7f9 fad5 	bl	8004360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2202      	movs	r2, #2
 800adba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3304      	adds	r3, #4
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f000 fa23 	bl	800b214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d001      	beq.n	800ae50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e054      	b.n	800aefa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f042 0201 	orr.w	r2, r2, #1
 800ae66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a26      	ldr	r2, [pc, #152]	; (800af08 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d022      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae7a:	d01d      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a22      	ldr	r2, [pc, #136]	; (800af0c <HAL_TIM_Base_Start_IT+0xd4>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d018      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a21      	ldr	r2, [pc, #132]	; (800af10 <HAL_TIM_Base_Start_IT+0xd8>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d013      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a1f      	ldr	r2, [pc, #124]	; (800af14 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00e      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <HAL_TIM_Base_Start_IT+0xe0>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d009      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a1c      	ldr	r2, [pc, #112]	; (800af1c <HAL_TIM_Base_Start_IT+0xe4>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d004      	beq.n	800aeb8 <HAL_TIM_Base_Start_IT+0x80>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a1b      	ldr	r2, [pc, #108]	; (800af20 <HAL_TIM_Base_Start_IT+0xe8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d115      	bne.n	800aee4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689a      	ldr	r2, [r3, #8]
 800aebe:	4b19      	ldr	r3, [pc, #100]	; (800af24 <HAL_TIM_Base_Start_IT+0xec>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b06      	cmp	r3, #6
 800aec8:	d015      	beq.n	800aef6 <HAL_TIM_Base_Start_IT+0xbe>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed0:	d011      	beq.n	800aef6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f042 0201 	orr.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee2:	e008      	b.n	800aef6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	e000      	b.n	800aef8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	40010000 	.word	0x40010000
 800af0c:	40000400 	.word	0x40000400
 800af10:	40000800 	.word	0x40000800
 800af14:	40000c00 	.word	0x40000c00
 800af18:	40010400 	.word	0x40010400
 800af1c:	40001800 	.word	0x40001800
 800af20:	40014000 	.word	0x40014000
 800af24:	00010007 	.word	0x00010007

0800af28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0201 	bic.w	r2, r2, #1
 800af3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6a1a      	ldr	r2, [r3, #32]
 800af46:	f241 1311 	movw	r3, #4369	; 0x1111
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10f      	bne.n	800af70 <HAL_TIM_Base_Stop_IT+0x48>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6a1a      	ldr	r2, [r3, #32]
 800af56:	f240 4344 	movw	r3, #1092	; 0x444
 800af5a:	4013      	ands	r3, r2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d107      	bne.n	800af70 <HAL_TIM_Base_Stop_IT+0x48>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0201 	bic.w	r2, r2, #1
 800af6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d122      	bne.n	800afe2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d11b      	bne.n	800afe2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f06f 0202 	mvn.w	r2, #2
 800afb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f905 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800afce:	e005      	b.n	800afdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f8f7 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f908 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b04      	cmp	r3, #4
 800afee:	d122      	bne.n	800b036 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f003 0304 	and.w	r3, r3, #4
 800affa:	2b04      	cmp	r3, #4
 800affc:	d11b      	bne.n	800b036 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f06f 0204 	mvn.w	r2, #4
 800b006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f8db 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b022:	e005      	b.n	800b030 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f8cd 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f8de 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b08      	cmp	r3, #8
 800b042:	d122      	bne.n	800b08a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b08      	cmp	r3, #8
 800b050:	d11b      	bne.n	800b08a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f06f 0208 	mvn.w	r2, #8
 800b05a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2204      	movs	r2, #4
 800b060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f8b1 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b076:	e005      	b.n	800b084 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f8a3 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f8b4 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f003 0310 	and.w	r3, r3, #16
 800b094:	2b10      	cmp	r3, #16
 800b096:	d122      	bne.n	800b0de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f003 0310 	and.w	r3, r3, #16
 800b0a2:	2b10      	cmp	r3, #16
 800b0a4:	d11b      	bne.n	800b0de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f06f 0210 	mvn.w	r2, #16
 800b0ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2208      	movs	r2, #8
 800b0b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f887 	bl	800b1d8 <HAL_TIM_IC_CaptureCallback>
 800b0ca:	e005      	b.n	800b0d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f879 	bl	800b1c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f88a 	bl	800b1ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d10e      	bne.n	800b10a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d107      	bne.n	800b10a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f06f 0201 	mvn.w	r2, #1
 800b102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7f8 fb95 	bl	8003834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	2b80      	cmp	r3, #128	; 0x80
 800b116:	d10e      	bne.n	800b136 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b122:	2b80      	cmp	r3, #128	; 0x80
 800b124:	d107      	bne.n	800b136 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b12e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f9a1 	bl	800b478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b144:	d10e      	bne.n	800b164 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b150:	2b80      	cmp	r3, #128	; 0x80
 800b152:	d107      	bne.n	800b164 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f994 	bl	800b48c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b40      	cmp	r3, #64	; 0x40
 800b170:	d10e      	bne.n	800b190 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b40      	cmp	r3, #64	; 0x40
 800b17e:	d107      	bne.n	800b190 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f838 	bl	800b200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b20      	cmp	r3, #32
 800b19c:	d10e      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0320 	and.w	r3, r3, #32
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d107      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0220 	mvn.w	r2, #32
 800b1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f954 	bl	800b464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a40      	ldr	r2, [pc, #256]	; (800b328 <TIM_Base_SetConfig+0x114>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d013      	beq.n	800b254 <TIM_Base_SetConfig+0x40>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d00f      	beq.n	800b254 <TIM_Base_SetConfig+0x40>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a3d      	ldr	r2, [pc, #244]	; (800b32c <TIM_Base_SetConfig+0x118>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d00b      	beq.n	800b254 <TIM_Base_SetConfig+0x40>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a3c      	ldr	r2, [pc, #240]	; (800b330 <TIM_Base_SetConfig+0x11c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d007      	beq.n	800b254 <TIM_Base_SetConfig+0x40>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a3b      	ldr	r2, [pc, #236]	; (800b334 <TIM_Base_SetConfig+0x120>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d003      	beq.n	800b254 <TIM_Base_SetConfig+0x40>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a3a      	ldr	r2, [pc, #232]	; (800b338 <TIM_Base_SetConfig+0x124>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d108      	bne.n	800b266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a2f      	ldr	r2, [pc, #188]	; (800b328 <TIM_Base_SetConfig+0x114>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d01f      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b274:	d01b      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a2c      	ldr	r2, [pc, #176]	; (800b32c <TIM_Base_SetConfig+0x118>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d017      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a2b      	ldr	r2, [pc, #172]	; (800b330 <TIM_Base_SetConfig+0x11c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a2a      	ldr	r2, [pc, #168]	; (800b334 <TIM_Base_SetConfig+0x120>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00f      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a29      	ldr	r2, [pc, #164]	; (800b338 <TIM_Base_SetConfig+0x124>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00b      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a28      	ldr	r2, [pc, #160]	; (800b33c <TIM_Base_SetConfig+0x128>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d007      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a27      	ldr	r2, [pc, #156]	; (800b340 <TIM_Base_SetConfig+0x12c>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d003      	beq.n	800b2ae <TIM_Base_SetConfig+0x9a>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a26      	ldr	r2, [pc, #152]	; (800b344 <TIM_Base_SetConfig+0x130>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d108      	bne.n	800b2c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a10      	ldr	r2, [pc, #64]	; (800b328 <TIM_Base_SetConfig+0x114>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d00f      	beq.n	800b30c <TIM_Base_SetConfig+0xf8>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a12      	ldr	r2, [pc, #72]	; (800b338 <TIM_Base_SetConfig+0x124>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d00b      	beq.n	800b30c <TIM_Base_SetConfig+0xf8>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a11      	ldr	r2, [pc, #68]	; (800b33c <TIM_Base_SetConfig+0x128>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d007      	beq.n	800b30c <TIM_Base_SetConfig+0xf8>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4a10      	ldr	r2, [pc, #64]	; (800b340 <TIM_Base_SetConfig+0x12c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d003      	beq.n	800b30c <TIM_Base_SetConfig+0xf8>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a0f      	ldr	r2, [pc, #60]	; (800b344 <TIM_Base_SetConfig+0x130>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d103      	bne.n	800b314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	615a      	str	r2, [r3, #20]
}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	40010000 	.word	0x40010000
 800b32c:	40000400 	.word	0x40000400
 800b330:	40000800 	.word	0x40000800
 800b334:	40000c00 	.word	0x40000c00
 800b338:	40010400 	.word	0x40010400
 800b33c:	40014000 	.word	0x40014000
 800b340:	40014400 	.word	0x40014400
 800b344:	40014800 	.word	0x40014800

0800b348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e06d      	b.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2202      	movs	r2, #2
 800b36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a30      	ldr	r2, [pc, #192]	; (800b448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d004      	beq.n	800b394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a2f      	ldr	r2, [pc, #188]	; (800b44c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d108      	bne.n	800b3a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b39a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a20      	ldr	r2, [pc, #128]	; (800b448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d022      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3d2:	d01d      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a1d      	ldr	r2, [pc, #116]	; (800b450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d018      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a1c      	ldr	r2, [pc, #112]	; (800b454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d013      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a1a      	ldr	r2, [pc, #104]	; (800b458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d00e      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a15      	ldr	r2, [pc, #84]	; (800b44c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d009      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a16      	ldr	r2, [pc, #88]	; (800b45c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d004      	beq.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a15      	ldr	r2, [pc, #84]	; (800b460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d10c      	bne.n	800b42a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	40010000 	.word	0x40010000
 800b44c:	40010400 	.word	0x40010400
 800b450:	40000400 	.word	0x40000400
 800b454:	40000800 	.word	0x40000800
 800b458:	40000c00 	.word	0x40000c00
 800b45c:	40001800 	.word	0x40001800
 800b460:	40014000 	.word	0x40014000

0800b464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e042      	b.n	800b538 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7f8 ff73 	bl	80043b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2224      	movs	r2, #36	; 0x24
 800b4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0201 	bic.w	r2, r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fbea 	bl	800bcbc <UART_SetConfig>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d101      	bne.n	800b4f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e022      	b.n	800b538 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 f946 	bl	800c78c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b50e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b51e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0201 	orr.w	r2, r2, #1
 800b52e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f001 f9cd 	bl	800c8d0 <UART_CheckIdleState>
 800b536:	4603      	mov	r3, r0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b0ba      	sub	sp, #232	; 0xe8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b56a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b56e:	4013      	ands	r3, r2
 800b570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d11b      	bne.n	800b5b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	2b00      	cmp	r3, #0
 800b586:	d015      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d009      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 835a 	beq.w	800bc5e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
      }
      return;
 800b5b2:	e354      	b.n	800bc5e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 811f 	beq.w	800b7fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b5c2:	4b8b      	ldr	r3, [pc, #556]	; (800b7f0 <HAL_UART_IRQHandler+0x2b0>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5ce:	4b89      	ldr	r3, [pc, #548]	; (800b7f4 <HAL_UART_IRQHandler+0x2b4>)
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 8112 	beq.w	800b7fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d011      	beq.n	800b608 <HAL_UART_IRQHandler+0xc8>
 800b5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00b      	beq.n	800b608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5fe:	f043 0201 	orr.w	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d011      	beq.n	800b638 <HAL_UART_IRQHandler+0xf8>
 800b614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2202      	movs	r2, #2
 800b626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b62e:	f043 0204 	orr.w	r2, r3, #4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d011      	beq.n	800b668 <HAL_UART_IRQHandler+0x128>
 800b644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2204      	movs	r2, #4
 800b656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b65e:	f043 0202 	orr.w	r2, r3, #2
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b684:	4b5a      	ldr	r3, [pc, #360]	; (800b7f0 <HAL_UART_IRQHandler+0x2b0>)
 800b686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00b      	beq.n	800b6a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2208      	movs	r2, #8
 800b692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b69a:	f043 0208 	orr.w	r2, r3, #8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d012      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x196>
 800b6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00c      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6cc:	f043 0220 	orr.w	r2, r3, #32
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 82c0 	beq.w	800bc62 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d013      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d007      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b71c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	d005      	beq.n	800b73a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b72e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b736:	2b00      	cmp	r3, #0
 800b738:	d04f      	beq.n	800b7da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 f9dc 	bl	800caf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b40      	cmp	r3, #64	; 0x40
 800b74c:	d141      	bne.n	800b7d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3308      	adds	r3, #8
 800b754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b76c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b77a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b77e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1d9      	bne.n	800b74e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d013      	beq.n	800b7ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7a6:	4a14      	ldr	r2, [pc, #80]	; (800b7f8 <HAL_UART_IRQHandler+0x2b8>)
 800b7a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fa f83c 	bl	800582c <HAL_DMA_Abort_IT>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d017      	beq.n	800b7ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c8:	e00f      	b.n	800b7ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fa60 	bl	800bc90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d0:	e00b      	b.n	800b7ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa5c 	bl	800bc90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d8:	e007      	b.n	800b7ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa58 	bl	800bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b7e8:	e23b      	b.n	800bc62 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ea:	bf00      	nop
    return;
 800b7ec:	e239      	b.n	800bc62 <HAL_UART_IRQHandler+0x722>
 800b7ee:	bf00      	nop
 800b7f0:	10000001 	.word	0x10000001
 800b7f4:	04000120 	.word	0x04000120
 800b7f8:	0800cbc5 	.word	0x0800cbc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b800:	2b01      	cmp	r3, #1
 800b802:	f040 81ce 	bne.w	800bba2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80a:	f003 0310 	and.w	r3, r3, #16
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 81c7 	beq.w	800bba2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b818:	f003 0310 	and.w	r3, r3, #16
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 81c0 	beq.w	800bba2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2210      	movs	r2, #16
 800b828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b834:	2b40      	cmp	r3, #64	; 0x40
 800b836:	f040 813b 	bne.w	800bab0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a8b      	ldr	r2, [pc, #556]	; (800ba70 <HAL_UART_IRQHandler+0x530>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d059      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a89      	ldr	r2, [pc, #548]	; (800ba74 <HAL_UART_IRQHandler+0x534>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d053      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a87      	ldr	r2, [pc, #540]	; (800ba78 <HAL_UART_IRQHandler+0x538>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d04d      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a85      	ldr	r2, [pc, #532]	; (800ba7c <HAL_UART_IRQHandler+0x53c>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d047      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a83      	ldr	r2, [pc, #524]	; (800ba80 <HAL_UART_IRQHandler+0x540>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d041      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a81      	ldr	r2, [pc, #516]	; (800ba84 <HAL_UART_IRQHandler+0x544>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d03b      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a7f      	ldr	r2, [pc, #508]	; (800ba88 <HAL_UART_IRQHandler+0x548>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d035      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a7d      	ldr	r2, [pc, #500]	; (800ba8c <HAL_UART_IRQHandler+0x54c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d02f      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a7b      	ldr	r2, [pc, #492]	; (800ba90 <HAL_UART_IRQHandler+0x550>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d029      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a79      	ldr	r2, [pc, #484]	; (800ba94 <HAL_UART_IRQHandler+0x554>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d023      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a77      	ldr	r2, [pc, #476]	; (800ba98 <HAL_UART_IRQHandler+0x558>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d01d      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a75      	ldr	r2, [pc, #468]	; (800ba9c <HAL_UART_IRQHandler+0x55c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d017      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a73      	ldr	r2, [pc, #460]	; (800baa0 <HAL_UART_IRQHandler+0x560>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d011      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a71      	ldr	r2, [pc, #452]	; (800baa4 <HAL_UART_IRQHandler+0x564>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00b      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a6f      	ldr	r2, [pc, #444]	; (800baa8 <HAL_UART_IRQHandler+0x568>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d005      	beq.n	800b8fa <HAL_UART_IRQHandler+0x3ba>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a6d      	ldr	r2, [pc, #436]	; (800baac <HAL_UART_IRQHandler+0x56c>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d105      	bne.n	800b906 <HAL_UART_IRQHandler+0x3c6>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	b29b      	uxth	r3, r3
 800b904:	e004      	b.n	800b910 <HAL_UART_IRQHandler+0x3d0>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 81a4 	beq.w	800bc66 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b924:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b928:	429a      	cmp	r2, r3
 800b92a:	f080 819c 	bcs.w	800bc66 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b942:	f000 8086 	beq.w	800ba52 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b95a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b95e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b974:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b97c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1da      	bne.n	800b946 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3308      	adds	r3, #8
 800b996:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9c0:	e841 2300 	strex	r3, r2, [r1]
 800b9c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1e1      	bne.n	800b990 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9d6:	e853 3f00 	ldrex	r3, [r3]
 800b9da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e3      	bne.n	800b9cc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba22:	f023 0310 	bic.w	r3, r3, #16
 800ba26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba34:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba3c:	e841 2300 	strex	r3, r2, [r1]
 800ba40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1e4      	bne.n	800ba12 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f9 fbcf 	bl	80051f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f91c 	bl	800bca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba6c:	e0fb      	b.n	800bc66 <HAL_UART_IRQHandler+0x726>
 800ba6e:	bf00      	nop
 800ba70:	40020010 	.word	0x40020010
 800ba74:	40020028 	.word	0x40020028
 800ba78:	40020040 	.word	0x40020040
 800ba7c:	40020058 	.word	0x40020058
 800ba80:	40020070 	.word	0x40020070
 800ba84:	40020088 	.word	0x40020088
 800ba88:	400200a0 	.word	0x400200a0
 800ba8c:	400200b8 	.word	0x400200b8
 800ba90:	40020410 	.word	0x40020410
 800ba94:	40020428 	.word	0x40020428
 800ba98:	40020440 	.word	0x40020440
 800ba9c:	40020458 	.word	0x40020458
 800baa0:	40020470 	.word	0x40020470
 800baa4:	40020488 	.word	0x40020488
 800baa8:	400204a0 	.word	0x400204a0
 800baac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800babc:	b29b      	uxth	r3, r3
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baca:	b29b      	uxth	r3, r3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 80cc 	beq.w	800bc6a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800bad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80c7 	beq.w	800bc6a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800baea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	461a      	mov	r2, r3
 800bafa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bafe:	647b      	str	r3, [r7, #68]	; 0x44
 800bb00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb06:	e841 2300 	strex	r3, r2, [r1]
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e4      	bne.n	800badc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3308      	adds	r3, #8
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	623b      	str	r3, [r7, #32]
   return(result);
 800bb22:	6a3a      	ldr	r2, [r7, #32]
 800bb24:	4b54      	ldr	r3, [pc, #336]	; (800bc78 <HAL_UART_IRQHandler+0x738>)
 800bb26:	4013      	ands	r3, r2
 800bb28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3308      	adds	r3, #8
 800bb32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb36:	633a      	str	r2, [r7, #48]	; 0x30
 800bb38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb3e:	e841 2300 	strex	r3, r2, [r1]
 800bb42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1e3      	bne.n	800bb12 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f023 0310 	bic.w	r3, r3, #16
 800bb72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb80:	61fb      	str	r3, [r7, #28]
 800bb82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	69b9      	ldr	r1, [r7, #24]
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e4      	bne.n	800bb5e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f882 	bl	800bca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bba0:	e063      	b.n	800bc6a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00e      	beq.n	800bbcc <HAL_UART_IRQHandler+0x68c>
 800bbae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d008      	beq.n	800bbcc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bbc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f001 f83e 	bl	800cc46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbca:	e051      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bbcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d014      	beq.n	800bc02 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bbd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d105      	bne.n	800bbf0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bbe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d008      	beq.n	800bc02 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d03a      	beq.n	800bc6e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	4798      	blx	r3
    }
    return;
 800bc00:	e035      	b.n	800bc6e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d009      	beq.n	800bc22 <HAL_UART_IRQHandler+0x6e2>
 800bc0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 ffe8 	bl	800cbf0 <UART_EndTransmit_IT>
    return;
 800bc20:	e026      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <HAL_UART_IRQHandler+0x702>
 800bc2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d003      	beq.n	800bc42 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f001 f817 	bl	800cc6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc40:	e016      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d010      	beq.n	800bc70 <HAL_UART_IRQHandler+0x730>
 800bc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da0c      	bge.n	800bc70 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 ffff 	bl	800cc5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc5c:	e008      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
      return;
 800bc5e:	bf00      	nop
 800bc60:	e006      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
    return;
 800bc62:	bf00      	nop
 800bc64:	e004      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
      return;
 800bc66:	bf00      	nop
 800bc68:	e002      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
      return;
 800bc6a:	bf00      	nop
 800bc6c:	e000      	b.n	800bc70 <HAL_UART_IRQHandler+0x730>
    return;
 800bc6e:	bf00      	nop
  }
}
 800bc70:	37e8      	adds	r7, #232	; 0xe8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	effffffe 	.word	0xeffffffe

0800bc7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcc0:	b092      	sub	sp, #72	; 0x48
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	431a      	orrs	r2, r3
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4bbe      	ldr	r3, [pc, #760]	; (800bfe4 <UART_SetConfig+0x328>)
 800bcec:	4013      	ands	r3, r2
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4ab3      	ldr	r2, [pc, #716]	; (800bfe8 <UART_SetConfig+0x32c>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d004      	beq.n	800bd28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd24:	4313      	orrs	r3, r2
 800bd26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	689a      	ldr	r2, [r3, #8]
 800bd2e:	4baf      	ldr	r3, [pc, #700]	; (800bfec <UART_SetConfig+0x330>)
 800bd30:	4013      	ands	r3, r2
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	6812      	ldr	r2, [r2, #0]
 800bd36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	f023 010f 	bic.w	r1, r3, #15
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4aa6      	ldr	r2, [pc, #664]	; (800bff0 <UART_SetConfig+0x334>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d177      	bne.n	800be4c <UART_SetConfig+0x190>
 800bd5c:	4ba5      	ldr	r3, [pc, #660]	; (800bff4 <UART_SetConfig+0x338>)
 800bd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd64:	2b28      	cmp	r3, #40	; 0x28
 800bd66:	d86d      	bhi.n	800be44 <UART_SetConfig+0x188>
 800bd68:	a201      	add	r2, pc, #4	; (adr r2, 800bd70 <UART_SetConfig+0xb4>)
 800bd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6e:	bf00      	nop
 800bd70:	0800be15 	.word	0x0800be15
 800bd74:	0800be45 	.word	0x0800be45
 800bd78:	0800be45 	.word	0x0800be45
 800bd7c:	0800be45 	.word	0x0800be45
 800bd80:	0800be45 	.word	0x0800be45
 800bd84:	0800be45 	.word	0x0800be45
 800bd88:	0800be45 	.word	0x0800be45
 800bd8c:	0800be45 	.word	0x0800be45
 800bd90:	0800be1d 	.word	0x0800be1d
 800bd94:	0800be45 	.word	0x0800be45
 800bd98:	0800be45 	.word	0x0800be45
 800bd9c:	0800be45 	.word	0x0800be45
 800bda0:	0800be45 	.word	0x0800be45
 800bda4:	0800be45 	.word	0x0800be45
 800bda8:	0800be45 	.word	0x0800be45
 800bdac:	0800be45 	.word	0x0800be45
 800bdb0:	0800be25 	.word	0x0800be25
 800bdb4:	0800be45 	.word	0x0800be45
 800bdb8:	0800be45 	.word	0x0800be45
 800bdbc:	0800be45 	.word	0x0800be45
 800bdc0:	0800be45 	.word	0x0800be45
 800bdc4:	0800be45 	.word	0x0800be45
 800bdc8:	0800be45 	.word	0x0800be45
 800bdcc:	0800be45 	.word	0x0800be45
 800bdd0:	0800be2d 	.word	0x0800be2d
 800bdd4:	0800be45 	.word	0x0800be45
 800bdd8:	0800be45 	.word	0x0800be45
 800bddc:	0800be45 	.word	0x0800be45
 800bde0:	0800be45 	.word	0x0800be45
 800bde4:	0800be45 	.word	0x0800be45
 800bde8:	0800be45 	.word	0x0800be45
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be35 	.word	0x0800be35
 800bdf4:	0800be45 	.word	0x0800be45
 800bdf8:	0800be45 	.word	0x0800be45
 800bdfc:	0800be45 	.word	0x0800be45
 800be00:	0800be45 	.word	0x0800be45
 800be04:	0800be45 	.word	0x0800be45
 800be08:	0800be45 	.word	0x0800be45
 800be0c:	0800be45 	.word	0x0800be45
 800be10:	0800be3d 	.word	0x0800be3d
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1a:	e222      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be22:	e21e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2a:	e21a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be32:	e216      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3a:	e212      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be42:	e20e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be44:	2380      	movs	r3, #128	; 0x80
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4a:	e20a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a69      	ldr	r2, [pc, #420]	; (800bff8 <UART_SetConfig+0x33c>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d130      	bne.n	800beb8 <UART_SetConfig+0x1fc>
 800be56:	4b67      	ldr	r3, [pc, #412]	; (800bff4 <UART_SetConfig+0x338>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d826      	bhi.n	800beb0 <UART_SetConfig+0x1f4>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <UART_SetConfig+0x1ac>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be81 	.word	0x0800be81
 800be6c:	0800be89 	.word	0x0800be89
 800be70:	0800be91 	.word	0x0800be91
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be86:	e1ec      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be88:	2304      	movs	r3, #4
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8e:	e1e8      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be90:	2308      	movs	r3, #8
 800be92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be96:	e1e4      	b.n	800c262 <UART_SetConfig+0x5a6>
 800be98:	2310      	movs	r3, #16
 800be9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9e:	e1e0      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bea0:	2320      	movs	r3, #32
 800bea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea6:	e1dc      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bea8:	2340      	movs	r3, #64	; 0x40
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beae:	e1d8      	b.n	800c262 <UART_SetConfig+0x5a6>
 800beb0:	2380      	movs	r3, #128	; 0x80
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb6:	e1d4      	b.n	800c262 <UART_SetConfig+0x5a6>
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a4f      	ldr	r2, [pc, #316]	; (800bffc <UART_SetConfig+0x340>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d130      	bne.n	800bf24 <UART_SetConfig+0x268>
 800bec2:	4b4c      	ldr	r3, [pc, #304]	; (800bff4 <UART_SetConfig+0x338>)
 800bec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b05      	cmp	r3, #5
 800becc:	d826      	bhi.n	800bf1c <UART_SetConfig+0x260>
 800bece:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <UART_SetConfig+0x218>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800beed 	.word	0x0800beed
 800bed8:	0800bef5 	.word	0x0800bef5
 800bedc:	0800befd 	.word	0x0800befd
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf15 	.word	0x0800bf15
 800beec:	2300      	movs	r3, #0
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e1b6      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bef4:	2304      	movs	r3, #4
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e1b2      	b.n	800c262 <UART_SetConfig+0x5a6>
 800befc:	2308      	movs	r3, #8
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e1ae      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf04:	2310      	movs	r3, #16
 800bf06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0a:	e1aa      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf0c:	2320      	movs	r3, #32
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf12:	e1a6      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e1a2      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e19e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a35      	ldr	r2, [pc, #212]	; (800c000 <UART_SetConfig+0x344>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d130      	bne.n	800bf90 <UART_SetConfig+0x2d4>
 800bf2e:	4b31      	ldr	r3, [pc, #196]	; (800bff4 <UART_SetConfig+0x338>)
 800bf30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf32:	f003 0307 	and.w	r3, r3, #7
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	d826      	bhi.n	800bf88 <UART_SetConfig+0x2cc>
 800bf3a:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <UART_SetConfig+0x284>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf59 	.word	0x0800bf59
 800bf44:	0800bf61 	.word	0x0800bf61
 800bf48:	0800bf69 	.word	0x0800bf69
 800bf4c:	0800bf71 	.word	0x0800bf71
 800bf50:	0800bf79 	.word	0x0800bf79
 800bf54:	0800bf81 	.word	0x0800bf81
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5e:	e180      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf60:	2304      	movs	r3, #4
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e17c      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6e:	e178      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf70:	2310      	movs	r3, #16
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf76:	e174      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf78:	2320      	movs	r3, #32
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e170      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf80:	2340      	movs	r3, #64	; 0x40
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e16c      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf88:	2380      	movs	r3, #128	; 0x80
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e168      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1b      	ldr	r2, [pc, #108]	; (800c004 <UART_SetConfig+0x348>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d142      	bne.n	800c020 <UART_SetConfig+0x364>
 800bf9a:	4b16      	ldr	r3, [pc, #88]	; (800bff4 <UART_SetConfig+0x338>)
 800bf9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	d838      	bhi.n	800c018 <UART_SetConfig+0x35c>
 800bfa6:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <UART_SetConfig+0x2f0>)
 800bfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfac:	0800bfc5 	.word	0x0800bfc5
 800bfb0:	0800bfcd 	.word	0x0800bfcd
 800bfb4:	0800bfd5 	.word	0x0800bfd5
 800bfb8:	0800bfdd 	.word	0x0800bfdd
 800bfbc:	0800c009 	.word	0x0800c009
 800bfc0:	0800c011 	.word	0x0800c011
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfca:	e14a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bfcc:	2304      	movs	r3, #4
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd2:	e146      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e142      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bfdc:	2310      	movs	r3, #16
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e13e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800bfe4:	cfff69f3 	.word	0xcfff69f3
 800bfe8:	58000c00 	.word	0x58000c00
 800bfec:	11fff4ff 	.word	0x11fff4ff
 800bff0:	40011000 	.word	0x40011000
 800bff4:	58024400 	.word	0x58024400
 800bff8:	40004400 	.word	0x40004400
 800bffc:	40004800 	.word	0x40004800
 800c000:	40004c00 	.word	0x40004c00
 800c004:	40005000 	.word	0x40005000
 800c008:	2320      	movs	r3, #32
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00e:	e128      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c010:	2340      	movs	r3, #64	; 0x40
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c016:	e124      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c018:	2380      	movs	r3, #128	; 0x80
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01e:	e120      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4acb      	ldr	r2, [pc, #812]	; (800c354 <UART_SetConfig+0x698>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d176      	bne.n	800c118 <UART_SetConfig+0x45c>
 800c02a:	4bcb      	ldr	r3, [pc, #812]	; (800c358 <UART_SetConfig+0x69c>)
 800c02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c032:	2b28      	cmp	r3, #40	; 0x28
 800c034:	d86c      	bhi.n	800c110 <UART_SetConfig+0x454>
 800c036:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <UART_SetConfig+0x380>)
 800c038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03c:	0800c0e1 	.word	0x0800c0e1
 800c040:	0800c111 	.word	0x0800c111
 800c044:	0800c111 	.word	0x0800c111
 800c048:	0800c111 	.word	0x0800c111
 800c04c:	0800c111 	.word	0x0800c111
 800c050:	0800c111 	.word	0x0800c111
 800c054:	0800c111 	.word	0x0800c111
 800c058:	0800c111 	.word	0x0800c111
 800c05c:	0800c0e9 	.word	0x0800c0e9
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c111 	.word	0x0800c111
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c111 	.word	0x0800c111
 800c078:	0800c111 	.word	0x0800c111
 800c07c:	0800c0f1 	.word	0x0800c0f1
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c111 	.word	0x0800c111
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c0f9 	.word	0x0800c0f9
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c111 	.word	0x0800c111
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c101 	.word	0x0800c101
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e0bc      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e0b8      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e0b4      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e0b0      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e0ac      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e0a8      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c110:	2380      	movs	r3, #128	; 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e0a4      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a8f      	ldr	r2, [pc, #572]	; (800c35c <UART_SetConfig+0x6a0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d130      	bne.n	800c184 <UART_SetConfig+0x4c8>
 800c122:	4b8d      	ldr	r3, [pc, #564]	; (800c358 <UART_SetConfig+0x69c>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d826      	bhi.n	800c17c <UART_SetConfig+0x4c0>
 800c12e:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <UART_SetConfig+0x478>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c14d 	.word	0x0800c14d
 800c138:	0800c155 	.word	0x0800c155
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e086      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c154:	2304      	movs	r3, #4
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e082      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c15c:	2308      	movs	r3, #8
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e07e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c164:	2310      	movs	r3, #16
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e07a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c16c:	2320      	movs	r3, #32
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e076      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c174:	2340      	movs	r3, #64	; 0x40
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e072      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c17c:	2380      	movs	r3, #128	; 0x80
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e06e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a75      	ldr	r2, [pc, #468]	; (800c360 <UART_SetConfig+0x6a4>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d130      	bne.n	800c1f0 <UART_SetConfig+0x534>
 800c18e:	4b72      	ldr	r3, [pc, #456]	; (800c358 <UART_SetConfig+0x69c>)
 800c190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c192:	f003 0307 	and.w	r3, r3, #7
 800c196:	2b05      	cmp	r3, #5
 800c198:	d826      	bhi.n	800c1e8 <UART_SetConfig+0x52c>
 800c19a:	a201      	add	r2, pc, #4	; (adr r2, 800c1a0 <UART_SetConfig+0x4e4>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1b9 	.word	0x0800c1b9
 800c1a4:	0800c1c1 	.word	0x0800c1c1
 800c1a8:	0800c1c9 	.word	0x0800c1c9
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d9 	.word	0x0800c1d9
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e050      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e04c      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e048      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e044      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1d8:	2320      	movs	r3, #32
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e040      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1e0:	2340      	movs	r3, #64	; 0x40
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e03c      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1e8:	2380      	movs	r3, #128	; 0x80
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e038      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a5b      	ldr	r2, [pc, #364]	; (800c364 <UART_SetConfig+0x6a8>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d130      	bne.n	800c25c <UART_SetConfig+0x5a0>
 800c1fa:	4b57      	ldr	r3, [pc, #348]	; (800c358 <UART_SetConfig+0x69c>)
 800c1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fe:	f003 0307 	and.w	r3, r3, #7
 800c202:	2b05      	cmp	r3, #5
 800c204:	d826      	bhi.n	800c254 <UART_SetConfig+0x598>
 800c206:	a201      	add	r2, pc, #4	; (adr r2, 800c20c <UART_SetConfig+0x550>)
 800c208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20c:	0800c225 	.word	0x0800c225
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c235 	.word	0x0800c235
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c245 	.word	0x0800c245
 800c220:	0800c24d 	.word	0x0800c24d
 800c224:	2302      	movs	r3, #2
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e01a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c22c:	2304      	movs	r3, #4
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e016      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c234:	2308      	movs	r3, #8
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e012      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e00e      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c244:	2320      	movs	r3, #32
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e00a      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c24c:	2340      	movs	r3, #64	; 0x40
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e006      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c254:	2380      	movs	r3, #128	; 0x80
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e002      	b.n	800c262 <UART_SetConfig+0x5a6>
 800c25c:	2380      	movs	r3, #128	; 0x80
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a3f      	ldr	r2, [pc, #252]	; (800c364 <UART_SetConfig+0x6a8>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	f040 80f8 	bne.w	800c45e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c26e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c272:	2b20      	cmp	r3, #32
 800c274:	dc46      	bgt.n	800c304 <UART_SetConfig+0x648>
 800c276:	2b02      	cmp	r3, #2
 800c278:	f2c0 8082 	blt.w	800c380 <UART_SetConfig+0x6c4>
 800c27c:	3b02      	subs	r3, #2
 800c27e:	2b1e      	cmp	r3, #30
 800c280:	d87e      	bhi.n	800c380 <UART_SetConfig+0x6c4>
 800c282:	a201      	add	r2, pc, #4	; (adr r2, 800c288 <UART_SetConfig+0x5cc>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c30b 	.word	0x0800c30b
 800c28c:	0800c381 	.word	0x0800c381
 800c290:	0800c313 	.word	0x0800c313
 800c294:	0800c381 	.word	0x0800c381
 800c298:	0800c381 	.word	0x0800c381
 800c29c:	0800c381 	.word	0x0800c381
 800c2a0:	0800c323 	.word	0x0800c323
 800c2a4:	0800c381 	.word	0x0800c381
 800c2a8:	0800c381 	.word	0x0800c381
 800c2ac:	0800c381 	.word	0x0800c381
 800c2b0:	0800c381 	.word	0x0800c381
 800c2b4:	0800c381 	.word	0x0800c381
 800c2b8:	0800c381 	.word	0x0800c381
 800c2bc:	0800c381 	.word	0x0800c381
 800c2c0:	0800c333 	.word	0x0800c333
 800c2c4:	0800c381 	.word	0x0800c381
 800c2c8:	0800c381 	.word	0x0800c381
 800c2cc:	0800c381 	.word	0x0800c381
 800c2d0:	0800c381 	.word	0x0800c381
 800c2d4:	0800c381 	.word	0x0800c381
 800c2d8:	0800c381 	.word	0x0800c381
 800c2dc:	0800c381 	.word	0x0800c381
 800c2e0:	0800c381 	.word	0x0800c381
 800c2e4:	0800c381 	.word	0x0800c381
 800c2e8:	0800c381 	.word	0x0800c381
 800c2ec:	0800c381 	.word	0x0800c381
 800c2f0:	0800c381 	.word	0x0800c381
 800c2f4:	0800c381 	.word	0x0800c381
 800c2f8:	0800c381 	.word	0x0800c381
 800c2fc:	0800c381 	.word	0x0800c381
 800c300:	0800c373 	.word	0x0800c373
 800c304:	2b40      	cmp	r3, #64	; 0x40
 800c306:	d037      	beq.n	800c378 <UART_SetConfig+0x6bc>
 800c308:	e03a      	b.n	800c380 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c30a:	f7fd fd3b 	bl	8009d84 <HAL_RCCEx_GetD3PCLK1Freq>
 800c30e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c310:	e03c      	b.n	800c38c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd fd4a 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c320:	e034      	b.n	800c38c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c322:	f107 0318 	add.w	r3, r7, #24
 800c326:	4618      	mov	r0, r3
 800c328:	f7fd fe96 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c330:	e02c      	b.n	800c38c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c332:	4b09      	ldr	r3, [pc, #36]	; (800c358 <UART_SetConfig+0x69c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0320 	and.w	r3, r3, #32
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d016      	beq.n	800c36c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c33e:	4b06      	ldr	r3, [pc, #24]	; (800c358 <UART_SetConfig+0x69c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	08db      	lsrs	r3, r3, #3
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	4a07      	ldr	r2, [pc, #28]	; (800c368 <UART_SetConfig+0x6ac>)
 800c34a:	fa22 f303 	lsr.w	r3, r2, r3
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c350:	e01c      	b.n	800c38c <UART_SetConfig+0x6d0>
 800c352:	bf00      	nop
 800c354:	40011400 	.word	0x40011400
 800c358:	58024400 	.word	0x58024400
 800c35c:	40007800 	.word	0x40007800
 800c360:	40007c00 	.word	0x40007c00
 800c364:	58000c00 	.word	0x58000c00
 800c368:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c36c:	4b9d      	ldr	r3, [pc, #628]	; (800c5e4 <UART_SetConfig+0x928>)
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c370:	e00c      	b.n	800c38c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c372:	4b9d      	ldr	r3, [pc, #628]	; (800c5e8 <UART_SetConfig+0x92c>)
 800c374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c376:	e009      	b.n	800c38c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37e:	e005      	b.n	800c38c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c38a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 81de 	beq.w	800c750 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c398:	4a94      	ldr	r2, [pc, #592]	; (800c5ec <UART_SetConfig+0x930>)
 800c39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	4413      	add	r3, r2
 800c3b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d305      	bcc.n	800c3c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d903      	bls.n	800c3cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3ca:	e1c1      	b.n	800c750 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	60bb      	str	r3, [r7, #8]
 800c3d2:	60fa      	str	r2, [r7, #12]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	4a84      	ldr	r2, [pc, #528]	; (800c5ec <UART_SetConfig+0x930>)
 800c3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	607a      	str	r2, [r7, #4]
 800c3e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3ee:	f7f3 ffc7 	bl	8000380 <__aeabi_uldivmod>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	f04f 0200 	mov.w	r2, #0
 800c3fe:	f04f 0300 	mov.w	r3, #0
 800c402:	020b      	lsls	r3, r1, #8
 800c404:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c408:	0202      	lsls	r2, r0, #8
 800c40a:	6979      	ldr	r1, [r7, #20]
 800c40c:	6849      	ldr	r1, [r1, #4]
 800c40e:	0849      	lsrs	r1, r1, #1
 800c410:	2000      	movs	r0, #0
 800c412:	460c      	mov	r4, r1
 800c414:	4605      	mov	r5, r0
 800c416:	eb12 0804 	adds.w	r8, r2, r4
 800c41a:	eb43 0905 	adc.w	r9, r3, r5
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	469a      	mov	sl, r3
 800c426:	4693      	mov	fp, r2
 800c428:	4652      	mov	r2, sl
 800c42a:	465b      	mov	r3, fp
 800c42c:	4640      	mov	r0, r8
 800c42e:	4649      	mov	r1, r9
 800c430:	f7f3 ffa6 	bl	8000380 <__aeabi_uldivmod>
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	4613      	mov	r3, r2
 800c43a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c442:	d308      	bcc.n	800c456 <UART_SetConfig+0x79a>
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44a:	d204      	bcs.n	800c456 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c452:	60da      	str	r2, [r3, #12]
 800c454:	e17c      	b.n	800c750 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c45c:	e178      	b.n	800c750 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c466:	f040 80c5 	bne.w	800c5f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c46a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c46e:	2b20      	cmp	r3, #32
 800c470:	dc48      	bgt.n	800c504 <UART_SetConfig+0x848>
 800c472:	2b00      	cmp	r3, #0
 800c474:	db7b      	blt.n	800c56e <UART_SetConfig+0x8b2>
 800c476:	2b20      	cmp	r3, #32
 800c478:	d879      	bhi.n	800c56e <UART_SetConfig+0x8b2>
 800c47a:	a201      	add	r2, pc, #4	; (adr r2, 800c480 <UART_SetConfig+0x7c4>)
 800c47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c480:	0800c50b 	.word	0x0800c50b
 800c484:	0800c513 	.word	0x0800c513
 800c488:	0800c56f 	.word	0x0800c56f
 800c48c:	0800c56f 	.word	0x0800c56f
 800c490:	0800c51b 	.word	0x0800c51b
 800c494:	0800c56f 	.word	0x0800c56f
 800c498:	0800c56f 	.word	0x0800c56f
 800c49c:	0800c56f 	.word	0x0800c56f
 800c4a0:	0800c52b 	.word	0x0800c52b
 800c4a4:	0800c56f 	.word	0x0800c56f
 800c4a8:	0800c56f 	.word	0x0800c56f
 800c4ac:	0800c56f 	.word	0x0800c56f
 800c4b0:	0800c56f 	.word	0x0800c56f
 800c4b4:	0800c56f 	.word	0x0800c56f
 800c4b8:	0800c56f 	.word	0x0800c56f
 800c4bc:	0800c56f 	.word	0x0800c56f
 800c4c0:	0800c53b 	.word	0x0800c53b
 800c4c4:	0800c56f 	.word	0x0800c56f
 800c4c8:	0800c56f 	.word	0x0800c56f
 800c4cc:	0800c56f 	.word	0x0800c56f
 800c4d0:	0800c56f 	.word	0x0800c56f
 800c4d4:	0800c56f 	.word	0x0800c56f
 800c4d8:	0800c56f 	.word	0x0800c56f
 800c4dc:	0800c56f 	.word	0x0800c56f
 800c4e0:	0800c56f 	.word	0x0800c56f
 800c4e4:	0800c56f 	.word	0x0800c56f
 800c4e8:	0800c56f 	.word	0x0800c56f
 800c4ec:	0800c56f 	.word	0x0800c56f
 800c4f0:	0800c56f 	.word	0x0800c56f
 800c4f4:	0800c56f 	.word	0x0800c56f
 800c4f8:	0800c56f 	.word	0x0800c56f
 800c4fc:	0800c56f 	.word	0x0800c56f
 800c500:	0800c561 	.word	0x0800c561
 800c504:	2b40      	cmp	r3, #64	; 0x40
 800c506:	d02e      	beq.n	800c566 <UART_SetConfig+0x8aa>
 800c508:	e031      	b.n	800c56e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c50a:	f7fc fcc9 	bl	8008ea0 <HAL_RCC_GetPCLK1Freq>
 800c50e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c510:	e033      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c512:	f7fc fcdb 	bl	8008ecc <HAL_RCC_GetPCLK2Freq>
 800c516:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c518:	e02f      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c51a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fd fc46 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c528:	e027      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c52a:	f107 0318 	add.w	r3, r7, #24
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fd fd92 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c538:	e01f      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c53a:	4b2d      	ldr	r3, [pc, #180]	; (800c5f0 <UART_SetConfig+0x934>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	d009      	beq.n	800c55a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c546:	4b2a      	ldr	r3, [pc, #168]	; (800c5f0 <UART_SetConfig+0x934>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	08db      	lsrs	r3, r3, #3
 800c54c:	f003 0303 	and.w	r3, r3, #3
 800c550:	4a24      	ldr	r2, [pc, #144]	; (800c5e4 <UART_SetConfig+0x928>)
 800c552:	fa22 f303 	lsr.w	r3, r2, r3
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c558:	e00f      	b.n	800c57a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c55a:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <UART_SetConfig+0x928>)
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55e:	e00c      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c560:	4b21      	ldr	r3, [pc, #132]	; (800c5e8 <UART_SetConfig+0x92c>)
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c564:	e009      	b.n	800c57a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e005      	b.n	800c57a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 80e7 	beq.w	800c750 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	4a19      	ldr	r2, [pc, #100]	; (800c5ec <UART_SetConfig+0x930>)
 800c588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c58c:	461a      	mov	r2, r3
 800c58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c590:	fbb3 f3f2 	udiv	r3, r3, r2
 800c594:	005a      	lsls	r2, r3, #1
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	441a      	add	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	2b0f      	cmp	r3, #15
 800c5ac:	d916      	bls.n	800c5dc <UART_SetConfig+0x920>
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b4:	d212      	bcs.n	800c5dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	f023 030f 	bic.w	r3, r3, #15
 800c5be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	085b      	lsrs	r3, r3, #1
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	e0b9      	b.n	800c750 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5e2:	e0b5      	b.n	800c750 <UART_SetConfig+0xa94>
 800c5e4:	03d09000 	.word	0x03d09000
 800c5e8:	003d0900 	.word	0x003d0900
 800c5ec:	0800f560 	.word	0x0800f560
 800c5f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5f8:	2b20      	cmp	r3, #32
 800c5fa:	dc49      	bgt.n	800c690 <UART_SetConfig+0x9d4>
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	db7c      	blt.n	800c6fa <UART_SetConfig+0xa3e>
 800c600:	2b20      	cmp	r3, #32
 800c602:	d87a      	bhi.n	800c6fa <UART_SetConfig+0xa3e>
 800c604:	a201      	add	r2, pc, #4	; (adr r2, 800c60c <UART_SetConfig+0x950>)
 800c606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60a:	bf00      	nop
 800c60c:	0800c697 	.word	0x0800c697
 800c610:	0800c69f 	.word	0x0800c69f
 800c614:	0800c6fb 	.word	0x0800c6fb
 800c618:	0800c6fb 	.word	0x0800c6fb
 800c61c:	0800c6a7 	.word	0x0800c6a7
 800c620:	0800c6fb 	.word	0x0800c6fb
 800c624:	0800c6fb 	.word	0x0800c6fb
 800c628:	0800c6fb 	.word	0x0800c6fb
 800c62c:	0800c6b7 	.word	0x0800c6b7
 800c630:	0800c6fb 	.word	0x0800c6fb
 800c634:	0800c6fb 	.word	0x0800c6fb
 800c638:	0800c6fb 	.word	0x0800c6fb
 800c63c:	0800c6fb 	.word	0x0800c6fb
 800c640:	0800c6fb 	.word	0x0800c6fb
 800c644:	0800c6fb 	.word	0x0800c6fb
 800c648:	0800c6fb 	.word	0x0800c6fb
 800c64c:	0800c6c7 	.word	0x0800c6c7
 800c650:	0800c6fb 	.word	0x0800c6fb
 800c654:	0800c6fb 	.word	0x0800c6fb
 800c658:	0800c6fb 	.word	0x0800c6fb
 800c65c:	0800c6fb 	.word	0x0800c6fb
 800c660:	0800c6fb 	.word	0x0800c6fb
 800c664:	0800c6fb 	.word	0x0800c6fb
 800c668:	0800c6fb 	.word	0x0800c6fb
 800c66c:	0800c6fb 	.word	0x0800c6fb
 800c670:	0800c6fb 	.word	0x0800c6fb
 800c674:	0800c6fb 	.word	0x0800c6fb
 800c678:	0800c6fb 	.word	0x0800c6fb
 800c67c:	0800c6fb 	.word	0x0800c6fb
 800c680:	0800c6fb 	.word	0x0800c6fb
 800c684:	0800c6fb 	.word	0x0800c6fb
 800c688:	0800c6fb 	.word	0x0800c6fb
 800c68c:	0800c6ed 	.word	0x0800c6ed
 800c690:	2b40      	cmp	r3, #64	; 0x40
 800c692:	d02e      	beq.n	800c6f2 <UART_SetConfig+0xa36>
 800c694:	e031      	b.n	800c6fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c696:	f7fc fc03 	bl	8008ea0 <HAL_RCC_GetPCLK1Freq>
 800c69a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c69c:	e033      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c69e:	f7fc fc15 	bl	8008ecc <HAL_RCC_GetPCLK2Freq>
 800c6a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a4:	e02f      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fd fb80 	bl	8009db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	e027      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6b6:	f107 0318 	add.w	r3, r7, #24
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fd fccc 	bl	800a058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e01f      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6c6:	4b2d      	ldr	r3, [pc, #180]	; (800c77c <UART_SetConfig+0xac0>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6d2:	4b2a      	ldr	r3, [pc, #168]	; (800c77c <UART_SetConfig+0xac0>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	08db      	lsrs	r3, r3, #3
 800c6d8:	f003 0303 	and.w	r3, r3, #3
 800c6dc:	4a28      	ldr	r2, [pc, #160]	; (800c780 <UART_SetConfig+0xac4>)
 800c6de:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6e4:	e00f      	b.n	800c706 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c6e6:	4b26      	ldr	r3, [pc, #152]	; (800c780 <UART_SetConfig+0xac4>)
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ea:	e00c      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6ec:	4b25      	ldr	r3, [pc, #148]	; (800c784 <UART_SetConfig+0xac8>)
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f0:	e009      	b.n	800c706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e005      	b.n	800c706 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c704:	bf00      	nop
    }

    if (pclk != 0U)
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d021      	beq.n	800c750 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	4a1d      	ldr	r2, [pc, #116]	; (800c788 <UART_SetConfig+0xacc>)
 800c712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c716:	461a      	mov	r2, r3
 800c718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	085b      	lsrs	r3, r3, #1
 800c724:	441a      	add	r2, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c72e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	2b0f      	cmp	r3, #15
 800c734:	d909      	bls.n	800c74a <UART_SetConfig+0xa8e>
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c73c:	d205      	bcs.n	800c74a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	b29a      	uxth	r2, r3
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	60da      	str	r2, [r3, #12]
 800c748:	e002      	b.n	800c750 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	2201      	movs	r2, #1
 800c754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2200      	movs	r2, #0
 800c764:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2200      	movs	r2, #0
 800c76a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c76c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c770:	4618      	mov	r0, r3
 800c772:	3748      	adds	r7, #72	; 0x48
 800c774:	46bd      	mov	sp, r7
 800c776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c77a:	bf00      	nop
 800c77c:	58024400 	.word	0x58024400
 800c780:	03d09000 	.word	0x03d09000
 800c784:	003d0900 	.word	0x003d0900
 800c788:	0800f560 	.word	0x0800f560

0800c78c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00a      	beq.n	800c7b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ba:	f003 0302 	and.w	r3, r3, #2
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00a      	beq.n	800c7d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	430a      	orrs	r2, r1
 800c7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7dc:	f003 0304 	and.w	r3, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00a      	beq.n	800c7fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7fe:	f003 0308 	and.w	r3, r3, #8
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	430a      	orrs	r2, r1
 800c81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c820:	f003 0310 	and.w	r3, r3, #16
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00a      	beq.n	800c83e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	430a      	orrs	r2, r1
 800c83c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00a      	beq.n	800c860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	430a      	orrs	r2, r1
 800c85e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01a      	beq.n	800c8a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c88a:	d10a      	bne.n	800c8a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00a      	beq.n	800c8c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	605a      	str	r2, [r3, #4]
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af02      	add	r7, sp, #8
 800c8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8e0:	f7f7 ffca 	bl	8004878 <HAL_GetTick>
 800c8e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b08      	cmp	r3, #8
 800c8f2:	d10e      	bne.n	800c912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f82f 	bl	800c966 <UART_WaitOnFlagUntilTimeout>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e025      	b.n	800c95e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0304 	and.w	r3, r3, #4
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d10e      	bne.n	800c93e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f819 	bl	800c966 <UART_WaitOnFlagUntilTimeout>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e00f      	b.n	800c95e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2220      	movs	r2, #32
 800c942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2220      	movs	r2, #32
 800c94a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b09c      	sub	sp, #112	; 0x70
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	60f8      	str	r0, [r7, #12]
 800c96e:	60b9      	str	r1, [r7, #8]
 800c970:	603b      	str	r3, [r7, #0]
 800c972:	4613      	mov	r3, r2
 800c974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c976:	e0a9      	b.n	800cacc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	f000 80a5 	beq.w	800cacc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c982:	f7f7 ff79 	bl	8004878 <HAL_GetTick>
 800c986:	4602      	mov	r2, r0
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c98e:	429a      	cmp	r2, r3
 800c990:	d302      	bcc.n	800c998 <UART_WaitOnFlagUntilTimeout+0x32>
 800c992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c994:	2b00      	cmp	r3, #0
 800c996:	d140      	bne.n	800ca1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a0:	e853 3f00 	ldrex	r3, [r3]
 800c9a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9be:	e841 2300 	strex	r3, r2, [r1]
 800c9c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1e6      	bne.n	800c998 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9d4:	e853 3f00 	ldrex	r3, [r3]
 800c9d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	f023 0301 	bic.w	r3, r3, #1
 800c9e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ea:	64ba      	str	r2, [r7, #72]	; 0x48
 800c9ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9f2:	e841 2300 	strex	r3, r2, [r1]
 800c9f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1e5      	bne.n	800c9ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e069      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f003 0304 	and.w	r3, r3, #4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d051      	beq.n	800cacc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca36:	d149      	bne.n	800cacc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca60:	637b      	str	r3, [r7, #52]	; 0x34
 800ca62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e6      	bne.n	800ca42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	e853 3f00 	ldrex	r3, [r3]
 800ca82:	613b      	str	r3, [r7, #16]
   return(result);
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	f023 0301 	bic.w	r3, r3, #1
 800ca8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3308      	adds	r3, #8
 800ca92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca94:	623a      	str	r2, [r7, #32]
 800ca96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca98:	69f9      	ldr	r1, [r7, #28]
 800ca9a:	6a3a      	ldr	r2, [r7, #32]
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	61bb      	str	r3, [r7, #24]
   return(result);
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e5      	bne.n	800ca74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2220      	movs	r2, #32
 800caac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2220      	movs	r2, #32
 800cabc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e010      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69da      	ldr	r2, [r3, #28]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	4013      	ands	r3, r2
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	429a      	cmp	r2, r3
 800cada:	bf0c      	ite	eq
 800cadc:	2301      	moveq	r3, #1
 800cade:	2300      	movne	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	f43f af46 	beq.w	800c978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3770      	adds	r7, #112	; 0x70
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b095      	sub	sp, #84	; 0x54
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1e:	643b      	str	r3, [r7, #64]	; 0x40
 800cb20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e6      	bne.n	800cb00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3308      	adds	r3, #8
 800cb38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	e853 3f00 	ldrex	r3, [r3]
 800cb40:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb42:	69fa      	ldr	r2, [r7, #28]
 800cb44:	4b1e      	ldr	r3, [pc, #120]	; (800cbc0 <UART_EndRxTransfer+0xc8>)
 800cb46:	4013      	ands	r3, r2
 800cb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb5a:	e841 2300 	strex	r3, r2, [r1]
 800cb5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1e5      	bne.n	800cb32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d118      	bne.n	800cba0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f023 0310 	bic.w	r3, r3, #16
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8c:	61bb      	str	r3, [r7, #24]
 800cb8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6979      	ldr	r1, [r7, #20]
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	613b      	str	r3, [r7, #16]
   return(result);
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cbb4:	bf00      	nop
 800cbb6:	3754      	adds	r7, #84	; 0x54
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	effffffe 	.word	0xeffffffe

0800cbc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff f854 	bl	800bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbe8:	bf00      	nop
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	e853 3f00 	ldrex	r3, [r3]
 800cc04:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc0c:	61fb      	str	r3, [r7, #28]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	61bb      	str	r3, [r7, #24]
 800cc18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6979      	ldr	r1, [r7, #20]
 800cc1c:	69ba      	ldr	r2, [r7, #24]
 800cc1e:	e841 2300 	strex	r3, r2, [r1]
 800cc22:	613b      	str	r3, [r7, #16]
   return(result);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e6      	bne.n	800cbf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2220      	movs	r2, #32
 800cc2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff f81f 	bl	800bc7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc3e:	bf00      	nop
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b083      	sub	sp, #12
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d101      	bne.n	800cc98 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc94:	2302      	movs	r3, #2
 800cc96:	e027      	b.n	800cce8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2224      	movs	r2, #36	; 0x24
 800cca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0201 	bic.w	r2, r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ccc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d101      	bne.n	800cd0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	e02d      	b.n	800cd68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2224      	movs	r2, #36	; 0x24
 800cd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 0201 	bic.w	r2, r2, #1
 800cd32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	430a      	orrs	r2, r1
 800cd46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f84f 	bl	800cdec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd84:	2302      	movs	r3, #2
 800cd86:	e02d      	b.n	800cde4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2224      	movs	r2, #36	; 0x24
 800cd94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f022 0201 	bic.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f811 	bl	800cdec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d108      	bne.n	800ce0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce0c:	e031      	b.n	800ce72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce0e:	2310      	movs	r3, #16
 800ce10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce12:	2310      	movs	r3, #16
 800ce14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	0e5b      	lsrs	r3, r3, #25
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	f003 0307 	and.w	r3, r3, #7
 800ce24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	0f5b      	lsrs	r3, r3, #29
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0307 	and.w	r3, r3, #7
 800ce34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	7b3a      	ldrb	r2, [r7, #12]
 800ce3a:	4911      	ldr	r1, [pc, #68]	; (800ce80 <UARTEx_SetNbDataToProcess+0x94>)
 800ce3c:	5c8a      	ldrb	r2, [r1, r2]
 800ce3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce42:	7b3a      	ldrb	r2, [r7, #12]
 800ce44:	490f      	ldr	r1, [pc, #60]	; (800ce84 <UARTEx_SetNbDataToProcess+0x98>)
 800ce46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	7b7a      	ldrb	r2, [r7, #13]
 800ce58:	4909      	ldr	r1, [pc, #36]	; (800ce80 <UARTEx_SetNbDataToProcess+0x94>)
 800ce5a:	5c8a      	ldrb	r2, [r1, r2]
 800ce5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce60:	7b7a      	ldrb	r2, [r7, #13]
 800ce62:	4908      	ldr	r1, [pc, #32]	; (800ce84 <UARTEx_SetNbDataToProcess+0x98>)
 800ce64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	0800f578 	.word	0x0800f578
 800ce84:	0800f580 	.word	0x0800f580

0800ce88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce88:	b084      	sub	sp, #16
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	f107 001c 	add.w	r0, r7, #28
 800ce96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d120      	bne.n	800cee2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68da      	ldr	r2, [r3, #12]
 800ceb0:	4b2a      	ldr	r3, [pc, #168]	; (800cf5c <USB_CoreInit+0xd4>)
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d105      	bne.n	800ced6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 faac 	bl	800d434 <USB_CoreReset>
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]
 800cee0:	e01a      	b.n	800cf18 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 faa0 	bl	800d434 <USB_CoreReset>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38
 800cf0a:	e005      	b.n	800cf18 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d116      	bne.n	800cf4c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf2c:	4b0c      	ldr	r3, [pc, #48]	; (800cf60 <USB_CoreInit+0xd8>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f043 0206 	orr.w	r2, r3, #6
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f043 0220 	orr.w	r2, r3, #32
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf58:	b004      	add	sp, #16
 800cf5a:	4770      	bx	lr
 800cf5c:	ffbdffbf 	.word	0xffbdffbf
 800cf60:	03ee0000 	.word	0x03ee0000

0800cf64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f023 0201 	bic.w	r2, r3, #1
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cf92:	2300      	movs	r3, #0
 800cf94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cfa2:	78fb      	ldrb	r3, [r7, #3]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d115      	bne.n	800cfd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cfb4:	2001      	movs	r0, #1
 800cfb6:	f7f7 fc6b 	bl	8004890 <HAL_Delay>
      ms++;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 fa29 	bl	800d418 <USB_GetMode>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d01e      	beq.n	800d00a <USB_SetCurrentMode+0x84>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2b31      	cmp	r3, #49	; 0x31
 800cfd0:	d9f0      	bls.n	800cfb4 <USB_SetCurrentMode+0x2e>
 800cfd2:	e01a      	b.n	800d00a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d115      	bne.n	800d006 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	f7f7 fc52 	bl	8004890 <HAL_Delay>
      ms++;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa10 	bl	800d418 <USB_GetMode>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d005      	beq.n	800d00a <USB_SetCurrentMode+0x84>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2b31      	cmp	r3, #49	; 0x31
 800d002:	d9f0      	bls.n	800cfe6 <USB_SetCurrentMode+0x60>
 800d004:	e001      	b.n	800d00a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e005      	b.n	800d016 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b32      	cmp	r3, #50	; 0x32
 800d00e:	d101      	bne.n	800d014 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e000      	b.n	800d016 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
	...

0800d020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d020:	b084      	sub	sp, #16
 800d022:	b580      	push	{r7, lr}
 800d024:	b086      	sub	sp, #24
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]
 800d03e:	e009      	b.n	800d054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	3340      	adds	r3, #64	; 0x40
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	2200      	movs	r2, #0
 800d04c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3301      	adds	r3, #1
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2b0e      	cmp	r3, #14
 800d058:	d9f2      	bls.n	800d040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d11c      	bne.n	800d09a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d06e:	f043 0302 	orr.w	r3, r3, #2
 800d072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	601a      	str	r2, [r3, #0]
 800d098:	e005      	b.n	800d0a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	680b      	ldr	r3, [r1, #0]
 800d0c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d10c      	bne.n	800d0e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d104      	bne.n	800d0dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f965 	bl	800d3a4 <USB_SetDevSpeed>
 800d0da:	e008      	b.n	800d0ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d0dc:	2101      	movs	r1, #1
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f960 	bl	800d3a4 <USB_SetDevSpeed>
 800d0e4:	e003      	b.n	800d0ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d0e6:	2103      	movs	r1, #3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f95b 	bl	800d3a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d0ee:	2110      	movs	r1, #16
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f8f3 	bl	800d2dc <USB_FlushTxFifo>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f91f 	bl	800d344 <USB_FlushRxFifo>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d116:	461a      	mov	r2, r3
 800d118:	2300      	movs	r3, #0
 800d11a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	461a      	mov	r2, r3
 800d124:	2300      	movs	r3, #0
 800d126:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12e:	461a      	mov	r2, r3
 800d130:	2300      	movs	r3, #0
 800d132:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d134:	2300      	movs	r3, #0
 800d136:	613b      	str	r3, [r7, #16]
 800d138:	e043      	b.n	800d1c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	015a      	lsls	r2, r3, #5
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	4413      	add	r3, r2
 800d142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d150:	d118      	bne.n	800d184 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10a      	bne.n	800d16e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	015a      	lsls	r2, r3, #5
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	4413      	add	r3, r2
 800d160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d164:	461a      	mov	r2, r3
 800d166:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d16a:	6013      	str	r3, [r2, #0]
 800d16c:	e013      	b.n	800d196 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	015a      	lsls	r2, r3, #5
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4413      	add	r3, r2
 800d176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17a:	461a      	mov	r2, r3
 800d17c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d180:	6013      	str	r3, [r2, #0]
 800d182:	e008      	b.n	800d196 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d190:	461a      	mov	r2, r3
 800d192:	2300      	movs	r3, #0
 800d194:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	015a      	lsls	r2, r3, #5
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d3b7      	bcc.n	800d13a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	e043      	b.n	800d258 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	015a      	lsls	r2, r3, #5
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1e6:	d118      	bne.n	800d21a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	015a      	lsls	r2, r3, #5
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	e013      	b.n	800d22c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	015a      	lsls	r2, r3, #5
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	4413      	add	r3, r2
 800d20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d210:	461a      	mov	r2, r3
 800d212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e008      	b.n	800d22c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4413      	add	r3, r2
 800d222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d226:	461a      	mov	r2, r3
 800d228:	2300      	movs	r3, #0
 800d22a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4413      	add	r3, r2
 800d234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d238:	461a      	mov	r2, r3
 800d23a:	2300      	movs	r3, #0
 800d23c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	015a      	lsls	r2, r3, #5
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	4413      	add	r3, r2
 800d246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d24a:	461a      	mov	r2, r3
 800d24c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d250:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	3301      	adds	r3, #1
 800d256:	613b      	str	r3, [r7, #16]
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d3b7      	bcc.n	800d1d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d26e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d272:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d280:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	2b00      	cmp	r3, #0
 800d286:	d105      	bne.n	800d294 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	f043 0210 	orr.w	r2, r3, #16
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	4b0e      	ldr	r3, [pc, #56]	; (800d2d4 <USB_DevInit+0x2b4>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	f043 0208 	orr.w	r2, r3, #8
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d105      	bne.n	800d2c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	699a      	ldr	r2, [r3, #24]
 800d2bc:	4b06      	ldr	r3, [pc, #24]	; (800d2d8 <USB_DevInit+0x2b8>)
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2d0:	b004      	add	sp, #16
 800d2d2:	4770      	bx	lr
 800d2d4:	803c3800 	.word	0x803c3800
 800d2d8:	40000004 	.word	0x40000004

0800d2dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	4a13      	ldr	r2, [pc, #76]	; (800d340 <USB_FlushTxFifo+0x64>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d901      	bls.n	800d2fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e01b      	b.n	800d334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	691b      	ldr	r3, [r3, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	daf2      	bge.n	800d2ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d304:	2300      	movs	r3, #0
 800d306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	019b      	lsls	r3, r3, #6
 800d30c:	f043 0220 	orr.w	r2, r3, #32
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3301      	adds	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	4a08      	ldr	r2, [pc, #32]	; (800d340 <USB_FlushTxFifo+0x64>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d901      	bls.n	800d326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	e006      	b.n	800d334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	691b      	ldr	r3, [r3, #16]
 800d32a:	f003 0320 	and.w	r3, r3, #32
 800d32e:	2b20      	cmp	r3, #32
 800d330:	d0f0      	beq.n	800d314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	00030d40 	.word	0x00030d40

0800d344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3301      	adds	r3, #1
 800d354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	4a11      	ldr	r2, [pc, #68]	; (800d3a0 <USB_FlushRxFifo+0x5c>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d901      	bls.n	800d362 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	e018      	b.n	800d394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	2b00      	cmp	r3, #0
 800d368:	daf2      	bge.n	800d350 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2210      	movs	r2, #16
 800d372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3301      	adds	r3, #1
 800d378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	4a08      	ldr	r2, [pc, #32]	; (800d3a0 <USB_FlushRxFifo+0x5c>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d901      	bls.n	800d386 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d382:	2303      	movs	r3, #3
 800d384:	e006      	b.n	800d394 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	f003 0310 	and.w	r3, r3, #16
 800d38e:	2b10      	cmp	r3, #16
 800d390:	d0f0      	beq.n	800d374 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	00030d40 	.word	0x00030d40

0800d3a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	78fb      	ldrb	r3, [r7, #3]
 800d3be:	68f9      	ldr	r1, [r7, #12]
 800d3c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d404:	f043 0302 	orr.w	r3, r3, #2
 800d408:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	695b      	ldr	r3, [r3, #20]
 800d424:	f003 0301 	and.w	r3, r3, #1
}
 800d428:	4618      	mov	r0, r3
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	3301      	adds	r3, #1
 800d444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4a13      	ldr	r2, [pc, #76]	; (800d498 <USB_CoreReset+0x64>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d901      	bls.n	800d452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d44e:	2303      	movs	r3, #3
 800d450:	e01b      	b.n	800d48a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	daf2      	bge.n	800d440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d45a:	2300      	movs	r3, #0
 800d45c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	f043 0201 	orr.w	r2, r3, #1
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3301      	adds	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4a09      	ldr	r2, [pc, #36]	; (800d498 <USB_CoreReset+0x64>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d901      	bls.n	800d47c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d478:	2303      	movs	r3, #3
 800d47a:	e006      	b.n	800d48a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b01      	cmp	r3, #1
 800d486:	d0f0      	beq.n	800d46a <USB_CoreReset+0x36>

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	00030d40 	.word	0x00030d40

0800d49c <__errno>:
 800d49c:	4b01      	ldr	r3, [pc, #4]	; (800d4a4 <__errno+0x8>)
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	24000024 	.word	0x24000024

0800d4a8 <__libc_init_array>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4d0d      	ldr	r5, [pc, #52]	; (800d4e0 <__libc_init_array+0x38>)
 800d4ac:	4c0d      	ldr	r4, [pc, #52]	; (800d4e4 <__libc_init_array+0x3c>)
 800d4ae:	1b64      	subs	r4, r4, r5
 800d4b0:	10a4      	asrs	r4, r4, #2
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	42a6      	cmp	r6, r4
 800d4b6:	d109      	bne.n	800d4cc <__libc_init_array+0x24>
 800d4b8:	4d0b      	ldr	r5, [pc, #44]	; (800d4e8 <__libc_init_array+0x40>)
 800d4ba:	4c0c      	ldr	r4, [pc, #48]	; (800d4ec <__libc_init_array+0x44>)
 800d4bc:	f000 fc8e 	bl	800dddc <_init>
 800d4c0:	1b64      	subs	r4, r4, r5
 800d4c2:	10a4      	asrs	r4, r4, #2
 800d4c4:	2600      	movs	r6, #0
 800d4c6:	42a6      	cmp	r6, r4
 800d4c8:	d105      	bne.n	800d4d6 <__libc_init_array+0x2e>
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4d0:	4798      	blx	r3
 800d4d2:	3601      	adds	r6, #1
 800d4d4:	e7ee      	b.n	800d4b4 <__libc_init_array+0xc>
 800d4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4da:	4798      	blx	r3
 800d4dc:	3601      	adds	r6, #1
 800d4de:	e7f2      	b.n	800d4c6 <__libc_init_array+0x1e>
 800d4e0:	0800f5c4 	.word	0x0800f5c4
 800d4e4:	0800f5c4 	.word	0x0800f5c4
 800d4e8:	0800f5c4 	.word	0x0800f5c4
 800d4ec:	0800f5c8 	.word	0x0800f5c8

0800d4f0 <memset>:
 800d4f0:	4402      	add	r2, r0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d100      	bne.n	800d4fa <memset+0xa>
 800d4f8:	4770      	bx	lr
 800d4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d4fe:	e7f9      	b.n	800d4f4 <memset+0x4>

0800d500 <_free_r>:
 800d500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d502:	2900      	cmp	r1, #0
 800d504:	d044      	beq.n	800d590 <_free_r+0x90>
 800d506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50a:	9001      	str	r0, [sp, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f1a1 0404 	sub.w	r4, r1, #4
 800d512:	bfb8      	it	lt
 800d514:	18e4      	addlt	r4, r4, r3
 800d516:	f000 f903 	bl	800d720 <__malloc_lock>
 800d51a:	4a1e      	ldr	r2, [pc, #120]	; (800d594 <_free_r+0x94>)
 800d51c:	9801      	ldr	r0, [sp, #4]
 800d51e:	6813      	ldr	r3, [r2, #0]
 800d520:	b933      	cbnz	r3, 800d530 <_free_r+0x30>
 800d522:	6063      	str	r3, [r4, #4]
 800d524:	6014      	str	r4, [r2, #0]
 800d526:	b003      	add	sp, #12
 800d528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d52c:	f000 b8fe 	b.w	800d72c <__malloc_unlock>
 800d530:	42a3      	cmp	r3, r4
 800d532:	d908      	bls.n	800d546 <_free_r+0x46>
 800d534:	6825      	ldr	r5, [r4, #0]
 800d536:	1961      	adds	r1, r4, r5
 800d538:	428b      	cmp	r3, r1
 800d53a:	bf01      	itttt	eq
 800d53c:	6819      	ldreq	r1, [r3, #0]
 800d53e:	685b      	ldreq	r3, [r3, #4]
 800d540:	1949      	addeq	r1, r1, r5
 800d542:	6021      	streq	r1, [r4, #0]
 800d544:	e7ed      	b.n	800d522 <_free_r+0x22>
 800d546:	461a      	mov	r2, r3
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	b10b      	cbz	r3, 800d550 <_free_r+0x50>
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d9fa      	bls.n	800d546 <_free_r+0x46>
 800d550:	6811      	ldr	r1, [r2, #0]
 800d552:	1855      	adds	r5, r2, r1
 800d554:	42a5      	cmp	r5, r4
 800d556:	d10b      	bne.n	800d570 <_free_r+0x70>
 800d558:	6824      	ldr	r4, [r4, #0]
 800d55a:	4421      	add	r1, r4
 800d55c:	1854      	adds	r4, r2, r1
 800d55e:	42a3      	cmp	r3, r4
 800d560:	6011      	str	r1, [r2, #0]
 800d562:	d1e0      	bne.n	800d526 <_free_r+0x26>
 800d564:	681c      	ldr	r4, [r3, #0]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	6053      	str	r3, [r2, #4]
 800d56a:	4421      	add	r1, r4
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	e7da      	b.n	800d526 <_free_r+0x26>
 800d570:	d902      	bls.n	800d578 <_free_r+0x78>
 800d572:	230c      	movs	r3, #12
 800d574:	6003      	str	r3, [r0, #0]
 800d576:	e7d6      	b.n	800d526 <_free_r+0x26>
 800d578:	6825      	ldr	r5, [r4, #0]
 800d57a:	1961      	adds	r1, r4, r5
 800d57c:	428b      	cmp	r3, r1
 800d57e:	bf04      	itt	eq
 800d580:	6819      	ldreq	r1, [r3, #0]
 800d582:	685b      	ldreq	r3, [r3, #4]
 800d584:	6063      	str	r3, [r4, #4]
 800d586:	bf04      	itt	eq
 800d588:	1949      	addeq	r1, r1, r5
 800d58a:	6021      	streq	r1, [r4, #0]
 800d58c:	6054      	str	r4, [r2, #4]
 800d58e:	e7ca      	b.n	800d526 <_free_r+0x26>
 800d590:	b003      	add	sp, #12
 800d592:	bd30      	pop	{r4, r5, pc}
 800d594:	24000eb8 	.word	0x24000eb8

0800d598 <sbrk_aligned>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	4e0e      	ldr	r6, [pc, #56]	; (800d5d4 <sbrk_aligned+0x3c>)
 800d59c:	460c      	mov	r4, r1
 800d59e:	6831      	ldr	r1, [r6, #0]
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	b911      	cbnz	r1, 800d5aa <sbrk_aligned+0x12>
 800d5a4:	f000 f88c 	bl	800d6c0 <_sbrk_r>
 800d5a8:	6030      	str	r0, [r6, #0]
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f000 f887 	bl	800d6c0 <_sbrk_r>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	d00a      	beq.n	800d5cc <sbrk_aligned+0x34>
 800d5b6:	1cc4      	adds	r4, r0, #3
 800d5b8:	f024 0403 	bic.w	r4, r4, #3
 800d5bc:	42a0      	cmp	r0, r4
 800d5be:	d007      	beq.n	800d5d0 <sbrk_aligned+0x38>
 800d5c0:	1a21      	subs	r1, r4, r0
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f000 f87c 	bl	800d6c0 <_sbrk_r>
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d101      	bne.n	800d5d0 <sbrk_aligned+0x38>
 800d5cc:	f04f 34ff 	mov.w	r4, #4294967295
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	bd70      	pop	{r4, r5, r6, pc}
 800d5d4:	24000ebc 	.word	0x24000ebc

0800d5d8 <_malloc_r>:
 800d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5dc:	1ccd      	adds	r5, r1, #3
 800d5de:	f025 0503 	bic.w	r5, r5, #3
 800d5e2:	3508      	adds	r5, #8
 800d5e4:	2d0c      	cmp	r5, #12
 800d5e6:	bf38      	it	cc
 800d5e8:	250c      	movcc	r5, #12
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	db01      	blt.n	800d5f4 <_malloc_r+0x1c>
 800d5f0:	42a9      	cmp	r1, r5
 800d5f2:	d905      	bls.n	800d600 <_malloc_r+0x28>
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	603b      	str	r3, [r7, #0]
 800d5f8:	2600      	movs	r6, #0
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	4e2e      	ldr	r6, [pc, #184]	; (800d6bc <_malloc_r+0xe4>)
 800d602:	f000 f88d 	bl	800d720 <__malloc_lock>
 800d606:	6833      	ldr	r3, [r6, #0]
 800d608:	461c      	mov	r4, r3
 800d60a:	bb34      	cbnz	r4, 800d65a <_malloc_r+0x82>
 800d60c:	4629      	mov	r1, r5
 800d60e:	4638      	mov	r0, r7
 800d610:	f7ff ffc2 	bl	800d598 <sbrk_aligned>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	4604      	mov	r4, r0
 800d618:	d14d      	bne.n	800d6b6 <_malloc_r+0xde>
 800d61a:	6834      	ldr	r4, [r6, #0]
 800d61c:	4626      	mov	r6, r4
 800d61e:	2e00      	cmp	r6, #0
 800d620:	d140      	bne.n	800d6a4 <_malloc_r+0xcc>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	4631      	mov	r1, r6
 800d626:	4638      	mov	r0, r7
 800d628:	eb04 0803 	add.w	r8, r4, r3
 800d62c:	f000 f848 	bl	800d6c0 <_sbrk_r>
 800d630:	4580      	cmp	r8, r0
 800d632:	d13a      	bne.n	800d6aa <_malloc_r+0xd2>
 800d634:	6821      	ldr	r1, [r4, #0]
 800d636:	3503      	adds	r5, #3
 800d638:	1a6d      	subs	r5, r5, r1
 800d63a:	f025 0503 	bic.w	r5, r5, #3
 800d63e:	3508      	adds	r5, #8
 800d640:	2d0c      	cmp	r5, #12
 800d642:	bf38      	it	cc
 800d644:	250c      	movcc	r5, #12
 800d646:	4629      	mov	r1, r5
 800d648:	4638      	mov	r0, r7
 800d64a:	f7ff ffa5 	bl	800d598 <sbrk_aligned>
 800d64e:	3001      	adds	r0, #1
 800d650:	d02b      	beq.n	800d6aa <_malloc_r+0xd2>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	442b      	add	r3, r5
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	e00e      	b.n	800d678 <_malloc_r+0xa0>
 800d65a:	6822      	ldr	r2, [r4, #0]
 800d65c:	1b52      	subs	r2, r2, r5
 800d65e:	d41e      	bmi.n	800d69e <_malloc_r+0xc6>
 800d660:	2a0b      	cmp	r2, #11
 800d662:	d916      	bls.n	800d692 <_malloc_r+0xba>
 800d664:	1961      	adds	r1, r4, r5
 800d666:	42a3      	cmp	r3, r4
 800d668:	6025      	str	r5, [r4, #0]
 800d66a:	bf18      	it	ne
 800d66c:	6059      	strne	r1, [r3, #4]
 800d66e:	6863      	ldr	r3, [r4, #4]
 800d670:	bf08      	it	eq
 800d672:	6031      	streq	r1, [r6, #0]
 800d674:	5162      	str	r2, [r4, r5]
 800d676:	604b      	str	r3, [r1, #4]
 800d678:	4638      	mov	r0, r7
 800d67a:	f104 060b 	add.w	r6, r4, #11
 800d67e:	f000 f855 	bl	800d72c <__malloc_unlock>
 800d682:	f026 0607 	bic.w	r6, r6, #7
 800d686:	1d23      	adds	r3, r4, #4
 800d688:	1af2      	subs	r2, r6, r3
 800d68a:	d0b6      	beq.n	800d5fa <_malloc_r+0x22>
 800d68c:	1b9b      	subs	r3, r3, r6
 800d68e:	50a3      	str	r3, [r4, r2]
 800d690:	e7b3      	b.n	800d5fa <_malloc_r+0x22>
 800d692:	6862      	ldr	r2, [r4, #4]
 800d694:	42a3      	cmp	r3, r4
 800d696:	bf0c      	ite	eq
 800d698:	6032      	streq	r2, [r6, #0]
 800d69a:	605a      	strne	r2, [r3, #4]
 800d69c:	e7ec      	b.n	800d678 <_malloc_r+0xa0>
 800d69e:	4623      	mov	r3, r4
 800d6a0:	6864      	ldr	r4, [r4, #4]
 800d6a2:	e7b2      	b.n	800d60a <_malloc_r+0x32>
 800d6a4:	4634      	mov	r4, r6
 800d6a6:	6876      	ldr	r6, [r6, #4]
 800d6a8:	e7b9      	b.n	800d61e <_malloc_r+0x46>
 800d6aa:	230c      	movs	r3, #12
 800d6ac:	603b      	str	r3, [r7, #0]
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	f000 f83c 	bl	800d72c <__malloc_unlock>
 800d6b4:	e7a1      	b.n	800d5fa <_malloc_r+0x22>
 800d6b6:	6025      	str	r5, [r4, #0]
 800d6b8:	e7de      	b.n	800d678 <_malloc_r+0xa0>
 800d6ba:	bf00      	nop
 800d6bc:	24000eb8 	.word	0x24000eb8

0800d6c0 <_sbrk_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d06      	ldr	r5, [pc, #24]	; (800d6dc <_sbrk_r+0x1c>)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	602b      	str	r3, [r5, #0]
 800d6cc:	f7f6 ffee 	bl	80046ac <_sbrk>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_sbrk_r+0x1a>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_sbrk_r+0x1a>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	24000ec0 	.word	0x24000ec0

0800d6e0 <siprintf>:
 800d6e0:	b40e      	push	{r1, r2, r3}
 800d6e2:	b500      	push	{lr}
 800d6e4:	b09c      	sub	sp, #112	; 0x70
 800d6e6:	ab1d      	add	r3, sp, #116	; 0x74
 800d6e8:	9002      	str	r0, [sp, #8]
 800d6ea:	9006      	str	r0, [sp, #24]
 800d6ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6f0:	4809      	ldr	r0, [pc, #36]	; (800d718 <siprintf+0x38>)
 800d6f2:	9107      	str	r1, [sp, #28]
 800d6f4:	9104      	str	r1, [sp, #16]
 800d6f6:	4909      	ldr	r1, [pc, #36]	; (800d71c <siprintf+0x3c>)
 800d6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fc:	9105      	str	r1, [sp, #20]
 800d6fe:	6800      	ldr	r0, [r0, #0]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	a902      	add	r1, sp, #8
 800d704:	f000 f874 	bl	800d7f0 <_svfiprintf_r>
 800d708:	9b02      	ldr	r3, [sp, #8]
 800d70a:	2200      	movs	r2, #0
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	b01c      	add	sp, #112	; 0x70
 800d710:	f85d eb04 	ldr.w	lr, [sp], #4
 800d714:	b003      	add	sp, #12
 800d716:	4770      	bx	lr
 800d718:	24000024 	.word	0x24000024
 800d71c:	ffff0208 	.word	0xffff0208

0800d720 <__malloc_lock>:
 800d720:	4801      	ldr	r0, [pc, #4]	; (800d728 <__malloc_lock+0x8>)
 800d722:	f000 baf9 	b.w	800dd18 <__retarget_lock_acquire_recursive>
 800d726:	bf00      	nop
 800d728:	24000ec4 	.word	0x24000ec4

0800d72c <__malloc_unlock>:
 800d72c:	4801      	ldr	r0, [pc, #4]	; (800d734 <__malloc_unlock+0x8>)
 800d72e:	f000 baf4 	b.w	800dd1a <__retarget_lock_release_recursive>
 800d732:	bf00      	nop
 800d734:	24000ec4 	.word	0x24000ec4

0800d738 <__ssputs_r>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	688e      	ldr	r6, [r1, #8]
 800d73e:	429e      	cmp	r6, r3
 800d740:	4682      	mov	sl, r0
 800d742:	460c      	mov	r4, r1
 800d744:	4690      	mov	r8, r2
 800d746:	461f      	mov	r7, r3
 800d748:	d838      	bhi.n	800d7bc <__ssputs_r+0x84>
 800d74a:	898a      	ldrh	r2, [r1, #12]
 800d74c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d750:	d032      	beq.n	800d7b8 <__ssputs_r+0x80>
 800d752:	6825      	ldr	r5, [r4, #0]
 800d754:	6909      	ldr	r1, [r1, #16]
 800d756:	eba5 0901 	sub.w	r9, r5, r1
 800d75a:	6965      	ldr	r5, [r4, #20]
 800d75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d764:	3301      	adds	r3, #1
 800d766:	444b      	add	r3, r9
 800d768:	106d      	asrs	r5, r5, #1
 800d76a:	429d      	cmp	r5, r3
 800d76c:	bf38      	it	cc
 800d76e:	461d      	movcc	r5, r3
 800d770:	0553      	lsls	r3, r2, #21
 800d772:	d531      	bpl.n	800d7d8 <__ssputs_r+0xa0>
 800d774:	4629      	mov	r1, r5
 800d776:	f7ff ff2f 	bl	800d5d8 <_malloc_r>
 800d77a:	4606      	mov	r6, r0
 800d77c:	b950      	cbnz	r0, 800d794 <__ssputs_r+0x5c>
 800d77e:	230c      	movs	r3, #12
 800d780:	f8ca 3000 	str.w	r3, [sl]
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295
 800d790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d794:	6921      	ldr	r1, [r4, #16]
 800d796:	464a      	mov	r2, r9
 800d798:	f000 fac0 	bl	800dd1c <memcpy>
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	6126      	str	r6, [r4, #16]
 800d7aa:	6165      	str	r5, [r4, #20]
 800d7ac:	444e      	add	r6, r9
 800d7ae:	eba5 0509 	sub.w	r5, r5, r9
 800d7b2:	6026      	str	r6, [r4, #0]
 800d7b4:	60a5      	str	r5, [r4, #8]
 800d7b6:	463e      	mov	r6, r7
 800d7b8:	42be      	cmp	r6, r7
 800d7ba:	d900      	bls.n	800d7be <__ssputs_r+0x86>
 800d7bc:	463e      	mov	r6, r7
 800d7be:	6820      	ldr	r0, [r4, #0]
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	4641      	mov	r1, r8
 800d7c4:	f000 fab8 	bl	800dd38 <memmove>
 800d7c8:	68a3      	ldr	r3, [r4, #8]
 800d7ca:	1b9b      	subs	r3, r3, r6
 800d7cc:	60a3      	str	r3, [r4, #8]
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	4433      	add	r3, r6
 800d7d2:	6023      	str	r3, [r4, #0]
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	e7db      	b.n	800d790 <__ssputs_r+0x58>
 800d7d8:	462a      	mov	r2, r5
 800d7da:	f000 fac7 	bl	800dd6c <_realloc_r>
 800d7de:	4606      	mov	r6, r0
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d1e1      	bne.n	800d7a8 <__ssputs_r+0x70>
 800d7e4:	6921      	ldr	r1, [r4, #16]
 800d7e6:	4650      	mov	r0, sl
 800d7e8:	f7ff fe8a 	bl	800d500 <_free_r>
 800d7ec:	e7c7      	b.n	800d77e <__ssputs_r+0x46>
	...

0800d7f0 <_svfiprintf_r>:
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	4698      	mov	r8, r3
 800d7f6:	898b      	ldrh	r3, [r1, #12]
 800d7f8:	061b      	lsls	r3, r3, #24
 800d7fa:	b09d      	sub	sp, #116	; 0x74
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	460d      	mov	r5, r1
 800d800:	4614      	mov	r4, r2
 800d802:	d50e      	bpl.n	800d822 <_svfiprintf_r+0x32>
 800d804:	690b      	ldr	r3, [r1, #16]
 800d806:	b963      	cbnz	r3, 800d822 <_svfiprintf_r+0x32>
 800d808:	2140      	movs	r1, #64	; 0x40
 800d80a:	f7ff fee5 	bl	800d5d8 <_malloc_r>
 800d80e:	6028      	str	r0, [r5, #0]
 800d810:	6128      	str	r0, [r5, #16]
 800d812:	b920      	cbnz	r0, 800d81e <_svfiprintf_r+0x2e>
 800d814:	230c      	movs	r3, #12
 800d816:	603b      	str	r3, [r7, #0]
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
 800d81c:	e0d1      	b.n	800d9c2 <_svfiprintf_r+0x1d2>
 800d81e:	2340      	movs	r3, #64	; 0x40
 800d820:	616b      	str	r3, [r5, #20]
 800d822:	2300      	movs	r3, #0
 800d824:	9309      	str	r3, [sp, #36]	; 0x24
 800d826:	2320      	movs	r3, #32
 800d828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d830:	2330      	movs	r3, #48	; 0x30
 800d832:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9dc <_svfiprintf_r+0x1ec>
 800d836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d83a:	f04f 0901 	mov.w	r9, #1
 800d83e:	4623      	mov	r3, r4
 800d840:	469a      	mov	sl, r3
 800d842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d846:	b10a      	cbz	r2, 800d84c <_svfiprintf_r+0x5c>
 800d848:	2a25      	cmp	r2, #37	; 0x25
 800d84a:	d1f9      	bne.n	800d840 <_svfiprintf_r+0x50>
 800d84c:	ebba 0b04 	subs.w	fp, sl, r4
 800d850:	d00b      	beq.n	800d86a <_svfiprintf_r+0x7a>
 800d852:	465b      	mov	r3, fp
 800d854:	4622      	mov	r2, r4
 800d856:	4629      	mov	r1, r5
 800d858:	4638      	mov	r0, r7
 800d85a:	f7ff ff6d 	bl	800d738 <__ssputs_r>
 800d85e:	3001      	adds	r0, #1
 800d860:	f000 80aa 	beq.w	800d9b8 <_svfiprintf_r+0x1c8>
 800d864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d866:	445a      	add	r2, fp
 800d868:	9209      	str	r2, [sp, #36]	; 0x24
 800d86a:	f89a 3000 	ldrb.w	r3, [sl]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f000 80a2 	beq.w	800d9b8 <_svfiprintf_r+0x1c8>
 800d874:	2300      	movs	r3, #0
 800d876:	f04f 32ff 	mov.w	r2, #4294967295
 800d87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d87e:	f10a 0a01 	add.w	sl, sl, #1
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	9307      	str	r3, [sp, #28]
 800d886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d88a:	931a      	str	r3, [sp, #104]	; 0x68
 800d88c:	4654      	mov	r4, sl
 800d88e:	2205      	movs	r2, #5
 800d890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d894:	4851      	ldr	r0, [pc, #324]	; (800d9dc <_svfiprintf_r+0x1ec>)
 800d896:	f7f2 fd23 	bl	80002e0 <memchr>
 800d89a:	9a04      	ldr	r2, [sp, #16]
 800d89c:	b9d8      	cbnz	r0, 800d8d6 <_svfiprintf_r+0xe6>
 800d89e:	06d0      	lsls	r0, r2, #27
 800d8a0:	bf44      	itt	mi
 800d8a2:	2320      	movmi	r3, #32
 800d8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8a8:	0711      	lsls	r1, r2, #28
 800d8aa:	bf44      	itt	mi
 800d8ac:	232b      	movmi	r3, #43	; 0x2b
 800d8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b8:	d015      	beq.n	800d8e6 <_svfiprintf_r+0xf6>
 800d8ba:	9a07      	ldr	r2, [sp, #28]
 800d8bc:	4654      	mov	r4, sl
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f04f 0c0a 	mov.w	ip, #10
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ca:	3b30      	subs	r3, #48	; 0x30
 800d8cc:	2b09      	cmp	r3, #9
 800d8ce:	d94e      	bls.n	800d96e <_svfiprintf_r+0x17e>
 800d8d0:	b1b0      	cbz	r0, 800d900 <_svfiprintf_r+0x110>
 800d8d2:	9207      	str	r2, [sp, #28]
 800d8d4:	e014      	b.n	800d900 <_svfiprintf_r+0x110>
 800d8d6:	eba0 0308 	sub.w	r3, r0, r8
 800d8da:	fa09 f303 	lsl.w	r3, r9, r3
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	9304      	str	r3, [sp, #16]
 800d8e2:	46a2      	mov	sl, r4
 800d8e4:	e7d2      	b.n	800d88c <_svfiprintf_r+0x9c>
 800d8e6:	9b03      	ldr	r3, [sp, #12]
 800d8e8:	1d19      	adds	r1, r3, #4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	9103      	str	r1, [sp, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bfbb      	ittet	lt
 800d8f2:	425b      	neglt	r3, r3
 800d8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8f8:	9307      	strge	r3, [sp, #28]
 800d8fa:	9307      	strlt	r3, [sp, #28]
 800d8fc:	bfb8      	it	lt
 800d8fe:	9204      	strlt	r2, [sp, #16]
 800d900:	7823      	ldrb	r3, [r4, #0]
 800d902:	2b2e      	cmp	r3, #46	; 0x2e
 800d904:	d10c      	bne.n	800d920 <_svfiprintf_r+0x130>
 800d906:	7863      	ldrb	r3, [r4, #1]
 800d908:	2b2a      	cmp	r3, #42	; 0x2a
 800d90a:	d135      	bne.n	800d978 <_svfiprintf_r+0x188>
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	1d1a      	adds	r2, r3, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	9203      	str	r2, [sp, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	bfb8      	it	lt
 800d918:	f04f 33ff 	movlt.w	r3, #4294967295
 800d91c:	3402      	adds	r4, #2
 800d91e:	9305      	str	r3, [sp, #20]
 800d920:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9ec <_svfiprintf_r+0x1fc>
 800d924:	7821      	ldrb	r1, [r4, #0]
 800d926:	2203      	movs	r2, #3
 800d928:	4650      	mov	r0, sl
 800d92a:	f7f2 fcd9 	bl	80002e0 <memchr>
 800d92e:	b140      	cbz	r0, 800d942 <_svfiprintf_r+0x152>
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	eba0 000a 	sub.w	r0, r0, sl
 800d936:	fa03 f000 	lsl.w	r0, r3, r0
 800d93a:	9b04      	ldr	r3, [sp, #16]
 800d93c:	4303      	orrs	r3, r0
 800d93e:	3401      	adds	r4, #1
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d946:	4826      	ldr	r0, [pc, #152]	; (800d9e0 <_svfiprintf_r+0x1f0>)
 800d948:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d94c:	2206      	movs	r2, #6
 800d94e:	f7f2 fcc7 	bl	80002e0 <memchr>
 800d952:	2800      	cmp	r0, #0
 800d954:	d038      	beq.n	800d9c8 <_svfiprintf_r+0x1d8>
 800d956:	4b23      	ldr	r3, [pc, #140]	; (800d9e4 <_svfiprintf_r+0x1f4>)
 800d958:	bb1b      	cbnz	r3, 800d9a2 <_svfiprintf_r+0x1b2>
 800d95a:	9b03      	ldr	r3, [sp, #12]
 800d95c:	3307      	adds	r3, #7
 800d95e:	f023 0307 	bic.w	r3, r3, #7
 800d962:	3308      	adds	r3, #8
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d968:	4433      	add	r3, r6
 800d96a:	9309      	str	r3, [sp, #36]	; 0x24
 800d96c:	e767      	b.n	800d83e <_svfiprintf_r+0x4e>
 800d96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d972:	460c      	mov	r4, r1
 800d974:	2001      	movs	r0, #1
 800d976:	e7a5      	b.n	800d8c4 <_svfiprintf_r+0xd4>
 800d978:	2300      	movs	r3, #0
 800d97a:	3401      	adds	r4, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	4619      	mov	r1, r3
 800d980:	f04f 0c0a 	mov.w	ip, #10
 800d984:	4620      	mov	r0, r4
 800d986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d98a:	3a30      	subs	r2, #48	; 0x30
 800d98c:	2a09      	cmp	r2, #9
 800d98e:	d903      	bls.n	800d998 <_svfiprintf_r+0x1a8>
 800d990:	2b00      	cmp	r3, #0
 800d992:	d0c5      	beq.n	800d920 <_svfiprintf_r+0x130>
 800d994:	9105      	str	r1, [sp, #20]
 800d996:	e7c3      	b.n	800d920 <_svfiprintf_r+0x130>
 800d998:	fb0c 2101 	mla	r1, ip, r1, r2
 800d99c:	4604      	mov	r4, r0
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e7f0      	b.n	800d984 <_svfiprintf_r+0x194>
 800d9a2:	ab03      	add	r3, sp, #12
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	; (800d9e8 <_svfiprintf_r+0x1f8>)
 800d9aa:	a904      	add	r1, sp, #16
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f3af 8000 	nop.w
 800d9b2:	1c42      	adds	r2, r0, #1
 800d9b4:	4606      	mov	r6, r0
 800d9b6:	d1d6      	bne.n	800d966 <_svfiprintf_r+0x176>
 800d9b8:	89ab      	ldrh	r3, [r5, #12]
 800d9ba:	065b      	lsls	r3, r3, #25
 800d9bc:	f53f af2c 	bmi.w	800d818 <_svfiprintf_r+0x28>
 800d9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9c2:	b01d      	add	sp, #116	; 0x74
 800d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c8:	ab03      	add	r3, sp, #12
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	462a      	mov	r2, r5
 800d9ce:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <_svfiprintf_r+0x1f8>)
 800d9d0:	a904      	add	r1, sp, #16
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f000 f87a 	bl	800dacc <_printf_i>
 800d9d8:	e7eb      	b.n	800d9b2 <_svfiprintf_r+0x1c2>
 800d9da:	bf00      	nop
 800d9dc:	0800f588 	.word	0x0800f588
 800d9e0:	0800f592 	.word	0x0800f592
 800d9e4:	00000000 	.word	0x00000000
 800d9e8:	0800d739 	.word	0x0800d739
 800d9ec:	0800f58e 	.word	0x0800f58e

0800d9f0 <_printf_common>:
 800d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	4616      	mov	r6, r2
 800d9f6:	4699      	mov	r9, r3
 800d9f8:	688a      	ldr	r2, [r1, #8]
 800d9fa:	690b      	ldr	r3, [r1, #16]
 800d9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da00:	4293      	cmp	r3, r2
 800da02:	bfb8      	it	lt
 800da04:	4613      	movlt	r3, r2
 800da06:	6033      	str	r3, [r6, #0]
 800da08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da0c:	4607      	mov	r7, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	b10a      	cbz	r2, 800da16 <_printf_common+0x26>
 800da12:	3301      	adds	r3, #1
 800da14:	6033      	str	r3, [r6, #0]
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	0699      	lsls	r1, r3, #26
 800da1a:	bf42      	ittt	mi
 800da1c:	6833      	ldrmi	r3, [r6, #0]
 800da1e:	3302      	addmi	r3, #2
 800da20:	6033      	strmi	r3, [r6, #0]
 800da22:	6825      	ldr	r5, [r4, #0]
 800da24:	f015 0506 	ands.w	r5, r5, #6
 800da28:	d106      	bne.n	800da38 <_printf_common+0x48>
 800da2a:	f104 0a19 	add.w	sl, r4, #25
 800da2e:	68e3      	ldr	r3, [r4, #12]
 800da30:	6832      	ldr	r2, [r6, #0]
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	42ab      	cmp	r3, r5
 800da36:	dc26      	bgt.n	800da86 <_printf_common+0x96>
 800da38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da3c:	1e13      	subs	r3, r2, #0
 800da3e:	6822      	ldr	r2, [r4, #0]
 800da40:	bf18      	it	ne
 800da42:	2301      	movne	r3, #1
 800da44:	0692      	lsls	r2, r2, #26
 800da46:	d42b      	bmi.n	800daa0 <_printf_common+0xb0>
 800da48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da4c:	4649      	mov	r1, r9
 800da4e:	4638      	mov	r0, r7
 800da50:	47c0      	blx	r8
 800da52:	3001      	adds	r0, #1
 800da54:	d01e      	beq.n	800da94 <_printf_common+0xa4>
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	68e5      	ldr	r5, [r4, #12]
 800da5a:	6832      	ldr	r2, [r6, #0]
 800da5c:	f003 0306 	and.w	r3, r3, #6
 800da60:	2b04      	cmp	r3, #4
 800da62:	bf08      	it	eq
 800da64:	1aad      	subeq	r5, r5, r2
 800da66:	68a3      	ldr	r3, [r4, #8]
 800da68:	6922      	ldr	r2, [r4, #16]
 800da6a:	bf0c      	ite	eq
 800da6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da70:	2500      	movne	r5, #0
 800da72:	4293      	cmp	r3, r2
 800da74:	bfc4      	itt	gt
 800da76:	1a9b      	subgt	r3, r3, r2
 800da78:	18ed      	addgt	r5, r5, r3
 800da7a:	2600      	movs	r6, #0
 800da7c:	341a      	adds	r4, #26
 800da7e:	42b5      	cmp	r5, r6
 800da80:	d11a      	bne.n	800dab8 <_printf_common+0xc8>
 800da82:	2000      	movs	r0, #0
 800da84:	e008      	b.n	800da98 <_printf_common+0xa8>
 800da86:	2301      	movs	r3, #1
 800da88:	4652      	mov	r2, sl
 800da8a:	4649      	mov	r1, r9
 800da8c:	4638      	mov	r0, r7
 800da8e:	47c0      	blx	r8
 800da90:	3001      	adds	r0, #1
 800da92:	d103      	bne.n	800da9c <_printf_common+0xac>
 800da94:	f04f 30ff 	mov.w	r0, #4294967295
 800da98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9c:	3501      	adds	r5, #1
 800da9e:	e7c6      	b.n	800da2e <_printf_common+0x3e>
 800daa0:	18e1      	adds	r1, r4, r3
 800daa2:	1c5a      	adds	r2, r3, #1
 800daa4:	2030      	movs	r0, #48	; 0x30
 800daa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800daaa:	4422      	add	r2, r4
 800daac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dab4:	3302      	adds	r3, #2
 800dab6:	e7c7      	b.n	800da48 <_printf_common+0x58>
 800dab8:	2301      	movs	r3, #1
 800daba:	4622      	mov	r2, r4
 800dabc:	4649      	mov	r1, r9
 800dabe:	4638      	mov	r0, r7
 800dac0:	47c0      	blx	r8
 800dac2:	3001      	adds	r0, #1
 800dac4:	d0e6      	beq.n	800da94 <_printf_common+0xa4>
 800dac6:	3601      	adds	r6, #1
 800dac8:	e7d9      	b.n	800da7e <_printf_common+0x8e>
	...

0800dacc <_printf_i>:
 800dacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	7e0f      	ldrb	r7, [r1, #24]
 800dad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dad4:	2f78      	cmp	r7, #120	; 0x78
 800dad6:	4691      	mov	r9, r2
 800dad8:	4680      	mov	r8, r0
 800dada:	460c      	mov	r4, r1
 800dadc:	469a      	mov	sl, r3
 800dade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dae2:	d807      	bhi.n	800daf4 <_printf_i+0x28>
 800dae4:	2f62      	cmp	r7, #98	; 0x62
 800dae6:	d80a      	bhi.n	800dafe <_printf_i+0x32>
 800dae8:	2f00      	cmp	r7, #0
 800daea:	f000 80d8 	beq.w	800dc9e <_printf_i+0x1d2>
 800daee:	2f58      	cmp	r7, #88	; 0x58
 800daf0:	f000 80a3 	beq.w	800dc3a <_printf_i+0x16e>
 800daf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dafc:	e03a      	b.n	800db74 <_printf_i+0xa8>
 800dafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db02:	2b15      	cmp	r3, #21
 800db04:	d8f6      	bhi.n	800daf4 <_printf_i+0x28>
 800db06:	a101      	add	r1, pc, #4	; (adr r1, 800db0c <_printf_i+0x40>)
 800db08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db0c:	0800db65 	.word	0x0800db65
 800db10:	0800db79 	.word	0x0800db79
 800db14:	0800daf5 	.word	0x0800daf5
 800db18:	0800daf5 	.word	0x0800daf5
 800db1c:	0800daf5 	.word	0x0800daf5
 800db20:	0800daf5 	.word	0x0800daf5
 800db24:	0800db79 	.word	0x0800db79
 800db28:	0800daf5 	.word	0x0800daf5
 800db2c:	0800daf5 	.word	0x0800daf5
 800db30:	0800daf5 	.word	0x0800daf5
 800db34:	0800daf5 	.word	0x0800daf5
 800db38:	0800dc85 	.word	0x0800dc85
 800db3c:	0800dba9 	.word	0x0800dba9
 800db40:	0800dc67 	.word	0x0800dc67
 800db44:	0800daf5 	.word	0x0800daf5
 800db48:	0800daf5 	.word	0x0800daf5
 800db4c:	0800dca7 	.word	0x0800dca7
 800db50:	0800daf5 	.word	0x0800daf5
 800db54:	0800dba9 	.word	0x0800dba9
 800db58:	0800daf5 	.word	0x0800daf5
 800db5c:	0800daf5 	.word	0x0800daf5
 800db60:	0800dc6f 	.word	0x0800dc6f
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	602a      	str	r2, [r5, #0]
 800db6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db74:	2301      	movs	r3, #1
 800db76:	e0a3      	b.n	800dcc0 <_printf_i+0x1f4>
 800db78:	6820      	ldr	r0, [r4, #0]
 800db7a:	6829      	ldr	r1, [r5, #0]
 800db7c:	0606      	lsls	r6, r0, #24
 800db7e:	f101 0304 	add.w	r3, r1, #4
 800db82:	d50a      	bpl.n	800db9a <_printf_i+0xce>
 800db84:	680e      	ldr	r6, [r1, #0]
 800db86:	602b      	str	r3, [r5, #0]
 800db88:	2e00      	cmp	r6, #0
 800db8a:	da03      	bge.n	800db94 <_printf_i+0xc8>
 800db8c:	232d      	movs	r3, #45	; 0x2d
 800db8e:	4276      	negs	r6, r6
 800db90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db94:	485e      	ldr	r0, [pc, #376]	; (800dd10 <_printf_i+0x244>)
 800db96:	230a      	movs	r3, #10
 800db98:	e019      	b.n	800dbce <_printf_i+0x102>
 800db9a:	680e      	ldr	r6, [r1, #0]
 800db9c:	602b      	str	r3, [r5, #0]
 800db9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dba2:	bf18      	it	ne
 800dba4:	b236      	sxthne	r6, r6
 800dba6:	e7ef      	b.n	800db88 <_printf_i+0xbc>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	6820      	ldr	r0, [r4, #0]
 800dbac:	1d19      	adds	r1, r3, #4
 800dbae:	6029      	str	r1, [r5, #0]
 800dbb0:	0601      	lsls	r1, r0, #24
 800dbb2:	d501      	bpl.n	800dbb8 <_printf_i+0xec>
 800dbb4:	681e      	ldr	r6, [r3, #0]
 800dbb6:	e002      	b.n	800dbbe <_printf_i+0xf2>
 800dbb8:	0646      	lsls	r6, r0, #25
 800dbba:	d5fb      	bpl.n	800dbb4 <_printf_i+0xe8>
 800dbbc:	881e      	ldrh	r6, [r3, #0]
 800dbbe:	4854      	ldr	r0, [pc, #336]	; (800dd10 <_printf_i+0x244>)
 800dbc0:	2f6f      	cmp	r7, #111	; 0x6f
 800dbc2:	bf0c      	ite	eq
 800dbc4:	2308      	moveq	r3, #8
 800dbc6:	230a      	movne	r3, #10
 800dbc8:	2100      	movs	r1, #0
 800dbca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbce:	6865      	ldr	r5, [r4, #4]
 800dbd0:	60a5      	str	r5, [r4, #8]
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	bfa2      	ittt	ge
 800dbd6:	6821      	ldrge	r1, [r4, #0]
 800dbd8:	f021 0104 	bicge.w	r1, r1, #4
 800dbdc:	6021      	strge	r1, [r4, #0]
 800dbde:	b90e      	cbnz	r6, 800dbe4 <_printf_i+0x118>
 800dbe0:	2d00      	cmp	r5, #0
 800dbe2:	d04d      	beq.n	800dc80 <_printf_i+0x1b4>
 800dbe4:	4615      	mov	r5, r2
 800dbe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbea:	fb03 6711 	mls	r7, r3, r1, r6
 800dbee:	5dc7      	ldrb	r7, [r0, r7]
 800dbf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbf4:	4637      	mov	r7, r6
 800dbf6:	42bb      	cmp	r3, r7
 800dbf8:	460e      	mov	r6, r1
 800dbfa:	d9f4      	bls.n	800dbe6 <_printf_i+0x11a>
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d10b      	bne.n	800dc18 <_printf_i+0x14c>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	07de      	lsls	r6, r3, #31
 800dc04:	d508      	bpl.n	800dc18 <_printf_i+0x14c>
 800dc06:	6923      	ldr	r3, [r4, #16]
 800dc08:	6861      	ldr	r1, [r4, #4]
 800dc0a:	4299      	cmp	r1, r3
 800dc0c:	bfde      	ittt	le
 800dc0e:	2330      	movle	r3, #48	; 0x30
 800dc10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc18:	1b52      	subs	r2, r2, r5
 800dc1a:	6122      	str	r2, [r4, #16]
 800dc1c:	f8cd a000 	str.w	sl, [sp]
 800dc20:	464b      	mov	r3, r9
 800dc22:	aa03      	add	r2, sp, #12
 800dc24:	4621      	mov	r1, r4
 800dc26:	4640      	mov	r0, r8
 800dc28:	f7ff fee2 	bl	800d9f0 <_printf_common>
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d14c      	bne.n	800dcca <_printf_i+0x1fe>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	b004      	add	sp, #16
 800dc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3a:	4835      	ldr	r0, [pc, #212]	; (800dd10 <_printf_i+0x244>)
 800dc3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc40:	6829      	ldr	r1, [r5, #0]
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc48:	6029      	str	r1, [r5, #0]
 800dc4a:	061d      	lsls	r5, r3, #24
 800dc4c:	d514      	bpl.n	800dc78 <_printf_i+0x1ac>
 800dc4e:	07df      	lsls	r7, r3, #31
 800dc50:	bf44      	itt	mi
 800dc52:	f043 0320 	orrmi.w	r3, r3, #32
 800dc56:	6023      	strmi	r3, [r4, #0]
 800dc58:	b91e      	cbnz	r6, 800dc62 <_printf_i+0x196>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	f023 0320 	bic.w	r3, r3, #32
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	2310      	movs	r3, #16
 800dc64:	e7b0      	b.n	800dbc8 <_printf_i+0xfc>
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	f043 0320 	orr.w	r3, r3, #32
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	2378      	movs	r3, #120	; 0x78
 800dc70:	4828      	ldr	r0, [pc, #160]	; (800dd14 <_printf_i+0x248>)
 800dc72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc76:	e7e3      	b.n	800dc40 <_printf_i+0x174>
 800dc78:	0659      	lsls	r1, r3, #25
 800dc7a:	bf48      	it	mi
 800dc7c:	b2b6      	uxthmi	r6, r6
 800dc7e:	e7e6      	b.n	800dc4e <_printf_i+0x182>
 800dc80:	4615      	mov	r5, r2
 800dc82:	e7bb      	b.n	800dbfc <_printf_i+0x130>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	6826      	ldr	r6, [r4, #0]
 800dc88:	6961      	ldr	r1, [r4, #20]
 800dc8a:	1d18      	adds	r0, r3, #4
 800dc8c:	6028      	str	r0, [r5, #0]
 800dc8e:	0635      	lsls	r5, r6, #24
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	d501      	bpl.n	800dc98 <_printf_i+0x1cc>
 800dc94:	6019      	str	r1, [r3, #0]
 800dc96:	e002      	b.n	800dc9e <_printf_i+0x1d2>
 800dc98:	0670      	lsls	r0, r6, #25
 800dc9a:	d5fb      	bpl.n	800dc94 <_printf_i+0x1c8>
 800dc9c:	8019      	strh	r1, [r3, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	4615      	mov	r5, r2
 800dca4:	e7ba      	b.n	800dc1c <_printf_i+0x150>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	602a      	str	r2, [r5, #0]
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	6862      	ldr	r2, [r4, #4]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7f2 fb14 	bl	80002e0 <memchr>
 800dcb8:	b108      	cbz	r0, 800dcbe <_printf_i+0x1f2>
 800dcba:	1b40      	subs	r0, r0, r5
 800dcbc:	6060      	str	r0, [r4, #4]
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc8:	e7a8      	b.n	800dc1c <_printf_i+0x150>
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	462a      	mov	r2, r5
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	47d0      	blx	sl
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d0ab      	beq.n	800dc30 <_printf_i+0x164>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	079b      	lsls	r3, r3, #30
 800dcdc:	d413      	bmi.n	800dd06 <_printf_i+0x23a>
 800dcde:	68e0      	ldr	r0, [r4, #12]
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	4298      	cmp	r0, r3
 800dce4:	bfb8      	it	lt
 800dce6:	4618      	movlt	r0, r3
 800dce8:	e7a4      	b.n	800dc34 <_printf_i+0x168>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4632      	mov	r2, r6
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	47d0      	blx	sl
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d09b      	beq.n	800dc30 <_printf_i+0x164>
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	9903      	ldr	r1, [sp, #12]
 800dcfe:	1a5b      	subs	r3, r3, r1
 800dd00:	42ab      	cmp	r3, r5
 800dd02:	dcf2      	bgt.n	800dcea <_printf_i+0x21e>
 800dd04:	e7eb      	b.n	800dcde <_printf_i+0x212>
 800dd06:	2500      	movs	r5, #0
 800dd08:	f104 0619 	add.w	r6, r4, #25
 800dd0c:	e7f5      	b.n	800dcfa <_printf_i+0x22e>
 800dd0e:	bf00      	nop
 800dd10:	0800f599 	.word	0x0800f599
 800dd14:	0800f5aa 	.word	0x0800f5aa

0800dd18 <__retarget_lock_acquire_recursive>:
 800dd18:	4770      	bx	lr

0800dd1a <__retarget_lock_release_recursive>:
 800dd1a:	4770      	bx	lr

0800dd1c <memcpy>:
 800dd1c:	440a      	add	r2, r1
 800dd1e:	4291      	cmp	r1, r2
 800dd20:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd24:	d100      	bne.n	800dd28 <memcpy+0xc>
 800dd26:	4770      	bx	lr
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd32:	4291      	cmp	r1, r2
 800dd34:	d1f9      	bne.n	800dd2a <memcpy+0xe>
 800dd36:	bd10      	pop	{r4, pc}

0800dd38 <memmove>:
 800dd38:	4288      	cmp	r0, r1
 800dd3a:	b510      	push	{r4, lr}
 800dd3c:	eb01 0402 	add.w	r4, r1, r2
 800dd40:	d902      	bls.n	800dd48 <memmove+0x10>
 800dd42:	4284      	cmp	r4, r0
 800dd44:	4623      	mov	r3, r4
 800dd46:	d807      	bhi.n	800dd58 <memmove+0x20>
 800dd48:	1e43      	subs	r3, r0, #1
 800dd4a:	42a1      	cmp	r1, r4
 800dd4c:	d008      	beq.n	800dd60 <memmove+0x28>
 800dd4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd56:	e7f8      	b.n	800dd4a <memmove+0x12>
 800dd58:	4402      	add	r2, r0
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	428a      	cmp	r2, r1
 800dd5e:	d100      	bne.n	800dd62 <memmove+0x2a>
 800dd60:	bd10      	pop	{r4, pc}
 800dd62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd6a:	e7f7      	b.n	800dd5c <memmove+0x24>

0800dd6c <_realloc_r>:
 800dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	4680      	mov	r8, r0
 800dd72:	4614      	mov	r4, r2
 800dd74:	460e      	mov	r6, r1
 800dd76:	b921      	cbnz	r1, 800dd82 <_realloc_r+0x16>
 800dd78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	f7ff bc2b 	b.w	800d5d8 <_malloc_r>
 800dd82:	b92a      	cbnz	r2, 800dd90 <_realloc_r+0x24>
 800dd84:	f7ff fbbc 	bl	800d500 <_free_r>
 800dd88:	4625      	mov	r5, r4
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd90:	f000 f81b 	bl	800ddca <_malloc_usable_size_r>
 800dd94:	4284      	cmp	r4, r0
 800dd96:	4607      	mov	r7, r0
 800dd98:	d802      	bhi.n	800dda0 <_realloc_r+0x34>
 800dd9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd9e:	d812      	bhi.n	800ddc6 <_realloc_r+0x5a>
 800dda0:	4621      	mov	r1, r4
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7ff fc18 	bl	800d5d8 <_malloc_r>
 800dda8:	4605      	mov	r5, r0
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	d0ed      	beq.n	800dd8a <_realloc_r+0x1e>
 800ddae:	42bc      	cmp	r4, r7
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	bf28      	it	cs
 800ddb6:	463a      	movcs	r2, r7
 800ddb8:	f7ff ffb0 	bl	800dd1c <memcpy>
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	f7ff fb9e 	bl	800d500 <_free_r>
 800ddc4:	e7e1      	b.n	800dd8a <_realloc_r+0x1e>
 800ddc6:	4635      	mov	r5, r6
 800ddc8:	e7df      	b.n	800dd8a <_realloc_r+0x1e>

0800ddca <_malloc_usable_size_r>:
 800ddca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddce:	1f18      	subs	r0, r3, #4
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	bfbc      	itt	lt
 800ddd4:	580b      	ldrlt	r3, [r1, r0]
 800ddd6:	18c0      	addlt	r0, r0, r3
 800ddd8:	4770      	bx	lr
	...

0800dddc <_init>:
 800dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddde:	bf00      	nop
 800dde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dde2:	bc08      	pop	{r3}
 800dde4:	469e      	mov	lr, r3
 800dde6:	4770      	bx	lr

0800dde8 <_fini>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	bf00      	nop
 800ddec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	469e      	mov	lr, r3
 800ddf2:	4770      	bx	lr
