
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a98c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800ac24  0800ac24  0001ac24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acdc  0800acdc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace4  0800ace4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800acec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800acfc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800ad5c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c6c  240000d0  0800adbc  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000d3c  0800adbc  00020d3c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f6cb  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034f4  00000000  00000000  0003f7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001428  00000000  00000000  00042cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001378  00000000  00000000  000440e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c1ba  00000000  00000000  00045460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ba3c  00000000  00000000  0008161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186de8  00000000  00000000  0009d056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00223e3e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055c4  00000000  00000000  00223e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ac0c 	.word	0x0800ac0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800ac0c 	.word	0x0800ac0c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	79da      	ldrb	r2, [r3, #7]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1a      	ldrb	r2, [r3, #8]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7a5a      	ldrb	r2, [r3, #9]
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	725a      	strb	r2, [r3, #9]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffb8 	bl	80005dc <YUGIOH_card_copy>
}
 800066c:	bf00      	nop
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3318      	adds	r3, #24
 8000680:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000682:	2300      	movs	r3, #0
 8000684:	72fb      	strb	r3, [r7, #11]
 8000686:	e008      	b.n	800069a <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ffde 	bl	800064a <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3310      	adds	r3, #16
 8000692:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	3301      	adds	r3, #1
 8000698:	72fb      	strb	r3, [r7, #11]
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d9f3      	bls.n	8000688 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3328      	adds	r3, #40	; 0x28
 80006bc:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2358      	movs	r3, #88	; 0x58
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	3328      	adds	r3, #40	; 0x28
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3318      	adds	r3, #24
 80006d6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80006de:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d126      	bne.n	8000736 <Player_Reading_Card+0x8a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f8aa 	bl	8000842 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80006ee:	6979      	ldr	r1, [r7, #20]
 80006f0:	69b8      	ldr	r0, [r7, #24]
 80006f2:	f7ff ff73 	bl	80005dc <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	799a      	ldrb	r2, [r3, #6]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <Player_Reading_Card+0x94>)
 80006fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000700:	0899      	lsrs	r1, r3, #2
 8000702:	460b      	mov	r3, r1
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	440b      	add	r3, r1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b2da      	uxtb	r2, r3
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2200      	movs	r2, #0
 8000716:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	2201      	movs	r2, #1
 800071c:	725a      	strb	r2, [r3, #9]
		RFID_Clear_Card_Bufffer(ptrRFID);
 800071e:	69f8      	ldr	r0, [r7, #28]
 8000720:	f7ff ffa8 	bl	8000674 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	701a      	strb	r2, [r3, #0]
	}
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	aaaaaaab 	.word	0xaaaaaaab

08000744 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000760:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	76fb      	strb	r3, [r7, #27]
 8000766:	e00b      	b.n	8000780 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	69f9      	ldr	r1, [r7, #28]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff34 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3310      	adds	r3, #16
 8000778:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800077a:	7efb      	ldrb	r3, [r7, #27]
 800077c:	3301      	adds	r3, #1
 800077e:	76fb      	strb	r3, [r7, #27]
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d9f0      	bls.n	8000768 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80007ac:	61fb      	str	r3, [r7, #28]

		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	76fb      	strb	r3, [r7, #27]
 80007b2:	e00b      	b.n	80007cc <YUGIOH_Clear_Card_All+0x3c>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	69f9      	ldr	r1, [r7, #28]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff0e 	bl	80005dc <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3310      	adds	r3, #16
 80007c4:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	3301      	adds	r3, #1
 80007ca:	76fb      	strb	r3, [r7, #27]
 80007cc:	7efb      	ldrb	r3, [r7, #27]
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	d9f0      	bls.n	80007b4 <YUGIOH_Clear_Card_All+0x24>

		}
		ptrYUGIOHCard = player->GY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3368      	adds	r3, #104	; 0x68
 80007d6:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007d8:	2300      	movs	r3, #0
 80007da:	76bb      	strb	r3, [r7, #26]
 80007dc:	e00b      	b.n	80007f6 <YUGIOH_Clear_Card_All+0x66>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	69f9      	ldr	r1, [r7, #28]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fef9 	bl	80005dc <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3310      	adds	r3, #16
 80007ee:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007f0:	7ebb      	ldrb	r3, [r7, #26]
 80007f2:	3301      	adds	r3, #1
 80007f4:	76bb      	strb	r3, [r7, #26]
 80007f6:	7ebb      	ldrb	r3, [r7, #26]
 80007f8:	2b13      	cmp	r3, #19
 80007fa:	d9f0      	bls.n	80007de <YUGIOH_Clear_Card_All+0x4e>
		}
		ptrYUGIOHCard = player->cardOnBoard;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3308      	adds	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000802:	2300      	movs	r3, #0
 8000804:	767b      	strb	r3, [r7, #25]
 8000806:	e00b      	b.n	8000820 <YUGIOH_Clear_Card_All+0x90>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	69f9      	ldr	r1, [r7, #28]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fee4 	bl	80005dc <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	3310      	adds	r3, #16
 8000818:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800081a:	7e7b      	ldrb	r3, [r7, #25]
 800081c:	3301      	adds	r3, #1
 800081e:	767b      	strb	r3, [r7, #25]
 8000820:	7e7b      	ldrb	r3, [r7, #25]
 8000822:	2b05      	cmp	r3, #5
 8000824:	d9f0      	bls.n	8000808 <YUGIOH_Clear_Card_All+0x78>
		}

		ptrYUGIOHCard = &player->CardInPlayed;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800082c:	61fb      	str	r3, [r7, #28]
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	69f9      	ldr	r1, [r7, #28]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fed1 	bl	80005dc <YUGIOH_card_copy>
}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000850:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000858:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000860:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000868:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800086a:	2306      	movs	r3, #6
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e00c      	b.n	800088a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000870:	6939      	ldr	r1, [r7, #16]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff feb2 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3b10      	subs	r3, #16
 800087c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	3b10      	subs	r3, #16
 8000882:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3b01      	subs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dcef      	bgt.n	8000870 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800089a:	b580      	push	{r7, lr}
 800089c:	b08a      	sub	sp, #40	; 0x28
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3368      	adds	r3, #104	; 0x68
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3368      	adds	r3, #104	; 0x68
 80008c4:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80008cc:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80008ce:	2314      	movs	r3, #20
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	e00c      	b.n	80008ee <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80008d4:	6a39      	ldr	r1, [r7, #32]
 80008d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008d8:	f7ff fe80 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	3b10      	subs	r3, #16
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	3b10      	subs	r3, #16
 80008e6:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dcef      	bgt.n	80008d4 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3368      	adds	r3, #104	; 0x68
 80008fc:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80008fe:	6a39      	ldr	r1, [r7, #32]
 8000900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000902:	f7ff fe6b 	bl	80005dc <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 800090c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800090e:	6a38      	ldr	r0, [r7, #32]
 8000910:	f7ff fe64 	bl	80005dc <YUGIOH_card_copy>

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3304      	adds	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3304      	adds	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800093e:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000940:	2108      	movs	r1, #8
 8000942:	4846      	ldr	r0, [pc, #280]	; (8000a5c <GAME_PLAY_Management+0x140>)
 8000944:	f005 f808 	bl	8005958 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000950:	2102      	movs	r1, #2
 8000952:	4843      	ldr	r0, [pc, #268]	; (8000a60 <GAME_PLAY_Management+0x144>)
 8000954:	f005 f800 	bl	8005958 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000960:	2104      	movs	r1, #4
 8000962:	483e      	ldr	r0, [pc, #248]	; (8000a5c <GAME_PLAY_Management+0x140>)
 8000964:	f004 fff8 	bl	8005958 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <GAME_PLAY_Management+0x148>)
 8000976:	f004 ffef 	bl	8005958 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	709a      	strb	r2, [r3, #2]

    enum _player_state {
    	Game_not_start,Game_init, first_player, second_player,Game_Ended
    } MS;
    MS = state_game->MainGame_State;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000988:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3304      	adds	r3, #4
 8000994:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d85a      	bhi.n	8000a52 <GAME_PLAY_Management+0x136>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <GAME_PLAY_Management+0x88>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009b9 	.word	0x080009b9
 80009a8:	080009eb 	.word	0x080009eb
 80009ac:	08000a19 	.word	0x08000a19
 80009b0:	08000a35 	.word	0x08000a35
 80009b4:	08000a51 	.word	0x08000a51
	case Game_not_start:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80009b8:	2108      	movs	r1, #8
 80009ba:	482b      	ldr	r0, [pc, #172]	; (8000a68 <GAME_PLAY_Management+0x14c>)
 80009bc:	f004 ffcc 	bl	8005958 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <GAME_PLAY_Management+0xb4>
				== GPIO_PIN_RESET) {
			state_game->MainGame_State = Game_init;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		{
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
		}
		break;
 80009ce:	e040      	b.n	8000a52 <GAME_PLAY_Management+0x136>
			state_game->PlyerAction_State = PS_AFK;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
		break;
 80009e8:	e033      	b.n	8000a52 <GAME_PLAY_Management+0x136>
	case Game_init:

		// Reset Player
		ptrPlayer1->life_point = 4000;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009f0:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009f8:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 80009fa:	69f8      	ldr	r0, [r7, #28]
 80009fc:	f7ff fec8 	bl	8000790 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000a00:	69b8      	ldr	r0, [r7, #24]
 8000a02:	f7ff fec5 	bl	8000790 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2202      	movs	r2, #2
 8000a0a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000a16:	e01c      	b.n	8000a52 <GAME_PLAY_Management+0x136>
	case first_player:
		ptrPlayerAtk = &state_game->player[0];
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a24:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f81d 	bl	8000a6c <GAME_PLAY_Phase_Management>
		break;
 8000a32:	e00e      	b.n	8000a52 <GAME_PLAY_Management+0x136>
	case second_player:
		ptrPlayerAtk = &state_game->player[1];
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a3a:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	6839      	ldr	r1, [r7, #0]
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f80f 	bl	8000a6c <GAME_PLAY_Phase_Management>
		break;
 8000a4e:	e000      	b.n	8000a52 <GAME_PLAY_Management+0x136>
	case Game_Ended:
		break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58020800 	.word	0x58020800
 8000a60:	58020400 	.word	0x58020400
 8000a64:	58021400 	.word	0x58021400
 8000a68:	58020000 	.word	0x58020000

08000a6c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
    enum _STATE {
    	PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
    } PAS;
    PAS = state_game->PlyerAction_State;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8000a80:	77fb      	strb	r3, [r7, #31]

    enum _MAIN {
    	PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
    } PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8000a88:	77bb      	strb	r3, [r7, #30]

    enum _BATTLE {
    	PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } PBS;
    PBS = state_game->PlyerAction_Battle_Substate;
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8000a90:	777b      	strb	r3, [r7, #29]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (PAS) {
 8000a92:	7ffb      	ldrb	r3, [r7, #31]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	f200 8415 	bhi.w	80012c4 <GAME_PLAY_Phase_Management+0x858>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <GAME_PLAY_Phase_Management+0x34>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	080012b7 	.word	0x080012b7
 8000aa4:	08000ab1 	.word	0x08000ab1
 8000aa8:	08000ae1 	.word	0x08000ae1
 8000aac:	08000f1b 	.word	0x08000f1b
	case PS_AFK:
		break;
	case Drawn_Phase:
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	48af      	ldr	r0, [pc, #700]	; (8000d70 <GAME_PLAY_Phase_Management+0x304>)
 8000ab4:	f004 ff50 	bl	8005958 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 83fd 	bne.w	80012ba <GAME_PLAY_Phase_Management+0x84e>
				== GPIO_PIN_RESET) {
			state_game->PlyerAction_State = Main_Phase;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000ad6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ada:	f001 fdef 	bl	80026bc <HAL_Delay>
		}
		break;
 8000ade:	e3ec      	b.n	80012ba <GAME_PLAY_Phase_Management+0x84e>
	case Main_Phase:

		switch (PMS)
 8000ae0:	7fbb      	ldrb	r3, [r7, #30]
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	f200 83eb 	bhi.w	80012be <GAME_PLAY_Phase_Management+0x852>
 8000ae8:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <GAME_PLAY_Phase_Management+0x84>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000eff 	.word	0x08000eff
 8000af4:	08000b11 	.word	0x08000b11
 8000af8:	08000b6d 	.word	0x08000b6d
 8000afc:	08000bd5 	.word	0x08000bd5
 8000b00:	08000d53 	.word	0x08000d53
 8000b04:	08000eff 	.word	0x08000eff
 8000b08:	08000eb7 	.word	0x08000eb7
 8000b0c:	08000e5f 	.word	0x08000e5f
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11f      	bne.n	8000b58 <GAME_PLAY_Phase_Management+0xec>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4895      	ldr	r0, [pc, #596]	; (8000d70 <GAME_PLAY_Phase_Management+0x304>)
 8000b1c:	f004 ff1c 	bl	8005958 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d112      	bne.n	8000b4c <GAME_PLAY_Phase_Management+0xe0>
						== GPIO_PIN_RESET){
					state_game->action = 50;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2232      	movs	r2, #50	; 0x32
 8000b2a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2203      	movs	r2, #3
 8000b38:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 8000b44:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b48:	f001 fdb8 	bl	80026bc <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fdab 	bl	80006ac <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8000b56:	e1d4      	b.n	8000f02 <GAME_PLAY_Phase_Management+0x496>
			else if (state_game->action == 1)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	f040 81d0 	bne.w	8000f02 <GAME_PLAY_Phase_Management+0x496>
				state_game->PlyerAction_Main_Substate = select_position;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2202      	movs	r2, #2
 8000b66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000b6a:	e1ca      	b.n	8000f02 <GAME_PLAY_Phase_Management+0x496>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ChainBuffer[0];
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b72:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d116      	bne.n	8000bb2 <GAME_PLAY_Phase_Management+0x146>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d106      	bne.n	8000b9a <GAME_PLAY_Phase_Management+0x12e>
			        ptrYugiohCard_src->cardState = 0;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	709a      	strb	r2, [r3, #2]
			        state_game->action = 2;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2202      	movs	r2, #2
 8000b96:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8000b98:	e1b5      	b.n	8000f06 <GAME_PLAY_Phase_Management+0x49a>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	785b      	ldrb	r3, [r3, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 81b1 	bne.w	8000f06 <GAME_PLAY_Phase_Management+0x49a>
			        ptrYugiohCard_src->cardState = 1;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	709a      	strb	r2, [r3, #2]
			        state_game->action = 2;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2202      	movs	r2, #2
 8000bae:	701a      	strb	r2, [r3, #0]
			break;
 8000bb0:	e1a9      	b.n	8000f06 <GAME_PLAY_Phase_Management+0x49a>
			else if (state_game->action == 2)
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	f040 81a5 	bne.w	8000f06 <GAME_PLAY_Phase_Management+0x49a>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bbe:	69b8      	ldr	r0, [r7, #24]
 8000bc0:	f7ff fd0c 	bl	80005dc <YUGIOH_card_copy>
				state_game->action = 3;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000bd2:	e198      	b.n	8000f06 <GAME_PLAY_Phase_Management+0x49a>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000bda:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 3)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	f040 8192 	bne.w	8000f0a <GAME_PLAY_Phase_Management+0x49e>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d127      	bne.n	8000c3e <GAME_PLAY_Phase_Management+0x1d2>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	799a      	ldrb	r2, [r3, #6]
 8000bf2:	4b60      	ldr	r3, [pc, #384]	; (8000d74 <GAME_PLAY_Phase_Management+0x308>)
 8000bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf8:	0899      	lsrs	r1, r3, #2
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	440b      	add	r3, r1
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	747b      	strb	r3, [r7, #17]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000c06:	7c7b      	ldrb	r3, [r7, #17]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c14:	69b8      	ldr	r0, [r7, #24]
 8000c16:	f7ff fce1 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fd92 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c26:	69b9      	ldr	r1, [r7, #24]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fcd7 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8000c3c:	e165      	b.n	8000f0a <GAME_PLAY_Phase_Management+0x49e>
				else if (ptrYugiohCard_src->cardType == 2)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d141      	bne.n	8000cca <GAME_PLAY_Phase_Management+0x25e>
					state_game->count_chain = 1;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	799b      	ldrb	r3, [r3, #6]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d112      	bne.n	8000c7a <GAME_PLAY_Phase_Management+0x20e>
						state_game->test = 33;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2221      	movs	r2, #33	; 0x21
 8000c58:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fd71 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2204      	movs	r2, #4
 8000c66:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2207      	movs	r2, #7
 8000c74:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000c78:	e147      	b.n	8000f0a <GAME_PLAY_Phase_Management+0x49e>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	799a      	ldrb	r2, [r3, #6]
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <GAME_PLAY_Phase_Management+0x308>)
 8000c80:	fba3 1302 	umull	r1, r3, r3, r2
 8000c84:	0899      	lsrs	r1, r3, #2
 8000c86:	460b      	mov	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	440b      	add	r3, r1
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000c92:	7cbb      	ldrb	r3, [r7, #18]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	3308      	adds	r3, #8
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ca0:	69b8      	ldr	r0, [r7, #24]
 8000ca2:	f7ff fc9b 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fd4c 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000cb2:	69b9      	ldr	r1, [r7, #24]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc91 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000cc8:	e11f      	b.n	8000f0a <GAME_PLAY_Phase_Management+0x49e>
				else if (ptrYugiohCard_src->cardType == 1)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	785b      	ldrb	r3, [r3, #1]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 811b 	bne.w	8000f0a <GAME_PLAY_Phase_Management+0x49e>
					state_game->test = 2;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if (ptrYugiohCard_src->cardLevel < 7)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d82b      	bhi.n	8000d3c <GAME_PLAY_Phase_Management+0x2d0>
						state_game->test = 1;
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	799a      	ldrb	r2, [r3, #6]
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <GAME_PLAY_Phase_Management+0x308>)
 8000cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf6:	0899      	lsrs	r1, r3, #2
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	440b      	add	r3, r1
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	74fb      	strb	r3, [r7, #19]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000d04:	7cfb      	ldrb	r3, [r7, #19]
 8000d06:	011b      	lsls	r3, r3, #4
 8000d08:	3308      	adds	r3, #8
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d12:	69b8      	ldr	r0, [r7, #24]
 8000d14:	f7ff fc62 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff fd13 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000d24:	69b9      	ldr	r1, [r7, #24]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc58 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000d3a:	e0e6      	b.n	8000f0a <GAME_PLAY_Phase_Management+0x49e>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fd01 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2204      	movs	r2, #4
 8000d46:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8000d50:	e0db      	b.n	8000f0a <GAME_PLAY_Phase_Management+0x49e>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d58:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 4)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d10a      	bne.n	8000d78 <GAME_PLAY_Phase_Management+0x30c>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fca0 	bl	80006ac <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
				}
			}
				break;
 8000d6c:	e0cf      	b.n	8000f0e <GAME_PLAY_Phase_Management+0x4a2>
 8000d6e:	bf00      	nop
 8000d70:	58020800 	.word	0x58020800
 8000d74:	aaaaaaab 	.word	0xaaaaaaab
			else if (state_game->action == 5)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b05      	cmp	r3, #5
 8000d7e:	d105      	bne.n	8000d8c <GAME_PLAY_Phase_Management+0x320>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff fc91 	bl	80006ac <Player_Reading_Card>
				break;
 8000d8a:	e0c0      	b.n	8000f0e <GAME_PLAY_Phase_Management+0x4a2>
			else if (state_game->action == 6)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	f040 80bc 	bne.w	8000f0e <GAME_PLAY_Phase_Management+0x4a2>
				uint8_t monsterflag = 0 ;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &playerAtk->ChainBuffer[0];
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	78db      	ldrb	r3, [r3, #3]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d804      	bhi.n	8000db6 <GAME_PLAY_Phase_Management+0x34a>
					monsterflag += 1;
 8000dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	3310      	adds	r3, #16
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	78db      	ldrb	r3, [r3, #3]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d804      	bhi.n	8000dce <GAME_PLAY_Phase_Management+0x362>
					monsterflag += 1;
 8000dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc8:	3301      	adds	r3, #1
 8000dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 8000dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d135      	bne.n	8000e42 <GAME_PLAY_Phase_Management+0x3d6>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	799a      	ldrb	r2, [r3, #6]
 8000dda:	4bab      	ldr	r3, [pc, #684]	; (8001088 <GAME_PLAY_Phase_Management+0x61c>)
 8000ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8000de0:	0899      	lsrs	r1, r3, #2
 8000de2:	460b      	mov	r3, r1
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	440b      	add	r3, r1
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	753b      	strb	r3, [r7, #20]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8000dee:	7d3b      	ldrb	r3, [r7, #20]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	3308      	adds	r3, #8
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dfc:	69b8      	ldr	r0, [r7, #24]
 8000dfe:	f7ff fbed 	bl	80005dc <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[0]);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fd45 	bl	800089a <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ChainBuffer[1]);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e16:	4619      	mov	r1, r3
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fd3e 	bl	800089a <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fc90 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fbd5 	bl	80005dc <YUGIOH_card_copy>
					state_game->action = 0;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				break;
 8000e40:	e065      	b.n	8000f0e <GAME_PLAY_Phase_Management+0x4a2>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fc7e 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ChainBuffer[0], &playerAtk->CardInPlayed);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e54:	4619      	mov	r1, r3
 8000e56:	4610      	mov	r0, r2
 8000e58:	f7ff fbc0 	bl	80005dc <YUGIOH_card_copy>
				break;
 8000e5c:	e057      	b.n	8000f0e <GAME_PLAY_Phase_Management+0x4a2>
		case chaining_main_DEF:
			state_game->test = 34;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2222      	movs	r2, #34	; 0x22
 8000e62:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
			if(state_game->action == 4)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d111      	bne.n	8000e92 <GAME_PLAY_Phase_Management+0x426>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff fc1a 	bl	80006ac <Player_Reading_Card>
				state_game->test = 35;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2223      	movs	r2, #35	; 0x23
 8000e7c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d144      	bne.n	8000f12 <GAME_PLAY_Phase_Management+0x4a6>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8000e90:	e03f      	b.n	8000f12 <GAME_PLAY_Phase_Management+0x4a6>
			else if ((state_game->action == 5 )){
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d13b      	bne.n	8000f12 <GAME_PLAY_Phase_Management+0x4a6>
				state_game->count_chain += 1;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	705a      	strb	r2, [r3, #1]
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2206      	movs	r2, #6
 8000eaa:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	701a      	strb	r2, [r3, #0]
			break;
 8000eb4:	e02d      	b.n	8000f12 <GAME_PLAY_Phase_Management+0x4a6>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d10d      	bne.n	8000eda <GAME_PLAY_Phase_Management+0x46e>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff fbf2 	bl	80006ac <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	789b      	ldrb	r3, [r3, #2]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d122      	bne.n	8000f16 <GAME_PLAY_Phase_Management+0x4aa>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8000ed8:	e01d      	b.n	8000f16 <GAME_PLAY_Phase_Management+0x4aa>
			else if ((state_game->action == 5 )){
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	d119      	bne.n	8000f16 <GAME_PLAY_Phase_Management+0x4aa>
				state_game->count_chain += 1;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	705a      	strb	r2, [r3, #1]
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2204      	movs	r2, #4
 8000efa:	701a      	strb	r2, [r3, #0]
			break;
 8000efc:	e00b      	b.n	8000f16 <GAME_PLAY_Phase_Management+0x4aa>
			break;
 8000efe:	bf00      	nop
 8000f00:	e1dd      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
			break;
 8000f02:	bf00      	nop
 8000f04:	e1db      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
			break;
 8000f06:	bf00      	nop
 8000f08:	e1d9      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
			break;
 8000f0a:	bf00      	nop
 8000f0c:	e1d7      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
				break;
 8000f0e:	bf00      	nop
 8000f10:	e1d5      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
			break;
 8000f12:	bf00      	nop
 8000f14:	e1d3      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
			break;
 8000f16:	bf00      	nop
//				state_game->action = 0;
//				state_game->MAIN = await;
//			}
			break;
		}
		break;
 8000f18:	e1d1      	b.n	80012be <GAME_PLAY_Phase_Management+0x852>
		case Battle_Phase:

			switch(PBS){
 8000f1a:	7f7b      	ldrb	r3, [r7, #29]
 8000f1c:	2b06      	cmp	r3, #6
 8000f1e:	f200 81d0 	bhi.w	80012c2 <GAME_PLAY_Phase_Management+0x856>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <GAME_PLAY_Phase_Management+0x4bc>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	080012a3 	.word	0x080012a3
 8000f2c:	08000f45 	.word	0x08000f45
 8000f30:	080010b7 	.word	0x080010b7
 8000f34:	08001061 	.word	0x08001061
 8000f38:	080012a3 	.word	0x080012a3
 8000f3c:	08001103 	.word	0x08001103
 8000f40:	08001267 	.word	0x08001267
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b32      	cmp	r3, #50	; 0x32
 8000f4a:	d122      	bne.n	8000f92 <GAME_PLAY_Phase_Management+0x526>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff fbab 	bl	80006ac <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000f56:	2101      	movs	r1, #1
 8000f58:	484c      	ldr	r0, [pc, #304]	; (800108c <GAME_PLAY_Phase_Management+0x620>)
 8000f5a:	f004 fcfd 	bl	8005958 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f040 81a0 	bne.w	80012a6 <GAME_PLAY_Phase_Management+0x83a>
							== GPIO_PIN_RESET){
						state_game->action = 0;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d104      	bne.n	8000f80 <GAME_PLAY_Phase_Management+0x514>
							state_game->MainGame_State = second_player;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8000f7e:	e003      	b.n	8000f88 <GAME_PLAY_Phase_Management+0x51c>
						}
						else{
							state_game->MainGame_State = first_player;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2202      	movs	r2, #2
 8000f84:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 8000f90:	e189      	b.n	80012a6 <GAME_PLAY_Phase_Management+0x83a>
				else if(state_game->action == 51){
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b33      	cmp	r3, #51	; 0x33
 8000f98:	f040 8185 	bne.w	80012a6 <GAME_PLAY_Phase_Management+0x83a>
					uint8_t check_def_mon = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					ptrYugiohCard_src = &playerDef->cardOnBoard[3];
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3338      	adds	r3, #56	; 0x38
 8000fa6:	61bb      	str	r3, [r7, #24]
					for(uint8_t i = 0;i < 3; ++i){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000fae:	e00d      	b.n	8000fcc <GAME_PLAY_Phase_Management+0x560>
						if(ptrYugiohCard_src->cardData == 0){
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d104      	bne.n	8000fc2 <GAME_PLAY_Phase_Management+0x556>
							check_def_mon++;
 8000fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					for(uint8_t i = 0;i < 3; ++i){
 8000fc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d9ed      	bls.n	8000fb0 <GAME_PLAY_Phase_Management+0x544>
					ptrYugiohCard_src = &playerDef->ChainBuffer[0];
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000fda:	61bb      	str	r3, [r7, #24]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3338      	adds	r3, #56	; 0x38
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3020 	strb.w	r3, [r7, #32]
 8000fe8:	e033      	b.n	8001052 <GAME_PLAY_Phase_Management+0x5e6>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d125      	bne.n	8001042 <GAME_PLAY_Phase_Management+0x5d6>
							if(ptrYugiohCard_dst->cardState == 1){
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	789b      	ldrb	r3, [r3, #2]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12e      	bne.n	800105c <GAME_PLAY_Phase_Management+0x5f0>
								YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001004:	4619      	mov	r1, r3
 8001006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001008:	f7ff fae8 	bl	80005dc <YUGIOH_card_copy>
								ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
								if(check_def_mon == 3){
 8001014:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001018:	2b03      	cmp	r3, #3
 800101a:	d103      	bne.n	8001024 <GAME_PLAY_Phase_Management+0x5b8>
									ptrYugiohCard_dst->targetPosition = 99;
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2263      	movs	r2, #99	; 0x63
 8001020:	71da      	strb	r2, [r3, #7]
 8001022:	e003      	b.n	800102c <GAME_PLAY_Phase_Management+0x5c0>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	799a      	ldrb	r2, [r3, #6]
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f7ff fb89 	bl	8000744 <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2234      	movs	r2, #52	; 0x34
 8001036:	701a      	strb	r2, [r3, #0]
								state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2203      	movs	r2, #3
 800103c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							break;
 8001040:	e00c      	b.n	800105c <GAME_PLAY_Phase_Management+0x5f0>
						ptrYugiohCard_dst++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3310      	adds	r3, #16
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8001048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800104c:	3301      	adds	r3, #1
 800104e:	f887 3020 	strb.w	r3, [r7, #32]
 8001052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d9c7      	bls.n	8000fea <GAME_PLAY_Phase_Management+0x57e>
			break;
 800105a:	e124      	b.n	80012a6 <GAME_PLAY_Phase_Management+0x83a>
							break;
 800105c:	bf00      	nop
			break;
 800105e:	e122      	b.n	80012a6 <GAME_PLAY_Phase_Management+0x83a>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b34      	cmp	r3, #52	; 0x34
 8001066:	d113      	bne.n	8001090 <GAME_PLAY_Phase_Management+0x624>
				{
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fb1d 	bl	80006ac <Player_Reading_Card>
//					state_game->test = 35;
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8117 	bne.w	80012aa <GAME_PLAY_Phase_Management+0x83e>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2205      	movs	r2, #5
 8001080:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}
				break;
 8001084:	e111      	b.n	80012aa <GAME_PLAY_Phase_Management+0x83e>
 8001086:	bf00      	nop
 8001088:	aaaaaaab 	.word	0xaaaaaaab
 800108c:	58020800 	.word	0x58020800
				else if ((state_game->action == 53 )){
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b35      	cmp	r3, #53	; 0x35
 8001096:	f040 8108 	bne.w	80012aa <GAME_PLAY_Phase_Management+0x83e>
					state_game->count_chain += 1;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2202      	movs	r2, #2
 80010aa:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2236      	movs	r2, #54	; 0x36
 80010b2:	701a      	strb	r2, [r3, #0]
				break;
 80010b4:	e0f9      	b.n	80012aa <GAME_PLAY_Phase_Management+0x83e>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b36      	cmp	r3, #54	; 0x36
 80010bc:	d10e      	bne.n	80010dc <GAME_PLAY_Phase_Management+0x670>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff faf2 	bl	80006ac <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 80ee 	bne.w	80012ae <GAME_PLAY_Phase_Management+0x842>
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 52;
				}
				break;
 80010da:	e0e8      	b.n	80012ae <GAME_PLAY_Phase_Management+0x842>
				else if ((state_game->action == 55 )){
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b37      	cmp	r3, #55	; 0x37
 80010e2:	f040 80e4 	bne.w	80012ae <GAME_PLAY_Phase_Management+0x842>
					state_game->count_chain += 1;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	705a      	strb	r2, [r3, #1]
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 52;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2234      	movs	r2, #52	; 0x34
 80010fe:	701a      	strb	r2, [r3, #0]
				break;
 8001100:	e0d5      	b.n	80012ae <GAME_PLAY_Phase_Management+0x842>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001108:	61bb      	str	r3, [r7, #24]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	791b      	ldrb	r3, [r3, #4]
 800110e:	75fb      	strb	r3, [r7, #23]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	79db      	ldrb	r3, [r3, #7]
 8001114:	2b63      	cmp	r3, #99	; 0x63
 8001116:	d114      	bne.n	8001142 <GAME_PLAY_Phase_Management+0x6d6>
					playerDef->life_point -= atk*100;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	889a      	ldrh	r2, [r3, #4]
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	0249      	lsls	r1, r1, #9
 8001124:	1ac9      	subs	r1, r1, r3
 8001126:	0089      	lsls	r1, r1, #2
 8001128:	4419      	add	r1, r3
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	1acb      	subs	r3, r1, r3
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b29a      	uxth	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2206      	movs	r2, #6
 800113e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3308      	adds	r3, #8
 8001146:	627b      	str	r3, [r7, #36]	; 0x24

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	799b      	ldrb	r3, [r3, #6]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	3308      	adds	r3, #8
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24

				state_game->test = 54;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2236      	movs	r2, #54	; 0x36
 800115a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
				if(ptrYugiohCard_dst->cardState == 0){
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d12c      	bne.n	80011c0 <GAME_PLAY_Phase_Management+0x754>
//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	795b      	ldrb	r3, [r3, #5]
 800116a:	757b      	strb	r3, [r7, #21]
					if(atk < def){
 800116c:	7dfa      	ldrb	r2, [r7, #23]
 800116e:	7d7b      	ldrb	r3, [r7, #21]
 8001170:	429a      	cmp	r2, r3
 8001172:	d217      	bcs.n	80011a4 <GAME_PLAY_Phase_Management+0x738>
						playerAtk->life_point -= (def-atk)*100;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	889a      	ldrh	r2, [r3, #4]
 8001178:	7d79      	ldrb	r1, [r7, #21]
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	1acb      	subs	r3, r1, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	0249      	lsls	r1, r1, #9
 8001184:	1ac9      	subs	r1, r1, r3
 8001186:	0089      	lsls	r1, r1, #2
 8001188:	4419      	add	r1, r3
 800118a:	00c9      	lsls	r1, r1, #3
 800118c:	1acb      	subs	r3, r1, r3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	b29b      	uxth	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2206      	movs	r2, #6
 800119e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 80011a2:	e086      	b.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
					else if(atk > def){
 80011a4:	7dfa      	ldrb	r2, [r7, #23]
 80011a6:	7d7b      	ldrb	r3, [r7, #21]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f240 8082 	bls.w	80012b2 <GAME_PLAY_Phase_Management+0x846>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 80011ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f7ff fb72 	bl	800089a <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2206      	movs	r2, #6
 80011ba:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80011be:	e078      	b.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
				else if(ptrYugiohCard_dst->cardState == 1){
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d174      	bne.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	75bb      	strb	r3, [r7, #22]
					state_game->test = 60;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	223c      	movs	r2, #60	; 0x3c
 80011d2:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
					if(atk < atk2){
 80011d6:	7dfa      	ldrb	r2, [r7, #23]
 80011d8:	7dbb      	ldrb	r3, [r7, #22]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d21f      	bcs.n	800121e <GAME_PLAY_Phase_Management+0x7b2>
						state_game->test = 61;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	223d      	movs	r2, #61	; 0x3d
 80011e2:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						playerAtk->life_point -= (atk2-atk)*100;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	889a      	ldrh	r2, [r3, #4]
 80011ea:	7db9      	ldrb	r1, [r7, #22]
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	0249      	lsls	r1, r1, #9
 80011f6:	1ac9      	subs	r1, r1, r3
 80011f8:	0089      	lsls	r1, r1, #2
 80011fa:	4419      	add	r1, r3
 80011fc:	00c9      	lsls	r1, r1, #3
 80011fe:	1acb      	subs	r3, r1, r3
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fb43 	bl	800089a <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2206      	movs	r2, #6
 8001218:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800121c:	e049      	b.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
					else if(atk > atk2){
 800121e:	7dfa      	ldrb	r2, [r7, #23]
 8001220:	7dbb      	ldrb	r3, [r7, #22]
 8001222:	429a      	cmp	r2, r3
 8001224:	d945      	bls.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
						state_game->test = 70;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2246      	movs	r2, #70	; 0x46
 800122a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 800122e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff fb32 	bl	800089a <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	889a      	ldrh	r2, [r3, #4]
 800123a:	7df9      	ldrb	r1, [r7, #23]
 800123c:	7dbb      	ldrb	r3, [r7, #22]
 800123e:	1acb      	subs	r3, r1, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	0249      	lsls	r1, r1, #9
 8001246:	1ac9      	subs	r1, r1, r3
 8001248:	0089      	lsls	r1, r1, #2
 800124a:	4419      	add	r1, r3
 800124c:	00c9      	lsls	r1, r1, #3
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2206      	movs	r2, #6
 8001260:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001264:	e025      	b.n	80012b2 <GAME_PLAY_Phase_Management+0x846>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800126c:	61bb      	str	r3, [r7, #24]
				YUGIOH_card_clear(ptrYugiohCard_src);
 800126e:	69b8      	ldr	r0, [r7, #24]
 8001270:	f7ff f9eb 	bl	800064a <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	889b      	ldrh	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <GAME_PLAY_Phase_Management+0x81c>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001284:	4293      	cmp	r3, r2
 8001286:	d904      	bls.n	8001292 <GAME_PLAY_Phase_Management+0x826>
					state_game->MainGame_State = Game_Ended;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2204      	movs	r2, #4
 800128c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8001290:	e010      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x848>
					state_game->action = 50;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2232      	movs	r2, #50	; 0x32
 8001296:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80012a0:	e008      	b.n	80012b4 <GAME_PLAY_Phase_Management+0x848>
				break;
 80012a2:	bf00      	nop
 80012a4:	e00d      	b.n	80012c2 <GAME_PLAY_Phase_Management+0x856>
			break;
 80012a6:	bf00      	nop
 80012a8:	e00b      	b.n	80012c2 <GAME_PLAY_Phase_Management+0x856>
				break;
 80012aa:	bf00      	nop
 80012ac:	e009      	b.n	80012c2 <GAME_PLAY_Phase_Management+0x856>
				break;
 80012ae:	bf00      	nop
 80012b0:	e007      	b.n	80012c2 <GAME_PLAY_Phase_Management+0x856>
				break;
 80012b2:	bf00      	nop
			}
			break;
 80012b4:	e005      	b.n	80012c2 <GAME_PLAY_Phase_Management+0x856>
		break;
 80012b6:	bf00      	nop
 80012b8:	e004      	b.n	80012c4 <GAME_PLAY_Phase_Management+0x858>
		break;
 80012ba:	bf00      	nop
 80012bc:	e002      	b.n	80012c4 <GAME_PLAY_Phase_Management+0x858>
		break;
 80012be:	bf00      	nop
 80012c0:	e000      	b.n	80012c4 <GAME_PLAY_Phase_Management+0x858>
			break;
 80012c2:	bf00      	nop

	}
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <SystemInit+0xfc>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a3c      	ldr	r2, [pc, #240]	; (80013c8 <SystemInit+0xfc>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <SystemInit+0xfc>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <SystemInit+0xfc>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <SystemInit+0x100>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d807      	bhi.n	8001308 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <SystemInit+0x100>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 030f 	bic.w	r3, r3, #15
 8001300:	4a32      	ldr	r2, [pc, #200]	; (80013cc <SystemInit+0x100>)
 8001302:	f043 0307 	orr.w	r3, r3, #7
 8001306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <SystemInit+0x104>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <SystemInit+0x104>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <SystemInit+0x104>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <SystemInit+0x104>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	492c      	ldr	r1, [pc, #176]	; (80013d0 <SystemInit+0x104>)
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <SystemInit+0x108>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <SystemInit+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <SystemInit+0x100>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <SystemInit+0x100>)
 800133c:	f043 0307 	orr.w	r3, r3, #7
 8001340:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <SystemInit+0x104>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <SystemInit+0x104>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <SystemInit+0x104>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <SystemInit+0x104>)
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <SystemInit+0x10c>)
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <SystemInit+0x104>)
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <SystemInit+0x110>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <SystemInit+0x104>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <SystemInit+0x114>)
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <SystemInit+0x104>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <SystemInit+0x104>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <SystemInit+0x114>)
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <SystemInit+0x104>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <SystemInit+0x104>)
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <SystemInit+0x114>)
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <SystemInit+0x104>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <SystemInit+0x104>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <SystemInit+0x104>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <SystemInit+0x104>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SystemInit+0x118>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <SystemInit+0x118>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <SystemInit+0x11c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <SystemInit+0x120>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ae:	d202      	bcs.n	80013b6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <SystemInit+0x124>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <SystemInit+0x128>)
 80013b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013bc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	52002000 	.word	0x52002000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d8:	02020200 	.word	0x02020200
 80013dc:	01ff0000 	.word	0x01ff0000
 80013e0:	01010280 	.word	0x01010280
 80013e4:	580000c0 	.word	0x580000c0
 80013e8:	5c001000 	.word	0x5c001000
 80013ec:	ffff0000 	.word	0xffff0000
 80013f0:	51008108 	.word	0x51008108
 80013f4:	52004000 	.word	0x52004000

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80013fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001402:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001404:	bf00      	nop
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <main+0xe8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <main+0x24>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dcf4      	bgt.n	8001406 <main+0xe>
	if ( timeout < 0 )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da01      	bge.n	8001426 <main+0x2e>
	{
		Error_Handler();
 8001422:	f000 fb97 	bl	8001b54 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f001 f8b7 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f861 	bl	80014f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800142e:	f000 f8e3 	bl	80015f8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001432:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <main+0xe8>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <main+0xe8>)
 800143a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <main+0xe8>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001450:	2000      	movs	r0, #0
 8001452:	f004 facd 	bl	80059f0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001456:	2100      	movs	r1, #0
 8001458:	2000      	movs	r0, #0
 800145a:	f004 fae3 	bl	8005a24 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800145e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001462:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001464:	bf00      	nop
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <main+0xe8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <main+0x84>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dcf4      	bgt.n	8001466 <main+0x6e>
	if ( timeout < 0 )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	da01      	bge.n	8001486 <main+0x8e>
	{
		Error_Handler();
 8001482:	f000 fb67 	bl	8001b54 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 fa35 	bl	80018f4 <MX_GPIO_Init>
  MX_ETH_Init();
 800148a:	f000 f8e7 	bl	800165c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800148e:	f000 f989 	bl	80017a4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001492:	f000 fa07 	bl	80018a4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001496:	f000 f9d3 	bl	8001840 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800149a:	f000 f92b 	bl	80016f4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800149e:	f000 fc61 	bl	8001d64 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 fd75 	bl	8001f92 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 fd61 	bl	8001f70 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 80014ae:	f001 f8f9 	bl	80026a4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <main+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2bc8      	cmp	r3, #200	; 0xc8
 80014bc:	d9f7      	bls.n	80014ae <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 80014be:	f001 f8f1 	bl	80026a4 <HAL_GetTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <main+0xec>)
 80014c6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <main+0xf0>)
 80014ce:	f004 fa74 	bl	80059ba <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80014d2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80014d6:	4905      	ldr	r1, [pc, #20]	; (80014ec <main+0xf4>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fa1f 	bl	800091c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80014de:	e7e6      	b.n	80014ae <main+0xb6>
 80014e0:	58024400 	.word	0x58024400
 80014e4:	24000d2c 	.word	0x24000d2c
 80014e8:	58020400 	.word	0x58020400
 80014ec:	240008e8 	.word	0x240008e8

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b09c      	sub	sp, #112	; 0x70
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	224c      	movs	r2, #76	; 0x4c
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fb7c 	bl	800abfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2220      	movs	r2, #32
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f009 fb76 	bl	800abfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001510:	2004      	movs	r0, #4
 8001512:	f004 fbe3 	bl	8005cdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <SystemClock_Config+0xfc>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <SystemClock_Config+0xfc>)
 8001520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <SystemClock_Config+0xfc>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <SystemClock_Config+0x100>)
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <SystemClock_Config+0x100>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SystemClock_Config+0x100>)
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001548:	bf00      	nop
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <SystemClock_Config+0xfc>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001556:	d1f8      	bne.n	800154a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <SystemClock_Config+0x104>)
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f023 0303 	bic.w	r3, r3, #3
 8001560:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <SystemClock_Config+0x104>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800156c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	2302      	movs	r3, #2
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800157a:	2301      	movs	r3, #1
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800157e:	2378      	movs	r3, #120	; 0x78
 8001580:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001582:	2302      	movs	r3, #2
 8001584:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001586:	2302      	movs	r3, #2
 8001588:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800158e:	230c      	movs	r3, #12
 8001590:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001592:	2300      	movs	r3, #0
 8001594:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fc06 	bl	8005db0 <HAL_RCC_OscConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015aa:	f000 fad3 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	233f      	movs	r3, #63	; 0x3f
 80015b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b2:	2303      	movs	r3, #3
 80015b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015ba:	2308      	movs	r3, #8
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2104      	movs	r1, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 f819 	bl	800660c <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80015e0:	f000 fab8 	bl	8001b54 <Error_Handler>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3770      	adds	r7, #112	; 0x70
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58024800 	.word	0x58024800
 80015f0:	58000400 	.word	0x58000400
 80015f4:	58024400 	.word	0x58024400

080015f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0b0      	sub	sp, #192	; 0xc0
 80015fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	22bc      	movs	r2, #188	; 0xbc
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f009 faf9 	bl	800abfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 800160a:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800160e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001614:	2318      	movs	r3, #24
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001618:	2302      	movs	r3, #2
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800162a:	2300      	movs	r3, #0
 800162c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001636:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800163c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fb6e 	bl	8006d24 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800164e:	f000 fa81 	bl	8001b54 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	37c0      	adds	r7, #192	; 0xc0
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_ETH_Init+0x80>)
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <MX_ETH_Init+0x84>)
 8001664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_ETH_Init+0x88>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_ETH_Init+0x88>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_ETH_Init+0x88>)
 8001674:	22e1      	movs	r2, #225	; 0xe1
 8001676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_ETH_Init+0x88>)
 800167a:	2200      	movs	r2, #0
 800167c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_ETH_Init+0x88>)
 8001680:	2200      	movs	r2, #0
 8001682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_ETH_Init+0x88>)
 8001686:	2200      	movs	r2, #0
 8001688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_ETH_Init+0x80>)
 800168c:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <MX_ETH_Init+0x88>)
 800168e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_ETH_Init+0x80>)
 8001692:	2201      	movs	r2, #1
 8001694:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_ETH_Init+0x80>)
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <MX_ETH_Init+0x8c>)
 800169a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_ETH_Init+0x80>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_ETH_Init+0x90>)
 80016a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_ETH_Init+0x80>)
 80016a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_ETH_Init+0x80>)
 80016ac:	f003 fb80 	bl	8004db0 <HAL_ETH_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80016b6:	f000 fa4d 	bl	8001b54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80016ba:	2238      	movs	r2, #56	; 0x38
 80016bc:	2100      	movs	r1, #0
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_ETH_Init+0x94>)
 80016c0:	f009 fa9c 	bl	800abfc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_ETH_Init+0x94>)
 80016c6:	2221      	movs	r2, #33	; 0x21
 80016c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_ETH_Init+0x94>)
 80016cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_ETH_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	24000124 	.word	0x24000124
 80016e0:	40028000 	.word	0x40028000
 80016e4:	24000d30 	.word	0x24000d30
 80016e8:	24000070 	.word	0x24000070
 80016ec:	24000010 	.word	0x24000010
 80016f0:	240000ec 	.word	0x240000ec

080016f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <MX_SPI3_Init+0xa8>)
 80016fa:	4a29      	ldr	r2, [pc, #164]	; (80017a0 <MX_SPI3_Init+0xac>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <MX_SPI3_Init+0xa8>)
 8001700:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001704:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_SPI3_Init+0xa8>)
 8001708:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <MX_SPI3_Init+0xa8>)
 8001710:	2207      	movs	r2, #7
 8001712:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <MX_SPI3_Init+0xa8>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <MX_SPI3_Init+0xa8>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <MX_SPI3_Init+0xa8>)
 8001722:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001726:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_SPI3_Init+0xa8>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_SPI3_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_SPI3_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_SPI3_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_SPI3_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_SPI3_Init+0xa8>)
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_SPI3_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_SPI3_Init+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_SPI3_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_SPI3_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_SPI3_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_SPI3_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_SPI3_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_SPI3_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_SPI3_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_SPI3_Init+0xa8>)
 8001788:	f006 fe34 	bl	80083f4 <HAL_SPI_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001792:	f000 f9df 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	240001d4 	.word	0x240001d4
 80017a0:	40003c00 	.word	0x40003c00

080017a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_USART3_UART_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <MX_USART3_UART_Init+0x98>)
 80017b2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017c8:	220c      	movs	r2, #12
 80017ca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ea:	4812      	ldr	r0, [pc, #72]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017ec:	f007 f9e3 	bl	8008bb6 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80017f6:	f000 f9ad 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017fe:	f008 fe05 	bl	800a40c <HAL_UARTEx_SetTxFifoThreshold>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001808:	f000 f9a4 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <MX_USART3_UART_Init+0x90>)
 8001810:	f008 fe3a 	bl	800a488 <HAL_UARTEx_SetRxFifoThreshold>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800181a:	f000 f99b 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART3_UART_Init+0x90>)
 8001820:	f008 fdbb 	bl	800a39a <HAL_UARTEx_DisableFifoMode>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800182a:	f000 f993 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2400025c 	.word	0x2400025c
 8001838:	40004800 	.word	0x40004800
 800183c:	0005dc00 	.word	0x0005dc00

08001840 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001848:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800184c:	2209      	movs	r2, #9
 800184e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001852:	2202      	movs	r2, #2
 8001854:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800185e:	2202      	movs	r2, #2
 8001860:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001876:	2201      	movs	r2, #1
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187c:	2201      	movs	r2, #1
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001888:	f004 f8e0 	bl	8005a4c <HAL_PCD_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001892:	f000 f95f 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	240003dc 	.word	0x240003dc
 80018a0:	40080000 	.word	0x40080000

080018a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_DMA_Init+0x4c>)
 80018ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <MX_DMA_Init+0x4c>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <MX_DMA_Init+0x4c>)
 80018bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	200c      	movs	r0, #12
 80018ce:	f001 f814 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018d2:	200c      	movs	r0, #12
 80018d4:	f001 f82b 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	200f      	movs	r0, #15
 80018de:	f001 f80c 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f001 f823 	bl	800292e <HAL_NVIC_EnableIRQ>

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58024400 	.word	0x58024400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <MX_GPIO_Init+0x240>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a88      	ldr	r2, [pc, #544]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <MX_GPIO_Init+0x240>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <MX_GPIO_Init+0x240>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a81      	ldr	r2, [pc, #516]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b7e      	ldr	r3, [pc, #504]	; (8001b34 <MX_GPIO_Init+0x240>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a79      	ldr	r2, [pc, #484]	; (8001b34 <MX_GPIO_Init+0x240>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <MX_GPIO_Init+0x240>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <MX_GPIO_Init+0x240>)
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <MX_GPIO_Init+0x240>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a0:	4b64      	ldr	r3, [pc, #400]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	4a63      	ldr	r2, [pc, #396]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a5b      	ldr	r2, [pc, #364]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a54      	ldr	r2, [pc, #336]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <MX_GPIO_Init+0x240>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001a00:	484d      	ldr	r0, [pc, #308]	; (8001b38 <MX_GPIO_Init+0x244>)
 8001a02:	f003 ffc1 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	484a      	ldr	r0, [pc, #296]	; (8001b38 <MX_GPIO_Init+0x244>)
 8001a0e:	f003 ffbb 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a18:	4848      	ldr	r0, [pc, #288]	; (8001b3c <MX_GPIO_Init+0x248>)
 8001a1a:	f003 ffb5 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a24:	4846      	ldr	r0, [pc, #280]	; (8001b40 <MX_GPIO_Init+0x24c>)
 8001a26:	f003 ffaf 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4844      	ldr	r0, [pc, #272]	; (8001b44 <MX_GPIO_Init+0x250>)
 8001a32:	f003 ffa9 	bl	8005988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001a36:	230d      	movs	r3, #13
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	483f      	ldr	r0, [pc, #252]	; (8001b48 <MX_GPIO_Init+0x254>)
 8001a4a:	f003 fdd5 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	483a      	ldr	r0, [pc, #232]	; (8001b4c <MX_GPIO_Init+0x258>)
 8001a62:	f003 fdc9 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001a66:	2302      	movs	r3, #2
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	4830      	ldr	r0, [pc, #192]	; (8001b3c <MX_GPIO_Init+0x248>)
 8001a7a:	f003 fdbd 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8001a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	482f      	ldr	r0, [pc, #188]	; (8001b50 <MX_GPIO_Init+0x25c>)
 8001a94:	f003 fdb0 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8001a98:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <MX_GPIO_Init+0x244>)
 8001ab2:	f003 fda1 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	4619      	mov	r1, r3
 8001ace:	481b      	ldr	r0, [pc, #108]	; (8001b3c <MX_GPIO_Init+0x248>)
 8001ad0:	f003 fd92 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_GPIO_Init+0x24c>)
 8001aee:	f003 fd83 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	480f      	ldr	r0, [pc, #60]	; (8001b44 <MX_GPIO_Init+0x250>)
 8001b08:	f003 fd76 	bl	80055f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_GPIO_Init+0x250>)
 8001b26:	f003 fd67 	bl	80055f8 <HAL_GPIO_Init>

}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	58020400 	.word	0x58020400
 8001b40:	58020c00 	.word	0x58020c00
 8001b44:	58021800 	.word	0x58021800
 8001b48:	58020800 	.word	0x58020800
 8001b4c:	58020000 	.word	0x58020000
 8001b50:	58021400 	.word	0x58021400

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b6a:	4802      	ldr	r0, [pc, #8]	; (8001b74 <ST7735_Select+0x14>)
 8001b6c:	f003 ff0c 	bl	8005988 <HAL_GPIO_WritePin>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58021000 	.word	0x58021000

08001b78 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <ST7735_Unselect+0x14>)
 8001b84:	f003 ff00 	bl	8005988 <HAL_GPIO_WritePin>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58021000 	.word	0x58021000

08001b90 <ST7735_Select1>:
static void ST7735_Select1() {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9a:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <ST7735_Select1+0x14>)
 8001b9c:	f003 fef4 	bl	8005988 <HAL_GPIO_WritePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	58021000 	.word	0x58021000

08001ba8 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb2:	4802      	ldr	r0, [pc, #8]	; (8001bbc <ST7735_Unselect1+0x14>)
 8001bb4:	f003 fee8 	bl	8005988 <HAL_GPIO_WritePin>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	58021000 	.word	0x58021000

08001bc0 <ST7735_Reset>:

static void ST7735_Reset() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <ST7735_Reset+0x28>)
 8001bcc:	f003 fedc 	bl	8005988 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f000 fd73 	bl	80026bc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <ST7735_Reset+0x28>)
 8001bde:	f003 fed3 	bl	8005988 <HAL_GPIO_WritePin>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	58021000 	.word	0x58021000

08001bec <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfc:	4806      	ldr	r0, [pc, #24]	; (8001c18 <ST7735_WriteCommand+0x2c>)
 8001bfe:	f003 fec3 	bl	8005988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c02:	1df9      	adds	r1, r7, #7
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <ST7735_WriteCommand+0x30>)
 8001c0c:	f006 fcf8 	bl	8008600 <HAL_SPI_Transmit>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	58021800 	.word	0x58021800
 8001c1c:	240001d4 	.word	0x240001d4

08001c20 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c30:	4807      	ldr	r0, [pc, #28]	; (8001c50 <ST7735_WriteData+0x30>)
 8001c32:	f003 fea9 	bl	8005988 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <ST7735_WriteData+0x34>)
 8001c42:	f006 fcdd 	bl	8008600 <HAL_SPI_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58021800 	.word	0x58021800
 8001c54:	240001d4 	.word	0x240001d4

08001c58 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001c6a:	e034      	b.n	8001cd6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ffb7 	bl	8001bec <ST7735_WriteCommand>

        numArgs = *addr++;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001c88:	7abb      	ldrb	r3, [r7, #10]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001c92:	7abb      	ldrb	r3, [r7, #10]
 8001c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c98:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001c9a:	7abb      	ldrb	r3, [r7, #10]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffbb 	bl	8001c20 <ST7735_WriteData>
            addr += numArgs;
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001cb2:	89bb      	ldrh	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d102      	bne.n	8001cce <ST7735_ExecuteCommandList+0x76>
 8001cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ccc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001cce:	89bb      	ldrh	r3, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fcf3 	bl	80026bc <HAL_Delay>
    while(numCommands--) {
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	73fa      	strb	r2, [r7, #15]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1c5      	bne.n	8001c6c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001cea:	b590      	push	{r4, r7, lr}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71bb      	strb	r3, [r7, #6]
 8001d00:	460b      	mov	r3, r1
 8001d02:	717b      	strb	r3, [r7, #5]
 8001d04:	4613      	mov	r3, r2
 8001d06:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001d08:	202a      	movs	r0, #42	; 0x2a
 8001d0a:	f7ff ff6f 	bl	8001bec <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001d0e:	2300      	movs	r3, #0
 8001d10:	733b      	strb	r3, [r7, #12]
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	3302      	adds	r3, #2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	737b      	strb	r3, [r7, #13]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	3302      	adds	r3, #2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff77 	bl	8001c20 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001d32:	202b      	movs	r0, #43	; 0x2b
 8001d34:	f7ff ff5a 	bl	8001bec <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001d40:	793b      	ldrb	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff66 	bl	8001c20 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001d54:	202c      	movs	r0, #44	; 0x2c
 8001d56:	f7ff ff49 	bl	8001bec <ST7735_WriteCommand>
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
	...

08001d64 <ST7735_Init>:

void ST7735_Init() {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001d68:	f7ff fefa 	bl	8001b60 <ST7735_Select>
    ST7735_Select1();
 8001d6c:	f7ff ff10 	bl	8001b90 <ST7735_Select1>
    ST7735_Reset();
 8001d70:	f7ff ff26 	bl	8001bc0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <ST7735_Init+0x30>)
 8001d76:	f7ff ff6f 	bl	8001c58 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <ST7735_Init+0x34>)
 8001d7c:	f7ff ff6c 	bl	8001c58 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001d80:	4806      	ldr	r0, [pc, #24]	; (8001d9c <ST7735_Init+0x38>)
 8001d82:	f7ff ff69 	bl	8001c58 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001d86:	f7ff fef7 	bl	8001b78 <ST7735_Unselect>
    ST7735_Unselect1();
 8001d8a:	f7ff ff0d 	bl	8001ba8 <ST7735_Unselect1>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	0800ac34 	.word	0x0800ac34
 8001d98:	0800ac70 	.word	0x0800ac70
 8001d9c:	0800ac80 	.word	0x0800ac80

08001da0 <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4604      	mov	r4, r0
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4623      	mov	r3, r4
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	4603      	mov	r3, r0
 8001db4:	80bb      	strh	r3, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc2:	d858      	bhi.n	8001e76 <ST7735_FillRectangle+0xd6>
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc8:	d855      	bhi.n	8001e76 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4413      	add	r3, r2
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	dd03      	ble.n	8001ddc <ST7735_FillRectangle+0x3c>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dda:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001ddc:	88ba      	ldrh	r2, [r7, #4]
 8001dde:	883b      	ldrh	r3, [r7, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	2b80      	cmp	r3, #128	; 0x80
 8001de4:	dd03      	ble.n	8001dee <ST7735_FillRectangle+0x4e>
 8001de6:	88bb      	ldrh	r3, [r7, #4]
 8001de8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dec:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001dee:	f7ff feb7 	bl	8001b60 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	b2d8      	uxtb	r0, r3
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	b2d9      	uxtb	r1, r3
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b2dc      	uxtb	r4, r3
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	883b      	ldrh	r3, [r7, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	f7ff ff65 	bl	8001cea <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e20:	8c3b      	ldrh	r3, [r7, #32]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	733b      	strb	r3, [r7, #12]
 8001e2a:	8c3b      	ldrh	r3, [r7, #32]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <ST7735_FillRectangle+0xe0>)
 8001e38:	f003 fda6 	bl	8005988 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001e3c:	883b      	ldrh	r3, [r7, #0]
 8001e3e:	80bb      	strh	r3, [r7, #4]
 8001e40:	e013      	b.n	8001e6a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	e00a      	b.n	8001e5e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001e48:	f107 010c 	add.w	r1, r7, #12
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	2202      	movs	r2, #2
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <ST7735_FillRectangle+0xe4>)
 8001e54:	f006 fbd4 	bl	8008600 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f1      	bne.n	8001e48 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001e64:	88bb      	ldrh	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	80bb      	strh	r3, [r7, #4]
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e8      	bne.n	8001e42 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001e70:	f7ff fe82 	bl	8001b78 <ST7735_Unselect>
 8001e74:	e000      	b.n	8001e78 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e76:	bf00      	nop
}
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58021800 	.word	0x58021800
 8001e84:	240001d4 	.word	0x240001d4

08001e88 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	80fb      	strh	r3, [r7, #6]
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80bb      	strh	r3, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eaa:	d858      	bhi.n	8001f5e <ST7735_FillRectangle1+0xd6>
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb0:	d855      	bhi.n	8001f5e <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	dd03      	ble.n	8001ec4 <ST7735_FillRectangle1+0x3c>
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ec2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001ec4:	88ba      	ldrh	r2, [r7, #4]
 8001ec6:	883b      	ldrh	r3, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2b80      	cmp	r3, #128	; 0x80
 8001ecc:	dd03      	ble.n	8001ed6 <ST7735_FillRectangle1+0x4e>
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ed4:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8001ed6:	f7ff fe5b 	bl	8001b90 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	b2d8      	uxtb	r0, r3
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	b2d9      	uxtb	r1, r3
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b2dc      	uxtb	r4, r3
 8001ef2:	88bb      	ldrh	r3, [r7, #4]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	883b      	ldrh	r3, [r7, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4622      	mov	r2, r4
 8001f04:	f7ff fef1 	bl	8001cea <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001f08:	8c3b      	ldrh	r3, [r7, #32]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	733b      	strb	r3, [r7, #12]
 8001f12:	8c3b      	ldrh	r3, [r7, #32]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1e:	4812      	ldr	r0, [pc, #72]	; (8001f68 <ST7735_FillRectangle1+0xe0>)
 8001f20:	f003 fd32 	bl	8005988 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001f24:	883b      	ldrh	r3, [r7, #0]
 8001f26:	80bb      	strh	r3, [r7, #4]
 8001f28:	e013      	b.n	8001f52 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	e00a      	b.n	8001f46 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001f30:	f107 010c 	add.w	r1, r7, #12
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	2202      	movs	r2, #2
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <ST7735_FillRectangle1+0xe4>)
 8001f3c:	f006 fb60 	bl	8008600 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	80fb      	strh	r3, [r7, #6]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f1      	bne.n	8001f30 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 8001f4c:	88bb      	ldrh	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e8      	bne.n	8001f2a <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 8001f58:	f7ff fe26 	bl	8001ba8 <ST7735_Unselect1>
 8001f5c:	e000      	b.n	8001f60 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001f5e:	bf00      	nop
}
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	58021800 	.word	0x58021800
 8001f6c:	240001d4 	.word	0x240001d4

08001f70 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	2100      	movs	r1, #0
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ff0b 	bl	8001da0 <ST7735_FillRectangle>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	4603      	mov	r3, r0
 8001f9a:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff ff6e 	bl	8001e88 <ST7735_FillRectangle1>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_MspInit+0x30>)
 8001fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fc0:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_MspInit+0x30>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_MspInit+0x30>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	58024400 	.word	0x58024400

08001fe8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	; 0x38
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a59      	ldr	r2, [pc, #356]	; (800216c <HAL_ETH_MspInit+0x184>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f040 80ab 	bne.w	8002162 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002012:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800201c:	4b54      	ldr	r3, [pc, #336]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800201e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002026:	623b      	str	r3, [r7, #32]
 8002028:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800202a:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800202c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002030:	4a4f      	ldr	r2, [pc, #316]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800203c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002048:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800204a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800204e:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800205a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002066:	4b42      	ldr	r3, [pc, #264]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a40      	ldr	r2, [pc, #256]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	4a39      	ldr	r2, [pc, #228]	; (8002170 <HAL_ETH_MspInit+0x188>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_ETH_MspInit+0x188>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_ETH_MspInit+0x188>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020de:	2332      	movs	r3, #50	; 0x32
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ee:	230b      	movs	r3, #11
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	4619      	mov	r1, r3
 80020f8:	481e      	ldr	r0, [pc, #120]	; (8002174 <HAL_ETH_MspInit+0x18c>)
 80020fa:	f003 fa7d 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80020fe:	2386      	movs	r3, #134	; 0x86
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800210e:	230b      	movs	r3, #11
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	4817      	ldr	r0, [pc, #92]	; (8002178 <HAL_ETH_MspInit+0x190>)
 800211a:	f003 fa6d 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002130:	230b      	movs	r3, #11
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	4810      	ldr	r0, [pc, #64]	; (800217c <HAL_ETH_MspInit+0x194>)
 800213c:	f003 fa5c 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002140:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002152:	230b      	movs	r3, #11
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	4619      	mov	r1, r3
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <HAL_ETH_MspInit+0x198>)
 800215e:	f003 fa4b 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3738      	adds	r7, #56	; 0x38
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40028000 	.word	0x40028000
 8002170:	58024400 	.word	0x58024400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020000 	.word	0x58020000
 800217c:	58020400 	.word	0x58020400
 8002180:	58021800 	.word	0x58021800

08002184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d14d      	bne.n	8002242 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ac:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002200:	2304      	movs	r3, #4
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002210:	2307      	movs	r3, #7
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <HAL_SPI_MspInit+0xd0>)
 800221c:	f003 f9ec 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800222a:	2302      	movs	r3, #2
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002232:	2306      	movs	r3, #6
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4806      	ldr	r0, [pc, #24]	; (8002258 <HAL_SPI_MspInit+0xd4>)
 800223e:	f003 f9db 	bl	80055f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	; 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40003c00 	.word	0x40003c00
 8002250:	58024400 	.word	0x58024400
 8002254:	58020400 	.word	0x58020400
 8002258:	58020800 	.word	0x58020800

0800225c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0b8      	sub	sp, #224	; 0xe0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	22bc      	movs	r2, #188	; 0xbc
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f008 fcbd 	bl	800abfc <memset>
  if(huart->Instance==USART3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_UART_MspInit+0x188>)
 8002288:	4293      	cmp	r3, r2
 800228a:	f040 80a6 	bne.w	80023da <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800228e:	2302      	movs	r3, #2
 8002290:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fd41 	bl	8006d24 <HAL_RCCEx_PeriphCLKConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80022a8:	f7ff fc54 	bl	8001b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b2:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d0:	4a45      	ldr	r2, [pc, #276]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_UART_MspInit+0x18c>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002302:	2307      	movs	r3, #7
 8002304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800230c:	4619      	mov	r1, r3
 800230e:	4837      	ldr	r0, [pc, #220]	; (80023ec <HAL_UART_MspInit+0x190>)
 8002310:	f003 f972 	bl	80055f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <HAL_UART_MspInit+0x198>)
 8002318:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <HAL_UART_MspInit+0x194>)
 800231c:	222d      	movs	r2, #45	; 0x2d
 800231e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_UART_MspInit+0x194>)
 800232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002332:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_UART_MspInit+0x194>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002346:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_UART_MspInit+0x194>)
 800234a:	2200      	movs	r2, #0
 800234c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002350:	2200      	movs	r2, #0
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002354:	4826      	ldr	r0, [pc, #152]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002356:	f000 fb05 	bl	8002964 <HAL_DMA_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002360:	f7ff fbf8 	bl	8001b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_UART_MspInit+0x194>)
 8002368:	67da      	str	r2, [r3, #124]	; 0x7c
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_UART_MspInit+0x194>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_UART_MspInit+0x1a0>)
 8002374:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 8002378:	222e      	movs	r2, #46	; 0x2e
 800237a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 800238a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023ae:	4812      	ldr	r0, [pc, #72]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 80023b0:	f000 fad8 	bl	8002964 <HAL_DMA_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80023ba:	f7ff fbcb 	bl	8001b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 80023c2:	679a      	str	r2, [r3, #120]	; 0x78
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_UART_MspInit+0x19c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2027      	movs	r0, #39	; 0x27
 80023d0:	f000 fa93 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023d4:	2027      	movs	r0, #39	; 0x27
 80023d6:	f000 faaa 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	37e0      	adds	r7, #224	; 0xe0
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40004800 	.word	0x40004800
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58020c00 	.word	0x58020c00
 80023f0:	240002ec 	.word	0x240002ec
 80023f4:	40020028 	.word	0x40020028
 80023f8:	24000364 	.word	0x24000364
 80023fc:	40020070 	.word	0x40020070

08002400 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <HAL_PCD_MspInit+0xa8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d13d      	bne.n	800249e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002422:	f003 fcb5 	bl	8005d90 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_PCD_MspInit+0xac>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_PCD_MspInit+0xac>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_PCD_MspInit+0xac>)
 8002438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002444:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002456:	230a      	movs	r3, #10
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4813      	ldr	r0, [pc, #76]	; (80024b0 <HAL_PCD_MspInit+0xb0>)
 8002462:	f003 f8c9 	bl	80055f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <HAL_PCD_MspInit+0xb0>)
 800247c:	f003 f8bc 	bl	80055f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_PCD_MspInit+0xac>)
 8002482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_PCD_MspInit+0xac>)
 8002488:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800248c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_PCD_MspInit+0xac>)
 8002492:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40080000 	.word	0x40080000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58020000 	.word	0x58020000

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f000 f8bc 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA1_Stream1_IRQHandler+0x10>)
 800250e:	f001 fae9 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	240002ec 	.word	0x240002ec

0800251c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA1_Stream4_IRQHandler+0x10>)
 8002522:	f001 fadf 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24000364 	.word	0x24000364

08002530 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <USART3_IRQHandler+0x10>)
 8002536:	f006 fb8f 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2400025c 	.word	0x2400025c

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002548:	f7fe fec0 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254e:	490d      	ldr	r1, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002572:	f008 fb1f 	bl	800abb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7fe ff3f 	bl	80013f8 <main>
  bx  lr
 800257a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002580:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002584:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002588:	0800acec 	.word	0x0800acec
  ldr r2, =_sbss
 800258c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002590:	24000d3c 	.word	0x24000d3c

08002594 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC3_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259e:	2003      	movs	r0, #3
 80025a0:	f000 f9a0 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025a4:	f004 f9e8 	bl	8006978 <HAL_RCC_GetSysClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_Init+0x68>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	4913      	ldr	r1, [pc, #76]	; (8002604 <HAL_Init+0x6c>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_Init+0x68>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_Init+0x6c>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_Init+0x70>)
 80025da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_Init+0x74>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 f814 	bl	8002610 <HAL_InitTick>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e002      	b.n	80025f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025f2:	f7ff fcdf 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	58024400 	.word	0x58024400
 8002604:	0800ac24 	.word	0x0800ac24
 8002608:	24000004 	.word	0x24000004
 800260c:	24000000 	.word	0x24000000

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_InitTick+0x60>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e021      	b.n	8002668 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_InitTick+0x64>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_InitTick+0x60>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f985 	bl	800294a <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00e      	b.n	8002668 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d80a      	bhi.n	8002666 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f000 f94f 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_InitTick+0x68>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2400000c 	.word	0x2400000c
 8002674:	24000000 	.word	0x24000000
 8002678:	24000008 	.word	0x24000008

0800267c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2400000c 	.word	0x2400000c
 80026a0:	24000d38 	.word	0x24000d38

080026a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	24000d38 	.word	0x24000d38

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff ffee 	bl	80026a4 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffde 	bl	80026a4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2400000c 	.word	0x2400000c

08002704 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_GetREVID+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0c1b      	lsrs	r3, r3, #16
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	5c001000 	.word	0x5c001000

0800271c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	58000400 	.word	0x58000400

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <__NVIC_SetPriorityGrouping+0x40>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 800276e:	4313      	orrs	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <__NVIC_SetPriorityGrouping+0x40>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00
 8002788:	05fa0000 	.word	0x05fa0000

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff40 	bl	800278c <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff90 	bl	8002838 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5f 	bl	80027e4 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff33 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa4 	bl	80028a0 <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff fe9a 	bl	80026a4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e316      	b.n	8002faa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a66      	ldr	r2, [pc, #408]	; (8002b1c <HAL_DMA_Init+0x1b8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d04a      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_DMA_Init+0x1bc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d045      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a63      	ldr	r2, [pc, #396]	; (8002b24 <HAL_DMA_Init+0x1c0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d040      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a62      	ldr	r2, [pc, #392]	; (8002b28 <HAL_DMA_Init+0x1c4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d03b      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a60      	ldr	r2, [pc, #384]	; (8002b2c <HAL_DMA_Init+0x1c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d036      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5f      	ldr	r2, [pc, #380]	; (8002b30 <HAL_DMA_Init+0x1cc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d031      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5d      	ldr	r2, [pc, #372]	; (8002b34 <HAL_DMA_Init+0x1d0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02c      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5c      	ldr	r2, [pc, #368]	; (8002b38 <HAL_DMA_Init+0x1d4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d027      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <HAL_DMA_Init+0x1d8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a59      	ldr	r2, [pc, #356]	; (8002b40 <HAL_DMA_Init+0x1dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01d      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_DMA_Init+0x1e0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_DMA_Init+0x1e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_DMA_Init+0x1e8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00e      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a53      	ldr	r2, [pc, #332]	; (8002b50 <HAL_DMA_Init+0x1ec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a51      	ldr	r2, [pc, #324]	; (8002b54 <HAL_DMA_Init+0x1f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_DMA_Init+0xb8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a50      	ldr	r2, [pc, #320]	; (8002b58 <HAL_DMA_Init+0x1f4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_DMA_Init+0xbc>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_Init+0xbe>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 813b 	beq.w	8002c9e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <HAL_DMA_Init+0x1b8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d04a      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <HAL_DMA_Init+0x1bc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d045      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_DMA_Init+0x1c0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d040      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <HAL_DMA_Init+0x1c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d03b      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_DMA_Init+0x1c8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d036      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <HAL_DMA_Init+0x1cc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d031      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <HAL_DMA_Init+0x1d0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d02c      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <HAL_DMA_Init+0x1d4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d027      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <HAL_DMA_Init+0x1d8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d022      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2a      	ldr	r2, [pc, #168]	; (8002b40 <HAL_DMA_Init+0x1dc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d01d      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_DMA_Init+0x1e0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d018      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_DMA_Init+0x1e4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_DMA_Init+0x1e8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <HAL_DMA_Init+0x1ec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_DMA_Init+0x1f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_DMA_Init+0x174>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_DMA_Init+0x1f4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <HAL_DMA_Init+0x186>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e007      	b.n	8002afa <HAL_DMA_Init+0x196>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002afa:	e02f      	b.n	8002b5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afc:	f7ff fdd2 	bl	80026a4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d928      	bls.n	8002b5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e246      	b.n	8002faa <HAL_DMA_Init+0x646>
 8002b1c:	40020010 	.word	0x40020010
 8002b20:	40020028 	.word	0x40020028
 8002b24:	40020040 	.word	0x40020040
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	40020070 	.word	0x40020070
 8002b30:	40020088 	.word	0x40020088
 8002b34:	400200a0 	.word	0x400200a0
 8002b38:	400200b8 	.word	0x400200b8
 8002b3c:	40020410 	.word	0x40020410
 8002b40:	40020428 	.word	0x40020428
 8002b44:	40020440 	.word	0x40020440
 8002b48:	40020458 	.word	0x40020458
 8002b4c:	40020470 	.word	0x40020470
 8002b50:	40020488 	.word	0x40020488
 8002b54:	400204a0 	.word	0x400204a0
 8002b58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1c8      	bne.n	8002afc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4b83      	ldr	r3, [pc, #524]	; (8002d84 <HAL_DMA_Init+0x420>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d107      	bne.n	8002bc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002bc0:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <HAL_DMA_Init+0x424>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <HAL_DMA_Init+0x428>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bcc:	d328      	bcc.n	8002c20 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b28      	cmp	r3, #40	; 0x28
 8002bd4:	d903      	bls.n	8002bde <HAL_DMA_Init+0x27a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b2e      	cmp	r3, #46	; 0x2e
 8002bdc:	d917      	bls.n	8002c0e <HAL_DMA_Init+0x2aa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b3e      	cmp	r3, #62	; 0x3e
 8002be4:	d903      	bls.n	8002bee <HAL_DMA_Init+0x28a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b42      	cmp	r3, #66	; 0x42
 8002bec:	d90f      	bls.n	8002c0e <HAL_DMA_Init+0x2aa>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b46      	cmp	r3, #70	; 0x46
 8002bf4:	d903      	bls.n	8002bfe <HAL_DMA_Init+0x29a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b48      	cmp	r3, #72	; 0x48
 8002bfc:	d907      	bls.n	8002c0e <HAL_DMA_Init+0x2aa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b4e      	cmp	r3, #78	; 0x4e
 8002c04:	d905      	bls.n	8002c12 <HAL_DMA_Init+0x2ae>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b52      	cmp	r3, #82	; 0x52
 8002c0c:	d801      	bhi.n	8002c12 <HAL_DMA_Init+0x2ae>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_DMA_Init+0x2b0>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0307 	bic.w	r3, r3, #7
 8002c36:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d117      	bne.n	8002c7a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 ff1d 	bl	8004a9c <DMA_CheckFifoParam>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e197      	b.n	8002faa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f001 fe58 	bl	8004938 <DMA_CalcBaseAndBitshift>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	223f      	movs	r2, #63	; 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e0cd      	b.n	8002e3a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3b      	ldr	r2, [pc, #236]	; (8002d90 <HAL_DMA_Init+0x42c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a39      	ldr	r2, [pc, #228]	; (8002d94 <HAL_DMA_Init+0x430>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <HAL_DMA_Init+0x434>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_DMA_Init+0x438>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a35      	ldr	r2, [pc, #212]	; (8002da0 <HAL_DMA_Init+0x43c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_DMA_Init+0x440>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a32      	ldr	r2, [pc, #200]	; (8002da8 <HAL_DMA_Init+0x444>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Init+0x38a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_DMA_Init+0x448>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Init+0x38e>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_Init+0x390>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8097 	beq.w	8002e28 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <HAL_DMA_Init+0x42c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d021      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_DMA_Init+0x430>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01c      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_DMA_Init+0x434>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d017      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_DMA_Init+0x438>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d012      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_DMA_Init+0x43c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00d      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_DMA_Init+0x440>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d008      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_DMA_Init+0x444>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA_Init+0x3e4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_DMA_Init+0x448>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_DMA_Init+0x44c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d020      	beq.n	8002db4 <HAL_DMA_Init+0x450>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d102      	bne.n	8002d80 <HAL_DMA_Init+0x41c>
 8002d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d7e:	e01a      	b.n	8002db6 <HAL_DMA_Init+0x452>
 8002d80:	2300      	movs	r3, #0
 8002d82:	e018      	b.n	8002db6 <HAL_DMA_Init+0x452>
 8002d84:	fe10803f 	.word	0xfe10803f
 8002d88:	5c001000 	.word	0x5c001000
 8002d8c:	ffff0000 	.word	0xffff0000
 8002d90:	58025408 	.word	0x58025408
 8002d94:	5802541c 	.word	0x5802541c
 8002d98:	58025430 	.word	0x58025430
 8002d9c:	58025444 	.word	0x58025444
 8002da0:	58025458 	.word	0x58025458
 8002da4:	5802546c 	.word	0x5802546c
 8002da8:	58025480 	.word	0x58025480
 8002dac:	58025494 	.word	0x58025494
 8002db0:	fffe000f 	.word	0xfffe000f
 8002db4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ddc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002de4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_DMA_Init+0x650>)
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_DMA_Init+0x654>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 fd93 	bl	8004938 <DMA_CalcBaseAndBitshift>
 8002e12:	4603      	mov	r3, r0
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e008      	b.n	8002e3a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2240      	movs	r2, #64	; 0x40
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0b7      	b.n	8002faa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5f      	ldr	r2, [pc, #380]	; (8002fbc <HAL_DMA_Init+0x658>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d072      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_DMA_Init+0x65c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d06d      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	; (8002fc4 <HAL_DMA_Init+0x660>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d068      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_DMA_Init+0x664>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d063      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a59      	ldr	r2, [pc, #356]	; (8002fcc <HAL_DMA_Init+0x668>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d05e      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	; (8002fd0 <HAL_DMA_Init+0x66c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d059      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_DMA_Init+0x670>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d054      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	; (8002fd8 <HAL_DMA_Init+0x674>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04f      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a53      	ldr	r2, [pc, #332]	; (8002fdc <HAL_DMA_Init+0x678>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_DMA_Init+0x67c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <HAL_DMA_Init+0x680>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4e      	ldr	r2, [pc, #312]	; (8002fe8 <HAL_DMA_Init+0x684>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4d      	ldr	r2, [pc, #308]	; (8002fec <HAL_DMA_Init+0x688>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	; (8002ff0 <HAL_DMA_Init+0x68c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_DMA_Init+0x690>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_DMA_Init+0x694>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <HAL_DMA_Init+0x698>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a45      	ldr	r2, [pc, #276]	; (8003000 <HAL_DMA_Init+0x69c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a44      	ldr	r2, [pc, #272]	; (8003004 <HAL_DMA_Init+0x6a0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a42      	ldr	r2, [pc, #264]	; (8003008 <HAL_DMA_Init+0x6a4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a41      	ldr	r2, [pc, #260]	; (800300c <HAL_DMA_Init+0x6a8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <HAL_DMA_Init+0x6ac>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a3e      	ldr	r2, [pc, #248]	; (8003014 <HAL_DMA_Init+0x6b0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_Init+0x5c6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a3c      	ldr	r2, [pc, #240]	; (8003018 <HAL_DMA_Init+0x6b4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Init+0x5ca>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_DMA_Init+0x5cc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d032      	beq.n	8002f9a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f001 fe2d 	bl	8004b94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d102      	bne.n	8002f48 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <HAL_DMA_Init+0x624>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d80c      	bhi.n	8002f88 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 feaa 	bl	8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	e008      	b.n	8002f9a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	a7fdabf8 	.word	0xa7fdabf8
 8002fb8:	cccccccd 	.word	0xcccccccd
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
 8002ffc:	58025408 	.word	0x58025408
 8003000:	5802541c 	.word	0x5802541c
 8003004:	58025430 	.word	0x58025430
 8003008:	58025444 	.word	0x58025444
 800300c:	58025458 	.word	0x58025458
 8003010:	5802546c 	.word	0x5802546c
 8003014:	58025480 	.word	0x58025480
 8003018:	58025494 	.word	0x58025494

0800301c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff fb3e 	bl	80026a4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e2dc      	b.n	80035ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d008      	beq.n	8003052 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e2cd      	b.n	80035ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a76      	ldr	r2, [pc, #472]	; (8003230 <HAL_DMA_Abort+0x214>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04a      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a74      	ldr	r2, [pc, #464]	; (8003234 <HAL_DMA_Abort+0x218>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d045      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a73      	ldr	r2, [pc, #460]	; (8003238 <HAL_DMA_Abort+0x21c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d040      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a71      	ldr	r2, [pc, #452]	; (800323c <HAL_DMA_Abort+0x220>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d03b      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a70      	ldr	r2, [pc, #448]	; (8003240 <HAL_DMA_Abort+0x224>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d036      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6e      	ldr	r2, [pc, #440]	; (8003244 <HAL_DMA_Abort+0x228>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d031      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6d      	ldr	r2, [pc, #436]	; (8003248 <HAL_DMA_Abort+0x22c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d02c      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	; (800324c <HAL_DMA_Abort+0x230>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d027      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_DMA_Abort+0x234>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a68      	ldr	r2, [pc, #416]	; (8003254 <HAL_DMA_Abort+0x238>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a67      	ldr	r2, [pc, #412]	; (8003258 <HAL_DMA_Abort+0x23c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a65      	ldr	r2, [pc, #404]	; (800325c <HAL_DMA_Abort+0x240>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a64      	ldr	r2, [pc, #400]	; (8003260 <HAL_DMA_Abort+0x244>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a62      	ldr	r2, [pc, #392]	; (8003264 <HAL_DMA_Abort+0x248>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a61      	ldr	r2, [pc, #388]	; (8003268 <HAL_DMA_Abort+0x24c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_DMA_Abort+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5f      	ldr	r2, [pc, #380]	; (800326c <HAL_DMA_Abort+0x250>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Abort+0xda>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_Abort+0xdc>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 021e 	bic.w	r2, r2, #30
 800310a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e00a      	b.n	800313a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 020e 	bic.w	r2, r2, #14
 8003132:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3c      	ldr	r2, [pc, #240]	; (8003230 <HAL_DMA_Abort+0x214>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d072      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3a      	ldr	r2, [pc, #232]	; (8003234 <HAL_DMA_Abort+0x218>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d06d      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a39      	ldr	r2, [pc, #228]	; (8003238 <HAL_DMA_Abort+0x21c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d068      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a37      	ldr	r2, [pc, #220]	; (800323c <HAL_DMA_Abort+0x220>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d063      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a36      	ldr	r2, [pc, #216]	; (8003240 <HAL_DMA_Abort+0x224>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_DMA_Abort+0x228>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d059      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a33      	ldr	r2, [pc, #204]	; (8003248 <HAL_DMA_Abort+0x22c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d054      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a31      	ldr	r2, [pc, #196]	; (800324c <HAL_DMA_Abort+0x230>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d04f      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a30      	ldr	r2, [pc, #192]	; (8003250 <HAL_DMA_Abort+0x234>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d04a      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <HAL_DMA_Abort+0x238>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d045      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_DMA_Abort+0x23c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d040      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2b      	ldr	r2, [pc, #172]	; (800325c <HAL_DMA_Abort+0x240>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d03b      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <HAL_DMA_Abort+0x244>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d036      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_DMA_Abort+0x248>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a27      	ldr	r2, [pc, #156]	; (8003268 <HAL_DMA_Abort+0x24c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d02c      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a25      	ldr	r2, [pc, #148]	; (800326c <HAL_DMA_Abort+0x250>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d027      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a24      	ldr	r2, [pc, #144]	; (8003270 <HAL_DMA_Abort+0x254>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_DMA_Abort+0x258>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01d      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <HAL_DMA_Abort+0x25c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d018      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_DMA_Abort+0x260>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_DMA_Abort+0x264>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_DMA_Abort+0x268>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <HAL_DMA_Abort+0x26c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_DMA_Abort+0x270>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d132      	bne.n	8003290 <HAL_DMA_Abort+0x274>
 800322a:	2301      	movs	r3, #1
 800322c:	e031      	b.n	8003292 <HAL_DMA_Abort+0x276>
 800322e:	bf00      	nop
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	58025408 	.word	0x58025408
 8003274:	5802541c 	.word	0x5802541c
 8003278:	58025430 	.word	0x58025430
 800327c:	58025444 	.word	0x58025444
 8003280:	58025458 	.word	0x58025458
 8003284:	5802546c 	.word	0x5802546c
 8003288:	58025480 	.word	0x58025480
 800328c:	58025494 	.word	0x58025494
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_DMA_Abort+0x444>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6b      	ldr	r2, [pc, #428]	; (8003464 <HAL_DMA_Abort+0x448>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <HAL_DMA_Abort+0x44c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a68      	ldr	r2, [pc, #416]	; (800346c <HAL_DMA_Abort+0x450>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_DMA_Abort+0x454>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_DMA_Abort+0x458>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a64      	ldr	r2, [pc, #400]	; (8003478 <HAL_DMA_Abort+0x45c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a62      	ldr	r2, [pc, #392]	; (800347c <HAL_DMA_Abort+0x460>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a61      	ldr	r2, [pc, #388]	; (8003480 <HAL_DMA_Abort+0x464>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5f      	ldr	r2, [pc, #380]	; (8003484 <HAL_DMA_Abort+0x468>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_DMA_Abort+0x46c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_DMA_Abort+0x470>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5b      	ldr	r2, [pc, #364]	; (8003490 <HAL_DMA_Abort+0x474>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a59      	ldr	r2, [pc, #356]	; (8003494 <HAL_DMA_Abort+0x478>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_DMA_Abort+0x47c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_Abort+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a56      	ldr	r2, [pc, #344]	; (800349c <HAL_DMA_Abort+0x480>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <HAL_DMA_Abort+0x33c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e007      	b.n	8003368 <HAL_DMA_Abort+0x34c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003368:	e013      	b.n	8003392 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800336a:	f7ff f99b 	bl	80026a4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b05      	cmp	r3, #5
 8003376:	d90c      	bls.n	8003392 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2203      	movs	r2, #3
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e12d      	b.n	80035ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e5      	bne.n	800336a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2f      	ldr	r2, [pc, #188]	; (8003460 <HAL_DMA_Abort+0x444>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d04a      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <HAL_DMA_Abort+0x448>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d045      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2c      	ldr	r2, [pc, #176]	; (8003468 <HAL_DMA_Abort+0x44c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d040      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <HAL_DMA_Abort+0x450>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d03b      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_DMA_Abort+0x454>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d036      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <HAL_DMA_Abort+0x458>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d031      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a26      	ldr	r2, [pc, #152]	; (8003478 <HAL_DMA_Abort+0x45c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d02c      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a24      	ldr	r2, [pc, #144]	; (800347c <HAL_DMA_Abort+0x460>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d027      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_DMA_Abort+0x464>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <HAL_DMA_Abort+0x422>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <HAL_DMA_Abort+0x468>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01d      	beq.n	800343e <HAL_DMA_Abort+0x422>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a20      	ldr	r2, [pc, #128]	; (8003488 <HAL_DMA_Abort+0x46c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d018      	beq.n	800343e <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_DMA_Abort+0x470>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_DMA_Abort+0x422>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_DMA_Abort+0x474>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_DMA_Abort+0x478>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_DMA_Abort+0x422>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_DMA_Abort+0x47c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_DMA_Abort+0x422>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_DMA_Abort+0x480>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Abort+0x426>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_DMA_Abort+0x428>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02b      	beq.n	80034a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	223f      	movs	r2, #63	; 0x3f
 8003458:	409a      	lsls	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	e02a      	b.n	80034b6 <HAL_DMA_Abort+0x49a>
 8003460:	40020010 	.word	0x40020010
 8003464:	40020028 	.word	0x40020028
 8003468:	40020040 	.word	0x40020040
 800346c:	40020058 	.word	0x40020058
 8003470:	40020070 	.word	0x40020070
 8003474:	40020088 	.word	0x40020088
 8003478:	400200a0 	.word	0x400200a0
 800347c:	400200b8 	.word	0x400200b8
 8003480:	40020410 	.word	0x40020410
 8003484:	40020428 	.word	0x40020428
 8003488:	40020440 	.word	0x40020440
 800348c:	40020458 	.word	0x40020458
 8003490:	40020470 	.word	0x40020470
 8003494:	40020488 	.word	0x40020488
 8003498:	400204a0 	.word	0x400204a0
 800349c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_DMA_Abort+0x5dc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d072      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <HAL_DMA_Abort+0x5e0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d06d      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_DMA_Abort+0x5e4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d068      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <HAL_DMA_Abort+0x5e8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d063      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a49      	ldr	r2, [pc, #292]	; (8003608 <HAL_DMA_Abort+0x5ec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d05e      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_DMA_Abort+0x5f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d059      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a46      	ldr	r2, [pc, #280]	; (8003610 <HAL_DMA_Abort+0x5f4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d054      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a44      	ldr	r2, [pc, #272]	; (8003614 <HAL_DMA_Abort+0x5f8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04f      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_DMA_Abort+0x5fc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a41      	ldr	r2, [pc, #260]	; (800361c <HAL_DMA_Abort+0x600>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <HAL_DMA_Abort+0x604>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3e      	ldr	r2, [pc, #248]	; (8003624 <HAL_DMA_Abort+0x608>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3d      	ldr	r2, [pc, #244]	; (8003628 <HAL_DMA_Abort+0x60c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3b      	ldr	r2, [pc, #236]	; (800362c <HAL_DMA_Abort+0x610>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_DMA_Abort+0x614>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_DMA_Abort+0x618>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a37      	ldr	r2, [pc, #220]	; (8003638 <HAL_DMA_Abort+0x61c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a35      	ldr	r2, [pc, #212]	; (800363c <HAL_DMA_Abort+0x620>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a34      	ldr	r2, [pc, #208]	; (8003640 <HAL_DMA_Abort+0x624>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a32      	ldr	r2, [pc, #200]	; (8003644 <HAL_DMA_Abort+0x628>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_DMA_Abort+0x62c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2f      	ldr	r2, [pc, #188]	; (800364c <HAL_DMA_Abort+0x630>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <HAL_DMA_Abort+0x634>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_DMA_Abort+0x638>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_DMA_Abort+0x58e>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_DMA_Abort+0x590>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40020010 	.word	0x40020010
 80035fc:	40020028 	.word	0x40020028
 8003600:	40020040 	.word	0x40020040
 8003604:	40020058 	.word	0x40020058
 8003608:	40020070 	.word	0x40020070
 800360c:	40020088 	.word	0x40020088
 8003610:	400200a0 	.word	0x400200a0
 8003614:	400200b8 	.word	0x400200b8
 8003618:	40020410 	.word	0x40020410
 800361c:	40020428 	.word	0x40020428
 8003620:	40020440 	.word	0x40020440
 8003624:	40020458 	.word	0x40020458
 8003628:	40020470 	.word	0x40020470
 800362c:	40020488 	.word	0x40020488
 8003630:	400204a0 	.word	0x400204a0
 8003634:	400204b8 	.word	0x400204b8
 8003638:	58025408 	.word	0x58025408
 800363c:	5802541c 	.word	0x5802541c
 8003640:	58025430 	.word	0x58025430
 8003644:	58025444 	.word	0x58025444
 8003648:	58025458 	.word	0x58025458
 800364c:	5802546c 	.word	0x5802546c
 8003650:	58025480 	.word	0x58025480
 8003654:	58025494 	.word	0x58025494

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e237      	b.n	8003ada <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d004      	beq.n	8003680 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e22c      	b.n	8003ada <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5c      	ldr	r2, [pc, #368]	; (80037f8 <HAL_DMA_Abort_IT+0x1a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d04a      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5b      	ldr	r2, [pc, #364]	; (80037fc <HAL_DMA_Abort_IT+0x1a4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d045      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_DMA_Abort_IT+0x1a8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d040      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a58      	ldr	r2, [pc, #352]	; (8003804 <HAL_DMA_Abort_IT+0x1ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d03b      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_DMA_Abort_IT+0x1b0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a55      	ldr	r2, [pc, #340]	; (800380c <HAL_DMA_Abort_IT+0x1b4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d031      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a53      	ldr	r2, [pc, #332]	; (8003810 <HAL_DMA_Abort_IT+0x1b8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02c      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a52      	ldr	r2, [pc, #328]	; (8003814 <HAL_DMA_Abort_IT+0x1bc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d027      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_DMA_Abort_IT+0x1c0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4f      	ldr	r2, [pc, #316]	; (800381c <HAL_DMA_Abort_IT+0x1c4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_DMA_Abort_IT+0x1c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	; (8003824 <HAL_DMA_Abort_IT+0x1cc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_DMA_Abort_IT+0x1d0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a49      	ldr	r2, [pc, #292]	; (800382c <HAL_DMA_Abort_IT+0x1d4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a47      	ldr	r2, [pc, #284]	; (8003830 <HAL_DMA_Abort_IT+0x1d8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a46      	ldr	r2, [pc, #280]	; (8003834 <HAL_DMA_Abort_IT+0x1dc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Abort_IT+0xcc>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_DMA_Abort_IT+0xce>
 8003724:	2300      	movs	r3, #0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8086 	beq.w	8003838 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2204      	movs	r2, #4
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <HAL_DMA_Abort_IT+0x1a0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04a      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <HAL_DMA_Abort_IT+0x1a4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d045      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <HAL_DMA_Abort_IT+0x1a8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d040      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <HAL_DMA_Abort_IT+0x1ac>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03b      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <HAL_DMA_Abort_IT+0x1b0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d036      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_DMA_Abort_IT+0x1b4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d031      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_DMA_Abort_IT+0x1b8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02c      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_DMA_Abort_IT+0x1bc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d027      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_DMA_Abort_IT+0x1c0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_DMA_Abort_IT+0x1c4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_DMA_Abort_IT+0x1c8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_DMA_Abort_IT+0x1cc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_DMA_Abort_IT+0x1d0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <HAL_DMA_Abort_IT+0x1d4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_DMA_Abort_IT+0x1d8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x17c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_DMA_Abort_IT+0x1dc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <HAL_DMA_Abort_IT+0x18e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e178      	b.n	8003ad8 <HAL_DMA_Abort_IT+0x480>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e16f      	b.n	8003ad8 <HAL_DMA_Abort_IT+0x480>
 80037f8:	40020010 	.word	0x40020010
 80037fc:	40020028 	.word	0x40020028
 8003800:	40020040 	.word	0x40020040
 8003804:	40020058 	.word	0x40020058
 8003808:	40020070 	.word	0x40020070
 800380c:	40020088 	.word	0x40020088
 8003810:	400200a0 	.word	0x400200a0
 8003814:	400200b8 	.word	0x400200b8
 8003818:	40020410 	.word	0x40020410
 800381c:	40020428 	.word	0x40020428
 8003820:	40020440 	.word	0x40020440
 8003824:	40020458 	.word	0x40020458
 8003828:	40020470 	.word	0x40020470
 800382c:	40020488 	.word	0x40020488
 8003830:	400204a0 	.word	0x400204a0
 8003834:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 020e 	bic.w	r2, r2, #14
 8003846:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6c      	ldr	r2, [pc, #432]	; (8003a00 <HAL_DMA_Abort_IT+0x3a8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d04a      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6b      	ldr	r2, [pc, #428]	; (8003a04 <HAL_DMA_Abort_IT+0x3ac>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d045      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a69      	ldr	r2, [pc, #420]	; (8003a08 <HAL_DMA_Abort_IT+0x3b0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d040      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <HAL_DMA_Abort_IT+0x3b4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d03b      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a66      	ldr	r2, [pc, #408]	; (8003a10 <HAL_DMA_Abort_IT+0x3b8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d036      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_DMA_Abort_IT+0x3bc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d031      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_DMA_Abort_IT+0x3c0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02c      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a62      	ldr	r2, [pc, #392]	; (8003a1c <HAL_DMA_Abort_IT+0x3c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d027      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a60      	ldr	r2, [pc, #384]	; (8003a20 <HAL_DMA_Abort_IT+0x3c8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d022      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5f      	ldr	r2, [pc, #380]	; (8003a24 <HAL_DMA_Abort_IT+0x3cc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d01d      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <HAL_DMA_Abort_IT+0x3d0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d018      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5c      	ldr	r2, [pc, #368]	; (8003a2c <HAL_DMA_Abort_IT+0x3d4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5a      	ldr	r2, [pc, #360]	; (8003a30 <HAL_DMA_Abort_IT+0x3d8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00e      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a59      	ldr	r2, [pc, #356]	; (8003a34 <HAL_DMA_Abort_IT+0x3dc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a57      	ldr	r2, [pc, #348]	; (8003a38 <HAL_DMA_Abort_IT+0x3e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x290>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a56      	ldr	r2, [pc, #344]	; (8003a3c <HAL_DMA_Abort_IT+0x3e4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <HAL_DMA_Abort_IT+0x2a2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e007      	b.n	800390a <HAL_DMA_Abort_IT+0x2b2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3c      	ldr	r2, [pc, #240]	; (8003a00 <HAL_DMA_Abort_IT+0x3a8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d072      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <HAL_DMA_Abort_IT+0x3ac>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d06d      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_DMA_Abort_IT+0x3b0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d068      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <HAL_DMA_Abort_IT+0x3b4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d063      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a36      	ldr	r2, [pc, #216]	; (8003a10 <HAL_DMA_Abort_IT+0x3b8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d05e      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <HAL_DMA_Abort_IT+0x3bc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d059      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a33      	ldr	r2, [pc, #204]	; (8003a18 <HAL_DMA_Abort_IT+0x3c0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d054      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a31      	ldr	r2, [pc, #196]	; (8003a1c <HAL_DMA_Abort_IT+0x3c4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d04f      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a30      	ldr	r2, [pc, #192]	; (8003a20 <HAL_DMA_Abort_IT+0x3c8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d04a      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2e      	ldr	r2, [pc, #184]	; (8003a24 <HAL_DMA_Abort_IT+0x3cc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d045      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2d      	ldr	r2, [pc, #180]	; (8003a28 <HAL_DMA_Abort_IT+0x3d0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d040      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <HAL_DMA_Abort_IT+0x3d4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d03b      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <HAL_DMA_Abort_IT+0x3d8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d036      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <HAL_DMA_Abort_IT+0x3dc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d031      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <HAL_DMA_Abort_IT+0x3e0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d02c      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <HAL_DMA_Abort_IT+0x3e4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d027      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <HAL_DMA_Abort_IT+0x3e8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_DMA_Abort_IT+0x3ec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01d      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_DMA_Abort_IT+0x3f0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d018      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <HAL_DMA_Abort_IT+0x3f4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	; (8003a50 <HAL_DMA_Abort_IT+0x3f8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_DMA_Abort_IT+0x3fc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_DMA_Abort_IT+0x400>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_DMA_Abort_IT+0x404>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d132      	bne.n	8003a60 <HAL_DMA_Abort_IT+0x408>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e031      	b.n	8003a62 <HAL_DMA_Abort_IT+0x40a>
 80039fe:	bf00      	nop
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	58025408 	.word	0x58025408
 8003a44:	5802541c 	.word	0x5802541c
 8003a48:	58025430 	.word	0x58025430
 8003a4c:	58025444 	.word	0x58025444
 8003a50:	58025458 	.word	0x58025458
 8003a54:	5802546c 	.word	0x5802546c
 8003a58:	58025480 	.word	0x58025480
 8003a5c:	58025494 	.word	0x58025494
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2201      	movs	r2, #1
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ab6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop

08003ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af0:	4b67      	ldr	r3, [pc, #412]	; (8003c90 <HAL_DMA_IRQHandler+0x1ac>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DMA_IRQHandler+0x1b0>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5f      	ldr	r2, [pc, #380]	; (8003c98 <HAL_DMA_IRQHandler+0x1b4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d04a      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5d      	ldr	r2, [pc, #372]	; (8003c9c <HAL_DMA_IRQHandler+0x1b8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d045      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d040      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5a      	ldr	r2, [pc, #360]	; (8003ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d03b      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d036      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_DMA_IRQHandler+0x1c8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a54      	ldr	r2, [pc, #336]	; (8003cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d027      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a53      	ldr	r2, [pc, #332]	; (8003cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a51      	ldr	r2, [pc, #324]	; (8003cbc <HAL_DMA_IRQHandler+0x1d8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01d      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a4d      	ldr	r2, [pc, #308]	; (8003cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_DMA_IRQHandler+0x1e8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xd2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a48      	ldr	r2, [pc, #288]	; (8003cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_DMA_IRQHandler+0xd6>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_DMA_IRQHandler+0xd8>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 842b 	beq.w	8004418 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2208      	movs	r2, #8
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80a2 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	; (8003c98 <HAL_DMA_IRQHandler+0x1b4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04a      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2d      	ldr	r2, [pc, #180]	; (8003c9c <HAL_DMA_IRQHandler+0x1b8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d045      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2b      	ldr	r2, [pc, #172]	; (8003ca0 <HAL_DMA_IRQHandler+0x1bc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d040      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <HAL_DMA_IRQHandler+0x1c0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03b      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d036      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a27      	ldr	r2, [pc, #156]	; (8003cac <HAL_DMA_IRQHandler+0x1c8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d022      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <HAL_DMA_IRQHandler+0x1d8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01d      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_DMA_IRQHandler+0x1e8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d12f      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x1f4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e02e      	b.n	8003cec <HAL_DMA_IRQHandler+0x208>
 8003c8e:	bf00      	nop
 8003c90:	24000000 	.word	0x24000000
 8003c94:	1b4e81b5 	.word	0x1b4e81b5
 8003c98:	40020010 	.word	0x40020010
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	40020040 	.word	0x40020040
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	40020070 	.word	0x40020070
 8003cac:	40020088 	.word	0x40020088
 8003cb0:	400200a0 	.word	0x400200a0
 8003cb4:	400200b8 	.word	0x400200b8
 8003cb8:	40020410 	.word	0x40020410
 8003cbc:	40020428 	.word	0x40020428
 8003cc0:	40020440 	.word	0x40020440
 8003cc4:	40020458 	.word	0x40020458
 8003cc8:	40020470 	.word	0x40020470
 8003ccc:	40020488 	.word	0x40020488
 8003cd0:	400204a0 	.word	0x400204a0
 8003cd4:	400204b8 	.word	0x400204b8
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2208      	movs	r2, #8
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06e      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a69      	ldr	r2, [pc, #420]	; (8003edc <HAL_DMA_IRQHandler+0x3f8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d04a      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a67      	ldr	r2, [pc, #412]	; (8003ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d045      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a66      	ldr	r2, [pc, #408]	; (8003ee4 <HAL_DMA_IRQHandler+0x400>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d040      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a64      	ldr	r2, [pc, #400]	; (8003ee8 <HAL_DMA_IRQHandler+0x404>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d03b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a63      	ldr	r2, [pc, #396]	; (8003eec <HAL_DMA_IRQHandler+0x408>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d036      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <HAL_DMA_IRQHandler+0x40c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d031      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a60      	ldr	r2, [pc, #384]	; (8003ef4 <HAL_DMA_IRQHandler+0x410>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d02c      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <HAL_DMA_IRQHandler+0x414>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d027      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5d      	ldr	r2, [pc, #372]	; (8003efc <HAL_DMA_IRQHandler+0x418>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5b      	ldr	r2, [pc, #364]	; (8003f00 <HAL_DMA_IRQHandler+0x41c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5a      	ldr	r2, [pc, #360]	; (8003f04 <HAL_DMA_IRQHandler+0x420>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_DMA_IRQHandler+0x424>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a57      	ldr	r2, [pc, #348]	; (8003f0c <HAL_DMA_IRQHandler+0x428>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a55      	ldr	r2, [pc, #340]	; (8003f10 <HAL_DMA_IRQHandler+0x42c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a54      	ldr	r2, [pc, #336]	; (8003f14 <HAL_DMA_IRQHandler+0x430>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x2ee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a52      	ldr	r2, [pc, #328]	; (8003f18 <HAL_DMA_IRQHandler+0x434>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10a      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x304>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e003      	b.n	8003df0 <HAL_DMA_IRQHandler+0x30c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	f043 0202 	orr.w	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2204      	movs	r2, #4
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 808f 	beq.w	8003f44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <HAL_DMA_IRQHandler+0x3f8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <HAL_DMA_IRQHandler+0x400>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <HAL_DMA_IRQHandler+0x404>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <HAL_DMA_IRQHandler+0x408>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <HAL_DMA_IRQHandler+0x40c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_DMA_IRQHandler+0x410>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a21      	ldr	r2, [pc, #132]	; (8003ef8 <HAL_DMA_IRQHandler+0x414>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <HAL_DMA_IRQHandler+0x418>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_DMA_IRQHandler+0x41c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_DMA_IRQHandler+0x420>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_DMA_IRQHandler+0x424>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_DMA_IRQHandler+0x428>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_DMA_IRQHandler+0x42c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_DMA_IRQHandler+0x430>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x3e2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <HAL_DMA_IRQHandler+0x434>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d12a      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x438>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e023      	b.n	8003f24 <HAL_DMA_IRQHandler+0x440>
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2204      	movs	r2, #4
 8003f32:	409a      	lsls	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a6 	beq.w	80040a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a85      	ldr	r2, [pc, #532]	; (8004174 <HAL_DMA_IRQHandler+0x690>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04a      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a83      	ldr	r2, [pc, #524]	; (8004178 <HAL_DMA_IRQHandler+0x694>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d045      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a82      	ldr	r2, [pc, #520]	; (800417c <HAL_DMA_IRQHandler+0x698>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d040      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a80      	ldr	r2, [pc, #512]	; (8004180 <HAL_DMA_IRQHandler+0x69c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d03b      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7f      	ldr	r2, [pc, #508]	; (8004184 <HAL_DMA_IRQHandler+0x6a0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d036      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7d      	ldr	r2, [pc, #500]	; (8004188 <HAL_DMA_IRQHandler+0x6a4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	; (800418c <HAL_DMA_IRQHandler+0x6a8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d02c      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7a      	ldr	r2, [pc, #488]	; (8004190 <HAL_DMA_IRQHandler+0x6ac>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d027      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a79      	ldr	r2, [pc, #484]	; (8004194 <HAL_DMA_IRQHandler+0x6b0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d022      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_DMA_IRQHandler+0x6b4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01d      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a76      	ldr	r2, [pc, #472]	; (800419c <HAL_DMA_IRQHandler+0x6b8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a74      	ldr	r2, [pc, #464]	; (80041a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a73      	ldr	r2, [pc, #460]	; (80041a4 <HAL_DMA_IRQHandler+0x6c0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a71      	ldr	r2, [pc, #452]	; (80041a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a70      	ldr	r2, [pc, #448]	; (80041ac <HAL_DMA_IRQHandler+0x6c8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x516>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	; (80041b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10a      	bne.n	8004010 <HAL_DMA_IRQHandler+0x52c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e009      	b.n	8004024 <HAL_DMA_IRQHandler+0x540>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d03e      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2210      	movs	r2, #16
 8004032:	409a      	lsls	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d018      	beq.n	8004078 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d024      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
 8004064:	e01f      	b.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01b      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e016      	b.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0208 	bic.w	r2, r2, #8
 8004094:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2220      	movs	r2, #32
 80040b0:	409a      	lsls	r2, r3
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8110 	beq.w	80042dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <HAL_DMA_IRQHandler+0x690>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <HAL_DMA_IRQHandler+0x694>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_DMA_IRQHandler+0x698>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a28      	ldr	r2, [pc, #160]	; (8004180 <HAL_DMA_IRQHandler+0x69c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <HAL_DMA_IRQHandler+0x6a0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a25      	ldr	r2, [pc, #148]	; (8004188 <HAL_DMA_IRQHandler+0x6a4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <HAL_DMA_IRQHandler+0x6a8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <HAL_DMA_IRQHandler+0x6ac>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <HAL_DMA_IRQHandler+0x6b0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <HAL_DMA_IRQHandler+0x6b4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_DMA_IRQHandler+0x6b8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_DMA_IRQHandler+0x6bc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <HAL_DMA_IRQHandler+0x6c0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_DMA_IRQHandler+0x6c4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_DMA_IRQHandler+0x6c8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_IRQHandler+0x678>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_DMA_IRQHandler+0x6cc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d12b      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x6d0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e02a      	b.n	80041c8 <HAL_DMA_IRQHandler+0x6e4>
 8004172:	bf00      	nop
 8004174:	40020010 	.word	0x40020010
 8004178:	40020028 	.word	0x40020028
 800417c:	40020040 	.word	0x40020040
 8004180:	40020058 	.word	0x40020058
 8004184:	40020070 	.word	0x40020070
 8004188:	40020088 	.word	0x40020088
 800418c:	400200a0 	.word	0x400200a0
 8004190:	400200b8 	.word	0x400200b8
 8004194:	40020410 	.word	0x40020410
 8004198:	40020428 	.word	0x40020428
 800419c:	40020440 	.word	0x40020440
 80041a0:	40020458 	.word	0x40020458
 80041a4:	40020470 	.word	0x40020470
 80041a8:	40020488 	.word	0x40020488
 80041ac:	400204a0 	.word	0x400204a0
 80041b0:	400204b8 	.word	0x400204b8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8087 	beq.w	80042dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2220      	movs	r2, #32
 80041d8:	409a      	lsls	r2, r3
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d139      	bne.n	800425e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0216 	bic.w	r2, r2, #22
 80041f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004208:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <HAL_DMA_IRQHandler+0x736>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0208 	bic.w	r2, r2, #8
 8004228:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	223f      	movs	r2, #63	; 0x3f
 8004234:	409a      	lsls	r2, r3
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 834a 	beq.w	80048e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
          }
          return;
 800425c:	e344      	b.n	80048e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d108      	bne.n	800428c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	2b00      	cmp	r3, #0
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
 800428a:	e027      	b.n	80042dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d023      	beq.n	80042dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	e01e      	b.n	80042dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0210 	bic.w	r2, r2, #16
 80042ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8306 	beq.w	80048f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8088 	beq.w	8004404 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a7a      	ldr	r2, [pc, #488]	; (80044ec <HAL_DMA_IRQHandler+0xa08>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a79      	ldr	r2, [pc, #484]	; (80044f0 <HAL_DMA_IRQHandler+0xa0c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a77      	ldr	r2, [pc, #476]	; (80044f4 <HAL_DMA_IRQHandler+0xa10>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a76      	ldr	r2, [pc, #472]	; (80044f8 <HAL_DMA_IRQHandler+0xa14>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a74      	ldr	r2, [pc, #464]	; (80044fc <HAL_DMA_IRQHandler+0xa18>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a73      	ldr	r2, [pc, #460]	; (8004500 <HAL_DMA_IRQHandler+0xa1c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a71      	ldr	r2, [pc, #452]	; (8004504 <HAL_DMA_IRQHandler+0xa20>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a70      	ldr	r2, [pc, #448]	; (8004508 <HAL_DMA_IRQHandler+0xa24>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6e      	ldr	r2, [pc, #440]	; (800450c <HAL_DMA_IRQHandler+0xa28>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6d      	ldr	r2, [pc, #436]	; (8004510 <HAL_DMA_IRQHandler+0xa2c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <HAL_DMA_IRQHandler+0xa30>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6a      	ldr	r2, [pc, #424]	; (8004518 <HAL_DMA_IRQHandler+0xa34>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a68      	ldr	r2, [pc, #416]	; (800451c <HAL_DMA_IRQHandler+0xa38>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a67      	ldr	r2, [pc, #412]	; (8004520 <HAL_DMA_IRQHandler+0xa3c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_DMA_IRQHandler+0xa40>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x8b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a64      	ldr	r2, [pc, #400]	; (8004528 <HAL_DMA_IRQHandler+0xa44>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <HAL_DMA_IRQHandler+0x8ca>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_DMA_IRQHandler+0x8da>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3301      	adds	r3, #1
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d307      	bcc.n	80043da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f2      	bne.n	80043be <HAL_DMA_IRQHandler+0x8da>
 80043d8:	e000      	b.n	80043dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043f2:	e003      	b.n	80043fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8272 	beq.w	80048f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
 8004416:	e26c      	b.n	80048f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a43      	ldr	r2, [pc, #268]	; (800452c <HAL_DMA_IRQHandler+0xa48>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a42      	ldr	r2, [pc, #264]	; (8004530 <HAL_DMA_IRQHandler+0xa4c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01d      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a40      	ldr	r2, [pc, #256]	; (8004534 <HAL_DMA_IRQHandler+0xa50>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <HAL_DMA_IRQHandler+0xa54>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3d      	ldr	r2, [pc, #244]	; (800453c <HAL_DMA_IRQHandler+0xa58>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <HAL_DMA_IRQHandler+0xa5c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3a      	ldr	r2, [pc, #232]	; (8004544 <HAL_DMA_IRQHandler+0xa60>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_DMA_IRQHandler+0x984>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a39      	ldr	r2, [pc, #228]	; (8004548 <HAL_DMA_IRQHandler+0xa64>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d101      	bne.n	800446c <HAL_DMA_IRQHandler+0x988>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_DMA_IRQHandler+0x98a>
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 823f 	beq.w	80048f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2204      	movs	r2, #4
 8004486:	409a      	lsls	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80cd 	beq.w	800462c <HAL_DMA_IRQHandler+0xb48>
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80c7 	beq.w	800462c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	2204      	movs	r2, #4
 80044a8:	409a      	lsls	r2, r3
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d049      	beq.n	800454c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8210 	beq.w	80048ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d4:	e20a      	b.n	80048ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8206 	beq.w	80048ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e8:	e200      	b.n	80048ec <HAL_DMA_IRQHandler+0xe08>
 80044ea:	bf00      	nop
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	40020040 	.word	0x40020040
 80044f8:	40020058 	.word	0x40020058
 80044fc:	40020070 	.word	0x40020070
 8004500:	40020088 	.word	0x40020088
 8004504:	400200a0 	.word	0x400200a0
 8004508:	400200b8 	.word	0x400200b8
 800450c:	40020410 	.word	0x40020410
 8004510:	40020428 	.word	0x40020428
 8004514:	40020440 	.word	0x40020440
 8004518:	40020458 	.word	0x40020458
 800451c:	40020470 	.word	0x40020470
 8004520:	40020488 	.word	0x40020488
 8004524:	400204a0 	.word	0x400204a0
 8004528:	400204b8 	.word	0x400204b8
 800452c:	58025408 	.word	0x58025408
 8004530:	5802541c 	.word	0x5802541c
 8004534:	58025430 	.word	0x58025430
 8004538:	58025444 	.word	0x58025444
 800453c:	58025458 	.word	0x58025458
 8004540:	5802546c 	.word	0x5802546c
 8004544:	58025480 	.word	0x58025480
 8004548:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d160      	bne.n	8004618 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7f      	ldr	r2, [pc, #508]	; (8004758 <HAL_DMA_IRQHandler+0xc74>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d04a      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a7d      	ldr	r2, [pc, #500]	; (800475c <HAL_DMA_IRQHandler+0xc78>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d045      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7c      	ldr	r2, [pc, #496]	; (8004760 <HAL_DMA_IRQHandler+0xc7c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d040      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7a      	ldr	r2, [pc, #488]	; (8004764 <HAL_DMA_IRQHandler+0xc80>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d03b      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a79      	ldr	r2, [pc, #484]	; (8004768 <HAL_DMA_IRQHandler+0xc84>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d036      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a77      	ldr	r2, [pc, #476]	; (800476c <HAL_DMA_IRQHandler+0xc88>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d031      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a76      	ldr	r2, [pc, #472]	; (8004770 <HAL_DMA_IRQHandler+0xc8c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02c      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a74      	ldr	r2, [pc, #464]	; (8004774 <HAL_DMA_IRQHandler+0xc90>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d027      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a73      	ldr	r2, [pc, #460]	; (8004778 <HAL_DMA_IRQHandler+0xc94>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a71      	ldr	r2, [pc, #452]	; (800477c <HAL_DMA_IRQHandler+0xc98>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01d      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a70      	ldr	r2, [pc, #448]	; (8004780 <HAL_DMA_IRQHandler+0xc9c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a6e      	ldr	r2, [pc, #440]	; (8004784 <HAL_DMA_IRQHandler+0xca0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6d      	ldr	r2, [pc, #436]	; (8004788 <HAL_DMA_IRQHandler+0xca4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6b      	ldr	r2, [pc, #428]	; (800478c <HAL_DMA_IRQHandler+0xca8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6a      	ldr	r2, [pc, #424]	; (8004790 <HAL_DMA_IRQHandler+0xcac>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xb12>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a68      	ldr	r2, [pc, #416]	; (8004794 <HAL_DMA_IRQHandler+0xcb0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <HAL_DMA_IRQHandler+0xb24>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0208 	bic.w	r2, r2, #8
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e007      	b.n	8004618 <HAL_DMA_IRQHandler+0xb34>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8165 	beq.w	80048ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462a:	e15f      	b.n	80048ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2202      	movs	r2, #2
 8004636:	409a      	lsls	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80c5 	beq.w	80047cc <HAL_DMA_IRQHandler+0xce8>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80bf 	beq.w	80047cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2202      	movs	r2, #2
 8004658:	409a      	lsls	r2, r3
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 813a 	beq.w	80048f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004684:	e134      	b.n	80048f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8130 	beq.w	80048f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004698:	e12a      	b.n	80048f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8089 	bne.w	80047b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_DMA_IRQHandler+0xc74>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d04a      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_DMA_IRQHandler+0xc78>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d045      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_DMA_IRQHandler+0xc7c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d040      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	; (8004764 <HAL_DMA_IRQHandler+0xc80>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d03b      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_DMA_IRQHandler+0xc84>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_DMA_IRQHandler+0xc88>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_DMA_IRQHandler+0xc8c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d02c      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	; (8004774 <HAL_DMA_IRQHandler+0xc90>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d027      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_DMA_IRQHandler+0xc94>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_DMA_IRQHandler+0xc98>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_DMA_IRQHandler+0xc9c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_DMA_IRQHandler+0xca0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_DMA_IRQHandler+0xca4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_DMA_IRQHandler+0xca8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <HAL_DMA_IRQHandler+0xcac>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_IRQHandler+0xc62>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <HAL_DMA_IRQHandler+0xcb0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d128      	bne.n	8004798 <HAL_DMA_IRQHandler+0xcb4>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0214 	bic.w	r2, r2, #20
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e027      	b.n	80047a8 <HAL_DMA_IRQHandler+0xcc4>
 8004758:	40020010 	.word	0x40020010
 800475c:	40020028 	.word	0x40020028
 8004760:	40020040 	.word	0x40020040
 8004764:	40020058 	.word	0x40020058
 8004768:	40020070 	.word	0x40020070
 800476c:	40020088 	.word	0x40020088
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400200b8 	.word	0x400200b8
 8004778:	40020410 	.word	0x40020410
 800477c:	40020428 	.word	0x40020428
 8004780:	40020440 	.word	0x40020440
 8004784:	40020458 	.word	0x40020458
 8004788:	40020470 	.word	0x40020470
 800478c:	40020488 	.word	0x40020488
 8004790:	400204a0 	.word	0x400204a0
 8004794:	400204b8 	.word	0x400204b8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 020a 	bic.w	r2, r2, #10
 80047a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8097 	beq.w	80048f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ca:	e091      	b.n	80048f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2208      	movs	r2, #8
 80047d6:	409a      	lsls	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8088 	beq.w	80048f2 <HAL_DMA_IRQHandler+0xe0e>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8082 	beq.w	80048f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <HAL_DMA_IRQHandler+0xe14>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a3f      	ldr	r2, [pc, #252]	; (80048fc <HAL_DMA_IRQHandler+0xe18>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a3e      	ldr	r2, [pc, #248]	; (8004900 <HAL_DMA_IRQHandler+0xe1c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <HAL_DMA_IRQHandler+0xe20>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <HAL_DMA_IRQHandler+0xe24>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a39      	ldr	r2, [pc, #228]	; (800490c <HAL_DMA_IRQHandler+0xe28>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_DMA_IRQHandler+0xe2c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a36      	ldr	r2, [pc, #216]	; (8004914 <HAL_DMA_IRQHandler+0xe30>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a35      	ldr	r2, [pc, #212]	; (8004918 <HAL_DMA_IRQHandler+0xe34>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a33      	ldr	r2, [pc, #204]	; (800491c <HAL_DMA_IRQHandler+0xe38>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_DMA_IRQHandler+0xe3c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_DMA_IRQHandler+0xe40>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <HAL_DMA_IRQHandler+0xe44>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <HAL_DMA_IRQHandler+0xe48>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <HAL_DMA_IRQHandler+0xe4c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_IRQHandler+0xdaa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <HAL_DMA_IRQHandler+0xe50>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <HAL_DMA_IRQHandler+0xdbc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 021c 	bic.w	r2, r2, #28
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e007      	b.n	80048b0 <HAL_DMA_IRQHandler+0xdcc>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 020e 	bic.w	r2, r2, #14
 80048ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
 80048e6:	e004      	b.n	80048f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048e8:	bf00      	nop
 80048ea:	e002      	b.n	80048f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ec:	bf00      	nop
 80048ee:	e000      	b.n	80048f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8

08004938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a42      	ldr	r2, [pc, #264]	; (8004a50 <DMA_CalcBaseAndBitshift+0x118>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d04a      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a41      	ldr	r2, [pc, #260]	; (8004a54 <DMA_CalcBaseAndBitshift+0x11c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d045      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <DMA_CalcBaseAndBitshift+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d040      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3e      	ldr	r2, [pc, #248]	; (8004a5c <DMA_CalcBaseAndBitshift+0x124>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d03b      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3c      	ldr	r2, [pc, #240]	; (8004a60 <DMA_CalcBaseAndBitshift+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d036      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <DMA_CalcBaseAndBitshift+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d031      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a39      	ldr	r2, [pc, #228]	; (8004a68 <DMA_CalcBaseAndBitshift+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02c      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <DMA_CalcBaseAndBitshift+0x134>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d027      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <DMA_CalcBaseAndBitshift+0x138>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d022      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <DMA_CalcBaseAndBitshift+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d01d      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <DMA_CalcBaseAndBitshift+0x140>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d018      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <DMA_CalcBaseAndBitshift+0x144>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d013      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <DMA_CalcBaseAndBitshift+0x148>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <DMA_CalcBaseAndBitshift+0x14c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d009      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <DMA_CalcBaseAndBitshift+0x150>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <DMA_CalcBaseAndBitshift+0xa8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2c      	ldr	r2, [pc, #176]	; (8004a8c <DMA_CalcBaseAndBitshift+0x154>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <DMA_CalcBaseAndBitshift+0xac>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <DMA_CalcBaseAndBitshift+0xae>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	3b10      	subs	r3, #16
 80049f2:	4a27      	ldr	r2, [pc, #156]	; (8004a90 <DMA_CalcBaseAndBitshift+0x158>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a04:	5cd3      	ldrb	r3, [r2, r3]
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d908      	bls.n	8004a24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <DMA_CalcBaseAndBitshift+0x160>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	659a      	str	r2, [r3, #88]	; 0x58
 8004a22:	e00d      	b.n	8004a40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <DMA_CalcBaseAndBitshift+0x160>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6593      	str	r3, [r2, #88]	; 0x58
 8004a32:	e005      	b.n	8004a40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40020010 	.word	0x40020010
 8004a54:	40020028 	.word	0x40020028
 8004a58:	40020040 	.word	0x40020040
 8004a5c:	40020058 	.word	0x40020058
 8004a60:	40020070 	.word	0x40020070
 8004a64:	40020088 	.word	0x40020088
 8004a68:	400200a0 	.word	0x400200a0
 8004a6c:	400200b8 	.word	0x400200b8
 8004a70:	40020410 	.word	0x40020410
 8004a74:	40020428 	.word	0x40020428
 8004a78:	40020440 	.word	0x40020440
 8004a7c:	40020458 	.word	0x40020458
 8004a80:	40020470 	.word	0x40020470
 8004a84:	40020488 	.word	0x40020488
 8004a88:	400204a0 	.word	0x400204a0
 8004a8c:	400204b8 	.word	0x400204b8
 8004a90:	aaaaaaab 	.word	0xaaaaaaab
 8004a94:	0800acac 	.word	0x0800acac
 8004a98:	fffffc00 	.word	0xfffffc00

08004a9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d120      	bne.n	8004af2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d858      	bhi.n	8004b6a <DMA_CheckFifoParam+0xce>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <DMA_CheckFifoParam+0x24>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004ae3 	.word	0x08004ae3
 8004ac8:	08004ad1 	.word	0x08004ad1
 8004acc:	08004b6b 	.word	0x08004b6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d048      	beq.n	8004b6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ae0:	e045      	b.n	8004b6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aea:	d142      	bne.n	8004b72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af0:	e03f      	b.n	8004b72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d123      	bne.n	8004b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d838      	bhi.n	8004b76 <DMA_CheckFifoParam+0xda>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <DMA_CheckFifoParam+0x70>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b23 	.word	0x08004b23
 8004b14:	08004b1d 	.word	0x08004b1d
 8004b18:	08004b35 	.word	0x08004b35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b20:	e030      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d025      	beq.n	8004b7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b32:	e022      	b.n	8004b7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b3c:	d11f      	bne.n	8004b7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b42:	e01c      	b.n	8004b7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d902      	bls.n	8004b52 <DMA_CheckFifoParam+0xb6>
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d003      	beq.n	8004b58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b50:	e018      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
        break;
 8004b56:	e015      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
    break;
 8004b68:	e00b      	b.n	8004b82 <DMA_CheckFifoParam+0xe6>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e00a      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e008      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        break;
 8004b72:	bf00      	nop
 8004b74:	e006      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        break;
 8004b76:	bf00      	nop
 8004b78:	e004      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
    break;
 8004b82:	bf00      	nop
    }
  }

  return status;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop

08004b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d022      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a36      	ldr	r2, [pc, #216]	; (8004c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01d      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d018      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a32      	ldr	r2, [pc, #200]	; (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d101      	bne.n	8004bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01a      	beq.n	8004c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	3b08      	subs	r3, #8
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	2201      	movs	r2, #1
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c30:	e024      	b.n	8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	3b10      	subs	r3, #16
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d806      	bhi.n	8004c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d902      	bls.n	8004c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3308      	adds	r3, #8
 8004c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2201      	movs	r2, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	58025408 	.word	0x58025408
 8004c8c:	5802541c 	.word	0x5802541c
 8004c90:	58025430 	.word	0x58025430
 8004c94:	58025444 	.word	0x58025444
 8004c98:	58025458 	.word	0x58025458
 8004c9c:	5802546c 	.word	0x5802546c
 8004ca0:	58025480 	.word	0x58025480
 8004ca4:	58025494 	.word	0x58025494
 8004ca8:	cccccccd 	.word	0xcccccccd
 8004cac:	16009600 	.word	0x16009600
 8004cb0:	58025880 	.word	0x58025880
 8004cb4:	aaaaaaab 	.word	0xaaaaaaab
 8004cb8:	400204b8 	.word	0x400204b8
 8004cbc:	4002040f 	.word	0x4002040f
 8004cc0:	10008200 	.word	0x10008200
 8004cc4:	40020880 	.word	0x40020880

08004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04a      	beq.n	8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d847      	bhi.n	8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a25      	ldr	r2, [pc, #148]	; (8004d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4b17      	ldr	r3, [pc, #92]	; (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d50:	671a      	str	r2, [r3, #112]	; 0x70
 8004d52:	e009      	b.n	8004d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a11      	ldr	r2, [pc, #68]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	58025408 	.word	0x58025408
 8004d84:	5802541c 	.word	0x5802541c
 8004d88:	58025430 	.word	0x58025430
 8004d8c:	58025444 	.word	0x58025444
 8004d90:	58025458 	.word	0x58025458
 8004d94:	5802546c 	.word	0x5802546c
 8004d98:	58025480 	.word	0x58025480
 8004d9c:	58025494 	.word	0x58025494
 8004da0:	1600963f 	.word	0x1600963f
 8004da4:	58025940 	.word	0x58025940
 8004da8:	1000823f 	.word	0x1000823f
 8004dac:	40020940 	.word	0x40020940

08004db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0cf      	b.n	8004f62 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2223      	movs	r2, #35	; 0x23
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fd f907 	bl	8001fe8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dda:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <HAL_ETH_Init+0x1bc>)
 8004ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004de0:	4a62      	ldr	r2, [pc, #392]	; (8004f6c <HAL_ETH_Init+0x1bc>)
 8004de2:	f043 0302 	orr.w	r3, r3, #2
 8004de6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dea:	4b60      	ldr	r3, [pc, #384]	; (8004f6c <HAL_ETH_Init+0x1bc>)
 8004dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7a1b      	ldrb	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004e00:	2000      	movs	r0, #0
 8004e02:	f7fd fc8b 	bl	800271c <HAL_SYSCFG_ETHInterfaceSelect>
 8004e06:	e003      	b.n	8004e10 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004e08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004e0c:	f7fd fc86 	bl	800271c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004e10:	4b57      	ldr	r3, [pc, #348]	; (8004f70 <HAL_ETH_Init+0x1c0>)
 8004e12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e2c:	f7fd fc3a 	bl	80026a4 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e32:	e011      	b.n	8004e58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e34:	f7fd fc36 	bl	80026a4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e42:	d909      	bls.n	8004e58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2204      	movs	r2, #4
 8004e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	22e0      	movs	r2, #224	; 0xe0
 8004e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e084      	b.n	8004f62 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e4      	bne.n	8004e34 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f886 	bl	8004f7c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e70:	f001 fefc 	bl	8006c6c <HAL_RCC_GetHCLKFreq>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a3f      	ldr	r2, [pc, #252]	; (8004f74 <HAL_ETH_Init+0x1c4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0c9a      	lsrs	r2, r3, #18
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3a01      	subs	r2, #1
 8004e84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa71 	bl	8005370 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e9a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eaa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	22e0      	movs	r2, #224	; 0xe0
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e049      	b.n	8004f62 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004eda:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_ETH_Init+0x1c8>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6952      	ldr	r2, [r2, #20]
 8004ee2:	0051      	lsls	r1, r2, #1
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fad9 	bl	80054aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb1f 	bl	800553c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	3305      	adds	r3, #5
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	021a      	lsls	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	3303      	adds	r3, #3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	061a      	lsls	r2, r3, #24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004f4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004f4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2210      	movs	r2, #16
 8004f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	58000400 	.word	0x58000400
 8004f74:	431bde83 	.word	0x431bde83
 8004f78:	ffff8001 	.word	0xffff8001

08004f7c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f96:	f001 fe69 	bl	8006c6c <HAL_RCC_GetHCLKFreq>
 8004f9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d908      	bls.n	8004fb6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d804      	bhi.n	8004fb6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e027      	b.n	8005006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d908      	bls.n	8004fd0 <HAL_ETH_SetMDIOClockRange+0x54>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d204      	bcs.n	8004fd0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e01a      	b.n	8005006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d303      	bcc.n	8004fe0 <HAL_ETH_SetMDIOClockRange+0x64>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a12      	ldr	r2, [pc, #72]	; (8005024 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d911      	bls.n	8005004 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d908      	bls.n	8004ffa <HAL_ETH_SetMDIOClockRange+0x7e>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d804      	bhi.n	8004ffa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e005      	b.n	8005006 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e000      	b.n	8005006 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005004:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	01312cff 	.word	0x01312cff
 800501c:	02160ebf 	.word	0x02160ebf
 8005020:	03938700 	.word	0x03938700
 8005024:	05f5e0ff 	.word	0x05f5e0ff
 8005028:	08f0d17f 	.word	0x08f0d17f

0800502c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800503e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	791b      	ldrb	r3, [r3, #4]
 8005044:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005046:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800504e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7b5b      	ldrb	r3, [r3, #13]
 8005054:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005056:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	7b9b      	ldrb	r3, [r3, #14]
 800505c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800505e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	7bdb      	ldrb	r3, [r3, #15]
 8005064:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005066:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	7c12      	ldrb	r2, [r2, #16]
 800506c:	2a00      	cmp	r2, #0
 800506e:	d102      	bne.n	8005076 <ETH_SetMACConfig+0x4a>
 8005070:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005074:	e000      	b.n	8005078 <ETH_SetMACConfig+0x4c>
 8005076:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005078:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	7c52      	ldrb	r2, [r2, #17]
 800507e:	2a00      	cmp	r2, #0
 8005080:	d102      	bne.n	8005088 <ETH_SetMACConfig+0x5c>
 8005082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005086:	e000      	b.n	800508a <ETH_SetMACConfig+0x5e>
 8005088:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800508a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	7c9b      	ldrb	r3, [r3, #18]
 8005090:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005092:	431a      	orrs	r2, r3
               macconf->Speed |
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005098:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800509e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	7f1b      	ldrb	r3, [r3, #28]
 80050a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80050a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	7f5b      	ldrb	r3, [r3, #29]
 80050ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80050ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	7f92      	ldrb	r2, [r2, #30]
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	d102      	bne.n	80050be <ETH_SetMACConfig+0x92>
 80050b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050bc:	e000      	b.n	80050c0 <ETH_SetMACConfig+0x94>
 80050be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80050c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	7fdb      	ldrb	r3, [r3, #31]
 80050c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80050c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	d102      	bne.n	80050da <ETH_SetMACConfig+0xae>
 80050d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050d8:	e000      	b.n	80050dc <ETH_SetMACConfig+0xb0>
 80050da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80050dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80050e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80050ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b56      	ldr	r3, [pc, #344]	; (8005258 <ETH_SetMACConfig+0x22c>)
 80050fe:	4013      	ands	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	430b      	orrs	r3, r1
 8005108:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005116:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005118:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005120:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800512a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800512c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005134:	2a00      	cmp	r2, #0
 8005136:	d102      	bne.n	800513e <ETH_SetMACConfig+0x112>
 8005138:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800513c:	e000      	b.n	8005140 <ETH_SetMACConfig+0x114>
 800513e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005140:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4b42      	ldr	r3, [pc, #264]	; (800525c <ETH_SetMACConfig+0x230>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	430b      	orrs	r3, r1
 800515c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005164:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <ETH_SetMACConfig+0x234>)
 8005176:	4013      	ands	r3, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	430b      	orrs	r3, r1
 8005180:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005188:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800518e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005196:	2a00      	cmp	r2, #0
 8005198:	d101      	bne.n	800519e <ETH_SetMACConfig+0x172>
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	e000      	b.n	80051a0 <ETH_SetMACConfig+0x174>
 800519e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80051a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	430b      	orrs	r3, r1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80051c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80051d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f023 0103 	bic.w	r1, r3, #3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80051f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005212:	2a00      	cmp	r2, #0
 8005214:	d101      	bne.n	800521a <ETH_SetMACConfig+0x1ee>
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	e000      	b.n	800521c <ETH_SetMACConfig+0x1f0>
 800521a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800521c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005224:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800522e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800523c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	430a      	orrs	r2, r1
 8005248:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	00048083 	.word	0x00048083
 800525c:	c0f88000 	.word	0xc0f88000
 8005260:	fffffef0 	.word	0xfffffef0

08005264 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b38      	ldr	r3, [pc, #224]	; (800535c <ETH_SetDMAConfig+0xf8>)
 800527a:	4013      	ands	r3, r2
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	430b      	orrs	r3, r1
 8005286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800528a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005296:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	7b1b      	ldrb	r3, [r3, #12]
 800529c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <ETH_SetDMAConfig+0xfc>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	430b      	orrs	r3, r1
 80052b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	7b5b      	ldrb	r3, [r3, #13]
 80052c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80052d8:	4b22      	ldr	r3, [pc, #136]	; (8005364 <ETH_SetDMAConfig+0x100>)
 80052da:	4013      	ands	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	430b      	orrs	r3, r1
 80052e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7d1b      	ldrb	r3, [r3, #20]
 80052f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80052f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	7f5b      	ldrb	r3, [r3, #29]
 80052fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <ETH_SetDMAConfig+0x104>)
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	430b      	orrs	r3, r1
 800531a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800531e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	7f1b      	ldrb	r3, [r3, #28]
 8005326:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005338:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <ETH_SetDMAConfig+0x108>)
 800533e:	4013      	ands	r3, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	430b      	orrs	r3, r1
 8005348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800534c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	ffff87fd 	.word	0xffff87fd
 8005360:	ffff2ffe 	.word	0xffff2ffe
 8005364:	fffec000 	.word	0xfffec000
 8005368:	ffc0efef 	.word	0xffc0efef
 800536c:	7fc0ffff 	.word	0x7fc0ffff

08005370 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b0a4      	sub	sp, #144	; 0x90
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800537e:	2300      	movs	r3, #0
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80053ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80053c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80053cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80053d4:	2300      	movs	r3, #0
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80053ea:	2300      	movs	r3, #0
 80053ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80053f2:	2300      	movs	r3, #0
 80053f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005408:	2320      	movs	r3, #32
 800540a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005414:	2300      	movs	r3, #0
 8005416:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800541a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005424:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800542c:	2302      	movs	r3, #2
 800542e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005432:	2300      	movs	r3, #0
 8005434:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800544a:	2300      	movs	r3, #0
 800544c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fde6 	bl	800502c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005460:	2301      	movs	r3, #1
 8005462:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005464:	2301      	movs	r3, #1
 8005466:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005476:	2300      	movs	r3, #0
 8005478:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800547a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800547e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005480:	2300      	movs	r3, #0
 8005482:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005488:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005490:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fee1 	bl	8005264 <ETH_SetDMAConfig>
}
 80054a2:	bf00      	nop
 80054a4:	3790      	adds	r7, #144	; 0x90
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e01d      	b.n	80054f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68d9      	ldr	r1, [r3, #12]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4613      	mov	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	3206      	adds	r2, #6
 80054ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d9de      	bls.n	80054b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005508:	461a      	mov	r2, r3
 800550a:	2303      	movs	r3, #3
 800550c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e023      	b.n	8005592 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6919      	ldr	r1, [r3, #16]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	3212      	adds	r2, #18
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d9d8      	bls.n	800554a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	461a      	mov	r2, r3
 80055c0:	2303      	movs	r3, #3
 80055c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005606:	4b89      	ldr	r3, [pc, #548]	; (800582c <HAL_GPIO_Init+0x234>)
 8005608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800560a:	e194      	b.n	8005936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2101      	movs	r1, #1
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8186 	beq.w	8005930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d005      	beq.n	800563c <HAL_GPIO_Init+0x44>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d130      	bne.n	800569e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	2203      	movs	r2, #3
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	43db      	mvns	r3, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4013      	ands	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005672:	2201      	movs	r2, #1
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d017      	beq.n	80056da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	2203      	movs	r2, #3
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43db      	mvns	r3, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d123      	bne.n	800572e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	08da      	lsrs	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3208      	adds	r2, #8
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	220f      	movs	r2, #15
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	08da      	lsrs	r2, r3, #3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3208      	adds	r2, #8
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0203 	and.w	r2, r3, #3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4313      	orrs	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80e0 	beq.w	8005930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005770:	4b2f      	ldr	r3, [pc, #188]	; (8005830 <HAL_GPIO_Init+0x238>)
 8005772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005776:	4a2e      	ldr	r2, [pc, #184]	; (8005830 <HAL_GPIO_Init+0x238>)
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <HAL_GPIO_Init+0x238>)
 8005782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800578e:	4a29      	ldr	r2, [pc, #164]	; (8005834 <HAL_GPIO_Init+0x23c>)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a20      	ldr	r2, [pc, #128]	; (8005838 <HAL_GPIO_Init+0x240>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d052      	beq.n	8005860 <HAL_GPIO_Init+0x268>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1f      	ldr	r2, [pc, #124]	; (800583c <HAL_GPIO_Init+0x244>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d031      	beq.n	8005826 <HAL_GPIO_Init+0x22e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1e      	ldr	r2, [pc, #120]	; (8005840 <HAL_GPIO_Init+0x248>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02b      	beq.n	8005822 <HAL_GPIO_Init+0x22a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <HAL_GPIO_Init+0x24c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d025      	beq.n	800581e <HAL_GPIO_Init+0x226>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_GPIO_Init+0x250>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <HAL_GPIO_Init+0x222>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_GPIO_Init+0x254>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_GPIO_Init+0x21e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_GPIO_Init+0x258>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_GPIO_Init+0x21a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_GPIO_Init+0x25c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00d      	beq.n	800580e <HAL_GPIO_Init+0x216>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_GPIO_Init+0x260>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <HAL_GPIO_Init+0x212>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a17      	ldr	r2, [pc, #92]	; (800585c <HAL_GPIO_Init+0x264>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_GPIO_Init+0x20e>
 8005802:	2309      	movs	r3, #9
 8005804:	e02d      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 8005806:	230a      	movs	r3, #10
 8005808:	e02b      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 800580a:	2308      	movs	r3, #8
 800580c:	e029      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 800580e:	2307      	movs	r3, #7
 8005810:	e027      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 8005812:	2306      	movs	r3, #6
 8005814:	e025      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 8005816:	2305      	movs	r3, #5
 8005818:	e023      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 800581a:	2304      	movs	r3, #4
 800581c:	e021      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 800581e:	2303      	movs	r3, #3
 8005820:	e01f      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 8005822:	2302      	movs	r3, #2
 8005824:	e01d      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 8005826:	2301      	movs	r3, #1
 8005828:	e01b      	b.n	8005862 <HAL_GPIO_Init+0x26a>
 800582a:	bf00      	nop
 800582c:	58000080 	.word	0x58000080
 8005830:	58024400 	.word	0x58024400
 8005834:	58000400 	.word	0x58000400
 8005838:	58020000 	.word	0x58020000
 800583c:	58020400 	.word	0x58020400
 8005840:	58020800 	.word	0x58020800
 8005844:	58020c00 	.word	0x58020c00
 8005848:	58021000 	.word	0x58021000
 800584c:	58021400 	.word	0x58021400
 8005850:	58021800 	.word	0x58021800
 8005854:	58021c00 	.word	0x58021c00
 8005858:	58022000 	.word	0x58022000
 800585c:	58022400 	.word	0x58022400
 8005860:	2300      	movs	r3, #0
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	f002 0203 	and.w	r2, r2, #3
 8005868:	0092      	lsls	r2, r2, #2
 800586a:	4093      	lsls	r3, r2
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005872:	4938      	ldr	r1, [pc, #224]	; (8005954 <HAL_GPIO_Init+0x35c>)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	3302      	adds	r3, #2
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	3301      	adds	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f ae63 	bne.w	800560c <HAL_GPIO_Init+0x14>
  }
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	3724      	adds	r7, #36	; 0x24
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	58000400 	.word	0x58000400

08005958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e001      	b.n	800597a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	807b      	strh	r3, [r7, #2]
 8005994:	4613      	mov	r3, r2
 8005996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005998:	787b      	ldrb	r3, [r7, #1]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059a4:	e003      	b.n	80059ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	041a      	lsls	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	619a      	str	r2, [r3, #24]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059cc:	887a      	ldrh	r2, [r7, #2]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4013      	ands	r3, r2
 80059d2:	041a      	lsls	r2, r3, #16
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	43d9      	mvns	r1, r3
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	400b      	ands	r3, r1
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	619a      	str	r2, [r3, #24]
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <HAL_HSEM_FastTake+0x2c>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3320      	adds	r3, #32
 80059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a02:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <HAL_HSEM_FastTake+0x30>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e000      	b.n	8005a0e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	58026400 	.word	0x58026400
 8005a20:	80000300 	.word	0x80000300

08005a24 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005a2e:	4906      	ldr	r1, [pc, #24]	; (8005a48 <HAL_HSEM_Release+0x24>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	58026400 	.word	0x58026400

08005a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b08f      	sub	sp, #60	; 0x3c
 8005a50:	af0a      	add	r7, sp, #40	; 0x28
 8005a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e116      	b.n	8005c8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7fc fcc1 	bl	8002400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2203      	movs	r2, #3
 8005a82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f004 fded 	bl	800a67c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	687e      	ldr	r6, [r7, #4]
 8005aaa:	466d      	mov	r5, sp
 8005aac:	f106 0410 	add.w	r4, r6, #16
 8005ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ab8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005abc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ac0:	1d33      	adds	r3, r6, #4
 8005ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ac4:	6838      	ldr	r0, [r7, #0]
 8005ac6:	f004 fd6b 	bl	800a5a0 <USB_CoreInit>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0d7      	b.n	8005c8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fddb 	bl	800a69e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
 8005aec:	e04a      	b.n	8005b84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	333d      	adds	r3, #61	; 0x3d
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	333c      	adds	r3, #60	; 0x3c
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	b298      	uxth	r0, r3
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	3344      	adds	r3, #68	; 0x44
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b2e:	7bfa      	ldrb	r2, [r7, #15]
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	3340      	adds	r3, #64	; 0x40
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	3348      	adds	r3, #72	; 0x48
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	334c      	adds	r3, #76	; 0x4c
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3354      	adds	r3, #84	; 0x54
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	3301      	adds	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	7bfa      	ldrb	r2, [r7, #15]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3af      	bcc.n	8005aee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	e044      	b.n	8005c1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c02:	7bfa      	ldrb	r2, [r7, #15]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
 8005c1e:	7bfa      	ldrb	r2, [r7, #15]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3b5      	bcc.n	8005b94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	687e      	ldr	r6, [r7, #4]
 8005c30:	466d      	mov	r5, sp
 8005c32:	f106 0410 	add.w	r4, r6, #16
 8005c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c42:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c46:	1d33      	adds	r3, r6, #4
 8005c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c4a:	6838      	ldr	r0, [r7, #0]
 8005c4c:	f004 fd74 	bl	800a738 <USB_DevInit>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e014      	b.n	8005c8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d102      	bne.n	8005c80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f80a 	bl	8005c94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f004 ff32 	bl	800aaee <USB_DevDisconnect>

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	10000003 	.word	0x10000003

08005cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d00a      	beq.n	8005d06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005cf0:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d001      	beq.n	8005d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e040      	b.n	8005d84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e03e      	b.n	8005d84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005d0e:	491f      	ldr	r1, [pc, #124]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d16:	f7fc fcc5 	bl	80026a4 <HAL_GetTick>
 8005d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d1c:	e009      	b.n	8005d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d1e:	f7fc fcc1 	bl	80026a4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d2c:	d901      	bls.n	8005d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e028      	b.n	8005d84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d32:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	d1ee      	bne.n	8005d1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b1e      	cmp	r3, #30
 8005d44:	d008      	beq.n	8005d58 <HAL_PWREx_ConfigSupply+0x7c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b2e      	cmp	r3, #46	; 0x2e
 8005d4a:	d005      	beq.n	8005d58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b1d      	cmp	r3, #29
 8005d50:	d002      	beq.n	8005d58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b2d      	cmp	r3, #45	; 0x2d
 8005d56:	d114      	bne.n	8005d82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005d58:	f7fc fca4 	bl	80026a4 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d5e:	e009      	b.n	8005d74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d60:	f7fc fca0 	bl	80026a4 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6e:	d901      	bls.n	8005d74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e007      	b.n	8005d84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_PWREx_ConfigSupply+0xb0>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d1ee      	bne.n	8005d60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	58024800 	.word	0x58024800

08005d90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a04      	ldr	r2, [pc, #16]	; (8005dac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	60d3      	str	r3, [r2, #12]
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	58024800 	.word	0x58024800

08005db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	; 0x30
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f000 bc1d 	b.w	80065fe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8087 	beq.w	8005ee0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ddc:	4b96      	ldr	r3, [pc, #600]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d007      	beq.n	8005df8 <HAL_RCC_OscConfig+0x48>
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	2b18      	cmp	r3, #24
 8005dec:	d110      	bne.n	8005e10 <HAL_RCC_OscConfig+0x60>
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d10b      	bne.n	8005e10 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df8:	4b8f      	ldr	r3, [pc, #572]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d06c      	beq.n	8005ede <HAL_RCC_OscConfig+0x12e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d168      	bne.n	8005ede <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e3f6      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e18:	d106      	bne.n	8005e28 <HAL_RCC_OscConfig+0x78>
 8005e1a:	4b87      	ldr	r3, [pc, #540]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a86      	ldr	r2, [pc, #536]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e02e      	b.n	8005e86 <HAL_RCC_OscConfig+0xd6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x9a>
 8005e30:	4b81      	ldr	r3, [pc, #516]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a80      	ldr	r2, [pc, #512]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b7e      	ldr	r3, [pc, #504]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a7d      	ldr	r2, [pc, #500]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e01d      	b.n	8005e86 <HAL_RCC_OscConfig+0xd6>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e52:	d10c      	bne.n	8005e6e <HAL_RCC_OscConfig+0xbe>
 8005e54:	4b78      	ldr	r3, [pc, #480]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a77      	ldr	r2, [pc, #476]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b75      	ldr	r3, [pc, #468]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a74      	ldr	r2, [pc, #464]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e00b      	b.n	8005e86 <HAL_RCC_OscConfig+0xd6>
 8005e6e:	4b72      	ldr	r3, [pc, #456]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a71      	ldr	r2, [pc, #452]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b6f      	ldr	r3, [pc, #444]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a6e      	ldr	r2, [pc, #440]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d013      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fc fc09 	bl	80026a4 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e96:	f7fc fc05 	bl	80026a4 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b64      	cmp	r3, #100	; 0x64
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e3aa      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea8:	4b63      	ldr	r3, [pc, #396]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCC_OscConfig+0xe6>
 8005eb4:	e014      	b.n	8005ee0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb6:	f7fc fbf5 	bl	80026a4 <HAL_GetTick>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ebe:	f7fc fbf1 	bl	80026a4 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b64      	cmp	r3, #100	; 0x64
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e396      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ed0:	4b59      	ldr	r3, [pc, #356]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1f0      	bne.n	8005ebe <HAL_RCC_OscConfig+0x10e>
 8005edc:	e000      	b.n	8005ee0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ede:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80cb 	beq.w	8006084 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b52      	ldr	r3, [pc, #328]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ef8:	4b4f      	ldr	r3, [pc, #316]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <HAL_RCC_OscConfig+0x164>
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b18      	cmp	r3, #24
 8005f08:	d156      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x208>
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d151      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f14:	4b48      	ldr	r3, [pc, #288]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_OscConfig+0x17c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e368      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f2c:	4b42      	ldr	r3, [pc, #264]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 0219 	bic.w	r2, r3, #25
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	493f      	ldr	r1, [pc, #252]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f3e:	f7fc fbb1 	bl	80026a4 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f46:	f7fc fbad 	bl	80026a4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e352      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f58:	4b37      	ldr	r3, [pc, #220]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f64:	f7fc fbce 	bl	8002704 <HAL_GetREVID>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d817      	bhi.n	8005fa2 <HAL_RCC_OscConfig+0x1f2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d108      	bne.n	8005f8c <HAL_RCC_OscConfig+0x1dc>
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f82:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8a:	e07b      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f8c:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	4927      	ldr	r1, [pc, #156]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa0:	e070      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa2:	4b25      	ldr	r3, [pc, #148]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	4921      	ldr	r1, [pc, #132]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb6:	e065      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d048      	beq.n	8006052 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 0219 	bic.w	r2, r3, #25
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	491a      	ldr	r1, [pc, #104]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fc fb67 	bl	80026a4 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fc fb63 	bl	80026a4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e308      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff8:	f7fc fb84 	bl	8002704 <HAL_GetREVID>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f241 0203 	movw	r2, #4099	; 0x1003
 8006002:	4293      	cmp	r3, r2
 8006004:	d81a      	bhi.n	800603c <HAL_RCC_OscConfig+0x28c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d108      	bne.n	8006020 <HAL_RCC_OscConfig+0x270>
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8006018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601c:	6053      	str	r3, [r2, #4]
 800601e:	e031      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	4902      	ldr	r1, [pc, #8]	; (8006038 <HAL_RCC_OscConfig+0x288>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	e026      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
 800603c:	4b9a      	ldr	r3, [pc, #616]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	061b      	lsls	r3, r3, #24
 800604a:	4997      	ldr	r1, [pc, #604]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800604c:	4313      	orrs	r3, r2
 800604e:	604b      	str	r3, [r1, #4]
 8006050:	e018      	b.n	8006084 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006052:	4b95      	ldr	r3, [pc, #596]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a94      	ldr	r2, [pc, #592]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605e:	f7fc fb21 	bl	80026a4 <HAL_GetTick>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006066:	f7fc fb1d 	bl	80026a4 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e2c2      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006078:	4b8b      	ldr	r3, [pc, #556]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f0      	bne.n	8006066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 80a9 	beq.w	80061e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006092:	4b85      	ldr	r3, [pc, #532]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800609a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800609c:	4b82      	ldr	r3, [pc, #520]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d007      	beq.n	80060b8 <HAL_RCC_OscConfig+0x308>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b18      	cmp	r3, #24
 80060ac:	d13a      	bne.n	8006124 <HAL_RCC_OscConfig+0x374>
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d135      	bne.n	8006124 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060b8:	4b7b      	ldr	r3, [pc, #492]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_OscConfig+0x320>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e296      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d0:	f7fc fb18 	bl	8002704 <HAL_GetREVID>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060da:	4293      	cmp	r3, r2
 80060dc:	d817      	bhi.n	800610e <HAL_RCC_OscConfig+0x35e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d108      	bne.n	80060f8 <HAL_RCC_OscConfig+0x348>
 80060e6:	4b70      	ldr	r3, [pc, #448]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060ee:	4a6e      	ldr	r2, [pc, #440]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80060f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f6:	e075      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060f8:	4b6b      	ldr	r3, [pc, #428]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	069b      	lsls	r3, r3, #26
 8006106:	4968      	ldr	r1, [pc, #416]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800610c:	e06a      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800610e:	4b66      	ldr	r3, [pc, #408]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	4962      	ldr	r1, [pc, #392]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006122:	e05f      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d042      	beq.n	80061b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800612c:	4b5e      	ldr	r3, [pc, #376]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5d      	ldr	r2, [pc, #372]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fc fab4 	bl	80026a4 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006140:	f7fc fab0 	bl	80026a4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e255      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006152:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800615e:	f7fc fad1 	bl	8002704 <HAL_GetREVID>
 8006162:	4603      	mov	r3, r0
 8006164:	f241 0203 	movw	r2, #4099	; 0x1003
 8006168:	4293      	cmp	r3, r2
 800616a:	d817      	bhi.n	800619c <HAL_RCC_OscConfig+0x3ec>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	2b20      	cmp	r3, #32
 8006172:	d108      	bne.n	8006186 <HAL_RCC_OscConfig+0x3d6>
 8006174:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800617c:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800617e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006182:	6053      	str	r3, [r2, #4]
 8006184:	e02e      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	069b      	lsls	r3, r3, #26
 8006194:	4944      	ldr	r1, [pc, #272]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	604b      	str	r3, [r1, #4]
 800619a:	e023      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
 800619c:	4b42      	ldr	r3, [pc, #264]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	493f      	ldr	r1, [pc, #252]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60cb      	str	r3, [r1, #12]
 80061b0:	e018      	b.n	80061e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061b2:	4b3d      	ldr	r3, [pc, #244]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061be:	f7fc fa71 	bl	80026a4 <HAL_GetTick>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061c6:	f7fc fa6d 	bl	80026a4 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e212      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061d8:	4b33      	ldr	r3, [pc, #204]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f0      	bne.n	80061c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d036      	beq.n	800625e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d019      	beq.n	800622c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f8:	4b2b      	ldr	r3, [pc, #172]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fc:	4a2a      	ldr	r2, [pc, #168]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006204:	f7fc fa4e 	bl	80026a4 <HAL_GetTick>
 8006208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800620c:	f7fc fa4a 	bl	80026a4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e1ef      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800621e:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x45c>
 800622a:	e018      	b.n	800625e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622c:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800622e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fc fa34 	bl	80026a4 <HAL_GetTick>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006240:	f7fc fa30 	bl	80026a4 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e1d5      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d039      	beq.n	80062de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01c      	beq.n	80062ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 8006278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800627c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800627e:	f7fc fa11 	bl	80026a4 <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006286:	f7fc fa0d 	bl	80026a4 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e1b2      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006298:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <HAL_RCC_OscConfig+0x4f8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x4d6>
 80062a4:	e01b      	b.n	80062de <HAL_RCC_OscConfig+0x52e>
 80062a6:	bf00      	nop
 80062a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062ac:	4b9b      	ldr	r3, [pc, #620]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a9a      	ldr	r2, [pc, #616]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80062b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062b8:	f7fc f9f4 	bl	80026a4 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062c0:	f7fc f9f0 	bl	80026a4 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e195      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d2:	4b92      	ldr	r3, [pc, #584]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8081 	beq.w	80063ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062ec:	4b8c      	ldr	r3, [pc, #560]	; (8006520 <HAL_RCC_OscConfig+0x770>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a8b      	ldr	r2, [pc, #556]	; (8006520 <HAL_RCC_OscConfig+0x770>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f8:	f7fc f9d4 	bl	80026a4 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006300:	f7fc f9d0 	bl	80026a4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b64      	cmp	r3, #100	; 0x64
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e175      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006312:	4b83      	ldr	r3, [pc, #524]	; (8006520 <HAL_RCC_OscConfig+0x770>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d106      	bne.n	8006334 <HAL_RCC_OscConfig+0x584>
 8006326:	4b7d      	ldr	r3, [pc, #500]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a7c      	ldr	r2, [pc, #496]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6713      	str	r3, [r2, #112]	; 0x70
 8006332:	e02d      	b.n	8006390 <HAL_RCC_OscConfig+0x5e0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10c      	bne.n	8006356 <HAL_RCC_OscConfig+0x5a6>
 800633c:	4b77      	ldr	r3, [pc, #476]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	4a76      	ldr	r2, [pc, #472]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	6713      	str	r3, [r2, #112]	; 0x70
 8006348:	4b74      	ldr	r3, [pc, #464]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a73      	ldr	r2, [pc, #460]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800634e:	f023 0304 	bic.w	r3, r3, #4
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	e01c      	b.n	8006390 <HAL_RCC_OscConfig+0x5e0>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b05      	cmp	r3, #5
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0x5c8>
 800635e:	4b6f      	ldr	r3, [pc, #444]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4a6e      	ldr	r2, [pc, #440]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006364:	f043 0304 	orr.w	r3, r3, #4
 8006368:	6713      	str	r3, [r2, #112]	; 0x70
 800636a:	4b6c      	ldr	r3, [pc, #432]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	4a6b      	ldr	r2, [pc, #428]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	6713      	str	r3, [r2, #112]	; 0x70
 8006376:	e00b      	b.n	8006390 <HAL_RCC_OscConfig+0x5e0>
 8006378:	4b68      	ldr	r3, [pc, #416]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	4a67      	ldr	r2, [pc, #412]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	6713      	str	r3, [r2, #112]	; 0x70
 8006384:	4b65      	ldr	r3, [pc, #404]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	4a64      	ldr	r2, [pc, #400]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800638a:	f023 0304 	bic.w	r3, r3, #4
 800638e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d015      	beq.n	80063c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006398:	f7fc f984 	bl	80026a4 <HAL_GetTick>
 800639c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fc f980 	bl	80026a4 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e123      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063b6:	4b59      	ldr	r3, [pc, #356]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ee      	beq.n	80063a0 <HAL_RCC_OscConfig+0x5f0>
 80063c2:	e014      	b.n	80063ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c4:	f7fc f96e 	bl	80026a4 <HAL_GetTick>
 80063c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063ca:	e00a      	b.n	80063e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063cc:	f7fc f96a 	bl	80026a4 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e10d      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063e2:	4b4e      	ldr	r3, [pc, #312]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1ee      	bne.n	80063cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8102 	beq.w	80065fc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063f8:	4b48      	ldr	r3, [pc, #288]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006400:	2b18      	cmp	r3, #24
 8006402:	f000 80bd 	beq.w	8006580 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b02      	cmp	r3, #2
 800640c:	f040 809e 	bne.w	800654c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006410:	4b42      	ldr	r3, [pc, #264]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a41      	ldr	r2, [pc, #260]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fc f942 	bl	80026a4 <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006424:	f7fc f93e 	bl	80026a4 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e0e3      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <HAL_RCC_OscConfig+0x774>)
 8006448:	4013      	ands	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006452:	0112      	lsls	r2, r2, #4
 8006454:	430a      	orrs	r2, r1
 8006456:	4931      	ldr	r1, [pc, #196]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006458:	4313      	orrs	r3, r2
 800645a:	628b      	str	r3, [r1, #40]	; 0x28
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	3b01      	subs	r3, #1
 8006462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	3b01      	subs	r3, #1
 800646c:	025b      	lsls	r3, r3, #9
 800646e:	b29b      	uxth	r3, r3
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	3b01      	subs	r3, #1
 8006478:	041b      	lsls	r3, r3, #16
 800647a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	3b01      	subs	r3, #1
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800648c:	4923      	ldr	r1, [pc, #140]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800648e:	4313      	orrs	r3, r2
 8006490:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800649e:	4b1f      	ldr	r3, [pc, #124]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a2:	4b21      	ldr	r3, [pc, #132]	; (8006528 <HAL_RCC_OscConfig+0x778>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064aa:	00d2      	lsls	r2, r2, #3
 80064ac:	491b      	ldr	r1, [pc, #108]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80064b2:	4b1a      	ldr	r3, [pc, #104]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	f023 020c 	bic.w	r2, r3, #12
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4917      	ldr	r1, [pc, #92]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	f023 0202 	bic.w	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	4912      	ldr	r1, [pc, #72]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	4a10      	ldr	r2, [pc, #64]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a0d      	ldr	r2, [pc, #52]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064ee:	4b0b      	ldr	r3, [pc, #44]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a0a      	ldr	r2, [pc, #40]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80064fa:	4b08      	ldr	r3, [pc, #32]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a04      	ldr	r2, [pc, #16]	; (800651c <HAL_RCC_OscConfig+0x76c>)
 800650c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fc f8c7 	bl	80026a4 <HAL_GetTick>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006518:	e011      	b.n	800653e <HAL_RCC_OscConfig+0x78e>
 800651a:	bf00      	nop
 800651c:	58024400 	.word	0x58024400
 8006520:	58024800 	.word	0x58024800
 8006524:	fffffc0c 	.word	0xfffffc0c
 8006528:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652c:	f7fc f8ba 	bl	80026a4 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e05f      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800653e:	4b32      	ldr	r3, [pc, #200]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x77c>
 800654a:	e057      	b.n	80065fc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654c:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2d      	ldr	r2, [pc, #180]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 8006552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006558:	f7fc f8a4 	bl	80026a4 <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006560:	f7fc f8a0 	bl	80026a4 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e045      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006572:	4b25      	ldr	r3, [pc, #148]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x7b0>
 800657e:	e03d      	b.n	80065fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006580:	4b21      	ldr	r3, [pc, #132]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_RCC_OscConfig+0x858>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b01      	cmp	r3, #1
 8006592:	d031      	beq.n	80065f8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f003 0203 	and.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800659e:	429a      	cmp	r2, r3
 80065a0:	d12a      	bne.n	80065f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d122      	bne.n	80065f8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d11a      	bne.n	80065f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	0a5b      	lsrs	r3, r3, #9
 80065c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d111      	bne.n	80065f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d108      	bne.n	80065f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3730      	adds	r7, #48	; 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400

0800660c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e19c      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006620:	4b8a      	ldr	r3, [pc, #552]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d910      	bls.n	8006650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b87      	ldr	r3, [pc, #540]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 020f 	bic.w	r2, r3, #15
 8006636:	4985      	ldr	r1, [pc, #532]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4313      	orrs	r3, r2
 800663c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663e:	4b83      	ldr	r3, [pc, #524]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e184      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	4b7b      	ldr	r3, [pc, #492]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006668:	429a      	cmp	r2, r3
 800666a:	d908      	bls.n	800667e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800666c:	4b78      	ldr	r3, [pc, #480]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	4975      	ldr	r1, [pc, #468]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800667a:	4313      	orrs	r3, r2
 800667c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d010      	beq.n	80066ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	4b70      	ldr	r3, [pc, #448]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006696:	429a      	cmp	r2, r3
 8006698:	d908      	bls.n	80066ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800669a:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	496a      	ldr	r1, [pc, #424]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d010      	beq.n	80066da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	4b64      	ldr	r3, [pc, #400]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d908      	bls.n	80066da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066c8:	4b61      	ldr	r3, [pc, #388]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	495e      	ldr	r1, [pc, #376]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	4b59      	ldr	r3, [pc, #356]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d908      	bls.n	8006708 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80066f6:	4b56      	ldr	r3, [pc, #344]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	4953      	ldr	r1, [pc, #332]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006704:	4313      	orrs	r3, r2
 8006706:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d010      	beq.n	8006736 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	4b4d      	ldr	r3, [pc, #308]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	429a      	cmp	r2, r3
 8006722:	d908      	bls.n	8006736 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006724:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f023 020f 	bic.w	r2, r3, #15
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	4947      	ldr	r1, [pc, #284]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006732:	4313      	orrs	r3, r2
 8006734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d055      	beq.n	80067ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006742:	4b43      	ldr	r3, [pc, #268]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	4940      	ldr	r1, [pc, #256]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006750:	4313      	orrs	r3, r2
 8006752:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d107      	bne.n	800676c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800675c:	4b3c      	ldr	r3, [pc, #240]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d121      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0f6      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d107      	bne.n	8006784 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006774:	4b36      	ldr	r3, [pc, #216]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d115      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0ea      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800678c:	4b30      	ldr	r3, [pc, #192]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0de      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800679c:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0d6      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f023 0207 	bic.w	r2, r3, #7
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4925      	ldr	r1, [pc, #148]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067be:	f7fb ff71 	bl	80026a4 <HAL_GetTick>
 80067c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c4:	e00a      	b.n	80067dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c6:	f7fb ff6d 	bl	80026a4 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e0be      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067dc:	4b1c      	ldr	r3, [pc, #112]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d1eb      	bne.n	80067c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d010      	beq.n	800681c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	4b14      	ldr	r3, [pc, #80]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	429a      	cmp	r2, r3
 8006808:	d208      	bcs.n	800681c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800680a:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f023 020f 	bic.w	r2, r3, #15
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	490e      	ldr	r1, [pc, #56]	; (8006850 <HAL_RCC_ClockConfig+0x244>)
 8006818:	4313      	orrs	r3, r2
 800681a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d214      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682a:	4b08      	ldr	r3, [pc, #32]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	4906      	ldr	r1, [pc, #24]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <HAL_RCC_ClockConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d005      	beq.n	8006854 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e086      	b.n	800695a <HAL_RCC_ClockConfig+0x34e>
 800684c:	52002000 	.word	0x52002000
 8006850:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	4b3f      	ldr	r3, [pc, #252]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800686c:	429a      	cmp	r2, r3
 800686e:	d208      	bcs.n	8006882 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006870:	4b3c      	ldr	r3, [pc, #240]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	4939      	ldr	r1, [pc, #228]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 800687e:	4313      	orrs	r3, r2
 8006880:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d010      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	4b34      	ldr	r3, [pc, #208]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800689a:	429a      	cmp	r2, r3
 800689c:	d208      	bcs.n	80068b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800689e:	4b31      	ldr	r3, [pc, #196]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	492e      	ldr	r1, [pc, #184]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d208      	bcs.n	80068de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068cc:	4b25      	ldr	r3, [pc, #148]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	4922      	ldr	r1, [pc, #136]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d208      	bcs.n	800690c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4917      	ldr	r1, [pc, #92]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 8006908:	4313      	orrs	r3, r2
 800690a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800690c:	f000 f834 	bl	8006978 <HAL_RCC_GetSysClockFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	4912      	ldr	r1, [pc, #72]	; (8006968 <HAL_RCC_ClockConfig+0x35c>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
 8006928:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <HAL_RCC_ClockConfig+0x358>)
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <HAL_RCC_ClockConfig+0x35c>)
 8006934:	5cd3      	ldrb	r3, [r2, r3]
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <HAL_RCC_ClockConfig+0x360>)
 8006942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006944:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <HAL_RCC_ClockConfig+0x364>)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <HAL_RCC_ClockConfig+0x368>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7fb fe5e 	bl	8002610 <HAL_InitTick>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
 8006968:	0800ac24 	.word	0x0800ac24
 800696c:	24000004 	.word	0x24000004
 8006970:	24000000 	.word	0x24000000
 8006974:	24000008 	.word	0x24000008

08006978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006978:	b480      	push	{r7}
 800697a:	b089      	sub	sp, #36	; 0x24
 800697c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800697e:	4bb3      	ldr	r3, [pc, #716]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006986:	2b18      	cmp	r3, #24
 8006988:	f200 8155 	bhi.w	8006c36 <HAL_RCC_GetSysClockFreq+0x2be>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_RCC_GetSysClockFreq+0x1c>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069f9 	.word	0x080069f9
 8006998:	08006c37 	.word	0x08006c37
 800699c:	08006c37 	.word	0x08006c37
 80069a0:	08006c37 	.word	0x08006c37
 80069a4:	08006c37 	.word	0x08006c37
 80069a8:	08006c37 	.word	0x08006c37
 80069ac:	08006c37 	.word	0x08006c37
 80069b0:	08006c37 	.word	0x08006c37
 80069b4:	08006a1f 	.word	0x08006a1f
 80069b8:	08006c37 	.word	0x08006c37
 80069bc:	08006c37 	.word	0x08006c37
 80069c0:	08006c37 	.word	0x08006c37
 80069c4:	08006c37 	.word	0x08006c37
 80069c8:	08006c37 	.word	0x08006c37
 80069cc:	08006c37 	.word	0x08006c37
 80069d0:	08006c37 	.word	0x08006c37
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006c37 	.word	0x08006c37
 80069dc:	08006c37 	.word	0x08006c37
 80069e0:	08006c37 	.word	0x08006c37
 80069e4:	08006c37 	.word	0x08006c37
 80069e8:	08006c37 	.word	0x08006c37
 80069ec:	08006c37 	.word	0x08006c37
 80069f0:	08006c37 	.word	0x08006c37
 80069f4:	08006a2b 	.word	0x08006a2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f8:	4b94      	ldr	r3, [pc, #592]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a04:	4b91      	ldr	r3, [pc, #580]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a90      	ldr	r2, [pc, #576]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a16:	e111      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a18:	4b8d      	ldr	r3, [pc, #564]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a1a:	61bb      	str	r3, [r7, #24]
    break;
 8006a1c:	e10e      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a1e:	4b8d      	ldr	r3, [pc, #564]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a20:	61bb      	str	r3, [r7, #24]
    break;
 8006a22:	e10b      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a24:	4b8c      	ldr	r3, [pc, #560]	; (8006c58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a26:	61bb      	str	r3, [r7, #24]
    break;
 8006a28:	e108      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a2a:	4b88      	ldr	r3, [pc, #544]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a34:	4b85      	ldr	r3, [pc, #532]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a40:	4b82      	ldr	r3, [pc, #520]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a4a:	4b80      	ldr	r3, [pc, #512]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80e1 	beq.w	8006c30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	f000 8083 	beq.w	8006b7c <HAL_RCC_GetSysClockFreq+0x204>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	f200 80a1 	bhi.w	8006bc0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x114>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d056      	beq.n	8006b38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a8a:	e099      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a8c:	4b6f      	ldr	r3, [pc, #444]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02d      	beq.n	8006af4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a98:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	08db      	lsrs	r3, r3, #3
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b62      	ldr	r3, [pc, #392]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006af2:	e087      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b51      	ldr	r3, [pc, #324]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b36:	e065      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	4b40      	ldr	r3, [pc, #256]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b7a:	e043      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ba2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bbe:	e021      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c04:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	0a5b      	lsrs	r3, r3, #9
 8006c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0e:	3301      	adds	r3, #1
 8006c10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c28:	ee17 3a90 	vmov	r3, s15
 8006c2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c2e:	e005      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61bb      	str	r3, [r7, #24]
    break;
 8006c34:	e002      	b.n	8006c3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c38:	61bb      	str	r3, [r7, #24]
    break;
 8006c3a:	bf00      	nop
  }

  return sysclockfreq;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	58024400 	.word	0x58024400
 8006c50:	03d09000 	.word	0x03d09000
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	007a1200 	.word	0x007a1200
 8006c5c:	46000000 	.word	0x46000000
 8006c60:	4c742400 	.word	0x4c742400
 8006c64:	4a742400 	.word	0x4a742400
 8006c68:	4af42400 	.word	0x4af42400

08006c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c72:	f7ff fe81 	bl	8006978 <HAL_RCC_GetSysClockFreq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	490f      	ldr	r1, [pc, #60]	; (8006cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c84:	5ccb      	ldrb	r3, [r1, r3]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c9a:	5cd3      	ldrb	r3, [r2, r3]
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca6:	4a07      	ldr	r2, [pc, #28]	; (8006cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ca8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006caa:	4a07      	ldr	r2, [pc, #28]	; (8006cc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	0800ac24 	.word	0x0800ac24
 8006cc4:	24000004 	.word	0x24000004
 8006cc8:	24000000 	.word	0x24000000

08006ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cd0:	f7ff ffcc 	bl	8006c6c <HAL_RCC_GetHCLKFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	4904      	ldr	r1, [pc, #16]	; (8006cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	0800ac24 	.word	0x0800ac24

08006cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cfc:	f7ff ffb6 	bl	8006c6c <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	0800ac24 	.word	0x0800ac24

08006d24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d30:	2300      	movs	r3, #0
 8006d32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d03f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d48:	d02a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006d4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d4e:	d824      	bhi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d54:	d018      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d5a:	d81e      	bhi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d64:	d007      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d66:	e018      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d68:	4ba3      	ldr	r3, [pc, #652]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	4aa2      	ldr	r2, [pc, #648]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d74:	e015      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f9d5 	bl	800812c <RCCEx_PLL2_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d86:	e00c      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3324      	adds	r3, #36	; 0x24
 8006d8c:	2102      	movs	r1, #2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fa7e 	bl	8008290 <RCCEx_PLL3_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006d98:	e003      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9e:	e000      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006da8:	4b93      	ldr	r3, [pc, #588]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db4:	4990      	ldr	r1, [pc, #576]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	650b      	str	r3, [r1, #80]	; 0x50
 8006dba:	e001      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03d      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d826      	bhi.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006dff 	.word	0x08006dff
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e29 	.word	0x08006e29
 8006dec:	08006e29 	.word	0x08006e29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df0:	4b81      	ldr	r3, [pc, #516]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	4a80      	ldr	r2, [pc, #512]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dfc:	e015      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f991 	bl	800812c <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e0e:	e00c      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3324      	adds	r3, #36	; 0x24
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 fa3a 	bl	8008290 <RCCEx_PLL3_Config>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e20:	e003      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
      break;
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d109      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e30:	4b71      	ldr	r3, [pc, #452]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e34:	f023 0207 	bic.w	r2, r3, #7
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	496e      	ldr	r1, [pc, #440]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	650b      	str	r3, [r1, #80]	; 0x50
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d042      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5c:	d02b      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e62:	d825      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e64:	2bc0      	cmp	r3, #192	; 0xc0
 8006e66:	d028      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e68:	2bc0      	cmp	r3, #192	; 0xc0
 8006e6a:	d821      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d016      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006e70:	2b80      	cmp	r3, #128	; 0x80
 8006e72:	d81d      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d007      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006e7c:	e018      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7e:	4b5e      	ldr	r3, [pc, #376]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	4a5d      	ldr	r2, [pc, #372]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e8a:	e017      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f94a 	bl	800812c <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e00e      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 f9f3 	bl	8008290 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006eae:	e005      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ec2:	4b4d      	ldr	r3, [pc, #308]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ece:	494a      	ldr	r1, [pc, #296]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ed4:	e001      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d049      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef0:	d030      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef6:	d82a      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006efc:	d02c      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006efe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f02:	d824      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f08:	d018      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f0e:	d81e      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f18:	d007      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f1a:	e018      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b36      	ldr	r3, [pc, #216]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a35      	ldr	r2, [pc, #212]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f28:	e017      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f8fb 	bl	800812c <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f3a:	e00e      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 f9a4 	bl	8008290 <RCCEx_PLL3_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4c:	e005      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f54:	bf00      	nop
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f60:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f6e:	4922      	ldr	r1, [pc, #136]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	658b      	str	r3, [r1, #88]	; 0x58
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d04b      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f90:	d030      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f96:	d82a      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f9c:	d02e      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fa2:	d824      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa8:	d018      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fae:	d81e      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fb8:	d007      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006fba:	e018      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc8:	e019      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2100      	movs	r1, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f8ab 	bl	800812c <RCCEx_PLL2_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006fda:	e010      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f954 	bl	8008290 <RCCEx_PLL3_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fec:	e007      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff2:	e004      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006ff4:	bf00      	nop
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ff8:	58024400 	.word	0x58024400
      break;
 8006ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007004:	4b99      	ldr	r3, [pc, #612]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007008:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007012:	4996      	ldr	r1, [pc, #600]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007014:	4313      	orrs	r3, r2
 8007016:	658b      	str	r3, [r1, #88]	; 0x58
 8007018:	e001      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d032      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702e:	2b30      	cmp	r3, #48	; 0x30
 8007030:	d01c      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007032:	2b30      	cmp	r3, #48	; 0x30
 8007034:	d817      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007036:	2b20      	cmp	r3, #32
 8007038:	d00c      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800703a:	2b20      	cmp	r3, #32
 800703c:	d813      	bhi.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d016      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007042:	2b10      	cmp	r3, #16
 8007044:	d10f      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007046:	4b89      	ldr	r3, [pc, #548]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	4a88      	ldr	r2, [pc, #544]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800704c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007052:	e00e      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	2102      	movs	r1, #2
 800705a:	4618      	mov	r0, r3
 800705c:	f001 f866 	bl	800812c <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007064:	e005      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]
      break;
 800706a:	e002      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007078:	4b7c      	ldr	r3, [pc, #496]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800707a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007084:	4979      	ldr	r1, [pc, #484]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007086:	4313      	orrs	r3, r2
 8007088:	64cb      	str	r3, [r1, #76]	; 0x4c
 800708a:	e001      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d047      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a4:	d030      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80070a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070aa:	d82a      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070b0:	d02c      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80070b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070b6:	d824      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070bc:	d018      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80070be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c2:	d81e      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	d007      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80070ce:	e018      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d0:	4b66      	ldr	r3, [pc, #408]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4a65      	ldr	r2, [pc, #404]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070dc:	e017      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f821 	bl	800812c <RCCEx_PLL2_Config>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80070ee:	e00e      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3324      	adds	r3, #36	; 0x24
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f001 f8ca 	bl	8008290 <RCCEx_PLL3_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007100:	e005      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]
      break;
 8007106:	e002      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007114:	4b55      	ldr	r3, [pc, #340]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	4952      	ldr	r1, [pc, #328]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007122:	4313      	orrs	r3, r2
 8007124:	650b      	str	r3, [r1, #80]	; 0x50
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d049      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007140:	d02e      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007146:	d828      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800714c:	d02a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800714e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007152:	d822      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007158:	d026      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800715a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800715e:	d81c      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007164:	d010      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800716a:	d816      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01d      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007174:	d111      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	2101      	movs	r1, #1
 800717c:	4618      	mov	r0, r3
 800717e:	f000 ffd5 	bl	800812c <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007186:	e012      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3324      	adds	r3, #36	; 0x24
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f87e 	bl	8008290 <RCCEx_PLL3_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007198:	e009      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
      break;
 800719e:	e006      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071a0:	bf00      	nop
 80071a2:	e004      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80071ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d109      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071b4:	4b2d      	ldr	r3, [pc, #180]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c0:	492a      	ldr	r1, [pc, #168]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	650b      	str	r3, [r1, #80]	; 0x50
 80071c6:	e001      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d04d      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071e2:	d02e      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80071e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071e8:	d828      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d02a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d822      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80071f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071fa:	d026      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80071fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007200:	d81c      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007206:	d010      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800720c:	d816      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01d      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007216:	d111      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	2101      	movs	r1, #1
 800721e:	4618      	mov	r0, r3
 8007220:	f000 ff84 	bl	800812c <RCCEx_PLL2_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007228:	e012      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3324      	adds	r3, #36	; 0x24
 800722e:	2101      	movs	r1, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f001 f82d 	bl	8008290 <RCCEx_PLL3_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800723a:	e009      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
      break;
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007242:	bf00      	nop
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800724e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007264:	4901      	ldr	r1, [pc, #4]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007266:	4313      	orrs	r3, r2
 8007268:	658b      	str	r3, [r1, #88]	; 0x58
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800726c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d02f      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007288:	d00e      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800728a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800728e:	d814      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d015      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007298:	d10f      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729a:	4baf      	ldr	r3, [pc, #700]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	4aae      	ldr	r2, [pc, #696]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072a6:	e00c      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3304      	adds	r3, #4
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ff3c 	bl	800812c <RCCEx_PLL2_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072b8:	e003      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
      break;
 80072be:	e000      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80072c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072c8:	4ba3      	ldr	r3, [pc, #652]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	49a0      	ldr	r1, [pc, #640]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	650b      	str	r3, [r1, #80]	; 0x50
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d032      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d81b      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007333 	.word	0x08007333
 8007300:	0800730d 	.word	0x0800730d
 8007304:	0800731b 	.word	0x0800731b
 8007308:	08007333 	.word	0x08007333
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	4a91      	ldr	r2, [pc, #580]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007318:	e00c      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	2102      	movs	r1, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f000 ff03 	bl	800812c <RCCEx_PLL2_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800732a:	e003      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	75fb      	strb	r3, [r7, #23]
      break;
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800733a:	4b87      	ldr	r3, [pc, #540]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	4984      	ldr	r1, [pc, #528]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007348:	4313      	orrs	r3, r2
 800734a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800734c:	e001      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8086 	beq.w	800746c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007360:	4b7e      	ldr	r3, [pc, #504]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a7d      	ldr	r2, [pc, #500]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800736a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800736c:	f7fb f99a 	bl	80026a4 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007372:	e009      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007374:	f7fb f996 	bl	80026a4 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b64      	cmp	r3, #100	; 0x64
 8007380:	d902      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	75fb      	strb	r3, [r7, #23]
        break;
 8007386:	e005      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007388:	4b74      	ldr	r3, [pc, #464]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ef      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d166      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800739a:	4b6f      	ldr	r3, [pc, #444]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800739c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073a4:	4053      	eors	r3, r2
 80073a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d013      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073ae:	4b6a      	ldr	r3, [pc, #424]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073b8:	4b67      	ldr	r3, [pc, #412]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	4a66      	ldr	r2, [pc, #408]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073c4:	4b64      	ldr	r3, [pc, #400]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	4a63      	ldr	r2, [pc, #396]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073d0:	4a61      	ldr	r2, [pc, #388]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e0:	d115      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fb f95f 	bl	80026a4 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073e8:	e00b      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fb f95b 	bl	80026a4 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d902      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007400:	e005      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0ed      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d126      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800741a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007422:	d10d      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007424:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007432:	0919      	lsrs	r1, r3, #4
 8007434:	4b4a      	ldr	r3, [pc, #296]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007436:	400b      	ands	r3, r1
 8007438:	4947      	ldr	r1, [pc, #284]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800743a:	4313      	orrs	r3, r2
 800743c:	610b      	str	r3, [r1, #16]
 800743e:	e005      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007440:	4b45      	ldr	r3, [pc, #276]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	4a44      	ldr	r2, [pc, #272]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007446:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800744a:	6113      	str	r3, [r2, #16]
 800744c:	4b42      	ldr	r3, [pc, #264]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800744e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800745a:	493f      	ldr	r1, [pc, #252]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800745c:	4313      	orrs	r3, r2
 800745e:	670b      	str	r3, [r1, #112]	; 0x70
 8007460:	e004      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	75bb      	strb	r3, [r7, #22]
 8007466:	e001      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8085 	beq.w	8007584 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747e:	2b28      	cmp	r3, #40	; 0x28
 8007480:	d866      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007482:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	08007565 	.word	0x08007565
 800748c:	08007551 	.word	0x08007551
 8007490:	08007551 	.word	0x08007551
 8007494:	08007551 	.word	0x08007551
 8007498:	08007551 	.word	0x08007551
 800749c:	08007551 	.word	0x08007551
 80074a0:	08007551 	.word	0x08007551
 80074a4:	08007551 	.word	0x08007551
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	08007551 	.word	0x08007551
 80074b0:	08007551 	.word	0x08007551
 80074b4:	08007551 	.word	0x08007551
 80074b8:	08007551 	.word	0x08007551
 80074bc:	08007551 	.word	0x08007551
 80074c0:	08007551 	.word	0x08007551
 80074c4:	08007551 	.word	0x08007551
 80074c8:	0800753f 	.word	0x0800753f
 80074cc:	08007551 	.word	0x08007551
 80074d0:	08007551 	.word	0x08007551
 80074d4:	08007551 	.word	0x08007551
 80074d8:	08007551 	.word	0x08007551
 80074dc:	08007551 	.word	0x08007551
 80074e0:	08007551 	.word	0x08007551
 80074e4:	08007551 	.word	0x08007551
 80074e8:	08007565 	.word	0x08007565
 80074ec:	08007551 	.word	0x08007551
 80074f0:	08007551 	.word	0x08007551
 80074f4:	08007551 	.word	0x08007551
 80074f8:	08007551 	.word	0x08007551
 80074fc:	08007551 	.word	0x08007551
 8007500:	08007551 	.word	0x08007551
 8007504:	08007551 	.word	0x08007551
 8007508:	08007565 	.word	0x08007565
 800750c:	08007551 	.word	0x08007551
 8007510:	08007551 	.word	0x08007551
 8007514:	08007551 	.word	0x08007551
 8007518:	08007551 	.word	0x08007551
 800751c:	08007551 	.word	0x08007551
 8007520:	08007551 	.word	0x08007551
 8007524:	08007551 	.word	0x08007551
 8007528:	08007565 	.word	0x08007565
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	2101      	movs	r1, #1
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fdfa 	bl	800812c <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800753c:	e013      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3324      	adds	r3, #36	; 0x24
 8007542:	2101      	movs	r1, #1
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fea3 	bl	8008290 <RCCEx_PLL3_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800754e:	e00a      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	e007      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007556:	bf00      	nop
 8007558:	58024400 	.word	0x58024400
 800755c:	58024800 	.word	0x58024800
 8007560:	00ffffcf 	.word	0x00ffffcf
      break;
 8007564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800756c:	4b96      	ldr	r3, [pc, #600]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007578:	4993      	ldr	r1, [pc, #588]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	654b      	str	r3, [r1, #84]	; 0x54
 800757e:	e001      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d038      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007594:	2b05      	cmp	r3, #5
 8007596:	d821      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075e3 	.word	0x080075e3
 80075a4:	080075b9 	.word	0x080075b9
 80075a8:	080075cb 	.word	0x080075cb
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	2101      	movs	r1, #1
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fdb4 	bl	800812c <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075c8:	e00c      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3324      	adds	r3, #36	; 0x24
 80075ce:	2101      	movs	r1, #1
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fe5d 	bl	8008290 <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075da:	e003      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
      break;
 80075e0:	e000      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80075e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075ea:	4b77      	ldr	r3, [pc, #476]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f023 0207 	bic.w	r2, r3, #7
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f6:	4974      	ldr	r1, [pc, #464]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	654b      	str	r3, [r1, #84]	; 0x54
 80075fc:	e001      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007614:	2b05      	cmp	r3, #5
 8007616:	d821      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007663 	.word	0x08007663
 8007624:	08007639 	.word	0x08007639
 8007628:	0800764b 	.word	0x0800764b
 800762c:	08007663 	.word	0x08007663
 8007630:	08007663 	.word	0x08007663
 8007634:	08007663 	.word	0x08007663
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	2101      	movs	r1, #1
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fd74 	bl	800812c <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007648:	e00c      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3324      	adds	r3, #36	; 0x24
 800764e:	2101      	movs	r1, #1
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fe1d 	bl	8008290 <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800765a:	e003      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	e000      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800766a:	4b57      	ldr	r3, [pc, #348]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800766c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766e:	f023 0207 	bic.w	r2, r3, #7
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007678:	4953      	ldr	r1, [pc, #332]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800767a:	4313      	orrs	r3, r2
 800767c:	658b      	str	r3, [r1, #88]	; 0x58
 800767e:	e001      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d04b      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007696:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769a:	d02e      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800769c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076a0:	d828      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d02a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80076a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ac:	d822      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076b2:	d026      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80076b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076b8:	d81c      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076be:	d010      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80076c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c4:	d816      	bhi.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01d      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ce:	d111      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fd28 	bl	800812c <RCCEx_PLL2_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076e0:	e012      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3324      	adds	r3, #36	; 0x24
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fdd1 	bl	8008290 <RCCEx_PLL3_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076f2:	e009      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	75fb      	strb	r3, [r7, #23]
      break;
 80076f8:	e006      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80076fa:	bf00      	nop
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800770e:	4b2e      	ldr	r3, [pc, #184]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800771c:	492a      	ldr	r1, [pc, #168]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800771e:	4313      	orrs	r3, r2
 8007720:	654b      	str	r3, [r1, #84]	; 0x54
 8007722:	e001      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d04d      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800773a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800773e:	d02e      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007740:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007744:	d828      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774a:	d02a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007750:	d822      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007756:	d026      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775c:	d81c      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800775e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007762:	d010      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d816      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01d      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d111      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fcd6 	bl	800812c <RCCEx_PLL2_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007784:	e012      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3324      	adds	r3, #36	; 0x24
 800778a:	2102      	movs	r1, #2
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fd7f 	bl	8008290 <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007796:	e009      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
      break;
 800779c:	e006      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80077aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10c      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077c0:	4901      	ldr	r1, [pc, #4]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	658b      	str	r3, [r1, #88]	; 0x58
 80077c6:	e003      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80077c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d04b      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077e6:	d02e      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80077e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077ec:	d828      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80077ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f2:	d02a      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80077f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f8:	d822      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80077fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077fe:	d026      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007800:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007804:	d81c      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800780a:	d010      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800780c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007810:	d816      	bhi.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01d      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800781a:	d111      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fc82 	bl	800812c <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800782c:	e012      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3324      	adds	r3, #36	; 0x24
 8007832:	2102      	movs	r1, #2
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fd2b 	bl	8008290 <RCCEx_PLL3_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800783e:	e009      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
      break;
 8007844:	e006      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007846:	bf00      	nop
 8007848:	e004      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800785a:	4b9d      	ldr	r3, [pc, #628]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007868:	4999      	ldr	r1, [pc, #612]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800786a:	4313      	orrs	r3, r2
 800786c:	658b      	str	r3, [r1, #88]	; 0x58
 800786e:	e001      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788a:	d10a      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3324      	adds	r3, #36	; 0x24
 8007890:	2102      	movs	r1, #2
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fcfc 	bl	8008290 <RCCEx_PLL3_Config>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078a2:	4b8b      	ldr	r3, [pc, #556]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b0:	4987      	ldr	r1, [pc, #540]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d01a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3324      	adds	r3, #36	; 0x24
 80078d2:	2102      	movs	r1, #2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fcdb 	bl	8008290 <RCCEx_PLL3_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078e4:	4b7a      	ldr	r3, [pc, #488]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f2:	4977      	ldr	r1, [pc, #476]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d034      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800790a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800790e:	d01d      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007914:	d817      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791e:	d009      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007920:	e011      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fbff 	bl	800812c <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007932:	e00c      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3324      	adds	r3, #36	; 0x24
 8007938:	2102      	movs	r1, #2
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fca8 	bl	8008290 <RCCEx_PLL3_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
      break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007954:	4b5e      	ldr	r3, [pc, #376]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007962:	495b      	ldr	r1, [pc, #364]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007964:	4313      	orrs	r3, r2
 8007966:	658b      	str	r3, [r1, #88]	; 0x58
 8007968:	e001      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d033      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007984:	d01c      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800798a:	d816      	bhi.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800798c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007990:	d003      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007996:	d007      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007998:	e00f      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799a:	4b4d      	ldr	r3, [pc, #308]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	4a4c      	ldr	r2, [pc, #304]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80079a6:	e00c      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3324      	adds	r3, #36	; 0x24
 80079ac:	2101      	movs	r1, #1
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fc6e 	bl	8008290 <RCCEx_PLL3_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80079b8:	e003      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
      break;
 80079be:	e000      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80079c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079c8:	4b41      	ldr	r3, [pc, #260]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d6:	493e      	ldr	r1, [pc, #248]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	654b      	str	r3, [r1, #84]	; 0x54
 80079dc:	e001      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d029      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80079f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fa:	d007      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80079fc:	e00f      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fe:	4b34      	ldr	r3, [pc, #208]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	4a33      	ldr	r2, [pc, #204]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fb8a 	bl	800812c <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007a1c:	e002      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	75fb      	strb	r3, [r7, #23]
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a2a:	4b29      	ldr	r3, [pc, #164]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	4926      	ldr	r1, [pc, #152]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a3c:	e001      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3324      	adds	r3, #36	; 0x24
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fc1b 	bl	8008290 <RCCEx_PLL3_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d033      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a78:	d017      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a7e:	d811      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d013      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8a:	d80b      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d010      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a94:	d106      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a96:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007aa2:	e007      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa8:	e004      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007aaa:	bf00      	nop
 8007aac:	e002      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e000      	b.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac6:	4902      	ldr	r1, [pc, #8]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	654b      	str	r3, [r1, #84]	; 0x54
 8007acc:	e004      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007ace:	bf00      	nop
 8007ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ae4:	4b31      	ldr	r3, [pc, #196]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	492e      	ldr	r1, [pc, #184]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b02:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b10:	4926      	ldr	r1, [pc, #152]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b22:	4b22      	ldr	r3, [pc, #136]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b2e:	491f      	ldr	r1, [pc, #124]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00d      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b4a:	6113      	str	r3, [r2, #16]
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b56:	4915      	ldr	r1, [pc, #84]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da08      	bge.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b64:	4b11      	ldr	r3, [pc, #68]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	490e      	ldr	r1, [pc, #56]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b90:	4906      	ldr	r1, [pc, #24]	; (8007bac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007b96:	7dbb      	ldrb	r3, [r7, #22]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	58024400 	.word	0x58024400

08007bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bb4:	f7ff f85a 	bl	8006c6c <HAL_RCC_GetHCLKFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	091b      	lsrs	r3, r3, #4
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bc6:	5ccb      	ldrb	r3, [r1, r3]
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	0800ac24 	.word	0x0800ac24

08007bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be4:	4ba1      	ldr	r3, [pc, #644]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007bee:	4b9f      	ldr	r3, [pc, #636]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	0b1b      	lsrs	r3, r3, #12
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bfa:	4b9c      	ldr	r3, [pc, #624]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c06:	4b99      	ldr	r3, [pc, #612]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8111 	beq.w	8007e4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	f000 8083 	beq.w	8007d38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f200 80a1 	bhi.w	8007d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d056      	beq.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c46:	e099      	b.n	8007d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c48:	4b88      	ldr	r3, [pc, #544]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d02d      	beq.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c54:	4b85      	ldr	r3, [pc, #532]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a84      	ldr	r2, [pc, #528]	; (8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007cae:	e087      	b.n	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b6a      	ldr	r3, [pc, #424]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cf2:	e065      	b.n	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d36:	e043      	b.n	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4a:	4b48      	ldr	r3, [pc, #288]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d7a:	e021      	b.n	8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de6:	ee17 2a90 	vmov	r2, s15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007dee:	4b1f      	ldr	r3, [pc, #124]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	0c1b      	lsrs	r3, r3, #16
 8007df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e14:	ee17 2a90 	vmov	r2, s15
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	0e1b      	lsrs	r3, r3, #24
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e42:	ee17 2a90 	vmov	r2, s15
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e4a:	e008      	b.n	8007e5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	3724      	adds	r7, #36	; 0x24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	03d09000 	.word	0x03d09000
 8007e74:	46000000 	.word	0x46000000
 8007e78:	4c742400 	.word	0x4c742400
 8007e7c:	4a742400 	.word	0x4a742400
 8007e80:	4af42400 	.word	0x4af42400

08007e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e8c:	4ba1      	ldr	r3, [pc, #644]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007e96:	4b9f      	ldr	r3, [pc, #636]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	0d1b      	lsrs	r3, r3, #20
 8007e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ea2:	4b9c      	ldr	r3, [pc, #624]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	0a1b      	lsrs	r3, r3, #8
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007eae:	4b99      	ldr	r3, [pc, #612]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8111 	beq.w	80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	f000 8083 	beq.w	8007fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	f200 80a1 	bhi.w	8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d056      	beq.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007eee:	e099      	b.n	8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ef0:	4b88      	ldr	r3, [pc, #544]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02d      	beq.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007efc:	4b85      	ldr	r3, [pc, #532]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	08db      	lsrs	r3, r3, #3
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	4a84      	ldr	r2, [pc, #528]	; (8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f26:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f56:	e087      	b.n	8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6a:	4b6a      	ldr	r3, [pc, #424]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9a:	e065      	b.n	8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fae:	4b59      	ldr	r3, [pc, #356]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fde:	e043      	b.n	8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff2:	4b48      	ldr	r3, [pc, #288]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008002:	ed97 6a03 	vldr	s12, [r7, #12]
 8008006:	eddf 5a45 	vldr	s11, [pc, #276]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800800a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008022:	e021      	b.n	8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008036:	4b37      	ldr	r3, [pc, #220]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a03 	vldr	s12, [r7, #12]
 800804a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800811c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008068:	4b2a      	ldr	r3, [pc, #168]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	0a5b      	lsrs	r3, r3, #9
 800806e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800807e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008082:	edd7 6a07 	vldr	s13, [r7, #28]
 8008086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800808a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808e:	ee17 2a90 	vmov	r2, s15
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008096:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a0:	ee07 3a90 	vmov	s15, r3
 80080a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080bc:	ee17 2a90 	vmov	r2, s15
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80080c4:	4b13      	ldr	r3, [pc, #76]	; (8008114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080de:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ea:	ee17 2a90 	vmov	r2, s15
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080f2:	e008      	b.n	8008106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	609a      	str	r2, [r3, #8]
}
 8008106:	bf00      	nop
 8008108:	3724      	adds	r7, #36	; 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	58024400 	.word	0x58024400
 8008118:	03d09000 	.word	0x03d09000
 800811c:	46000000 	.word	0x46000000
 8008120:	4c742400 	.word	0x4c742400
 8008124:	4a742400 	.word	0x4a742400
 8008128:	4af42400 	.word	0x4af42400

0800812c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800813a:	4b53      	ldr	r3, [pc, #332]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b03      	cmp	r3, #3
 8008144:	d101      	bne.n	800814a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e099      	b.n	800827e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800814a:	4b4f      	ldr	r3, [pc, #316]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a4e      	ldr	r2, [pc, #312]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008156:	f7fa faa5 	bl	80026a4 <HAL_GetTick>
 800815a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800815c:	e008      	b.n	8008170 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800815e:	f7fa faa1 	bl	80026a4 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d901      	bls.n	8008170 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e086      	b.n	800827e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008170:	4b45      	ldr	r3, [pc, #276]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f0      	bne.n	800815e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800817c:	4b42      	ldr	r3, [pc, #264]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	031b      	lsls	r3, r3, #12
 800818a:	493f      	ldr	r1, [pc, #252]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800818c:	4313      	orrs	r3, r2
 800818e:	628b      	str	r3, [r1, #40]	; 0x28
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	3b01      	subs	r3, #1
 8008196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	3b01      	subs	r3, #1
 80081a0:	025b      	lsls	r3, r3, #9
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081c0:	4931      	ldr	r1, [pc, #196]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081c6:	4b30      	ldr	r3, [pc, #192]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	492d      	ldr	r1, [pc, #180]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	f023 0220 	bic.w	r2, r3, #32
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	4928      	ldr	r1, [pc, #160]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081ea:	4b27      	ldr	r3, [pc, #156]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	4a26      	ldr	r2, [pc, #152]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	f023 0310 	bic.w	r3, r3, #16
 80081f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 80081f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081fa:	4b24      	ldr	r3, [pc, #144]	; (800828c <RCCEx_PLL2_Config+0x160>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	69d2      	ldr	r2, [r2, #28]
 8008202:	00d2      	lsls	r2, r2, #3
 8008204:	4920      	ldr	r1, [pc, #128]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008206:	4313      	orrs	r3, r2
 8008208:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	4a1e      	ldr	r2, [pc, #120]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008210:	f043 0310 	orr.w	r3, r3, #16
 8008214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a19      	ldr	r2, [pc, #100]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008226:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008228:	e00f      	b.n	800824a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d106      	bne.n	800823e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a14      	ldr	r2, [pc, #80]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800823a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800823c:	e005      	b.n	800824a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	4a11      	ldr	r2, [pc, #68]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a0e      	ldr	r2, [pc, #56]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008256:	f7fa fa25 	bl	80026a4 <HAL_GetTick>
 800825a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800825c:	e008      	b.n	8008270 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800825e:	f7fa fa21 	bl	80026a4 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d901      	bls.n	8008270 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e006      	b.n	800827e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <RCCEx_PLL2_Config+0x15c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f0      	beq.n	800825e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	58024400 	.word	0x58024400
 800828c:	ffff0007 	.word	0xffff0007

08008290 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800829e:	4b53      	ldr	r3, [pc, #332]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d101      	bne.n	80082ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e099      	b.n	80083e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082ae:	4b4f      	ldr	r3, [pc, #316]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a4e      	ldr	r2, [pc, #312]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ba:	f7fa f9f3 	bl	80026a4 <HAL_GetTick>
 80082be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082c0:	e008      	b.n	80082d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082c2:	f7fa f9ef 	bl	80026a4 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e086      	b.n	80083e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d4:	4b45      	ldr	r3, [pc, #276]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	051b      	lsls	r3, r3, #20
 80082ee:	493f      	ldr	r1, [pc, #252]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	628b      	str	r3, [r1, #40]	; 0x28
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	3b01      	subs	r3, #1
 8008304:	025b      	lsls	r3, r3, #9
 8008306:	b29b      	uxth	r3, r3
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	3b01      	subs	r3, #1
 8008310:	041b      	lsls	r3, r3, #16
 8008312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	3b01      	subs	r3, #1
 800831e:	061b      	lsls	r3, r3, #24
 8008320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008324:	4931      	ldr	r1, [pc, #196]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008326:	4313      	orrs	r3, r2
 8008328:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800832a:	4b30      	ldr	r3, [pc, #192]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	492d      	ldr	r1, [pc, #180]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008338:	4313      	orrs	r3, r2
 800833a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	4928      	ldr	r1, [pc, #160]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800834a:	4313      	orrs	r3, r2
 800834c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800834e:	4b27      	ldr	r3, [pc, #156]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008352:	4a26      	ldr	r2, [pc, #152]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800835c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835e:	4b24      	ldr	r3, [pc, #144]	; (80083f0 <RCCEx_PLL3_Config+0x160>)
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	69d2      	ldr	r2, [r2, #28]
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	4920      	ldr	r1, [pc, #128]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800836a:	4313      	orrs	r3, r2
 800836c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800836e:	4b1f      	ldr	r3, [pc, #124]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008380:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	4a19      	ldr	r2, [pc, #100]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800838a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800838c:	e00f      	b.n	80083ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d106      	bne.n	80083a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	4a14      	ldr	r2, [pc, #80]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 800839a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800839e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083a0:	e005      	b.n	80083ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	4a11      	ldr	r2, [pc, #68]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80083a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a0e      	ldr	r2, [pc, #56]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80083b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ba:	f7fa f973 	bl	80026a4 <HAL_GetTick>
 80083be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083c0:	e008      	b.n	80083d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083c2:	f7fa f96f 	bl	80026a4 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d901      	bls.n	80083d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e006      	b.n	80083e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <RCCEx_PLL3_Config+0x15c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0f0      	beq.n	80083c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
 80083f0:	ffff0007 	.word	0xffff0007

080083f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e0f1      	b.n	80085ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a78      	ldr	r2, [pc, #480]	; (80085f4 <HAL_SPI_Init+0x200>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00f      	beq.n	8008436 <HAL_SPI_Init+0x42>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a77      	ldr	r2, [pc, #476]	; (80085f8 <HAL_SPI_Init+0x204>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00a      	beq.n	8008436 <HAL_SPI_Init+0x42>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a75      	ldr	r2, [pc, #468]	; (80085fc <HAL_SPI_Init+0x208>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d005      	beq.n	8008436 <HAL_SPI_Init+0x42>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	2b0f      	cmp	r3, #15
 8008430:	d901      	bls.n	8008436 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0d9      	b.n	80085ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fba2 	bl	8008b80 <SPI_GetPacketSize>
 800843c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a6c      	ldr	r2, [pc, #432]	; (80085f4 <HAL_SPI_Init+0x200>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00c      	beq.n	8008462 <HAL_SPI_Init+0x6e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a6a      	ldr	r2, [pc, #424]	; (80085f8 <HAL_SPI_Init+0x204>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d007      	beq.n	8008462 <HAL_SPI_Init+0x6e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a69      	ldr	r2, [pc, #420]	; (80085fc <HAL_SPI_Init+0x208>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d002      	beq.n	8008462 <HAL_SPI_Init+0x6e>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b08      	cmp	r3, #8
 8008460:	d811      	bhi.n	8008486 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008466:	4a63      	ldr	r2, [pc, #396]	; (80085f4 <HAL_SPI_Init+0x200>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a61      	ldr	r2, [pc, #388]	; (80085f8 <HAL_SPI_Init+0x204>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_SPI_Init+0x8c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a60      	ldr	r2, [pc, #384]	; (80085fc <HAL_SPI_Init+0x208>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d104      	bne.n	800848a <HAL_SPI_Init+0x96>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b10      	cmp	r3, #16
 8008484:	d901      	bls.n	800848a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e0af      	b.n	80085ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7f9 fe70 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0201 	bic.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80084c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084d0:	d119      	bne.n	8008506 <HAL_SPI_Init+0x112>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084da:	d103      	bne.n	80084e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f4:	d107      	bne.n	8008506 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008504:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69da      	ldr	r2, [r3, #28]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	431a      	orrs	r2, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008518:	ea42 0103 	orr.w	r1, r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	ea42 0103 	orr.w	r1, r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d113      	bne.n	80085a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40013000 	.word	0x40013000
 80085f8:	40003800 	.word	0x40003800
 80085fc:	40003c00 	.word	0x40003c00

08008600 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3320      	adds	r3, #32
 8008616:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_SPI_Transmit+0x2a>
 8008626:	2302      	movs	r3, #2
 8008628:	e1d7      	b.n	80089da <HAL_SPI_Transmit+0x3da>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008632:	f7fa f837 	bl	80026a4 <HAL_GetTick>
 8008636:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	d007      	beq.n	8008654 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008644:	2302      	movs	r3, #2
 8008646:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008650:	7efb      	ldrb	r3, [r7, #27]
 8008652:	e1c2      	b.n	80089da <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <HAL_SPI_Transmit+0x60>
 800865a:	88fb      	ldrh	r3, [r7, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d107      	bne.n	8008670 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800866c:	7efb      	ldrb	r3, [r7, #27]
 800866e:	e1b4      	b.n	80089da <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2203      	movs	r2, #3
 8008674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	88fa      	ldrh	r2, [r7, #6]
 800868a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80086c0:	d107      	bne.n	80086d2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	4b96      	ldr	r3, [pc, #600]	; (8008934 <HAL_SPI_Transmit+0x334>)
 80086da:	4013      	ands	r3, r2
 80086dc:	88f9      	ldrh	r1, [r7, #6]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	430b      	orrs	r3, r1
 80086e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f042 0201 	orr.w	r2, r2, #1
 80086f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086fe:	d107      	bne.n	8008710 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800870e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b0f      	cmp	r3, #15
 8008716:	d947      	bls.n	80087a8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008718:	e03f      	b.n	800879a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b02      	cmp	r3, #2
 8008726:	d114      	bne.n	8008752 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008738:	1d1a      	adds	r2, r3, #4
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008750:	e023      	b.n	800879a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008752:	f7f9 ffa7 	bl	80026a4 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d803      	bhi.n	800876a <HAL_SPI_Transmit+0x16a>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d102      	bne.n	8008770 <HAL_SPI_Transmit+0x170>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d114      	bne.n	800879a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 f937 	bl	80089e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e11f      	b.n	80089da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1b9      	bne.n	800871a <HAL_SPI_Transmit+0x11a>
 80087a6:	e0f2      	b.n	800898e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b07      	cmp	r3, #7
 80087ae:	f240 80e7 	bls.w	8008980 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80087b2:	e05d      	b.n	8008870 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d132      	bne.n	8008828 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d918      	bls.n	8008800 <HAL_SPI_Transmit+0x200>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d014      	beq.n	8008800 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b02      	subs	r3, #2
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087fe:	e037      	b.n	8008870 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008804:	881a      	ldrh	r2, [r3, #0]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	1c9a      	adds	r2, r3, #2
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008826:	e023      	b.n	8008870 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008828:	f7f9 ff3c 	bl	80026a4 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d803      	bhi.n	8008840 <HAL_SPI_Transmit+0x240>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d102      	bne.n	8008846 <HAL_SPI_Transmit+0x246>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d114      	bne.n	8008870 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f8cc 	bl	80089e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e0b4      	b.n	80089da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d19b      	bne.n	80087b4 <HAL_SPI_Transmit+0x1b4>
 800887c:	e087      	b.n	800898e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b02      	cmp	r3, #2
 800888a:	d155      	bne.n	8008938 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b03      	cmp	r3, #3
 8008896:	d918      	bls.n	80088ca <HAL_SPI_Transmit+0x2ca>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	d914      	bls.n	80088ca <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b04      	subs	r3, #4
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80088c8:	e05a      	b.n	8008980 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d917      	bls.n	8008906 <HAL_SPI_Transmit+0x306>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d013      	beq.n	8008906 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	1c9a      	adds	r2, r3, #2
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b02      	subs	r3, #2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008904:	e03c      	b.n	8008980 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3320      	adds	r3, #32
 8008910:	7812      	ldrb	r2, [r2, #0]
 8008912:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008930:	e026      	b.n	8008980 <HAL_SPI_Transmit+0x380>
 8008932:	bf00      	nop
 8008934:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008938:	f7f9 feb4 	bl	80026a4 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d803      	bhi.n	8008950 <HAL_SPI_Transmit+0x350>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d102      	bne.n	8008956 <HAL_SPI_Transmit+0x356>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d114      	bne.n	8008980 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f844 	bl	80089e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800896a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e02c      	b.n	80089da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f af78 	bne.w	800887e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	2108      	movs	r1, #8
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f8c3 	bl	8008b24 <SPI_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089aa:	f043 0220 	orr.w	r2, r3, #32
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f815 	bl	80089e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80089d8:	7efb      	ldrb	r3, [r7, #27]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0208 	orr.w	r2, r2, #8
 8008a02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0210 	orr.w	r2, r2, #16
 8008a12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0201 	bic.w	r2, r2, #1
 8008a22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6919      	ldr	r1, [r3, #16]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b3c      	ldr	r3, [pc, #240]	; (8008b20 <SPI_CloseTransfer+0x13c>)
 8008a30:	400b      	ands	r3, r1
 8008a32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008a42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d014      	beq.n	8008a7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00f      	beq.n	8008a7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	699a      	ldr	r2, [r3, #24]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0220 	orr.w	r2, r2, #32
 8008a78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d014      	beq.n	8008ab0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00f      	beq.n	8008ab0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a96:	f043 0204 	orr.w	r2, r3, #4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00f      	beq.n	8008ada <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac0:	f043 0201 	orr.w	r2, r3, #1
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	699a      	ldr	r2, [r3, #24]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00f      	beq.n	8008b04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	f043 0208 	orr.w	r2, r3, #8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	fffffc90 	.word	0xfffffc90

08008b24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b34:	e010      	b.n	8008b58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b36:	f7f9 fdb5 	bl	80026a4 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d803      	bhi.n	8008b4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d102      	bne.n	8008b54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e00f      	b.n	8008b78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695a      	ldr	r2, [r3, #20]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4013      	ands	r3, r2
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d0df      	beq.n	8008b36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8c:	095b      	lsrs	r3, r3, #5
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	08db      	lsrs	r3, r3, #3
 8008ba0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e042      	b.n	8008c4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7f9 fb3e 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2224      	movs	r2, #36	; 0x24
 8008be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fbeb 	bl	80093d4 <UART_SetConfig>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e022      	b.n	8008c4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f947 	bl	8009ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f042 0201 	orr.w	r2, r2, #1
 8008c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 f9ce 	bl	8009fe8 <UART_CheckIdleState>
 8008c4c:	4603      	mov	r3, r0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0ba      	sub	sp, #232	; 0xe8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c86:	4013      	ands	r3, r2
 8008c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11b      	bne.n	8008ccc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 835a 	beq.w	8009376 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
      }
      return;
 8008cca:	e354      	b.n	8009376 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 811f 	beq.w	8008f14 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008cda:	4b8b      	ldr	r3, [pc, #556]	; (8008f08 <HAL_UART_IRQHandler+0x2b0>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ce6:	4b89      	ldr	r3, [pc, #548]	; (8008f0c <HAL_UART_IRQHandler+0x2b4>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8112 	beq.w	8008f14 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d16:	f043 0201 	orr.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d46:	f043 0204 	orr.w	r2, r3, #4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
 8008d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d76:	f043 0202 	orr.w	r2, r3, #2
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d017      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d9c:	4b5a      	ldr	r3, [pc, #360]	; (8008f08 <HAL_UART_IRQHandler+0x2b0>)
 8008d9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2208      	movs	r2, #8
 8008daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db2:	f043 0208 	orr.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 82c0 	beq.w	800937a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d04f      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f9dc 	bl	800a210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d141      	bne.n	8008eea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1d9      	bne.n	8008e66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d013      	beq.n	8008ee2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ebe:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <HAL_UART_IRQHandler+0x2b8>)
 8008ec0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fa fbc6 	bl	8003658 <HAL_DMA_Abort_IT>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d017      	beq.n	8008f02 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee0:	e00f      	b.n	8008f02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa60 	bl	80093a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee8:	e00b      	b.n	8008f02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa5c 	bl	80093a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef0:	e007      	b.n	8008f02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fa58 	bl	80093a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008f00:	e23b      	b.n	800937a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	bf00      	nop
    return;
 8008f04:	e239      	b.n	800937a <HAL_UART_IRQHandler+0x722>
 8008f06:	bf00      	nop
 8008f08:	10000001 	.word	0x10000001
 8008f0c:	04000120 	.word	0x04000120
 8008f10:	0800a2dd 	.word	0x0800a2dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	f040 81ce 	bne.w	80092ba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 81c7 	beq.w	80092ba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 81c0 	beq.w	80092ba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2210      	movs	r2, #16
 8008f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4c:	2b40      	cmp	r3, #64	; 0x40
 8008f4e:	f040 813b 	bne.w	80091c8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a8b      	ldr	r2, [pc, #556]	; (8009188 <HAL_UART_IRQHandler+0x530>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d059      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a89      	ldr	r2, [pc, #548]	; (800918c <HAL_UART_IRQHandler+0x534>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d053      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a87      	ldr	r2, [pc, #540]	; (8009190 <HAL_UART_IRQHandler+0x538>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d04d      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a85      	ldr	r2, [pc, #532]	; (8009194 <HAL_UART_IRQHandler+0x53c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d047      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a83      	ldr	r2, [pc, #524]	; (8009198 <HAL_UART_IRQHandler+0x540>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d041      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a81      	ldr	r2, [pc, #516]	; (800919c <HAL_UART_IRQHandler+0x544>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d03b      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a7f      	ldr	r2, [pc, #508]	; (80091a0 <HAL_UART_IRQHandler+0x548>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d035      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a7d      	ldr	r2, [pc, #500]	; (80091a4 <HAL_UART_IRQHandler+0x54c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d02f      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a7b      	ldr	r2, [pc, #492]	; (80091a8 <HAL_UART_IRQHandler+0x550>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d029      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a79      	ldr	r2, [pc, #484]	; (80091ac <HAL_UART_IRQHandler+0x554>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d023      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a77      	ldr	r2, [pc, #476]	; (80091b0 <HAL_UART_IRQHandler+0x558>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01d      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a75      	ldr	r2, [pc, #468]	; (80091b4 <HAL_UART_IRQHandler+0x55c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d017      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a73      	ldr	r2, [pc, #460]	; (80091b8 <HAL_UART_IRQHandler+0x560>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d011      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a71      	ldr	r2, [pc, #452]	; (80091bc <HAL_UART_IRQHandler+0x564>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00b      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a6f      	ldr	r2, [pc, #444]	; (80091c0 <HAL_UART_IRQHandler+0x568>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d005      	beq.n	8009012 <HAL_UART_IRQHandler+0x3ba>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a6d      	ldr	r2, [pc, #436]	; (80091c4 <HAL_UART_IRQHandler+0x56c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d105      	bne.n	800901e <HAL_UART_IRQHandler+0x3c6>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	b29b      	uxth	r3, r3
 800901c:	e004      	b.n	8009028 <HAL_UART_IRQHandler+0x3d0>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b29b      	uxth	r3, r3
 8009028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800902c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 81a4 	beq.w	800937e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800903c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009040:	429a      	cmp	r2, r3
 8009042:	f080 819c 	bcs.w	800937e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800904c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800905a:	f000 8086 	beq.w	800916a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800907a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800908c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009094:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1da      	bne.n	800905e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e1      	bne.n	80090a8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009108:	66fa      	str	r2, [r7, #108]	; 0x6c
 800910a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800910e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e3      	bne.n	80090e4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913a:	f023 0310 	bic.w	r3, r3, #16
 800913e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800914c:	65bb      	str	r3, [r7, #88]	; 0x58
 800914e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800915a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e4      	bne.n	800912a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009164:	4618      	mov	r0, r3
 8009166:	f7f9 ff59 	bl	800301c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009176:	b29b      	uxth	r3, r3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	b29b      	uxth	r3, r3
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f91c 	bl	80093bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009184:	e0fb      	b.n	800937e <HAL_UART_IRQHandler+0x726>
 8009186:	bf00      	nop
 8009188:	40020010 	.word	0x40020010
 800918c:	40020028 	.word	0x40020028
 8009190:	40020040 	.word	0x40020040
 8009194:	40020058 	.word	0x40020058
 8009198:	40020070 	.word	0x40020070
 800919c:	40020088 	.word	0x40020088
 80091a0:	400200a0 	.word	0x400200a0
 80091a4:	400200b8 	.word	0x400200b8
 80091a8:	40020410 	.word	0x40020410
 80091ac:	40020428 	.word	0x40020428
 80091b0:	40020440 	.word	0x40020440
 80091b4:	40020458 	.word	0x40020458
 80091b8:	40020470 	.word	0x40020470
 80091bc:	40020488 	.word	0x40020488
 80091c0:	400204a0 	.word	0x400204a0
 80091c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 80cc 	beq.w	8009382 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80091ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80c7 	beq.w	8009382 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009216:	647b      	str	r3, [r7, #68]	; 0x44
 8009218:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800921c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e4      	bne.n	80091f4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3308      	adds	r3, #8
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	623b      	str	r3, [r7, #32]
   return(result);
 800923a:	6a3a      	ldr	r2, [r7, #32]
 800923c:	4b54      	ldr	r3, [pc, #336]	; (8009390 <HAL_UART_IRQHandler+0x738>)
 800923e:	4013      	ands	r3, r2
 8009240:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800924e:	633a      	str	r2, [r7, #48]	; 0x30
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e3      	bne.n	800922a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60fb      	str	r3, [r7, #12]
   return(result);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0310 	bic.w	r3, r3, #16
 800928a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009298:	61fb      	str	r3, [r7, #28]
 800929a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	69b9      	ldr	r1, [r7, #24]
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	617b      	str	r3, [r7, #20]
   return(result);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e4      	bne.n	8009276 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f882 	bl	80093bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092b8:	e063      	b.n	8009382 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00e      	beq.n	80092e4 <HAL_UART_IRQHandler+0x68c>
 80092c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d008      	beq.n	80092e4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f83e 	bl	800a35e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092e2:	e051      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d014      	beq.n	800931a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d008      	beq.n	800931a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930c:	2b00      	cmp	r3, #0
 800930e:	d03a      	beq.n	8009386 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	4798      	blx	r3
    }
    return;
 8009318:	e035      	b.n	8009386 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800931a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <HAL_UART_IRQHandler+0x6e2>
 8009326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800932a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 ffe8 	bl	800a308 <UART_EndTransmit_IT>
    return;
 8009338:	e026      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800933a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <HAL_UART_IRQHandler+0x702>
 8009346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800934a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f817 	bl	800a386 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009358:	e016      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800935e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d010      	beq.n	8009388 <HAL_UART_IRQHandler+0x730>
 8009366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936a:	2b00      	cmp	r3, #0
 800936c:	da0c      	bge.n	8009388 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 ffff 	bl	800a372 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009374:	e008      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
      return;
 8009376:	bf00      	nop
 8009378:	e006      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
    return;
 800937a:	bf00      	nop
 800937c:	e004      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
      return;
 800937e:	bf00      	nop
 8009380:	e002      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
      return;
 8009382:	bf00      	nop
 8009384:	e000      	b.n	8009388 <HAL_UART_IRQHandler+0x730>
    return;
 8009386:	bf00      	nop
  }
}
 8009388:	37e8      	adds	r7, #232	; 0xe8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	effffffe 	.word	0xeffffffe

08009394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d8:	b092      	sub	sp, #72	; 0x48
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4bbe      	ldr	r3, [pc, #760]	; (80096fc <UART_SetConfig+0x328>)
 8009404:	4013      	ands	r3, r2
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	6812      	ldr	r2, [r2, #0]
 800940a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800940c:	430b      	orrs	r3, r1
 800940e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4ab3      	ldr	r2, [pc, #716]	; (8009700 <UART_SetConfig+0x32c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800943c:	4313      	orrs	r3, r2
 800943e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	4baf      	ldr	r3, [pc, #700]	; (8009704 <UART_SetConfig+0x330>)
 8009448:	4013      	ands	r3, r2
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009450:	430b      	orrs	r3, r1
 8009452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	f023 010f 	bic.w	r1, r3, #15
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4aa6      	ldr	r2, [pc, #664]	; (8009708 <UART_SetConfig+0x334>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d177      	bne.n	8009564 <UART_SetConfig+0x190>
 8009474:	4ba5      	ldr	r3, [pc, #660]	; (800970c <UART_SetConfig+0x338>)
 8009476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800947c:	2b28      	cmp	r3, #40	; 0x28
 800947e:	d86d      	bhi.n	800955c <UART_SetConfig+0x188>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <UART_SetConfig+0xb4>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	0800952d 	.word	0x0800952d
 800948c:	0800955d 	.word	0x0800955d
 8009490:	0800955d 	.word	0x0800955d
 8009494:	0800955d 	.word	0x0800955d
 8009498:	0800955d 	.word	0x0800955d
 800949c:	0800955d 	.word	0x0800955d
 80094a0:	0800955d 	.word	0x0800955d
 80094a4:	0800955d 	.word	0x0800955d
 80094a8:	08009535 	.word	0x08009535
 80094ac:	0800955d 	.word	0x0800955d
 80094b0:	0800955d 	.word	0x0800955d
 80094b4:	0800955d 	.word	0x0800955d
 80094b8:	0800955d 	.word	0x0800955d
 80094bc:	0800955d 	.word	0x0800955d
 80094c0:	0800955d 	.word	0x0800955d
 80094c4:	0800955d 	.word	0x0800955d
 80094c8:	0800953d 	.word	0x0800953d
 80094cc:	0800955d 	.word	0x0800955d
 80094d0:	0800955d 	.word	0x0800955d
 80094d4:	0800955d 	.word	0x0800955d
 80094d8:	0800955d 	.word	0x0800955d
 80094dc:	0800955d 	.word	0x0800955d
 80094e0:	0800955d 	.word	0x0800955d
 80094e4:	0800955d 	.word	0x0800955d
 80094e8:	08009545 	.word	0x08009545
 80094ec:	0800955d 	.word	0x0800955d
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	0800955d 	.word	0x0800955d
 80094f8:	0800955d 	.word	0x0800955d
 80094fc:	0800955d 	.word	0x0800955d
 8009500:	0800955d 	.word	0x0800955d
 8009504:	0800955d 	.word	0x0800955d
 8009508:	0800954d 	.word	0x0800954d
 800950c:	0800955d 	.word	0x0800955d
 8009510:	0800955d 	.word	0x0800955d
 8009514:	0800955d 	.word	0x0800955d
 8009518:	0800955d 	.word	0x0800955d
 800951c:	0800955d 	.word	0x0800955d
 8009520:	0800955d 	.word	0x0800955d
 8009524:	0800955d 	.word	0x0800955d
 8009528:	08009555 	.word	0x08009555
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009532:	e222      	b.n	800997a <UART_SetConfig+0x5a6>
 8009534:	2304      	movs	r3, #4
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953a:	e21e      	b.n	800997a <UART_SetConfig+0x5a6>
 800953c:	2308      	movs	r3, #8
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009542:	e21a      	b.n	800997a <UART_SetConfig+0x5a6>
 8009544:	2310      	movs	r3, #16
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e216      	b.n	800997a <UART_SetConfig+0x5a6>
 800954c:	2320      	movs	r3, #32
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e212      	b.n	800997a <UART_SetConfig+0x5a6>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e20e      	b.n	800997a <UART_SetConfig+0x5a6>
 800955c:	2380      	movs	r3, #128	; 0x80
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	e20a      	b.n	800997a <UART_SetConfig+0x5a6>
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a69      	ldr	r2, [pc, #420]	; (8009710 <UART_SetConfig+0x33c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d130      	bne.n	80095d0 <UART_SetConfig+0x1fc>
 800956e:	4b67      	ldr	r3, [pc, #412]	; (800970c <UART_SetConfig+0x338>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	2b05      	cmp	r3, #5
 8009578:	d826      	bhi.n	80095c8 <UART_SetConfig+0x1f4>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <UART_SetConfig+0x1ac>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	08009599 	.word	0x08009599
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095a9 	.word	0x080095a9
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b9 	.word	0x080095b9
 8009594:	080095c1 	.word	0x080095c1
 8009598:	2300      	movs	r3, #0
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959e:	e1ec      	b.n	800997a <UART_SetConfig+0x5a6>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a6:	e1e8      	b.n	800997a <UART_SetConfig+0x5a6>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ae:	e1e4      	b.n	800997a <UART_SetConfig+0x5a6>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b6:	e1e0      	b.n	800997a <UART_SetConfig+0x5a6>
 80095b8:	2320      	movs	r3, #32
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095be:	e1dc      	b.n	800997a <UART_SetConfig+0x5a6>
 80095c0:	2340      	movs	r3, #64	; 0x40
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c6:	e1d8      	b.n	800997a <UART_SetConfig+0x5a6>
 80095c8:	2380      	movs	r3, #128	; 0x80
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ce:	e1d4      	b.n	800997a <UART_SetConfig+0x5a6>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a4f      	ldr	r2, [pc, #316]	; (8009714 <UART_SetConfig+0x340>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d130      	bne.n	800963c <UART_SetConfig+0x268>
 80095da:	4b4c      	ldr	r3, [pc, #304]	; (800970c <UART_SetConfig+0x338>)
 80095dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d826      	bhi.n	8009634 <UART_SetConfig+0x260>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <UART_SetConfig+0x218>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009605 	.word	0x08009605
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	08009615 	.word	0x08009615
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009625 	.word	0x08009625
 8009600:	0800962d 	.word	0x0800962d
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960a:	e1b6      	b.n	800997a <UART_SetConfig+0x5a6>
 800960c:	2304      	movs	r3, #4
 800960e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009612:	e1b2      	b.n	800997a <UART_SetConfig+0x5a6>
 8009614:	2308      	movs	r3, #8
 8009616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961a:	e1ae      	b.n	800997a <UART_SetConfig+0x5a6>
 800961c:	2310      	movs	r3, #16
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009622:	e1aa      	b.n	800997a <UART_SetConfig+0x5a6>
 8009624:	2320      	movs	r3, #32
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962a:	e1a6      	b.n	800997a <UART_SetConfig+0x5a6>
 800962c:	2340      	movs	r3, #64	; 0x40
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e1a2      	b.n	800997a <UART_SetConfig+0x5a6>
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e19e      	b.n	800997a <UART_SetConfig+0x5a6>
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a35      	ldr	r2, [pc, #212]	; (8009718 <UART_SetConfig+0x344>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d130      	bne.n	80096a8 <UART_SetConfig+0x2d4>
 8009646:	4b31      	ldr	r3, [pc, #196]	; (800970c <UART_SetConfig+0x338>)
 8009648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	2b05      	cmp	r3, #5
 8009650:	d826      	bhi.n	80096a0 <UART_SetConfig+0x2cc>
 8009652:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x284>)
 8009654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009658:	08009671 	.word	0x08009671
 800965c:	08009679 	.word	0x08009679
 8009660:	08009681 	.word	0x08009681
 8009664:	08009689 	.word	0x08009689
 8009668:	08009691 	.word	0x08009691
 800966c:	08009699 	.word	0x08009699
 8009670:	2300      	movs	r3, #0
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009676:	e180      	b.n	800997a <UART_SetConfig+0x5a6>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967e:	e17c      	b.n	800997a <UART_SetConfig+0x5a6>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e178      	b.n	800997a <UART_SetConfig+0x5a6>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e174      	b.n	800997a <UART_SetConfig+0x5a6>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009696:	e170      	b.n	800997a <UART_SetConfig+0x5a6>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969e:	e16c      	b.n	800997a <UART_SetConfig+0x5a6>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a6:	e168      	b.n	800997a <UART_SetConfig+0x5a6>
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1b      	ldr	r2, [pc, #108]	; (800971c <UART_SetConfig+0x348>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d142      	bne.n	8009738 <UART_SetConfig+0x364>
 80096b2:	4b16      	ldr	r3, [pc, #88]	; (800970c <UART_SetConfig+0x338>)
 80096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b05      	cmp	r3, #5
 80096bc:	d838      	bhi.n	8009730 <UART_SetConfig+0x35c>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <UART_SetConfig+0x2f0>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096dd 	.word	0x080096dd
 80096c8:	080096e5 	.word	0x080096e5
 80096cc:	080096ed 	.word	0x080096ed
 80096d0:	080096f5 	.word	0x080096f5
 80096d4:	08009721 	.word	0x08009721
 80096d8:	08009729 	.word	0x08009729
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e2:	e14a      	b.n	800997a <UART_SetConfig+0x5a6>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ea:	e146      	b.n	800997a <UART_SetConfig+0x5a6>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f2:	e142      	b.n	800997a <UART_SetConfig+0x5a6>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e13e      	b.n	800997a <UART_SetConfig+0x5a6>
 80096fc:	cfff69f3 	.word	0xcfff69f3
 8009700:	58000c00 	.word	0x58000c00
 8009704:	11fff4ff 	.word	0x11fff4ff
 8009708:	40011000 	.word	0x40011000
 800970c:	58024400 	.word	0x58024400
 8009710:	40004400 	.word	0x40004400
 8009714:	40004800 	.word	0x40004800
 8009718:	40004c00 	.word	0x40004c00
 800971c:	40005000 	.word	0x40005000
 8009720:	2320      	movs	r3, #32
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009726:	e128      	b.n	800997a <UART_SetConfig+0x5a6>
 8009728:	2340      	movs	r3, #64	; 0x40
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972e:	e124      	b.n	800997a <UART_SetConfig+0x5a6>
 8009730:	2380      	movs	r3, #128	; 0x80
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009736:	e120      	b.n	800997a <UART_SetConfig+0x5a6>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4acb      	ldr	r2, [pc, #812]	; (8009a6c <UART_SetConfig+0x698>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d176      	bne.n	8009830 <UART_SetConfig+0x45c>
 8009742:	4bcb      	ldr	r3, [pc, #812]	; (8009a70 <UART_SetConfig+0x69c>)
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800974a:	2b28      	cmp	r3, #40	; 0x28
 800974c:	d86c      	bhi.n	8009828 <UART_SetConfig+0x454>
 800974e:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <UART_SetConfig+0x380>)
 8009750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009754:	080097f9 	.word	0x080097f9
 8009758:	08009829 	.word	0x08009829
 800975c:	08009829 	.word	0x08009829
 8009760:	08009829 	.word	0x08009829
 8009764:	08009829 	.word	0x08009829
 8009768:	08009829 	.word	0x08009829
 800976c:	08009829 	.word	0x08009829
 8009770:	08009829 	.word	0x08009829
 8009774:	08009801 	.word	0x08009801
 8009778:	08009829 	.word	0x08009829
 800977c:	08009829 	.word	0x08009829
 8009780:	08009829 	.word	0x08009829
 8009784:	08009829 	.word	0x08009829
 8009788:	08009829 	.word	0x08009829
 800978c:	08009829 	.word	0x08009829
 8009790:	08009829 	.word	0x08009829
 8009794:	08009809 	.word	0x08009809
 8009798:	08009829 	.word	0x08009829
 800979c:	08009829 	.word	0x08009829
 80097a0:	08009829 	.word	0x08009829
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009829 	.word	0x08009829
 80097ac:	08009829 	.word	0x08009829
 80097b0:	08009829 	.word	0x08009829
 80097b4:	08009811 	.word	0x08009811
 80097b8:	08009829 	.word	0x08009829
 80097bc:	08009829 	.word	0x08009829
 80097c0:	08009829 	.word	0x08009829
 80097c4:	08009829 	.word	0x08009829
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009819 	.word	0x08009819
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009829 	.word	0x08009829
 80097e0:	08009829 	.word	0x08009829
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009829 	.word	0x08009829
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009829 	.word	0x08009829
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e0bc      	b.n	800997a <UART_SetConfig+0x5a6>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009806:	e0b8      	b.n	800997a <UART_SetConfig+0x5a6>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e0b4      	b.n	800997a <UART_SetConfig+0x5a6>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e0b0      	b.n	800997a <UART_SetConfig+0x5a6>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e0ac      	b.n	800997a <UART_SetConfig+0x5a6>
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e0a8      	b.n	800997a <UART_SetConfig+0x5a6>
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e0a4      	b.n	800997a <UART_SetConfig+0x5a6>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a8f      	ldr	r2, [pc, #572]	; (8009a74 <UART_SetConfig+0x6a0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d130      	bne.n	800989c <UART_SetConfig+0x4c8>
 800983a:	4b8d      	ldr	r3, [pc, #564]	; (8009a70 <UART_SetConfig+0x69c>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b05      	cmp	r3, #5
 8009844:	d826      	bhi.n	8009894 <UART_SetConfig+0x4c0>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <UART_SetConfig+0x478>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	08009865 	.word	0x08009865
 8009850:	0800986d 	.word	0x0800986d
 8009854:	08009875 	.word	0x08009875
 8009858:	0800987d 	.word	0x0800987d
 800985c:	08009885 	.word	0x08009885
 8009860:	0800988d 	.word	0x0800988d
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986a:	e086      	b.n	800997a <UART_SetConfig+0x5a6>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009872:	e082      	b.n	800997a <UART_SetConfig+0x5a6>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987a:	e07e      	b.n	800997a <UART_SetConfig+0x5a6>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009882:	e07a      	b.n	800997a <UART_SetConfig+0x5a6>
 8009884:	2320      	movs	r3, #32
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988a:	e076      	b.n	800997a <UART_SetConfig+0x5a6>
 800988c:	2340      	movs	r3, #64	; 0x40
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009892:	e072      	b.n	800997a <UART_SetConfig+0x5a6>
 8009894:	2380      	movs	r3, #128	; 0x80
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e06e      	b.n	800997a <UART_SetConfig+0x5a6>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a75      	ldr	r2, [pc, #468]	; (8009a78 <UART_SetConfig+0x6a4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d130      	bne.n	8009908 <UART_SetConfig+0x534>
 80098a6:	4b72      	ldr	r3, [pc, #456]	; (8009a70 <UART_SetConfig+0x69c>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d826      	bhi.n	8009900 <UART_SetConfig+0x52c>
 80098b2:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <UART_SetConfig+0x4e4>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d6:	e050      	b.n	800997a <UART_SetConfig+0x5a6>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098de:	e04c      	b.n	800997a <UART_SetConfig+0x5a6>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e6:	e048      	b.n	800997a <UART_SetConfig+0x5a6>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ee:	e044      	b.n	800997a <UART_SetConfig+0x5a6>
 80098f0:	2320      	movs	r3, #32
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f6:	e040      	b.n	800997a <UART_SetConfig+0x5a6>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fe:	e03c      	b.n	800997a <UART_SetConfig+0x5a6>
 8009900:	2380      	movs	r3, #128	; 0x80
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e038      	b.n	800997a <UART_SetConfig+0x5a6>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a5b      	ldr	r2, [pc, #364]	; (8009a7c <UART_SetConfig+0x6a8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d130      	bne.n	8009974 <UART_SetConfig+0x5a0>
 8009912:	4b57      	ldr	r3, [pc, #348]	; (8009a70 <UART_SetConfig+0x69c>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b05      	cmp	r3, #5
 800991c:	d826      	bhi.n	800996c <UART_SetConfig+0x598>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <UART_SetConfig+0x550>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	0800993d 	.word	0x0800993d
 8009928:	08009945 	.word	0x08009945
 800992c:	0800994d 	.word	0x0800994d
 8009930:	08009955 	.word	0x08009955
 8009934:	0800995d 	.word	0x0800995d
 8009938:	08009965 	.word	0x08009965
 800993c:	2302      	movs	r3, #2
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009942:	e01a      	b.n	800997a <UART_SetConfig+0x5a6>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994a:	e016      	b.n	800997a <UART_SetConfig+0x5a6>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e012      	b.n	800997a <UART_SetConfig+0x5a6>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e00e      	b.n	800997a <UART_SetConfig+0x5a6>
 800995c:	2320      	movs	r3, #32
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e00a      	b.n	800997a <UART_SetConfig+0x5a6>
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996a:	e006      	b.n	800997a <UART_SetConfig+0x5a6>
 800996c:	2380      	movs	r3, #128	; 0x80
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e002      	b.n	800997a <UART_SetConfig+0x5a6>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a3f      	ldr	r2, [pc, #252]	; (8009a7c <UART_SetConfig+0x6a8>)
 8009980:	4293      	cmp	r3, r2
 8009982:	f040 80f8 	bne.w	8009b76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009986:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800998a:	2b20      	cmp	r3, #32
 800998c:	dc46      	bgt.n	8009a1c <UART_SetConfig+0x648>
 800998e:	2b02      	cmp	r3, #2
 8009990:	f2c0 8082 	blt.w	8009a98 <UART_SetConfig+0x6c4>
 8009994:	3b02      	subs	r3, #2
 8009996:	2b1e      	cmp	r3, #30
 8009998:	d87e      	bhi.n	8009a98 <UART_SetConfig+0x6c4>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x5cc>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	08009a23 	.word	0x08009a23
 80099a4:	08009a99 	.word	0x08009a99
 80099a8:	08009a2b 	.word	0x08009a2b
 80099ac:	08009a99 	.word	0x08009a99
 80099b0:	08009a99 	.word	0x08009a99
 80099b4:	08009a99 	.word	0x08009a99
 80099b8:	08009a3b 	.word	0x08009a3b
 80099bc:	08009a99 	.word	0x08009a99
 80099c0:	08009a99 	.word	0x08009a99
 80099c4:	08009a99 	.word	0x08009a99
 80099c8:	08009a99 	.word	0x08009a99
 80099cc:	08009a99 	.word	0x08009a99
 80099d0:	08009a99 	.word	0x08009a99
 80099d4:	08009a99 	.word	0x08009a99
 80099d8:	08009a4b 	.word	0x08009a4b
 80099dc:	08009a99 	.word	0x08009a99
 80099e0:	08009a99 	.word	0x08009a99
 80099e4:	08009a99 	.word	0x08009a99
 80099e8:	08009a99 	.word	0x08009a99
 80099ec:	08009a99 	.word	0x08009a99
 80099f0:	08009a99 	.word	0x08009a99
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009a99 	.word	0x08009a99
 80099fc:	08009a99 	.word	0x08009a99
 8009a00:	08009a99 	.word	0x08009a99
 8009a04:	08009a99 	.word	0x08009a99
 8009a08:	08009a99 	.word	0x08009a99
 8009a0c:	08009a99 	.word	0x08009a99
 8009a10:	08009a99 	.word	0x08009a99
 8009a14:	08009a99 	.word	0x08009a99
 8009a18:	08009a8b 	.word	0x08009a8b
 8009a1c:	2b40      	cmp	r3, #64	; 0x40
 8009a1e:	d037      	beq.n	8009a90 <UART_SetConfig+0x6bc>
 8009a20:	e03a      	b.n	8009a98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a22:	f7fe f8c5 	bl	8007bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a28:	e03c      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe f8d4 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a38:	e034      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3a:	f107 0318 	add.w	r3, r7, #24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fa20 	bl	8007e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a48:	e02c      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a4a:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <UART_SetConfig+0x69c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d016      	beq.n	8009a84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a56:	4b06      	ldr	r3, [pc, #24]	; (8009a70 <UART_SetConfig+0x69c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	08db      	lsrs	r3, r3, #3
 8009a5c:	f003 0303 	and.w	r3, r3, #3
 8009a60:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <UART_SetConfig+0x6ac>)
 8009a62:	fa22 f303 	lsr.w	r3, r2, r3
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a68:	e01c      	b.n	8009aa4 <UART_SetConfig+0x6d0>
 8009a6a:	bf00      	nop
 8009a6c:	40011400 	.word	0x40011400
 8009a70:	58024400 	.word	0x58024400
 8009a74:	40007800 	.word	0x40007800
 8009a78:	40007c00 	.word	0x40007c00
 8009a7c:	58000c00 	.word	0x58000c00
 8009a80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009a84:	4b9d      	ldr	r3, [pc, #628]	; (8009cfc <UART_SetConfig+0x928>)
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a88:	e00c      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a8a:	4b9d      	ldr	r3, [pc, #628]	; (8009d00 <UART_SetConfig+0x92c>)
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a8e:	e009      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a96:	e005      	b.n	8009aa4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 81de 	beq.w	8009e68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	4a94      	ldr	r2, [pc, #592]	; (8009d04 <UART_SetConfig+0x930>)
 8009ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009abe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	4413      	add	r3, r2
 8009aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d305      	bcc.n	8009adc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d903      	bls.n	8009ae4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ae2:	e1c1      	b.n	8009e68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	60fa      	str	r2, [r7, #12]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	4a84      	ldr	r2, [pc, #528]	; (8009d04 <UART_SetConfig+0x930>)
 8009af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2200      	movs	r2, #0
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b06:	f7f6 fbe7 	bl	80002d8 <__aeabi_uldivmod>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	020b      	lsls	r3, r1, #8
 8009b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b20:	0202      	lsls	r2, r0, #8
 8009b22:	6979      	ldr	r1, [r7, #20]
 8009b24:	6849      	ldr	r1, [r1, #4]
 8009b26:	0849      	lsrs	r1, r1, #1
 8009b28:	2000      	movs	r0, #0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	eb12 0804 	adds.w	r8, r2, r4
 8009b32:	eb43 0905 	adc.w	r9, r3, r5
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	469a      	mov	sl, r3
 8009b3e:	4693      	mov	fp, r2
 8009b40:	4652      	mov	r2, sl
 8009b42:	465b      	mov	r3, fp
 8009b44:	4640      	mov	r0, r8
 8009b46:	4649      	mov	r1, r9
 8009b48:	f7f6 fbc6 	bl	80002d8 <__aeabi_uldivmod>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4613      	mov	r3, r2
 8009b52:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b5a:	d308      	bcc.n	8009b6e <UART_SetConfig+0x79a>
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b62:	d204      	bcs.n	8009b6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b6a:	60da      	str	r2, [r3, #12]
 8009b6c:	e17c      	b.n	8009e68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b74:	e178      	b.n	8009e68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b7e:	f040 80c5 	bne.w	8009d0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009b82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	dc48      	bgt.n	8009c1c <UART_SetConfig+0x848>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	db7b      	blt.n	8009c86 <UART_SetConfig+0x8b2>
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d879      	bhi.n	8009c86 <UART_SetConfig+0x8b2>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x7c4>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009c23 	.word	0x08009c23
 8009b9c:	08009c2b 	.word	0x08009c2b
 8009ba0:	08009c87 	.word	0x08009c87
 8009ba4:	08009c87 	.word	0x08009c87
 8009ba8:	08009c33 	.word	0x08009c33
 8009bac:	08009c87 	.word	0x08009c87
 8009bb0:	08009c87 	.word	0x08009c87
 8009bb4:	08009c87 	.word	0x08009c87
 8009bb8:	08009c43 	.word	0x08009c43
 8009bbc:	08009c87 	.word	0x08009c87
 8009bc0:	08009c87 	.word	0x08009c87
 8009bc4:	08009c87 	.word	0x08009c87
 8009bc8:	08009c87 	.word	0x08009c87
 8009bcc:	08009c87 	.word	0x08009c87
 8009bd0:	08009c87 	.word	0x08009c87
 8009bd4:	08009c87 	.word	0x08009c87
 8009bd8:	08009c53 	.word	0x08009c53
 8009bdc:	08009c87 	.word	0x08009c87
 8009be0:	08009c87 	.word	0x08009c87
 8009be4:	08009c87 	.word	0x08009c87
 8009be8:	08009c87 	.word	0x08009c87
 8009bec:	08009c87 	.word	0x08009c87
 8009bf0:	08009c87 	.word	0x08009c87
 8009bf4:	08009c87 	.word	0x08009c87
 8009bf8:	08009c87 	.word	0x08009c87
 8009bfc:	08009c87 	.word	0x08009c87
 8009c00:	08009c87 	.word	0x08009c87
 8009c04:	08009c87 	.word	0x08009c87
 8009c08:	08009c87 	.word	0x08009c87
 8009c0c:	08009c87 	.word	0x08009c87
 8009c10:	08009c87 	.word	0x08009c87
 8009c14:	08009c87 	.word	0x08009c87
 8009c18:	08009c79 	.word	0x08009c79
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d02e      	beq.n	8009c7e <UART_SetConfig+0x8aa>
 8009c20:	e031      	b.n	8009c86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c22:	f7fd f853 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8009c26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c28:	e033      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c2a:	f7fd f865 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 8009c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c30:	e02f      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd ffd0 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c40:	e027      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c42:	f107 0318 	add.w	r3, r7, #24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe f91c 	bl	8007e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c50:	e01f      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c52:	4b2d      	ldr	r3, [pc, #180]	; (8009d08 <UART_SetConfig+0x934>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c5e:	4b2a      	ldr	r3, [pc, #168]	; (8009d08 <UART_SetConfig+0x934>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	08db      	lsrs	r3, r3, #3
 8009c64:	f003 0303 	and.w	r3, r3, #3
 8009c68:	4a24      	ldr	r2, [pc, #144]	; (8009cfc <UART_SetConfig+0x928>)
 8009c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c70:	e00f      	b.n	8009c92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c72:	4b22      	ldr	r3, [pc, #136]	; (8009cfc <UART_SetConfig+0x928>)
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c76:	e00c      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c78:	4b21      	ldr	r3, [pc, #132]	; (8009d00 <UART_SetConfig+0x92c>)
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c7c:	e009      	b.n	8009c92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c84:	e005      	b.n	8009c92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 80e7 	beq.w	8009e68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	4a19      	ldr	r2, [pc, #100]	; (8009d04 <UART_SetConfig+0x930>)
 8009ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cac:	005a      	lsls	r2, r3, #1
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	441a      	add	r2, r3
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d916      	bls.n	8009cf4 <UART_SetConfig+0x920>
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d212      	bcs.n	8009cf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f023 030f 	bic.w	r3, r3, #15
 8009cd6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e0b9      	b.n	8009e68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cfa:	e0b5      	b.n	8009e68 <UART_SetConfig+0xa94>
 8009cfc:	03d09000 	.word	0x03d09000
 8009d00:	003d0900 	.word	0x003d0900
 8009d04:	0800acb4 	.word	0x0800acb4
 8009d08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	dc49      	bgt.n	8009da8 <UART_SetConfig+0x9d4>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	db7c      	blt.n	8009e12 <UART_SetConfig+0xa3e>
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d87a      	bhi.n	8009e12 <UART_SetConfig+0xa3e>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x950>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009db7 	.word	0x08009db7
 8009d2c:	08009e13 	.word	0x08009e13
 8009d30:	08009e13 	.word	0x08009e13
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e13 	.word	0x08009e13
 8009d3c:	08009e13 	.word	0x08009e13
 8009d40:	08009e13 	.word	0x08009e13
 8009d44:	08009dcf 	.word	0x08009dcf
 8009d48:	08009e13 	.word	0x08009e13
 8009d4c:	08009e13 	.word	0x08009e13
 8009d50:	08009e13 	.word	0x08009e13
 8009d54:	08009e13 	.word	0x08009e13
 8009d58:	08009e13 	.word	0x08009e13
 8009d5c:	08009e13 	.word	0x08009e13
 8009d60:	08009e13 	.word	0x08009e13
 8009d64:	08009ddf 	.word	0x08009ddf
 8009d68:	08009e13 	.word	0x08009e13
 8009d6c:	08009e13 	.word	0x08009e13
 8009d70:	08009e13 	.word	0x08009e13
 8009d74:	08009e13 	.word	0x08009e13
 8009d78:	08009e13 	.word	0x08009e13
 8009d7c:	08009e13 	.word	0x08009e13
 8009d80:	08009e13 	.word	0x08009e13
 8009d84:	08009e13 	.word	0x08009e13
 8009d88:	08009e13 	.word	0x08009e13
 8009d8c:	08009e13 	.word	0x08009e13
 8009d90:	08009e13 	.word	0x08009e13
 8009d94:	08009e13 	.word	0x08009e13
 8009d98:	08009e13 	.word	0x08009e13
 8009d9c:	08009e13 	.word	0x08009e13
 8009da0:	08009e13 	.word	0x08009e13
 8009da4:	08009e05 	.word	0x08009e05
 8009da8:	2b40      	cmp	r3, #64	; 0x40
 8009daa:	d02e      	beq.n	8009e0a <UART_SetConfig+0xa36>
 8009dac:	e031      	b.n	8009e12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dae:	f7fc ff8d 	bl	8006ccc <HAL_RCC_GetPCLK1Freq>
 8009db2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009db4:	e033      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009db6:	f7fc ff9f 	bl	8006cf8 <HAL_RCC_GetPCLK2Freq>
 8009dba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dbc:	e02f      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd ff0a 	bl	8007bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dcc:	e027      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dce:	f107 0318 	add.w	r3, r7, #24
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe f856 	bl	8007e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ddc:	e01f      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dde:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <UART_SetConfig+0xac0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dea:	4b2a      	ldr	r3, [pc, #168]	; (8009e94 <UART_SetConfig+0xac0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	08db      	lsrs	r3, r3, #3
 8009df0:	f003 0303 	and.w	r3, r3, #3
 8009df4:	4a28      	ldr	r2, [pc, #160]	; (8009e98 <UART_SetConfig+0xac4>)
 8009df6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dfc:	e00f      	b.n	8009e1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009dfe:	4b26      	ldr	r3, [pc, #152]	; (8009e98 <UART_SetConfig+0xac4>)
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e02:	e00c      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e04:	4b25      	ldr	r3, [pc, #148]	; (8009e9c <UART_SetConfig+0xac8>)
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e08:	e009      	b.n	8009e1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e10:	e005      	b.n	8009e1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d021      	beq.n	8009e68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	4a1d      	ldr	r2, [pc, #116]	; (8009ea0 <UART_SetConfig+0xacc>)
 8009e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	441a      	add	r2, r3
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	2b0f      	cmp	r3, #15
 8009e4c:	d909      	bls.n	8009e62 <UART_SetConfig+0xa8e>
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e54:	d205      	bcs.n	8009e62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	60da      	str	r2, [r3, #12]
 8009e60:	e002      	b.n	8009e68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2200      	movs	r2, #0
 8009e82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009e84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3748      	adds	r7, #72	; 0x48
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e92:	bf00      	nop
 8009e94:	58024400 	.word	0x58024400
 8009e98:	03d09000 	.word	0x03d09000
 8009e9c:	003d0900 	.word	0x003d0900
 8009ea0:	0800acb4 	.word	0x0800acb4

08009ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	f003 0310 	and.w	r3, r3, #16
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01a      	beq.n	8009fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fa2:	d10a      	bne.n	8009fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	605a      	str	r2, [r3, #4]
  }
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ff8:	f7f8 fb54 	bl	80026a4 <HAL_GetTick>
 8009ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b08      	cmp	r3, #8
 800a00a:	d10e      	bne.n	800a02a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a00c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f82f 	bl	800a07e <UART_WaitOnFlagUntilTimeout>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e025      	b.n	800a076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b04      	cmp	r3, #4
 800a036:	d10e      	bne.n	800a056 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f819 	bl	800a07e <UART_WaitOnFlagUntilTimeout>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e00f      	b.n	800a076 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b09c      	sub	sp, #112	; 0x70
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	603b      	str	r3, [r7, #0]
 800a08a:	4613      	mov	r3, r2
 800a08c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a08e:	e0a9      	b.n	800a1e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	f000 80a5 	beq.w	800a1e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09a:	f7f8 fb03 	bl	80026a4 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d302      	bcc.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d140      	bne.n	800a132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e6      	bne.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	f023 0301 	bic.w	r3, r3, #1
 800a0f8:	663b      	str	r3, [r7, #96]	; 0x60
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a102:	64ba      	str	r2, [r7, #72]	; 0x48
 800a104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e5      	bne.n	800a0e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2220      	movs	r2, #32
 800a11a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2220      	movs	r2, #32
 800a122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e069      	b.n	800a206 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d051      	beq.n	800a1e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a14a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a14e:	d149      	bne.n	800a1e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a16e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
 800a17a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a17e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	613b      	str	r3, [r7, #16]
   return(result);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1ac:	623a      	str	r2, [r7, #32]
 800a1ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	6a3a      	ldr	r2, [r7, #32]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e010      	b.n	800a206 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	69da      	ldr	r2, [r3, #28]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	bf0c      	ite	eq
 800a1f4:	2301      	moveq	r3, #1
 800a1f6:	2300      	movne	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f43f af46 	beq.w	800a090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3770      	adds	r7, #112	; 0x70
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b095      	sub	sp, #84	; 0x54
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a22c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a236:	643b      	str	r3, [r7, #64]	; 0x40
 800a238:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a23c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e6      	bne.n	800a218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	61fb      	str	r3, [r7, #28]
   return(result);
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	4b1e      	ldr	r3, [pc, #120]	; (800a2d8 <UART_EndRxTransfer+0xc8>)
 800a25e:	4013      	ands	r3, r2
 800a260:	64bb      	str	r3, [r7, #72]	; 0x48
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a26a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e5      	bne.n	800a24a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a282:	2b01      	cmp	r3, #1
 800a284:	d118      	bne.n	800a2b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60bb      	str	r3, [r7, #8]
   return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0310 	bic.w	r3, r3, #16
 800a29a:	647b      	str	r3, [r7, #68]	; 0x44
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e6      	bne.n	800a286 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a2cc:	bf00      	nop
 800a2ce:	3754      	adds	r7, #84	; 0x54
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	effffffe 	.word	0xeffffffe

0800a2dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff f854 	bl	80093a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	61bb      	str	r3, [r7, #24]
 800a330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6979      	ldr	r1, [r7, #20]
 800a334:	69ba      	ldr	r2, [r7, #24]
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	613b      	str	r3, [r7, #16]
   return(result);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e6      	bne.n	800a310 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff f81f 	bl	8009394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a356:	bf00      	nop
 800a358:	3720      	adds	r7, #32
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d101      	bne.n	800a3b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	e027      	b.n	800a400 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2224      	movs	r2, #36	; 0x24
 800a3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 0201 	bic.w	r2, r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3714      	adds	r7, #20
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a420:	2302      	movs	r3, #2
 800a422:	e02d      	b.n	800a480 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2224      	movs	r2, #36	; 0x24
 800a430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0201 	bic.w	r2, r2, #1
 800a44a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f84f 	bl	800a504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d101      	bne.n	800a4a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a49c:	2302      	movs	r3, #2
 800a49e:	e02d      	b.n	800a4fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2224      	movs	r2, #36	; 0x24
 800a4ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0201 	bic.w	r2, r2, #1
 800a4c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f811 	bl	800a504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a510:	2b00      	cmp	r3, #0
 800a512:	d108      	bne.n	800a526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a524:	e031      	b.n	800a58a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a526:	2310      	movs	r3, #16
 800a528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a52a:	2310      	movs	r3, #16
 800a52c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	0e5b      	lsrs	r3, r3, #25
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	0f5b      	lsrs	r3, r3, #29
 800a546:	b2db      	uxtb	r3, r3
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	7b3a      	ldrb	r2, [r7, #12]
 800a552:	4911      	ldr	r1, [pc, #68]	; (800a598 <UARTEx_SetNbDataToProcess+0x94>)
 800a554:	5c8a      	ldrb	r2, [r1, r2]
 800a556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a55a:	7b3a      	ldrb	r2, [r7, #12]
 800a55c:	490f      	ldr	r1, [pc, #60]	; (800a59c <UARTEx_SetNbDataToProcess+0x98>)
 800a55e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a560:	fb93 f3f2 	sdiv	r3, r3, r2
 800a564:	b29a      	uxth	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	7b7a      	ldrb	r2, [r7, #13]
 800a570:	4909      	ldr	r1, [pc, #36]	; (800a598 <UARTEx_SetNbDataToProcess+0x94>)
 800a572:	5c8a      	ldrb	r2, [r1, r2]
 800a574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a578:	7b7a      	ldrb	r2, [r7, #13]
 800a57a:	4908      	ldr	r1, [pc, #32]	; (800a59c <UARTEx_SetNbDataToProcess+0x98>)
 800a57c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a57e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	0800accc 	.word	0x0800accc
 800a59c:	0800acd4 	.word	0x0800acd4

0800a5a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	f107 001c 	add.w	r0, r7, #28
 800a5ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d120      	bne.n	800a5fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	4b2a      	ldr	r3, [pc, #168]	; (800a674 <USB_CoreInit+0xd4>)
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d105      	bne.n	800a5ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 faac 	bl	800ab4c <USB_CoreReset>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
 800a5f8:	e01a      	b.n	800a630 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 faa0 	bl	800ab4c <USB_CoreReset>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a612:	2b00      	cmp	r3, #0
 800a614:	d106      	bne.n	800a624 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	639a      	str	r2, [r3, #56]	; 0x38
 800a622:	e005      	b.n	800a630 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	2b01      	cmp	r3, #1
 800a634:	d116      	bne.n	800a664 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <USB_CoreInit+0xd8>)
 800a646:	4313      	orrs	r3, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f043 0206 	orr.w	r2, r3, #6
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f043 0220 	orr.w	r2, r3, #32
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a670:	b004      	add	sp, #16
 800a672:	4770      	bx	lr
 800a674:	ffbdffbf 	.word	0xffbdffbf
 800a678:	03ee0000 	.word	0x03ee0000

0800a67c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f023 0201 	bic.w	r2, r3, #1
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d115      	bne.n	800a6ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	f7f7 fff5 	bl	80026bc <HAL_Delay>
      ms++;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fa29 	bl	800ab30 <USB_GetMode>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d01e      	beq.n	800a722 <USB_SetCurrentMode+0x84>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b31      	cmp	r3, #49	; 0x31
 800a6e8:	d9f0      	bls.n	800a6cc <USB_SetCurrentMode+0x2e>
 800a6ea:	e01a      	b.n	800a722 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d115      	bne.n	800a71e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6fe:	2001      	movs	r0, #1
 800a700:	f7f7 ffdc 	bl	80026bc <HAL_Delay>
      ms++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa10 	bl	800ab30 <USB_GetMode>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <USB_SetCurrentMode+0x84>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b31      	cmp	r3, #49	; 0x31
 800a71a:	d9f0      	bls.n	800a6fe <USB_SetCurrentMode+0x60>
 800a71c:	e001      	b.n	800a722 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e005      	b.n	800a72e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b32      	cmp	r3, #50	; 0x32
 800a726:	d101      	bne.n	800a72c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e000      	b.n	800a72e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a738:	b084      	sub	sp, #16
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b086      	sub	sp, #24
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	e009      	b.n	800a76c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	3340      	adds	r3, #64	; 0x40
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	3301      	adds	r3, #1
 800a76a:	613b      	str	r3, [r7, #16]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2b0e      	cmp	r3, #14
 800a770:	d9f2      	bls.n	800a758 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d11c      	bne.n	800a7b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a786:	f043 0302 	orr.w	r3, r3, #2
 800a78a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e005      	b.n	800a7be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d8:	461a      	mov	r2, r3
 800a7da:	680b      	ldr	r3, [r1, #0]
 800a7dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d10c      	bne.n	800a7fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f965 	bl	800aabc <USB_SetDevSpeed>
 800a7f2:	e008      	b.n	800a806 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f960 	bl	800aabc <USB_SetDevSpeed>
 800a7fc:	e003      	b.n	800a806 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a7fe:	2103      	movs	r1, #3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f95b 	bl	800aabc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a806:	2110      	movs	r1, #16
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f8f3 	bl	800a9f4 <USB_FlushTxFifo>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f91f 	bl	800aa5c <USB_FlushRxFifo>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82e:	461a      	mov	r2, r3
 800a830:	2300      	movs	r3, #0
 800a832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	461a      	mov	r2, r3
 800a83c:	2300      	movs	r3, #0
 800a83e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	461a      	mov	r2, r3
 800a848:	2300      	movs	r3, #0
 800a84a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a84c:	2300      	movs	r3, #0
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	e043      	b.n	800a8da <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a868:	d118      	bne.n	800a89c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87c:	461a      	mov	r2, r3
 800a87e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	e013      	b.n	800a8ae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	461a      	mov	r2, r3
 800a894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e008      	b.n	800a8ae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	2300      	movs	r3, #0
 800a8be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	613b      	str	r3, [r7, #16]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d3b7      	bcc.n	800a852 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	613b      	str	r3, [r7, #16]
 800a8e6:	e043      	b.n	800a970 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8fe:	d118      	bne.n	800a932 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a912:	461a      	mov	r2, r3
 800a914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e013      	b.n	800a944 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	461a      	mov	r2, r3
 800a92a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	e008      	b.n	800a944 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93e:	461a      	mov	r2, r3
 800a940:	2300      	movs	r3, #0
 800a942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	461a      	mov	r2, r3
 800a952:	2300      	movs	r3, #0
 800a954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a962:	461a      	mov	r2, r3
 800a964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3301      	adds	r3, #1
 800a96e:	613b      	str	r3, [r7, #16]
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d3b7      	bcc.n	800a8e8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a98a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	f043 0210 	orr.w	r2, r3, #16
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699a      	ldr	r2, [r3, #24]
 800a9b0:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <USB_DevInit+0x2b4>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f043 0208 	orr.w	r2, r3, #8
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d105      	bne.n	800a9dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699a      	ldr	r2, [r3, #24]
 800a9d4:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <USB_DevInit+0x2b8>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9e8:	b004      	add	sp, #16
 800a9ea:	4770      	bx	lr
 800a9ec:	803c3800 	.word	0x803c3800
 800a9f0:	40000004 	.word	0x40000004

0800a9f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4a13      	ldr	r2, [pc, #76]	; (800aa58 <USB_FlushTxFifo+0x64>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d901      	bls.n	800aa14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e01b      	b.n	800aa4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	daf2      	bge.n	800aa02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	019b      	lsls	r3, r3, #6
 800aa24:	f043 0220 	orr.w	r2, r3, #32
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <USB_FlushTxFifo+0x64>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d901      	bls.n	800aa3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e006      	b.n	800aa4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	d0f0      	beq.n	800aa2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	00030d40 	.word	0x00030d40

0800aa5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4a11      	ldr	r2, [pc, #68]	; (800aab8 <USB_FlushRxFifo+0x5c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d901      	bls.n	800aa7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e018      	b.n	800aaac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	daf2      	bge.n	800aa68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2210      	movs	r2, #16
 800aa8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4a08      	ldr	r2, [pc, #32]	; (800aab8 <USB_FlushRxFifo+0x5c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d901      	bls.n	800aa9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e006      	b.n	800aaac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d0f0      	beq.n	800aa8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	00030d40 	.word	0x00030d40

0800aabc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	68f9      	ldr	r1, [r7, #12]
 800aad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aadc:	4313      	orrs	r3, r2
 800aade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b085      	sub	sp, #20
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab08:	f023 0303 	bic.w	r3, r3, #3
 800ab0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1c:	f043 0302 	orr.w	r3, r3, #2
 800ab20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4a13      	ldr	r2, [pc, #76]	; (800abb0 <USB_CoreReset+0x64>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d901      	bls.n	800ab6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e01b      	b.n	800aba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	daf2      	bge.n	800ab58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f043 0201 	orr.w	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3301      	adds	r3, #1
 800ab86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <USB_CoreReset+0x64>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d901      	bls.n	800ab94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e006      	b.n	800aba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d0f0      	beq.n	800ab82 <USB_CoreReset+0x36>

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	00030d40 	.word	0x00030d40

0800abb4 <__libc_init_array>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4d0d      	ldr	r5, [pc, #52]	; (800abec <__libc_init_array+0x38>)
 800abb8:	4c0d      	ldr	r4, [pc, #52]	; (800abf0 <__libc_init_array+0x3c>)
 800abba:	1b64      	subs	r4, r4, r5
 800abbc:	10a4      	asrs	r4, r4, #2
 800abbe:	2600      	movs	r6, #0
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	d109      	bne.n	800abd8 <__libc_init_array+0x24>
 800abc4:	4d0b      	ldr	r5, [pc, #44]	; (800abf4 <__libc_init_array+0x40>)
 800abc6:	4c0c      	ldr	r4, [pc, #48]	; (800abf8 <__libc_init_array+0x44>)
 800abc8:	f000 f820 	bl	800ac0c <_init>
 800abcc:	1b64      	subs	r4, r4, r5
 800abce:	10a4      	asrs	r4, r4, #2
 800abd0:	2600      	movs	r6, #0
 800abd2:	42a6      	cmp	r6, r4
 800abd4:	d105      	bne.n	800abe2 <__libc_init_array+0x2e>
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abdc:	4798      	blx	r3
 800abde:	3601      	adds	r6, #1
 800abe0:	e7ee      	b.n	800abc0 <__libc_init_array+0xc>
 800abe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe6:	4798      	blx	r3
 800abe8:	3601      	adds	r6, #1
 800abea:	e7f2      	b.n	800abd2 <__libc_init_array+0x1e>
 800abec:	0800ace4 	.word	0x0800ace4
 800abf0:	0800ace4 	.word	0x0800ace4
 800abf4:	0800ace4 	.word	0x0800ace4
 800abf8:	0800ace8 	.word	0x0800ace8

0800abfc <memset>:
 800abfc:	4402      	add	r2, r0
 800abfe:	4603      	mov	r3, r0
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d100      	bne.n	800ac06 <memset+0xa>
 800ac04:	4770      	bx	lr
 800ac06:	f803 1b01 	strb.w	r1, [r3], #1
 800ac0a:	e7f9      	b.n	800ac00 <memset+0x4>

0800ac0c <_init>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	bf00      	nop
 800ac10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac12:	bc08      	pop	{r3}
 800ac14:	469e      	mov	lr, r3
 800ac16:	4770      	bx	lr

0800ac18 <_fini>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	bf00      	nop
 800ac1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1e:	bc08      	pop	{r3}
 800ac20:	469e      	mov	lr, r3
 800ac22:	4770      	bx	lr
