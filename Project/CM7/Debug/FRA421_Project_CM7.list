
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d0  080064d0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d8  080064d8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080064e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080064f0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006550  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000738  240000d0  080065b0  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000808  080065b0  00020808  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b3c2  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b5c  00000000  00000000  0003b4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011f0  00000000  00000000  0003e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010f8  00000000  00000000  0003f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ae17  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016df6  00000000  00000000  0007b11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001840df  00000000  00000000  00091f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00215ff4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004c98  00000000  00000000  00216044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006480 	.word	0x08006480

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006480 	.word	0x08006480

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <main+0xcc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 faad 	bl	8000c90 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fd17 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f851 	bl	80007e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 f8d3 	bl	80008e8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <main+0xcc>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <main+0xcc>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0xcc>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f001 fcc3 	bl	80020ec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f001 fcd9 	bl	8002120 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <main+0xcc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
{
Error_Handler();
 8000792:	f000 fa7d 	bl	8000c90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 f9f9 	bl	8000b8c <MX_GPIO_Init>
  MX_ETH_Init();
 800079a:	f000 f8d7 	bl	800094c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079e:	f000 f977 	bl	8000a90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a2:	f000 f9c1 	bl	8000b28 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80007a6:	f000 f91d 	bl	80009e4 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(HAL_GetTick() - timemsM7 > 1000)
 80007aa:	f000 fd63 	bl	8001274 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <main+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ba:	d9f6      	bls.n	80007aa <main+0xa2>
      {
          timemsM7 = HAL_GetTick();
 80007bc:	f000 fd5a 	bl	8001274 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <main+0xd0>)
 80007c4:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <main+0xd4>)
 80007cc:	f001 fc73 	bl	80020b6 <HAL_GPIO_TogglePin>
      if(HAL_GetTick() - timemsM7 > 1000)
 80007d0:	e7eb      	b.n	80007aa <main+0xa2>
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400
 80007d8:	240007f8 	.word	0x240007f8
 80007dc:	58020400 	.word	0x58020400

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fe3e 	bl	8006470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fe38 	bl	8006470 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f001 fde9 	bl	80023d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <SystemClock_Config+0xfc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <SystemClock_Config+0xfc>)
 8000810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <SystemClock_Config+0xfc>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <SystemClock_Config+0x100>)
 8000822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <SystemClock_Config+0x100>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <SystemClock_Config+0x100>)
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xfc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000848:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <SystemClock_Config+0x104>)
 800084a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084c:	f023 0303 	bic.w	r3, r3, #3
 8000850:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <SystemClock_Config+0x104>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800086e:	2378      	movs	r3, #120	; 0x78
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800087e:	230c      	movs	r3, #12
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fe0c 	bl	80024ac <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089a:	f000 f9f9 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	233f      	movs	r3, #63	; 0x3f
 80008a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008aa:	2308      	movs	r3, #8
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2104      	movs	r1, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fa1f 	bl	8002d08 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008d0:	f000 f9de 	bl	8000c90 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3770      	adds	r7, #112	; 0x70
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024800 	.word	0x58024800
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024400 	.word	0x58024400

080008e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0b0      	sub	sp, #192	; 0xc0
 80008ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	22bc      	movs	r2, #188	; 0xbc
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f005 fdbb 	bl	8006470 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI1;
 80008fa:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80008fe:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000904:	2318      	movs	r3, #24
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000914:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800092c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f002 fd74 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800093e:	f000 f9a7 	bl	8000c90 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	37c0      	adds	r7, #192	; 0xc0
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_ETH_Init+0x80>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MX_ETH_Init+0x84>)
 8000954:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_ETH_Init+0x88>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_ETH_Init+0x88>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ETH_Init+0x88>)
 8000964:	22e1      	movs	r2, #225	; 0xe1
 8000966:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_ETH_Init+0x88>)
 800096a:	2200      	movs	r2, #0
 800096c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ETH_Init+0x88>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_ETH_Init+0x88>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_ETH_Init+0x80>)
 800097c:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_ETH_Init+0x88>)
 800097e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_ETH_Init+0x80>)
 8000982:	2201      	movs	r2, #1
 8000984:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_ETH_Init+0x80>)
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <MX_ETH_Init+0x8c>)
 800098a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_ETH_Init+0x80>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_ETH_Init+0x90>)
 8000990:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_ETH_Init+0x80>)
 8000994:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000998:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_ETH_Init+0x80>)
 800099c:	f000 fd9e 	bl	80014dc <HAL_ETH_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009a6:	f000 f973 	bl	8000c90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009aa:	2238      	movs	r2, #56	; 0x38
 80009ac:	2100      	movs	r1, #0
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_ETH_Init+0x94>)
 80009b0:	f005 fd5e 	bl	8006470 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_ETH_Init+0x94>)
 80009b6:	2221      	movs	r2, #33	; 0x21
 80009b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_ETH_Init+0x94>)
 80009bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_ETH_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000124 	.word	0x24000124
 80009d0:	40028000 	.word	0x40028000
 80009d4:	240007fc 	.word	0x240007fc
 80009d8:	24000070 	.word	0x24000070
 80009dc:	24000010 	.word	0x24000010
 80009e0:	240000ec 	.word	0x240000ec

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_SPI1_Init+0xa4>)
 80009ea:	4a28      	ldr	r2, [pc, #160]	; (8000a8c <MX_SPI1_Init+0xa8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_SPI1_Init+0xa4>)
 80009f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_SPI1_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_SPI1_Init+0xa4>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI1_Init+0xa4>)
 8000a76:	f004 f83b 	bl	8004af0 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000a80:	f000 f906 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240001d4 	.word	0x240001d4
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <MX_USART3_UART_Init+0x94>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad8:	4811      	ldr	r0, [pc, #68]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000ada:	f004 f92a 	bl	8004d32 <HAL_UART_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f8d4 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000aec:	f005 f8c8 	bl	8005c80 <HAL_UARTEx_SetTxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f8cb 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000afe:	f005 f8fd 	bl	8005cfc <HAL_UARTEx_SetRxFifoThreshold>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f8c2 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f005 f87e 	bl	8005c0e <HAL_UARTEx_DisableFifoMode>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f8ba 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2400025c 	.word	0x2400025c
 8000b24:	40004800 	.word	0x40004800

08000b28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b2e:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b34:	2209      	movs	r2, #9
 8000b36:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	f001 faea 	bl	8002148 <HAL_PCD_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b7a:	f000 f889 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240002ec 	.word	0x240002ec
 8000b88:	40080000 	.word	0x40080000

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a37      	ldr	r2, [pc, #220]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000c5e:	f001 fa11 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000c7c:	f001 f852 	bl	8001d24 <HAL_GPIO_Init>

}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020400 	.word	0x58020400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x30>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a59      	ldr	r2, [pc, #356]	; (8000e54 <HAL_ETH_MspInit+0x184>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 80ab 	bne.w	8000e4a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cfa:	4a57      	ldr	r2, [pc, #348]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d04:	4b54      	ldr	r3, [pc, #336]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0e:	623b      	str	r3, [r7, #32]
 8000d10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d12:	4b51      	ldr	r3, [pc, #324]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d18:	4a4f      	ldr	r2, [pc, #316]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d22:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d30:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d36:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d40:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_ETH_MspInit+0x188>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dc6:	2332      	movs	r3, #50	; 0x32
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <HAL_ETH_MspInit+0x18c>)
 8000de2:	f000 ff9f 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000de6:	2386      	movs	r3, #134	; 0x86
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4817      	ldr	r0, [pc, #92]	; (8000e60 <HAL_ETH_MspInit+0x190>)
 8000e02:	f000 ff8f 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4810      	ldr	r0, [pc, #64]	; (8000e64 <HAL_ETH_MspInit+0x194>)
 8000e24:	f000 ff7e 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_ETH_MspInit+0x198>)
 8000e46:	f000 ff6d 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	; 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40028000 	.word	0x40028000
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020800 	.word	0x58020800
 8000e60:	58020000 	.word	0x58020000
 8000e64:	58020400 	.word	0x58020400
 8000e68:	58021800 	.word	0x58021800

08000e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <HAL_SPI_MspInit+0xc4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d14c      	bne.n	8000f28 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e94:	4a27      	ldr	r2, [pc, #156]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_SPI_MspInit+0xc8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <HAL_SPI_MspInit+0xcc>)
 8000f04:	f000 ff0e 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_SPI_MspInit+0xd0>)
 8000f24:	f000 fefe 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40013000 	.word	0x40013000
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020000 	.word	0x58020000
 8000f3c:	58020c00 	.word	0x58020c00

08000f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b8      	sub	sp, #224	; 0xe0
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	22bc      	movs	r2, #188	; 0xbc
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fa85 	bl	8006470 <memset>
  if(huart->Instance==USART3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_UART_MspInit+0xc0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d142      	bne.n	8000ff6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f70:	2302      	movs	r3, #2
 8000f72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fa4e 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f8a:	f7ff fe81 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0xc4>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0xc8>)
 8000ff2:	f000 fe97 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	37e0      	adds	r7, #224	; 0xe0
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004800 	.word	0x40004800
 8001004:	58024400 	.word	0x58024400
 8001008:	58020c00 	.word	0x58020c00

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_PCD_MspInit+0xa8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d13d      	bne.n	80010aa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800102e:	f001 fa2d 	bl	800248c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001050:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001062:	230a      	movs	r3, #10
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <HAL_PCD_MspInit+0xb0>)
 800106e:	f000 fe59 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <HAL_PCD_MspInit+0xb0>)
 8001088:	f000 fe4c 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 800108e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 8001094:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001098:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_PCD_MspInit+0xac>)
 800109e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40080000 	.word	0x40080000
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020000 	.word	0x58020000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f89e 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001118:	f7ff fa60 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f005 f971 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fadf 	bl	8000708 <main>
  bx  lr
 800114a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001150:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001154:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001158:	080064e0 	.word	0x080064e0
  ldr r2, =_sbss
 800115c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001160:	24000808 	.word	0x24000808

08001164 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC3_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f982 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001174:	f001 ff7e 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8001178:	4602      	mov	r2, r0
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_Init+0x68>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	0a1b      	lsrs	r3, r3, #8
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	4913      	ldr	r1, [pc, #76]	; (80011d4 <HAL_Init+0x6c>)
 8001186:	5ccb      	ldrb	r3, [r1, r3]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	fa22 f303 	lsr.w	r3, r2, r3
 8001190:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_Init+0x6c>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_Init+0x70>)
 80011aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x74>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f814 	bl	80011e0 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e002      	b.n	80011c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c2:	f7ff fd6b 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024400 	.word	0x58024400
 80011d4:	08006498 	.word	0x08006498
 80011d8:	24000004 	.word	0x24000004
 80011dc:	24000000 	.word	0x24000000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_InitTick+0x60>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e021      	b.n	8001238 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_InitTick+0x64>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_InitTick+0x60>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f959 	bl	80014c2 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f931 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x68>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2400000c 	.word	0x2400000c
 8001244:	24000000 	.word	0x24000000
 8001248:	24000008 	.word	0x24000008

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2400000c 	.word	0x2400000c
 8001270:	24000804 	.word	0x24000804

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	24000804 	.word	0x24000804

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2400000c 	.word	0x2400000c

080012d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_GetREVID+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0c1b      	lsrs	r3, r3, #16
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	5c001000 	.word	0x5c001000

080012ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012fc:	4904      	ldr	r1, [pc, #16]	; (8001310 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58000400 	.word	0x58000400

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x40>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	05fa0000 	.word	0x05fa0000

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff47 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff5e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffb2 	bl	8001434 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0cf      	b.n	800168e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2223      	movs	r2, #35	; 0x23
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fbe5 	bl	8000cd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_ETH_Init+0x1bc>)
 8001508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150c:	4a62      	ldr	r2, [pc, #392]	; (8001698 <HAL_ETH_Init+0x1bc>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_ETH_Init+0x1bc>)
 8001518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fedd 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
 8001532:	e003      	b.n	800153c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001534:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001538:	f7ff fed8 	bl	80012ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800153c:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_ETH_Init+0x1c0>)
 800153e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001556:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff fe8c 	bl	8001274 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800155e:	e011      	b.n	8001584 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001560:	f7ff fe88 	bl	8001274 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800156e:	d909      	bls.n	8001584 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	22e0      	movs	r2, #224	; 0xe0
 800157c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e084      	b.n	800168e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1e4      	bne.n	8001560 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f886 	bl	80016a8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800159c:	f001 fee4 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_ETH_Init+0x1c4>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9a      	lsrs	r2, r3, #18
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3a01      	subs	r2, #1
 80015b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fa71 	bl	8001a9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015c6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	22e0      	movs	r2, #224	; 0xe0
 80015f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e049      	b.n	800168e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001602:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_ETH_Init+0x1c8>)
 8001608:	4013      	ands	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6952      	ldr	r2, [r2, #20]
 800160e:	0051      	lsls	r1, r2, #1
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fad9 	bl	8001bd6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fb1f 	bl	8001c68 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	3305      	adds	r3, #5
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	021a      	lsls	r2, r3, #8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	3303      	adds	r3, #3
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	061a      	lsls	r2, r3, #24
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	3302      	adds	r3, #2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	3301      	adds	r3, #1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001668:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001676:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001678:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2210      	movs	r2, #16
 8001688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	58024400 	.word	0x58024400
 800169c:	58000400 	.word	0x58000400
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	ffff8001 	.word	0xffff8001

080016a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016c2:	f001 fe51 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80016c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d908      	bls.n	80016e2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d804      	bhi.n	80016e2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e027      	b.n	8001732 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d908      	bls.n	80016fc <HAL_ETH_SetMDIOClockRange+0x54>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d204      	bcs.n	80016fc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e01a      	b.n	8001732 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d303      	bcc.n	800170c <HAL_ETH_SetMDIOClockRange+0x64>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d911      	bls.n	8001730 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d908      	bls.n	8001726 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d804      	bhi.n	8001726 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e005      	b.n	8001732 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e000      	b.n	8001732 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001730:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	01312cff 	.word	0x01312cff
 8001748:	02160ebf 	.word	0x02160ebf
 800174c:	03938700 	.word	0x03938700
 8001750:	05f5e0ff 	.word	0x05f5e0ff
 8001754:	08f0d17f 	.word	0x08f0d17f

08001758 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800176a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800177a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	7b5b      	ldrb	r3, [r3, #13]
 8001780:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7b9b      	ldrb	r3, [r3, #14]
 8001788:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800178a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7bdb      	ldrb	r3, [r3, #15]
 8001790:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001792:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	7c12      	ldrb	r2, [r2, #16]
 8001798:	2a00      	cmp	r2, #0
 800179a:	d102      	bne.n	80017a2 <ETH_SetMACConfig+0x4a>
 800179c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017a0:	e000      	b.n	80017a4 <ETH_SetMACConfig+0x4c>
 80017a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	7c52      	ldrb	r2, [r2, #17]
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	d102      	bne.n	80017b4 <ETH_SetMACConfig+0x5c>
 80017ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b2:	e000      	b.n	80017b6 <ETH_SetMACConfig+0x5e>
 80017b4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	7c9b      	ldrb	r3, [r3, #18]
 80017bc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017be:	431a      	orrs	r2, r3
               macconf->Speed |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017c4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7f1b      	ldrb	r3, [r3, #28]
 80017d0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	7f5b      	ldrb	r3, [r3, #29]
 80017d8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	7f92      	ldrb	r2, [r2, #30]
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d102      	bne.n	80017ea <ETH_SetMACConfig+0x92>
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	e000      	b.n	80017ec <ETH_SetMACConfig+0x94>
 80017ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7fdb      	ldrb	r3, [r3, #31]
 80017f2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d102      	bne.n	8001806 <ETH_SetMACConfig+0xae>
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	e000      	b.n	8001808 <ETH_SetMACConfig+0xb0>
 8001806:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001808:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800180e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001816:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001818:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b56      	ldr	r3, [pc, #344]	; (8001984 <ETH_SetMACConfig+0x22c>)
 800182a:	4013      	ands	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	430b      	orrs	r3, r1
 8001834:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001842:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001844:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800184c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001856:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001858:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001860:	2a00      	cmp	r2, #0
 8001862:	d102      	bne.n	800186a <ETH_SetMACConfig+0x112>
 8001864:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001868:	e000      	b.n	800186c <ETH_SetMACConfig+0x114>
 800186a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800186c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <ETH_SetMACConfig+0x230>)
 800187e:	4013      	ands	r3, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	430b      	orrs	r3, r1
 8001888:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001890:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b3a      	ldr	r3, [pc, #232]	; (800198c <ETH_SetMACConfig+0x234>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	430b      	orrs	r3, r1
 80018ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d101      	bne.n	80018ca <ETH_SetMACConfig+0x172>
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	e000      	b.n	80018cc <ETH_SetMACConfig+0x174>
 80018ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018de:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	430b      	orrs	r3, r1
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80018fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	f023 0103 	bic.w	r1, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	430a      	orrs	r2, r1
 8001916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001922:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800193e:	2a00      	cmp	r2, #0
 8001940:	d101      	bne.n	8001946 <ETH_SetMACConfig+0x1ee>
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0x1f0>
 8001946:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001948:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001950:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800195a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001968:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	430a      	orrs	r2, r1
 8001974:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	00048083 	.word	0x00048083
 8001988:	c0f88000 	.word	0xc0f88000
 800198c:	fffffef0 	.word	0xfffffef0

08001990 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <ETH_SetDMAConfig+0xf8>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6811      	ldr	r1, [r2, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	791b      	ldrb	r3, [r3, #4]
 80019bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <ETH_SetDMAConfig+0xfc>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	7b5b      	ldrb	r3, [r3, #13]
 80019ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <ETH_SetDMAConfig+0x100>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a14:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7d1b      	ldrb	r3, [r3, #20]
 8001a20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a22:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7f5b      	ldrb	r3, [r3, #29]
 8001a28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <ETH_SetDMAConfig+0x104>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	430b      	orrs	r3, r1
 8001a46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a4a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	7f1b      	ldrb	r3, [r3, #28]
 8001a52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <ETH_SetDMAConfig+0x108>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a78:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	ffff87fd 	.word	0xffff87fd
 8001a8c:	ffff2ffe 	.word	0xffff2ffe
 8001a90:	fffec000 	.word	0xfffec000
 8001a94:	ffc0efef 	.word	0xffc0efef
 8001a98:	7fc0ffff 	.word	0x7fc0ffff

08001a9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0a4      	sub	sp, #144	; 0x90
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001af4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b16:	2300      	movs	r3, #0
 8001b18:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b34:	2320      	movs	r3, #32
 8001b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b46:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b76:	2300      	movs	r3, #0
 8001b78:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fde6 	bl	8001758 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b90:	2301      	movs	r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ba6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001baa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bbc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fee1 	bl	8001990 <ETH_SetDMAConfig>
}
 8001bce:	bf00      	nop
 8001bd0:	3790      	adds	r7, #144	; 0x90
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e01d      	b.n	8001c20 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	3206      	adds	r2, #6
 8001c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d9de      	bls.n	8001be4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	461a      	mov	r2, r3
 8001c36:	2303      	movs	r3, #3
 8001c38:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e023      	b.n	8001cbe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	3212      	adds	r2, #18
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9d8      	bls.n	8001c76 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	461a      	mov	r2, r3
 8001cec:	2303      	movs	r3, #3
 8001cee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d32:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <HAL_GPIO_Init+0x234>)
 8001d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d36:	e194      	b.n	8002062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8186 	beq.w	800205c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d005      	beq.n	8001d68 <HAL_GPIO_Init+0x44>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d017      	beq.n	8001e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d123      	bne.n	8001e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	69b9      	ldr	r1, [r7, #24]
 8001e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0203 	and.w	r2, r3, #3
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80e0 	beq.w	800205c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_GPIO_Init+0x238>)
 8001e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_GPIO_Init+0x238>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_GPIO_Init+0x238>)
 8001eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <HAL_GPIO_Init+0x23c>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_GPIO_Init+0x240>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d052      	beq.n	8001f8c <HAL_GPIO_Init+0x268>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_GPIO_Init+0x244>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x22e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_GPIO_Init+0x248>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x22a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_GPIO_Init+0x24c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_GPIO_Init+0x250>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_GPIO_Init+0x254>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_GPIO_Init+0x258>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_GPIO_Init+0x25c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x260>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_GPIO_Init+0x264>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x20e>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e02d      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e02b      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e029      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e027      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e025      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e023      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e01f      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e01d      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e01b      	b.n	8001f8e <HAL_GPIO_Init+0x26a>
 8001f56:	bf00      	nop
 8001f58:	58000080 	.word	0x58000080
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58000400 	.word	0x58000400
 8001f64:	58020000 	.word	0x58020000
 8001f68:	58020400 	.word	0x58020400
 8001f6c:	58020800 	.word	0x58020800
 8001f70:	58020c00 	.word	0x58020c00
 8001f74:	58021000 	.word	0x58021000
 8001f78:	58021400 	.word	0x58021400
 8001f7c:	58021800 	.word	0x58021800
 8001f80:	58021c00 	.word	0x58021c00
 8001f84:	58022000 	.word	0x58022000
 8001f88:	58022400 	.word	0x58022400
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	f002 0203 	and.w	r2, r2, #3
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	4093      	lsls	r3, r2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9e:	4938      	ldr	r1, [pc, #224]	; (8002080 <HAL_GPIO_Init+0x35c>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f ae63 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3724      	adds	r7, #36	; 0x24
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	58000400 	.word	0x58000400

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	041a      	lsls	r2, r3, #16
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	400b      	ands	r3, r1
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020f4:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_HSEM_FastTake+0x2c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3320      	adds	r3, #32
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_HSEM_FastTake+0x30>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	58026400 	.word	0x58026400
 800211c:	80000300 	.word	0x80000300

08002120 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800212a:	4906      	ldr	r1, [pc, #24]	; (8002144 <HAL_HSEM_Release+0x24>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	58026400 	.word	0x58026400

08002148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	b08f      	sub	sp, #60	; 0x3c
 800214c:	af0a      	add	r7, sp, #40	; 0x28
 800214e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e116      	b.n	8002388 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe ff49 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fea9 	bl	8005ef0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	687e      	ldr	r6, [r7, #4]
 80021a6:	466d      	mov	r5, sp
 80021a8:	f106 0410 	add.w	r4, r6, #16
 80021ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021bc:	1d33      	adds	r3, r6, #4
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f003 fe27 	bl	8005e14 <USB_CoreInit>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0d7      	b.n	8002388 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fe97 	bl	8005f12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e04a      	b.n	8002280 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	333d      	adds	r3, #61	; 0x3d
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	333c      	adds	r3, #60	; 0x3c
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	b298      	uxth	r0, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3344      	adds	r3, #68	; 0x44
 8002226:	4602      	mov	r2, r0
 8002228:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3340      	adds	r3, #64	; 0x40
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3348      	adds	r3, #72	; 0x48
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	334c      	adds	r3, #76	; 0x4c
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3354      	adds	r3, #84	; 0x54
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3301      	adds	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3af      	bcc.n	80021ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e044      	b.n	800231a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	3301      	adds	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d3b5      	bcc.n	8002290 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	687e      	ldr	r6, [r7, #4]
 800232c:	466d      	mov	r5, sp
 800232e:	f106 0410 	add.w	r4, r6, #16
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002342:	1d33      	adds	r3, r6, #4
 8002344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	f003 fe30 	bl	8005fac <USB_DevInit>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e014      	b.n	8002388 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f80a 	bl	8002390 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 ffee 	bl	8006362 <USB_DevDisconnect>

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002390 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	10000003 	.word	0x10000003

080023d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d00a      	beq.n	8002402 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d001      	beq.n	80023fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e040      	b.n	8002480 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e03e      	b.n	8002480 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800240a:	491f      	ldr	r1, [pc, #124]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4313      	orrs	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002412:	f7fe ff2f 	bl	8001274 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002418:	e009      	b.n	800242e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800241a:	f7fe ff2b 	bl	8001274 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002428:	d901      	bls.n	800242e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e028      	b.n	8002480 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243a:	d1ee      	bne.n	800241a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b1e      	cmp	r3, #30
 8002440:	d008      	beq.n	8002454 <HAL_PWREx_ConfigSupply+0x7c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b2e      	cmp	r3, #46	; 0x2e
 8002446:	d005      	beq.n	8002454 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b1d      	cmp	r3, #29
 800244c:	d002      	beq.n	8002454 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b2d      	cmp	r3, #45	; 0x2d
 8002452:	d114      	bne.n	800247e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002454:	f7fe ff0e 	bl	8001274 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800245a:	e009      	b.n	8002470 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800245c:	f7fe ff0a 	bl	8001274 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246a:	d901      	bls.n	8002470 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e007      	b.n	8002480 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_PWREx_ConfigSupply+0xb0>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d1ee      	bne.n	800245c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024800 	.word	0x58024800

0800248c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	58024800 	.word	0x58024800

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bc1d 	b.w	8002cfa <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8087 	beq.w	80025dc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b99      	ldr	r3, [pc, #612]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d8:	4b96      	ldr	r3, [pc, #600]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d007      	beq.n	80024f4 <HAL_RCC_OscConfig+0x48>
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d110      	bne.n	800250c <HAL_RCC_OscConfig+0x60>
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d10b      	bne.n	800250c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06c      	beq.n	80025da <HAL_RCC_OscConfig+0x12e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d168      	bne.n	80025da <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e3f6      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x78>
 8002516:	4b87      	ldr	r3, [pc, #540]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a86      	ldr	r2, [pc, #536]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e02e      	b.n	8002582 <HAL_RCC_OscConfig+0xd6>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x9a>
 800252c:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7d      	ldr	r2, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e01d      	b.n	8002582 <HAL_RCC_OscConfig+0xd6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0xbe>
 8002550:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a74      	ldr	r2, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0xd6>
 800256a:	4b72      	ldr	r3, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fe73 	bl	8001274 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002592:	f7fe fe6f 	bl	8001274 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e3aa      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a4:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0xe6>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fe5f 	bl	8001274 <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe5b 	bl	8001274 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e396      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x10e>
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80cb 	beq.w	8002780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_OscConfig+0x164>
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b18      	cmp	r3, #24
 8002604:	d156      	bne.n	80026b4 <HAL_RCC_OscConfig+0x208>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d151      	bne.n	80026b4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x17c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e368      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002628:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 0219 	bic.w	r2, r3, #25
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	493f      	ldr	r1, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800263a:	f7fe fe1b 	bl	8001274 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fe17 	bl	8001274 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e352      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	f7fe fe38 	bl	80012d4 <HAL_GetREVID>
 8002664:	4603      	mov	r3, r0
 8002666:	f241 0203 	movw	r2, #4099	; 0x1003
 800266a:	4293      	cmp	r3, r2
 800266c:	d817      	bhi.n	800269e <HAL_RCC_OscConfig+0x1f2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x1dc>
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800267e:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002686:	e07b      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	031b      	lsls	r3, r3, #12
 8002696:	4927      	ldr	r1, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269c:	e070      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	4921      	ldr	r1, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b2:	e065      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d048      	beq.n	800274e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 0219 	bic.w	r2, r3, #25
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fdd1 	bl	8001274 <HAL_GetTick>
 80026d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fdcd 	bl	8001274 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e308      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	f7fe fdee 	bl	80012d4 <HAL_GetREVID>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80026fe:	4293      	cmp	r3, r2
 8002700:	d81a      	bhi.n	8002738 <HAL_RCC_OscConfig+0x28c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x270>
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	6053      	str	r3, [r2, #4]
 800271a:	e031      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	4902      	ldr	r1, [pc, #8]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
 8002730:	e026      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400
 8002738:	4b9a      	ldr	r3, [pc, #616]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4997      	ldr	r1, [pc, #604]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e018      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b95      	ldr	r3, [pc, #596]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a94      	ldr	r2, [pc, #592]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fd8b 	bl	8001274 <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002762:	f7fe fd87 	bl	8001274 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e2c2      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002774:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a9 	beq.w	80028e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d007      	beq.n	80027b4 <HAL_RCC_OscConfig+0x308>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b18      	cmp	r3, #24
 80027a8:	d13a      	bne.n	8002820 <HAL_RCC_OscConfig+0x374>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d135      	bne.n	8002820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b4:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x320>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e296      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027cc:	f7fe fd82 	bl	80012d4 <HAL_GetREVID>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d817      	bhi.n	800280a <HAL_RCC_OscConfig+0x35e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_OscConfig+0x348>
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f2:	e075      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f4:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	069b      	lsls	r3, r3, #26
 8002802:	4968      	ldr	r1, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002808:	e06a      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800280a:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4962      	ldr	r1, [pc, #392]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281e:	e05f      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d042      	beq.n	80028ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5d      	ldr	r2, [pc, #372]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fd1e 	bl	8001274 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800283c:	f7fe fd1a 	bl	8001274 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e255      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284e:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285a:	f7fe fd3b 	bl	80012d4 <HAL_GetREVID>
 800285e:	4603      	mov	r3, r0
 8002860:	f241 0203 	movw	r2, #4099	; 0x1003
 8002864:	4293      	cmp	r3, r2
 8002866:	d817      	bhi.n	8002898 <HAL_RCC_OscConfig+0x3ec>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	2b20      	cmp	r3, #32
 800286e:	d108      	bne.n	8002882 <HAL_RCC_OscConfig+0x3d6>
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287e:	6053      	str	r3, [r2, #4]
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
 8002882:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	4944      	ldr	r1, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 8002896:	e023      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	493f      	ldr	r1, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60cb      	str	r3, [r1, #12]
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fcdb 	bl	8001274 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028c2:	f7fe fcd7 	bl	8001274 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e212      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d036      	beq.n	800295a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d019      	beq.n	8002928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fcb8 	bl	8001274 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe fcb4 	bl	8001274 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1ef      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x45c>
 8002926:	e018      	b.n	800295a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fc9e 	bl	8001274 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fc9a 	bl	8001274 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1d5      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d039      	beq.n	80029da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800297a:	f7fe fc7b 	bl	8001274 <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002982:	f7fe fc77 	bl	8001274 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1b2      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x4d6>
 80029a0:	e01b      	b.n	80029da <HAL_RCC_OscConfig+0x52e>
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a8:	4b9b      	ldr	r3, [pc, #620]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a9a      	ldr	r2, [pc, #616]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b4:	f7fe fc5e 	bl	8001274 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029bc:	f7fe fc5a 	bl	8001274 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e195      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ce:	4b92      	ldr	r3, [pc, #584]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8081 	beq.w	8002aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a8b      	ldr	r2, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fc3e 	bl	8001274 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fc3a 	bl	8001274 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e175      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0e:	4b83      	ldr	r3, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x584>
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	e02d      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x5a6>
 8002a38:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a76      	ldr	r2, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c8>
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a6b      	ldr	r2, [pc, #428]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a64      	ldr	r2, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fbee 	bl	8001274 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fbea 	bl	8001274 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e123      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab2:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x5f0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fbd8 	bl	8001274 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fbd4 	bl	8001274 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e10d      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ade:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8102 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afc:	2b18      	cmp	r3, #24
 8002afe:	f000 80bd 	beq.w	8002c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f040 809e 	bne.w	8002c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fbac 	bl	8001274 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fba8 	bl	8001274 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0e3      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x774>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4931      	ldr	r1, [pc, #196]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	628b      	str	r3, [r1, #40]	; 0x28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	3b01      	subs	r3, #1
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	3b01      	subs	r3, #1
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b88:	4923      	ldr	r1, [pc, #140]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba6:	00d2      	lsls	r2, r2, #3
 8002ba8:	491b      	ldr	r1, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f023 020c 	bic.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f023 0202 	bic.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fb31 	bl	8001274 <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	e011      	b.n	8002c3a <HAL_RCC_OscConfig+0x78e>
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	58024800 	.word	0x58024800
 8002c20:	fffffc0c 	.word	0xfffffc0c
 8002c24:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fb24 	bl	8001274 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e05f      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3a:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x77c>
 8002c46:	e057      	b.n	8002cf8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fb0e 	bl	8001274 <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fb0a 	bl	8001274 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e045      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x7b0>
 8002c7a:	e03d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_OscConfig+0x858>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d031      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0203 	and.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d12a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d122      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0a5b      	lsrs	r3, r3, #9
 8002cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0e1b      	lsrs	r3, r3, #24
 8002ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3730      	adds	r7, #48	; 0x30
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400

08002d08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e19c      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d910      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 020f 	bic.w	r2, r3, #15
 8002d32:	4985      	ldr	r1, [pc, #532]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e184      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d908      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d68:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4975      	ldr	r1, [pc, #468]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d96:	4b6d      	ldr	r3, [pc, #436]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	496a      	ldr	r1, [pc, #424]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc4:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	495e      	ldr	r1, [pc, #376]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4953      	ldr	r1, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d908      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f023 020f 	bic.w	r2, r3, #15
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4947      	ldr	r1, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d055      	beq.n	8002eea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4940      	ldr	r1, [pc, #256]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e58:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d121      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0f6      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d115      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0ea      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0de      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d6      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f023 0207 	bic.w	r2, r3, #7
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4925      	ldr	r1, [pc, #148]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe f9db 	bl	8001274 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec2:	f7fe f9d7 	bl	8001274 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0be      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d1eb      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d208      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	490e      	ldr	r1, [pc, #56]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d214      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 020f 	bic.w	r2, r3, #15
 8002f2e:	4906      	ldr	r1, [pc, #24]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e086      	b.n	8003056 <HAL_RCC_ClockConfig+0x34e>
 8002f48:	52002000 	.word	0x52002000
 8002f4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f6c:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	4939      	ldr	r1, [pc, #228]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d208      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	492e      	ldr	r1, [pc, #184]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d208      	bcs.n	8002fda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4922      	ldr	r1, [pc, #136]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d208      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8003004:	4313      	orrs	r3, r2
 8003006:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003008:	f000 f834 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	4912      	ldr	r1, [pc, #72]	; (8003064 <HAL_RCC_ClockConfig+0x35c>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_ClockConfig+0x358>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <HAL_RCC_ClockConfig+0x35c>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x360>)
 800303e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x364>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x368>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe f8c8 	bl	80011e0 <HAL_InitTick>
 8003050:	4603      	mov	r3, r0
 8003052:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	58024400 	.word	0x58024400
 8003064:	08006498 	.word	0x08006498
 8003068:	24000004 	.word	0x24000004
 800306c:	24000000 	.word	0x24000000
 8003070:	24000008 	.word	0x24000008

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307a:	4bb3      	ldr	r3, [pc, #716]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003082:	2b18      	cmp	r3, #24
 8003084:	f200 8155 	bhi.w	8003332 <HAL_RCC_GetSysClockFreq+0x2be>
 8003088:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_RCC_GetSysClockFreq+0x1c>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030f5 	.word	0x080030f5
 8003094:	08003333 	.word	0x08003333
 8003098:	08003333 	.word	0x08003333
 800309c:	08003333 	.word	0x08003333
 80030a0:	08003333 	.word	0x08003333
 80030a4:	08003333 	.word	0x08003333
 80030a8:	08003333 	.word	0x08003333
 80030ac:	08003333 	.word	0x08003333
 80030b0:	0800311b 	.word	0x0800311b
 80030b4:	08003333 	.word	0x08003333
 80030b8:	08003333 	.word	0x08003333
 80030bc:	08003333 	.word	0x08003333
 80030c0:	08003333 	.word	0x08003333
 80030c4:	08003333 	.word	0x08003333
 80030c8:	08003333 	.word	0x08003333
 80030cc:	08003333 	.word	0x08003333
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003333 	.word	0x08003333
 80030d8:	08003333 	.word	0x08003333
 80030dc:	08003333 	.word	0x08003333
 80030e0:	08003333 	.word	0x08003333
 80030e4:	08003333 	.word	0x08003333
 80030e8:	08003333 	.word	0x08003333
 80030ec:	08003333 	.word	0x08003333
 80030f0:	08003127 	.word	0x08003127
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f4:	4b94      	ldr	r3, [pc, #592]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003100:	4b91      	ldr	r3, [pc, #580]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	08db      	lsrs	r3, r3, #3
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	4a90      	ldr	r2, [pc, #576]	; (800334c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
 8003110:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003112:	e111      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003114:	4b8d      	ldr	r3, [pc, #564]	; (800334c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003116:	61bb      	str	r3, [r7, #24]
    break;
 8003118:	e10e      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800311a:	4b8d      	ldr	r3, [pc, #564]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800311c:	61bb      	str	r3, [r7, #24]
    break;
 800311e:	e10b      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003120:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003122:	61bb      	str	r3, [r7, #24]
    break;
 8003124:	e108      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003130:	4b85      	ldr	r3, [pc, #532]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800313c:	4b82      	ldr	r3, [pc, #520]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003146:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	08db      	lsrs	r3, r3, #3
 800314c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80e1 	beq.w	800332c <HAL_RCC_GetSysClockFreq+0x2b8>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b02      	cmp	r3, #2
 800316e:	f000 8083 	beq.w	8003278 <HAL_RCC_GetSysClockFreq+0x204>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f200 80a1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x248>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x114>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d056      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003186:	e099      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003188:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02d      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003194:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	4a6b      	ldr	r2, [pc, #428]	; (800334c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b62      	ldr	r3, [pc, #392]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031ee:	e087      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800335c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003212:	ed97 6a02 	vldr	s12, [r7, #8]
 8003216:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800321a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003232:	e065      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003246:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003256:	ed97 6a02 	vldr	s12, [r7, #8]
 800325a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003276:	e043      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003282:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328a:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329a:	ed97 6a02 	vldr	s12, [r7, #8]
 800329e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ba:	e021      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	0a5b      	lsrs	r3, r3, #9
 8003306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330a:	3301      	adds	r3, #1
 800330c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003318:	edd7 6a07 	vldr	s13, [r7, #28]
 800331c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003324:	ee17 3a90 	vmov	r3, s15
 8003328:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800332a:	e005      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    break;
 8003330:	e002      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003334:	61bb      	str	r3, [r7, #24]
    break;
 8003336:	bf00      	nop
  }

  return sysclockfreq;
 8003338:	69bb      	ldr	r3, [r7, #24]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	58024400 	.word	0x58024400
 800334c:	03d09000 	.word	0x03d09000
 8003350:	003d0900 	.word	0x003d0900
 8003354:	007a1200 	.word	0x007a1200
 8003358:	46000000 	.word	0x46000000
 800335c:	4c742400 	.word	0x4c742400
 8003360:	4a742400 	.word	0x4a742400
 8003364:	4af42400 	.word	0x4af42400

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800336e:	f7ff fe81 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003372:	4602      	mov	r2, r0
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	490f      	ldr	r1, [pc, #60]	; (80033bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003380:	5ccb      	ldrb	r3, [r1, r3]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024400 	.word	0x58024400
 80033bc:	08006498 	.word	0x08006498
 80033c0:	24000004 	.word	0x24000004
 80033c4:	24000000 	.word	0x24000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033cc:	f7ff ffcc 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	58024400 	.word	0x58024400
 80033f0:	08006498 	.word	0x08006498

080033f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033f8:	f7ff ffb6 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCC_GetPCLK2Freq+0x28>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	58024400 	.word	0x58024400
 800341c:	08006498 	.word	0x08006498

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003428:	2300      	movs	r3, #0
 800342a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800342c:	2300      	movs	r3, #0
 800342e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03f      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003444:	d02a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344a:	d824      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800344c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003450:	d018      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003456:	d81e      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800345c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003462:	e018      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4ba3      	ldr	r3, [pc, #652]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4aa2      	ldr	r2, [pc, #648]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003470:	e015      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f001 f9d5 	bl	8004828 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003482:	e00c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	2102      	movs	r1, #2
 800348a:	4618      	mov	r0, r3
 800348c:	f001 fa7e 	bl	800498c <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003494:	e003      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
      break;
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800349c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034a4:	4b93      	ldr	r3, [pc, #588]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b0:	4990      	ldr	r1, [pc, #576]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	650b      	str	r3, [r1, #80]	; 0x50
 80034b6:	e001      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03d      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d826      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034ed 	.word	0x080034ed
 80034dc:	080034fb 	.word	0x080034fb
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	08003525 	.word	0x08003525
 80034e8:	08003525 	.word	0x08003525
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ec:	4b81      	ldr	r3, [pc, #516]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a80      	ldr	r2, [pc, #512]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f8:	e015      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f991 	bl	8004828 <RCCEx_PLL2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800350a:	e00c      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fa3a 	bl	800498c <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
      break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352c:	4b71      	ldr	r3, [pc, #452]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	496e      	ldr	r1, [pc, #440]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	650b      	str	r3, [r1, #80]	; 0x50
 800353e:	e001      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354c:	2b00      	cmp	r3, #0
 800354e:	d042      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d02b      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d825      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003560:	2bc0      	cmp	r3, #192	; 0xc0
 8003562:	d028      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003564:	2bc0      	cmp	r3, #192	; 0xc0
 8003566:	d821      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d016      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d81d      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d007      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003578:	e018      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003586:	e017      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f94a 	bl	8004828 <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003598:	e00e      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3324      	adds	r3, #36	; 0x24
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 f9f3 	bl	800498c <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035aa:	e005      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	75fb      	strb	r3, [r7, #23]
      break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035be:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	494a      	ldr	r1, [pc, #296]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	650b      	str	r3, [r1, #80]	; 0x50
 80035d0:	e001      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d049      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ec:	d030      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f2:	d82a      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035f8:	d02c      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035fe:	d824      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003604:	d018      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360a:	d81e      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003614:	d007      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003616:	e018      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003624:	e017      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f8fb 	bl	8004828 <RCCEx_PLL2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003636:	e00e      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3324      	adds	r3, #36	; 0x24
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 f9a4 	bl	800498c <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003648:	e005      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800366a:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	658b      	str	r3, [r1, #88]	; 0x58
 8003670:	e001      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04b      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368c:	d030      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800368e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003692:	d82a      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003698:	d02e      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800369a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800369e:	d824      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a4:	d018      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036aa:	d81e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b4:	d007      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c4:	e019      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f8ab 	bl	8004828 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036d6:	e010      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3324      	adds	r3, #36	; 0x24
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f954 	bl	800498c <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e8:	e007      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80036f4:	58024400 	.word	0x58024400
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003700:	4b99      	ldr	r3, [pc, #612]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800370e:	4996      	ldr	r1, [pc, #600]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003710:	4313      	orrs	r3, r2
 8003712:	658b      	str	r3, [r1, #88]	; 0x58
 8003714:	e001      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d032      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	2b30      	cmp	r3, #48	; 0x30
 800372c:	d01c      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800372e:	2b30      	cmp	r3, #48	; 0x30
 8003730:	d817      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d00c      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d813      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d10f      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003742:	4b89      	ldr	r3, [pc, #548]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	4a88      	ldr	r2, [pc, #544]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800374e:	e00e      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f866 	bl	8004828 <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003760:	e005      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
      break;
 8003766:	e002      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800376c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003774:	4b7c      	ldr	r3, [pc, #496]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	4979      	ldr	r1, [pc, #484]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003782:	4313      	orrs	r3, r2
 8003784:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003786:	e001      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d047      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d030      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80037a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a6:	d82a      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037ac:	d02c      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b2:	d824      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d018      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	d81e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d007      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80037ca:	e018      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037cc:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d8:	e017      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 f821 	bl	8004828 <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037ea:	e00e      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3324      	adds	r3, #36	; 0x24
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f8ca 	bl	800498c <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037fc:	e005      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003810:	4b55      	ldr	r3, [pc, #340]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	4952      	ldr	r1, [pc, #328]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800381e:	4313      	orrs	r3, r2
 8003820:	650b      	str	r3, [r1, #80]	; 0x50
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d049      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d02e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800383e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003842:	d828      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003844:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003848:	d02a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800384a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384e:	d822      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003850:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003854:	d026      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385a:	d81c      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800385c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003860:	d010      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003866:	d816      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d111      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 ffd5 	bl	8004828 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003882:	e012      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3324      	adds	r3, #36	; 0x24
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f87e 	bl	800498c <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003894:	e009      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
      break;
 800389a:	e006      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800389c:	bf00      	nop
 800389e:	e004      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	492a      	ldr	r1, [pc, #168]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	650b      	str	r3, [r1, #80]	; 0x50
 80038c2:	e001      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d04d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038de:	d02e      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80038e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e4:	d828      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ea:	d02a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d822      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f6:	d026      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80038f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038fc:	d81c      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003902:	d010      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d816      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01d      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800390e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003912:	d111      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 ff84 	bl	8004828 <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003924:	e012      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3324      	adds	r3, #36	; 0x24
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f001 f82d 	bl	800498c <RCCEx_PLL3_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003936:	e009      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	75fb      	strb	r3, [r7, #23]
      break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800393e:	bf00      	nop
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003960:	4901      	ldr	r1, [pc, #4]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003962:	4313      	orrs	r3, r2
 8003964:	658b      	str	r3, [r1, #88]	; 0x58
 8003966:	e003      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02f      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d00e      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398a:	d814      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003994:	d10f      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003996:	4baf      	ldr	r3, [pc, #700]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	4aae      	ldr	r2, [pc, #696]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039a2:	e00c      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 ff3c 	bl	8004828 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039b4:	e003      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80039bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039c4:	4ba3      	ldr	r3, [pc, #652]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d0:	49a0      	ldr	r1, [pc, #640]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	650b      	str	r3, [r1, #80]	; 0x50
 80039d6:	e001      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d032      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d81b      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a09 	.word	0x08003a09
 8003a00:	08003a17 	.word	0x08003a17
 8003a04:	08003a2f 	.word	0x08003a2f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a08:	4b92      	ldr	r3, [pc, #584]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	4a91      	ldr	r2, [pc, #580]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a14:	e00c      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ff03 	bl	8004828 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a26:	e003      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a36:	4b87      	ldr	r3, [pc, #540]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4984      	ldr	r1, [pc, #528]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a48:	e001      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8086 	beq.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fc04 	bl	8001274 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6e:	e009      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fd fc00 	bl	8001274 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d902      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	75fb      	strb	r3, [r7, #23]
        break;
 8003a82:	e005      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a84:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d166      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a96:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aa0:	4053      	eors	r3, r2
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d013      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab4:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a66      	ldr	r2, [pc, #408]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac0:	4b64      	ldr	r3, [pc, #400]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003acc:	4a61      	ldr	r2, [pc, #388]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003adc:	d115      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd fbc9 	bl	8001274 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae4:	e00b      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fbc5 	bl	8001274 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d902      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	75fb      	strb	r3, [r7, #23]
            break;
 8003afc:	e005      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afe:	4b55      	ldr	r3, [pc, #340]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ed      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d126      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b20:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2e:	0919      	lsrs	r1, r3, #4
 8003b30:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b32:	400b      	ands	r3, r1
 8003b34:	4947      	ldr	r1, [pc, #284]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b3c:	4b45      	ldr	r3, [pc, #276]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4a44      	ldr	r2, [pc, #272]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b46:	6113      	str	r3, [r2, #16]
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b56:	493f      	ldr	r1, [pc, #252]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	670b      	str	r3, [r1, #112]	; 0x70
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
 8003b60:	75bb      	strb	r3, [r7, #22]
 8003b62:	e001      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8085 	beq.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7a:	2b28      	cmp	r3, #40	; 0x28
 8003b7c:	d866      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003c61 	.word	0x08003c61
 8003b88:	08003c4d 	.word	0x08003c4d
 8003b8c:	08003c4d 	.word	0x08003c4d
 8003b90:	08003c4d 	.word	0x08003c4d
 8003b94:	08003c4d 	.word	0x08003c4d
 8003b98:	08003c4d 	.word	0x08003c4d
 8003b9c:	08003c4d 	.word	0x08003c4d
 8003ba0:	08003c4d 	.word	0x08003c4d
 8003ba4:	08003c29 	.word	0x08003c29
 8003ba8:	08003c4d 	.word	0x08003c4d
 8003bac:	08003c4d 	.word	0x08003c4d
 8003bb0:	08003c4d 	.word	0x08003c4d
 8003bb4:	08003c4d 	.word	0x08003c4d
 8003bb8:	08003c4d 	.word	0x08003c4d
 8003bbc:	08003c4d 	.word	0x08003c4d
 8003bc0:	08003c4d 	.word	0x08003c4d
 8003bc4:	08003c3b 	.word	0x08003c3b
 8003bc8:	08003c4d 	.word	0x08003c4d
 8003bcc:	08003c4d 	.word	0x08003c4d
 8003bd0:	08003c4d 	.word	0x08003c4d
 8003bd4:	08003c4d 	.word	0x08003c4d
 8003bd8:	08003c4d 	.word	0x08003c4d
 8003bdc:	08003c4d 	.word	0x08003c4d
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c61 	.word	0x08003c61
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c4d 	.word	0x08003c4d
 8003bf0:	08003c4d 	.word	0x08003c4d
 8003bf4:	08003c4d 	.word	0x08003c4d
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c61 	.word	0x08003c61
 8003c08:	08003c4d 	.word	0x08003c4d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c4d 	.word	0x08003c4d
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c61 	.word	0x08003c61
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fdfa 	bl	8004828 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c38:	e013      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fea3 	bl	800498c <RCCEx_PLL3_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	e007      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	58024800 	.word	0x58024800
 8003c5c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c68:	4b96      	ldr	r3, [pc, #600]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c74:	4993      	ldr	r1, [pc, #588]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	654b      	str	r3, [r1, #84]	; 0x54
 8003c7a:	e001      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d038      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d821      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cdf 	.word	0x08003cdf
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003cc7 	.word	0x08003cc7
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fdb4 	bl	8004828 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe5d 	bl	800498c <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ce6:	4b77      	ldr	r3, [pc, #476]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f023 0207 	bic.w	r2, r3, #7
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	4974      	ldr	r1, [pc, #464]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	654b      	str	r3, [r1, #84]	; 0x54
 8003cf8:	e001      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d03a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d821      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d5f 	.word	0x08003d5f
 8003d20:	08003d35 	.word	0x08003d35
 8003d24:	08003d47 	.word	0x08003d47
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d5f 	.word	0x08003d5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd74 	bl	8004828 <RCCEx_PLL2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3324      	adds	r3, #36	; 0x24
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fe1d 	bl	800498c <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d66:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	4953      	ldr	r1, [pc, #332]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d04b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d96:	d02e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9c:	d828      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d02a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d822      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dae:	d026      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003db0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db4:	d81c      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dba:	d010      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc0:	d816      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01d      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dca:	d111      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fd28 	bl	8004828 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e012      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fdd1 	bl	800498c <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003df6:	bf00      	nop
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	492a      	ldr	r1, [pc, #168]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	654b      	str	r3, [r1, #84]	; 0x54
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d04d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e3a:	d02e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e40:	d828      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d02a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d822      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e52:	d026      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e58:	d81c      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5e:	d010      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e64:	d816      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01d      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fcd6 	bl	8004828 <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e80:	e012      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3324      	adds	r3, #36	; 0x24
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fd7f 	bl	800498c <RCCEx_PLL3_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ebc:	4901      	ldr	r1, [pc, #4]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee2:	d02e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ee4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee8:	d828      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d02a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d822      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003efa:	d026      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003efc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f00:	d81c      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0c:	d816      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f16:	d111      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fc82 	bl	8004828 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f28:	e012      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fd2b 	bl	800498c <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f42:	bf00      	nop
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f56:	4b9d      	ldr	r3, [pc, #628]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f64:	4999      	ldr	r1, [pc, #612]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d10a      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3324      	adds	r3, #36	; 0x24
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fcfc 	bl	800498c <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	4987      	ldr	r1, [pc, #540]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fcdb 	bl	800498c <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fe0:	4b7a      	ldr	r3, [pc, #488]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	4977      	ldr	r1, [pc, #476]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d034      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400a:	d01d      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800400c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004010:	d817      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401a:	d009      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800401c:	e011      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fbff 	bl	8004828 <RCCEx_PLL2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800402e:	e00c      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	2102      	movs	r1, #2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fca8 	bl	800498c <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
      break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800405e:	495b      	ldr	r1, [pc, #364]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004060:	4313      	orrs	r3, r2
 8004062:	658b      	str	r3, [r1, #88]	; 0x58
 8004064:	e001      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d033      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004080:	d01c      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004086:	d816      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800408e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004092:	d007      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004094:	e00f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a4c      	ldr	r2, [pc, #304]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040a2:	e00c      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fc6e 	bl	800498c <RCCEx_PLL3_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80040bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c4:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	493e      	ldr	r1, [pc, #248]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	654b      	str	r3, [r1, #84]	; 0x54
 80040d8:	e001      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d029      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f6:	d007      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fa:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	4a33      	ldr	r2, [pc, #204]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fb8a 	bl	8004828 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	4926      	ldr	r1, [pc, #152]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fc1b 	bl	800498c <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d033      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004174:	d017      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417a:	d811      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800417c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004180:	d013      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d80b      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800418c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004190:	d106      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004192:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800419e:	e007      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	4902      	ldr	r1, [pc, #8]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	654b      	str	r3, [r1, #84]	; 0x54
 80041c8:	e004      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	492e      	ldr	r1, [pc, #184]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800420c:	4926      	ldr	r1, [pc, #152]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d008      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422a:	491f      	ldr	r1, [pc, #124]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800422c:	4313      	orrs	r3, r2
 800422e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800423c:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004246:	6113      	str	r3, [r2, #16]
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004252:	4915      	ldr	r1, [pc, #84]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004254:	4313      	orrs	r3, r2
 8004256:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	da08      	bge.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004264:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800426e:	4313      	orrs	r3, r2
 8004270:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	4906      	ldr	r1, [pc, #24]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800428e:	4313      	orrs	r3, r2
 8004290:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004292:	7dbb      	ldrb	r3, [r7, #22]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400

080042ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042b0:	f7ff f85a 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58024400 	.word	0x58024400
 80042d4:	08006498 	.word	0x08006498

080042d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042e0:	4ba1      	ldr	r3, [pc, #644]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042ea:	4b9f      	ldr	r3, [pc, #636]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	0b1b      	lsrs	r3, r3, #12
 80042f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042f6:	4b9c      	ldr	r3, [pc, #624]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004302:	4b99      	ldr	r3, [pc, #612]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8111 	beq.w	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f000 8083 	beq.w	8004434 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f200 80a1 	bhi.w	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d056      	beq.n	80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004342:	e099      	b.n	8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004344:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004350:	4b85      	ldr	r3, [pc, #532]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	4a84      	ldr	r2, [pc, #528]	; (800456c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043aa:	e087      	b.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ee:	e065      	b.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a03 	vldr	s12, [r7, #12]
 8004416:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004432:	e043      	b.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800457c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004476:	e021      	b.n	80044bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a03 	vldr	s12, [r7, #12]
 800449e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	0a5b      	lsrs	r3, r3, #9
 80044c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e2:	ee17 2a90 	vmov	r2, s15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004504:	edd7 6a07 	vldr	s13, [r7, #28]
 8004508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004510:	ee17 2a90 	vmov	r2, s15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004518:	4b13      	ldr	r3, [pc, #76]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004532:	edd7 6a07 	vldr	s13, [r7, #28]
 8004536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453e:	ee17 2a90 	vmov	r2, s15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004546:	e008      	b.n	800455a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
}
 800455a:	bf00      	nop
 800455c:	3724      	adds	r7, #36	; 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	03d09000 	.word	0x03d09000
 8004570:	46000000 	.word	0x46000000
 8004574:	4c742400 	.word	0x4c742400
 8004578:	4a742400 	.word	0x4a742400
 800457c:	4af42400 	.word	0x4af42400

08004580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004588:	4ba1      	ldr	r3, [pc, #644]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004592:	4b9f      	ldr	r3, [pc, #636]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	0d1b      	lsrs	r3, r3, #20
 8004598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800459e:	4b9c      	ldr	r3, [pc, #624]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045aa:	4b99      	ldr	r3, [pc, #612]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	08db      	lsrs	r3, r3, #3
 80045b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8111 	beq.w	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	f000 8083 	beq.w	80046dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	f200 80a1 	bhi.w	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d056      	beq.n	8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045ea:	e099      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ec:	4b88      	ldr	r3, [pc, #544]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02d      	beq.n	8004654 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f8:	4b85      	ldr	r3, [pc, #532]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	08db      	lsrs	r3, r3, #3
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	4a84      	ldr	r2, [pc, #528]	; (8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b7b      	ldr	r3, [pc, #492]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a03 	vldr	s12, [r7, #12]
 8004636:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004652:	e087      	b.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b6a      	ldr	r3, [pc, #424]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a03 	vldr	s12, [r7, #12]
 800467a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004696:	e065      	b.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046aa:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80046be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046da:	e043      	b.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b48      	ldr	r3, [pc, #288]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471e:	e021      	b.n	8004764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b37      	ldr	r3, [pc, #220]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004762:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800477a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800477e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800478a:	ee17 2a90 	vmov	r2, s15
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479c:	ee07 3a90 	vmov	s15, r3
 80047a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80047b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b8:	ee17 2a90 	vmov	r2, s15
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047da:	edd7 6a07 	vldr	s13, [r7, #28]
 80047de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e6:	ee17 2a90 	vmov	r2, s15
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	bf00      	nop
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	58024400 	.word	0x58024400
 8004814:	03d09000 	.word	0x03d09000
 8004818:	46000000 	.word	0x46000000
 800481c:	4c742400 	.word	0x4c742400
 8004820:	4a742400 	.word	0x4a742400
 8004824:	4af42400 	.word	0x4af42400

08004828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004836:	4b53      	ldr	r3, [pc, #332]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b03      	cmp	r3, #3
 8004840:	d101      	bne.n	8004846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e099      	b.n	800497a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4e      	ldr	r2, [pc, #312]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800484c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fc fd0f 	bl	8001274 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004858:	e008      	b.n	800486c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800485a:	f7fc fd0b 	bl	8001274 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e086      	b.n	800497a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800486c:	4b45      	ldr	r3, [pc, #276]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f0      	bne.n	800485a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	493f      	ldr	r1, [pc, #252]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	628b      	str	r3, [r1, #40]	; 0x28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	3b01      	subs	r3, #1
 8004892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	3b01      	subs	r3, #1
 800489c:	025b      	lsls	r3, r3, #9
 800489e:	b29b      	uxth	r3, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048bc:	4931      	ldr	r1, [pc, #196]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	492d      	ldr	r1, [pc, #180]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	f023 0220 	bic.w	r2, r3, #32
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	4928      	ldr	r1, [pc, #160]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <RCCEx_PLL2_Config+0x160>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	69d2      	ldr	r2, [r2, #28]
 80048fe:	00d2      	lsls	r2, r2, #3
 8004900:	4920      	ldr	r1, [pc, #128]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800490c:	f043 0310 	orr.w	r3, r3, #16
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800491e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004924:	e00f      	b.n	8004946 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d106      	bne.n	800493a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004938:	e005      	b.n	8004946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a11      	ldr	r2, [pc, #68]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800494c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004952:	f7fc fc8f 	bl	8001274 <HAL_GetTick>
 8004956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004958:	e008      	b.n	800496c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800495a:	f7fc fc8b 	bl	8001274 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e006      	b.n	800497a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
 8004988:	ffff0007 	.word	0xffff0007

0800498c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d101      	bne.n	80049aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e099      	b.n	8004ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049aa:	4b4f      	ldr	r3, [pc, #316]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc fc5d 	bl	8001274 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049be:	f7fc fc59 	bl	8001274 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e086      	b.n	8004ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	051b      	lsls	r3, r3, #20
 80049ea:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	628b      	str	r3, [r1, #40]	; 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a20:	4931      	ldr	r1, [pc, #196]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	492d      	ldr	r1, [pc, #180]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4928      	ldr	r1, [pc, #160]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <RCCEx_PLL3_Config+0x160>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	69d2      	ldr	r2, [r2, #28]
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	4920      	ldr	r1, [pc, #128]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a88:	e00f      	b.n	8004aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a9c:	e005      	b.n	8004aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fc fbdd 	bl	8001274 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004abe:	f7fc fbd9 	bl	8001274 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	ffff0007 	.word	0xffff0007

08004af0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0f1      	b.n	8004ce6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a78      	ldr	r2, [pc, #480]	; (8004cf0 <HAL_SPI_Init+0x200>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00f      	beq.n	8004b32 <HAL_SPI_Init+0x42>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a77      	ldr	r2, [pc, #476]	; (8004cf4 <HAL_SPI_Init+0x204>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00a      	beq.n	8004b32 <HAL_SPI_Init+0x42>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <HAL_SPI_Init+0x208>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d005      	beq.n	8004b32 <HAL_SPI_Init+0x42>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d901      	bls.n	8004b32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e0d9      	b.n	8004ce6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8e2 	bl	8004cfc <SPI_GetPacketSize>
 8004b38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	; (8004cf0 <HAL_SPI_Init+0x200>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00c      	beq.n	8004b5e <HAL_SPI_Init+0x6e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6a      	ldr	r2, [pc, #424]	; (8004cf4 <HAL_SPI_Init+0x204>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <HAL_SPI_Init+0x6e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a69      	ldr	r2, [pc, #420]	; (8004cf8 <HAL_SPI_Init+0x208>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_Init+0x6e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d811      	bhi.n	8004b82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b62:	4a63      	ldr	r2, [pc, #396]	; (8004cf0 <HAL_SPI_Init+0x200>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a61      	ldr	r2, [pc, #388]	; (8004cf4 <HAL_SPI_Init+0x204>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_SPI_Init+0x8c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_SPI_Init+0x208>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d104      	bne.n	8004b86 <HAL_SPI_Init+0x96>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d901      	bls.n	8004b86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0af      	b.n	8004ce6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc f966 	bl	8000e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004bc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bcc:	d119      	bne.n	8004c02 <HAL_SPI_Init+0x112>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d103      	bne.n	8004be0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10c      	bne.n	8004c02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf0:	d107      	bne.n	8004c02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	ea42 0103 	orr.w	r1, r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	ea42 0103 	orr.w	r1, r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d113      	bne.n	8004ca2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ca0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40013000 	.word	0x40013000
 8004cf4:	40003800 	.word	0x40003800
 8004cf8:	40003c00 	.word	0x40003c00

08004cfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3307      	adds	r3, #7
 8004d1a:	08db      	lsrs	r3, r3, #3
 8004d1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e042      	b.n	8004dca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc f8f2 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2224      	movs	r2, #36	; 0x24
 8004d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f82d 	bl	8004dd4 <UART_SetConfig>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e022      	b.n	8004dca <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fd89 	bl	80058a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fe10 	bl	80059e8 <UART_CheckIdleState>
 8004dc8:	4603      	mov	r3, r0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b092      	sub	sp, #72	; 0x48
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4bbe      	ldr	r3, [pc, #760]	; (80050fc <UART_SetConfig+0x328>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4ab3      	ldr	r2, [pc, #716]	; (8005100 <UART_SetConfig+0x32c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4baf      	ldr	r3, [pc, #700]	; (8005104 <UART_SetConfig+0x330>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f023 010f 	bic.w	r1, r3, #15
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4aa6      	ldr	r2, [pc, #664]	; (8005108 <UART_SetConfig+0x334>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d177      	bne.n	8004f64 <UART_SetConfig+0x190>
 8004e74:	4ba5      	ldr	r3, [pc, #660]	; (800510c <UART_SetConfig+0x338>)
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7c:	2b28      	cmp	r3, #40	; 0x28
 8004e7e:	d86d      	bhi.n	8004f5c <UART_SetConfig+0x188>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0xb4>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f5d 	.word	0x08004f5d
 8004e90:	08004f5d 	.word	0x08004f5d
 8004e94:	08004f5d 	.word	0x08004f5d
 8004e98:	08004f5d 	.word	0x08004f5d
 8004e9c:	08004f5d 	.word	0x08004f5d
 8004ea0:	08004f5d 	.word	0x08004f5d
 8004ea4:	08004f5d 	.word	0x08004f5d
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f5d 	.word	0x08004f5d
 8004eb0:	08004f5d 	.word	0x08004f5d
 8004eb4:	08004f5d 	.word	0x08004f5d
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f5d 	.word	0x08004f5d
 8004ec0:	08004f5d 	.word	0x08004f5d
 8004ec4:	08004f5d 	.word	0x08004f5d
 8004ec8:	08004f3d 	.word	0x08004f3d
 8004ecc:	08004f5d 	.word	0x08004f5d
 8004ed0:	08004f5d 	.word	0x08004f5d
 8004ed4:	08004f5d 	.word	0x08004f5d
 8004ed8:	08004f5d 	.word	0x08004f5d
 8004edc:	08004f5d 	.word	0x08004f5d
 8004ee0:	08004f5d 	.word	0x08004f5d
 8004ee4:	08004f5d 	.word	0x08004f5d
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f5d 	.word	0x08004f5d
 8004ef0:	08004f5d 	.word	0x08004f5d
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f4d 	.word	0x08004f4d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f55 	.word	0x08004f55
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f32:	e222      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3a:	e21e      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e21a      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e216      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e212      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e20e      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e20a      	b.n	800537a <UART_SetConfig+0x5a6>
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a69      	ldr	r2, [pc, #420]	; (8005110 <UART_SetConfig+0x33c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d130      	bne.n	8004fd0 <UART_SetConfig+0x1fc>
 8004f6e:	4b67      	ldr	r3, [pc, #412]	; (800510c <UART_SetConfig+0x338>)
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d826      	bhi.n	8004fc8 <UART_SetConfig+0x1f4>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x1ac>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f99 	.word	0x08004f99
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	08004fa9 	.word	0x08004fa9
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e1ec      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e1e8      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e1e4      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e1e0      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fb8:	2320      	movs	r3, #32
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e1dc      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fc0:	2340      	movs	r3, #64	; 0x40
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e1d8      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e1d4      	b.n	800537a <UART_SetConfig+0x5a6>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a4f      	ldr	r2, [pc, #316]	; (8005114 <UART_SetConfig+0x340>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d130      	bne.n	800503c <UART_SetConfig+0x268>
 8004fda:	4b4c      	ldr	r3, [pc, #304]	; (800510c <UART_SetConfig+0x338>)
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d826      	bhi.n	8005034 <UART_SetConfig+0x260>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x218>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005005 	.word	0x08005005
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	08005015 	.word	0x08005015
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e1b6      	b.n	800537a <UART_SetConfig+0x5a6>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e1b2      	b.n	800537a <UART_SetConfig+0x5a6>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e1ae      	b.n	800537a <UART_SetConfig+0x5a6>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e1aa      	b.n	800537a <UART_SetConfig+0x5a6>
 8005024:	2320      	movs	r3, #32
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e1a6      	b.n	800537a <UART_SetConfig+0x5a6>
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e1a2      	b.n	800537a <UART_SetConfig+0x5a6>
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e19e      	b.n	800537a <UART_SetConfig+0x5a6>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a35      	ldr	r2, [pc, #212]	; (8005118 <UART_SetConfig+0x344>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d130      	bne.n	80050a8 <UART_SetConfig+0x2d4>
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <UART_SetConfig+0x338>)
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b05      	cmp	r3, #5
 8005050:	d826      	bhi.n	80050a0 <UART_SetConfig+0x2cc>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x284>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005071 	.word	0x08005071
 800505c:	08005079 	.word	0x08005079
 8005060:	08005081 	.word	0x08005081
 8005064:	08005089 	.word	0x08005089
 8005068:	08005091 	.word	0x08005091
 800506c:	08005099 	.word	0x08005099
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e180      	b.n	800537a <UART_SetConfig+0x5a6>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e17c      	b.n	800537a <UART_SetConfig+0x5a6>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e178      	b.n	800537a <UART_SetConfig+0x5a6>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e174      	b.n	800537a <UART_SetConfig+0x5a6>
 8005090:	2320      	movs	r3, #32
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e170      	b.n	800537a <UART_SetConfig+0x5a6>
 8005098:	2340      	movs	r3, #64	; 0x40
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e16c      	b.n	800537a <UART_SetConfig+0x5a6>
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e168      	b.n	800537a <UART_SetConfig+0x5a6>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <UART_SetConfig+0x348>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d142      	bne.n	8005138 <UART_SetConfig+0x364>
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <UART_SetConfig+0x338>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d838      	bhi.n	8005130 <UART_SetConfig+0x35c>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x2f0>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050dd 	.word	0x080050dd
 80050c8:	080050e5 	.word	0x080050e5
 80050cc:	080050ed 	.word	0x080050ed
 80050d0:	080050f5 	.word	0x080050f5
 80050d4:	08005121 	.word	0x08005121
 80050d8:	08005129 	.word	0x08005129
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e14a      	b.n	800537a <UART_SetConfig+0x5a6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e146      	b.n	800537a <UART_SetConfig+0x5a6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e142      	b.n	800537a <UART_SetConfig+0x5a6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e13e      	b.n	800537a <UART_SetConfig+0x5a6>
 80050fc:	cfff69f3 	.word	0xcfff69f3
 8005100:	58000c00 	.word	0x58000c00
 8005104:	11fff4ff 	.word	0x11fff4ff
 8005108:	40011000 	.word	0x40011000
 800510c:	58024400 	.word	0x58024400
 8005110:	40004400 	.word	0x40004400
 8005114:	40004800 	.word	0x40004800
 8005118:	40004c00 	.word	0x40004c00
 800511c:	40005000 	.word	0x40005000
 8005120:	2320      	movs	r3, #32
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e128      	b.n	800537a <UART_SetConfig+0x5a6>
 8005128:	2340      	movs	r3, #64	; 0x40
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e124      	b.n	800537a <UART_SetConfig+0x5a6>
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005136:	e120      	b.n	800537a <UART_SetConfig+0x5a6>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4acb      	ldr	r2, [pc, #812]	; (800546c <UART_SetConfig+0x698>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d176      	bne.n	8005230 <UART_SetConfig+0x45c>
 8005142:	4bcb      	ldr	r3, [pc, #812]	; (8005470 <UART_SetConfig+0x69c>)
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514a:	2b28      	cmp	r3, #40	; 0x28
 800514c:	d86c      	bhi.n	8005228 <UART_SetConfig+0x454>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x380>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	080051f9 	.word	0x080051f9
 8005158:	08005229 	.word	0x08005229
 800515c:	08005229 	.word	0x08005229
 8005160:	08005229 	.word	0x08005229
 8005164:	08005229 	.word	0x08005229
 8005168:	08005229 	.word	0x08005229
 800516c:	08005229 	.word	0x08005229
 8005170:	08005229 	.word	0x08005229
 8005174:	08005201 	.word	0x08005201
 8005178:	08005229 	.word	0x08005229
 800517c:	08005229 	.word	0x08005229
 8005180:	08005229 	.word	0x08005229
 8005184:	08005229 	.word	0x08005229
 8005188:	08005229 	.word	0x08005229
 800518c:	08005229 	.word	0x08005229
 8005190:	08005229 	.word	0x08005229
 8005194:	08005209 	.word	0x08005209
 8005198:	08005229 	.word	0x08005229
 800519c:	08005229 	.word	0x08005229
 80051a0:	08005229 	.word	0x08005229
 80051a4:	08005229 	.word	0x08005229
 80051a8:	08005229 	.word	0x08005229
 80051ac:	08005229 	.word	0x08005229
 80051b0:	08005229 	.word	0x08005229
 80051b4:	08005211 	.word	0x08005211
 80051b8:	08005229 	.word	0x08005229
 80051bc:	08005229 	.word	0x08005229
 80051c0:	08005229 	.word	0x08005229
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005229 	.word	0x08005229
 80051cc:	08005229 	.word	0x08005229
 80051d0:	08005229 	.word	0x08005229
 80051d4:	08005219 	.word	0x08005219
 80051d8:	08005229 	.word	0x08005229
 80051dc:	08005229 	.word	0x08005229
 80051e0:	08005229 	.word	0x08005229
 80051e4:	08005229 	.word	0x08005229
 80051e8:	08005229 	.word	0x08005229
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005229 	.word	0x08005229
 80051f4:	08005221 	.word	0x08005221
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e0bc      	b.n	800537a <UART_SetConfig+0x5a6>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e0b8      	b.n	800537a <UART_SetConfig+0x5a6>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e0b4      	b.n	800537a <UART_SetConfig+0x5a6>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e0b0      	b.n	800537a <UART_SetConfig+0x5a6>
 8005218:	2320      	movs	r3, #32
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e0ac      	b.n	800537a <UART_SetConfig+0x5a6>
 8005220:	2340      	movs	r3, #64	; 0x40
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e0a8      	b.n	800537a <UART_SetConfig+0x5a6>
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e0a4      	b.n	800537a <UART_SetConfig+0x5a6>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a8f      	ldr	r2, [pc, #572]	; (8005474 <UART_SetConfig+0x6a0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d130      	bne.n	800529c <UART_SetConfig+0x4c8>
 800523a:	4b8d      	ldr	r3, [pc, #564]	; (8005470 <UART_SetConfig+0x69c>)
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b05      	cmp	r3, #5
 8005244:	d826      	bhi.n	8005294 <UART_SetConfig+0x4c0>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x478>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005265 	.word	0x08005265
 8005250:	0800526d 	.word	0x0800526d
 8005254:	08005275 	.word	0x08005275
 8005258:	0800527d 	.word	0x0800527d
 800525c:	08005285 	.word	0x08005285
 8005260:	0800528d 	.word	0x0800528d
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526a:	e086      	b.n	800537a <UART_SetConfig+0x5a6>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005272:	e082      	b.n	800537a <UART_SetConfig+0x5a6>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e07e      	b.n	800537a <UART_SetConfig+0x5a6>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e07a      	b.n	800537a <UART_SetConfig+0x5a6>
 8005284:	2320      	movs	r3, #32
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e076      	b.n	800537a <UART_SetConfig+0x5a6>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e072      	b.n	800537a <UART_SetConfig+0x5a6>
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e06e      	b.n	800537a <UART_SetConfig+0x5a6>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a75      	ldr	r2, [pc, #468]	; (8005478 <UART_SetConfig+0x6a4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d130      	bne.n	8005308 <UART_SetConfig+0x534>
 80052a6:	4b72      	ldr	r3, [pc, #456]	; (8005470 <UART_SetConfig+0x69c>)
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d826      	bhi.n	8005300 <UART_SetConfig+0x52c>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x4e4>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052d1 	.word	0x080052d1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e050      	b.n	800537a <UART_SetConfig+0x5a6>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e04c      	b.n	800537a <UART_SetConfig+0x5a6>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e048      	b.n	800537a <UART_SetConfig+0x5a6>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e044      	b.n	800537a <UART_SetConfig+0x5a6>
 80052f0:	2320      	movs	r3, #32
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e040      	b.n	800537a <UART_SetConfig+0x5a6>
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e03c      	b.n	800537a <UART_SetConfig+0x5a6>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e038      	b.n	800537a <UART_SetConfig+0x5a6>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a5b      	ldr	r2, [pc, #364]	; (800547c <UART_SetConfig+0x6a8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d130      	bne.n	8005374 <UART_SetConfig+0x5a0>
 8005312:	4b57      	ldr	r3, [pc, #348]	; (8005470 <UART_SetConfig+0x69c>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b05      	cmp	r3, #5
 800531c:	d826      	bhi.n	800536c <UART_SetConfig+0x598>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x550>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	2302      	movs	r3, #2
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e01a      	b.n	800537a <UART_SetConfig+0x5a6>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e016      	b.n	800537a <UART_SetConfig+0x5a6>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e012      	b.n	800537a <UART_SetConfig+0x5a6>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535a:	e00e      	b.n	800537a <UART_SetConfig+0x5a6>
 800535c:	2320      	movs	r3, #32
 800535e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005362:	e00a      	b.n	800537a <UART_SetConfig+0x5a6>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e006      	b.n	800537a <UART_SetConfig+0x5a6>
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e002      	b.n	800537a <UART_SetConfig+0x5a6>
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a3f      	ldr	r2, [pc, #252]	; (800547c <UART_SetConfig+0x6a8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f040 80f8 	bne.w	8005576 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005386:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800538a:	2b20      	cmp	r3, #32
 800538c:	dc46      	bgt.n	800541c <UART_SetConfig+0x648>
 800538e:	2b02      	cmp	r3, #2
 8005390:	f2c0 8082 	blt.w	8005498 <UART_SetConfig+0x6c4>
 8005394:	3b02      	subs	r3, #2
 8005396:	2b1e      	cmp	r3, #30
 8005398:	d87e      	bhi.n	8005498 <UART_SetConfig+0x6c4>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x5cc>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	08005423 	.word	0x08005423
 80053a4:	08005499 	.word	0x08005499
 80053a8:	0800542b 	.word	0x0800542b
 80053ac:	08005499 	.word	0x08005499
 80053b0:	08005499 	.word	0x08005499
 80053b4:	08005499 	.word	0x08005499
 80053b8:	0800543b 	.word	0x0800543b
 80053bc:	08005499 	.word	0x08005499
 80053c0:	08005499 	.word	0x08005499
 80053c4:	08005499 	.word	0x08005499
 80053c8:	08005499 	.word	0x08005499
 80053cc:	08005499 	.word	0x08005499
 80053d0:	08005499 	.word	0x08005499
 80053d4:	08005499 	.word	0x08005499
 80053d8:	0800544b 	.word	0x0800544b
 80053dc:	08005499 	.word	0x08005499
 80053e0:	08005499 	.word	0x08005499
 80053e4:	08005499 	.word	0x08005499
 80053e8:	08005499 	.word	0x08005499
 80053ec:	08005499 	.word	0x08005499
 80053f0:	08005499 	.word	0x08005499
 80053f4:	08005499 	.word	0x08005499
 80053f8:	08005499 	.word	0x08005499
 80053fc:	08005499 	.word	0x08005499
 8005400:	08005499 	.word	0x08005499
 8005404:	08005499 	.word	0x08005499
 8005408:	08005499 	.word	0x08005499
 800540c:	08005499 	.word	0x08005499
 8005410:	08005499 	.word	0x08005499
 8005414:	08005499 	.word	0x08005499
 8005418:	0800548b 	.word	0x0800548b
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d037      	beq.n	8005490 <UART_SetConfig+0x6bc>
 8005420:	e03a      	b.n	8005498 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005422:	f7fe ff43 	bl	80042ac <HAL_RCCEx_GetD3PCLK1Freq>
 8005426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005428:	e03c      	b.n	80054a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800542a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ff52 	bl	80042d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005438:	e034      	b.n	80054a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800543a:	f107 0318 	add.w	r3, r7, #24
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f89e 	bl	8004580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005448:	e02c      	b.n	80054a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <UART_SetConfig+0x69c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <UART_SetConfig+0x69c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	4a07      	ldr	r2, [pc, #28]	; (8005480 <UART_SetConfig+0x6ac>)
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005468:	e01c      	b.n	80054a4 <UART_SetConfig+0x6d0>
 800546a:	bf00      	nop
 800546c:	40011400 	.word	0x40011400
 8005470:	58024400 	.word	0x58024400
 8005474:	40007800 	.word	0x40007800
 8005478:	40007c00 	.word	0x40007c00
 800547c:	58000c00 	.word	0x58000c00
 8005480:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005484:	4b9d      	ldr	r3, [pc, #628]	; (80056fc <UART_SetConfig+0x928>)
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005488:	e00c      	b.n	80054a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800548a:	4b9d      	ldr	r3, [pc, #628]	; (8005700 <UART_SetConfig+0x92c>)
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800548e:	e009      	b.n	80054a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005496:	e005      	b.n	80054a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 81de 	beq.w	8005868 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	4a94      	ldr	r2, [pc, #592]	; (8005704 <UART_SetConfig+0x930>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80054be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d305      	bcc.n	80054dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d8:	429a      	cmp	r2, r3
 80054da:	d903      	bls.n	80054e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054e2:	e1c1      	b.n	8005868 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	2200      	movs	r2, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4a84      	ldr	r2, [pc, #528]	; (8005704 <UART_SetConfig+0x930>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005506:	f7fa fee7 	bl	80002d8 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	020b      	lsls	r3, r1, #8
 800551c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005520:	0202      	lsls	r2, r0, #8
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	6849      	ldr	r1, [r1, #4]
 8005526:	0849      	lsrs	r1, r1, #1
 8005528:	2000      	movs	r0, #0
 800552a:	460c      	mov	r4, r1
 800552c:	4605      	mov	r5, r0
 800552e:	eb12 0804 	adds.w	r8, r2, r4
 8005532:	eb43 0905 	adc.w	r9, r3, r5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	469a      	mov	sl, r3
 800553e:	4693      	mov	fp, r2
 8005540:	4652      	mov	r2, sl
 8005542:	465b      	mov	r3, fp
 8005544:	4640      	mov	r0, r8
 8005546:	4649      	mov	r1, r9
 8005548:	f7fa fec6 	bl	80002d8 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4613      	mov	r3, r2
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555a:	d308      	bcc.n	800556e <UART_SetConfig+0x79a>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005562:	d204      	bcs.n	800556e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	e17c      	b.n	8005868 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005574:	e178      	b.n	8005868 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557e:	f040 80c5 	bne.w	800570c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005582:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005586:	2b20      	cmp	r3, #32
 8005588:	dc48      	bgt.n	800561c <UART_SetConfig+0x848>
 800558a:	2b00      	cmp	r3, #0
 800558c:	db7b      	blt.n	8005686 <UART_SetConfig+0x8b2>
 800558e:	2b20      	cmp	r3, #32
 8005590:	d879      	bhi.n	8005686 <UART_SetConfig+0x8b2>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0x7c4>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	08005623 	.word	0x08005623
 800559c:	0800562b 	.word	0x0800562b
 80055a0:	08005687 	.word	0x08005687
 80055a4:	08005687 	.word	0x08005687
 80055a8:	08005633 	.word	0x08005633
 80055ac:	08005687 	.word	0x08005687
 80055b0:	08005687 	.word	0x08005687
 80055b4:	08005687 	.word	0x08005687
 80055b8:	08005643 	.word	0x08005643
 80055bc:	08005687 	.word	0x08005687
 80055c0:	08005687 	.word	0x08005687
 80055c4:	08005687 	.word	0x08005687
 80055c8:	08005687 	.word	0x08005687
 80055cc:	08005687 	.word	0x08005687
 80055d0:	08005687 	.word	0x08005687
 80055d4:	08005687 	.word	0x08005687
 80055d8:	08005653 	.word	0x08005653
 80055dc:	08005687 	.word	0x08005687
 80055e0:	08005687 	.word	0x08005687
 80055e4:	08005687 	.word	0x08005687
 80055e8:	08005687 	.word	0x08005687
 80055ec:	08005687 	.word	0x08005687
 80055f0:	08005687 	.word	0x08005687
 80055f4:	08005687 	.word	0x08005687
 80055f8:	08005687 	.word	0x08005687
 80055fc:	08005687 	.word	0x08005687
 8005600:	08005687 	.word	0x08005687
 8005604:	08005687 	.word	0x08005687
 8005608:	08005687 	.word	0x08005687
 800560c:	08005687 	.word	0x08005687
 8005610:	08005687 	.word	0x08005687
 8005614:	08005687 	.word	0x08005687
 8005618:	08005679 	.word	0x08005679
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d02e      	beq.n	800567e <UART_SetConfig+0x8aa>
 8005620:	e031      	b.n	8005686 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005622:	f7fd fed1 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005628:	e033      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800562a:	f7fd fee3 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 800562e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005630:	e02f      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fe4e 	bl	80042d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005640:	e027      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005642:	f107 0318 	add.w	r3, r7, #24
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe ff9a 	bl	8004580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005650:	e01f      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <UART_SetConfig+0x934>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800565e:	4b2a      	ldr	r3, [pc, #168]	; (8005708 <UART_SetConfig+0x934>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	08db      	lsrs	r3, r3, #3
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	4a24      	ldr	r2, [pc, #144]	; (80056fc <UART_SetConfig+0x928>)
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005670:	e00f      	b.n	8005692 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <UART_SetConfig+0x928>)
 8005674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005676:	e00c      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <UART_SetConfig+0x92c>)
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800567c:	e009      	b.n	8005692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005684:	e005      	b.n	8005692 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80e7 	beq.w	8005868 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	4a19      	ldr	r2, [pc, #100]	; (8005704 <UART_SetConfig+0x930>)
 80056a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a4:	461a      	mov	r2, r3
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ac:	005a      	lsls	r2, r3, #1
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	441a      	add	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d916      	bls.n	80056f4 <UART_SetConfig+0x920>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d212      	bcs.n	80056f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f023 030f 	bic.w	r3, r3, #15
 80056d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056e6:	4313      	orrs	r3, r2
 80056e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	e0b9      	b.n	8005868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056fa:	e0b5      	b.n	8005868 <UART_SetConfig+0xa94>
 80056fc:	03d09000 	.word	0x03d09000
 8005700:	003d0900 	.word	0x003d0900
 8005704:	080064a8 	.word	0x080064a8
 8005708:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800570c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005710:	2b20      	cmp	r3, #32
 8005712:	dc49      	bgt.n	80057a8 <UART_SetConfig+0x9d4>
 8005714:	2b00      	cmp	r3, #0
 8005716:	db7c      	blt.n	8005812 <UART_SetConfig+0xa3e>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d87a      	bhi.n	8005812 <UART_SetConfig+0xa3e>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x950>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	080057af 	.word	0x080057af
 8005728:	080057b7 	.word	0x080057b7
 800572c:	08005813 	.word	0x08005813
 8005730:	08005813 	.word	0x08005813
 8005734:	080057bf 	.word	0x080057bf
 8005738:	08005813 	.word	0x08005813
 800573c:	08005813 	.word	0x08005813
 8005740:	08005813 	.word	0x08005813
 8005744:	080057cf 	.word	0x080057cf
 8005748:	08005813 	.word	0x08005813
 800574c:	08005813 	.word	0x08005813
 8005750:	08005813 	.word	0x08005813
 8005754:	08005813 	.word	0x08005813
 8005758:	08005813 	.word	0x08005813
 800575c:	08005813 	.word	0x08005813
 8005760:	08005813 	.word	0x08005813
 8005764:	080057df 	.word	0x080057df
 8005768:	08005813 	.word	0x08005813
 800576c:	08005813 	.word	0x08005813
 8005770:	08005813 	.word	0x08005813
 8005774:	08005813 	.word	0x08005813
 8005778:	08005813 	.word	0x08005813
 800577c:	08005813 	.word	0x08005813
 8005780:	08005813 	.word	0x08005813
 8005784:	08005813 	.word	0x08005813
 8005788:	08005813 	.word	0x08005813
 800578c:	08005813 	.word	0x08005813
 8005790:	08005813 	.word	0x08005813
 8005794:	08005813 	.word	0x08005813
 8005798:	08005813 	.word	0x08005813
 800579c:	08005813 	.word	0x08005813
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005805 	.word	0x08005805
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d02e      	beq.n	800580a <UART_SetConfig+0xa36>
 80057ac:	e031      	b.n	8005812 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ae:	f7fd fe0b 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 80057b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057b4:	e033      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b6:	f7fd fe1d 	bl	80033f4 <HAL_RCC_GetPCLK2Freq>
 80057ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057bc:	e02f      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fd88 	bl	80042d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057cc:	e027      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe fed4 	bl	8004580 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057dc:	e01f      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057de:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <UART_SetConfig+0xac0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <UART_SetConfig+0xac0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	4a28      	ldr	r2, [pc, #160]	; (8005898 <UART_SetConfig+0xac4>)
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057fc:	e00f      	b.n	800581e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <UART_SetConfig+0xac4>)
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005802:	e00c      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <UART_SetConfig+0xac8>)
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800581c:	bf00      	nop
    }

    if (pclk != 0U)
 800581e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d021      	beq.n	8005868 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <UART_SetConfig+0xacc>)
 800582a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582e:	461a      	mov	r2, r3
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	fbb3 f2f2 	udiv	r2, r3, r2
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	441a      	add	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	2b0f      	cmp	r3, #15
 800584c:	d909      	bls.n	8005862 <UART_SetConfig+0xa8e>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005854:	d205      	bcs.n	8005862 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	b29a      	uxth	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60da      	str	r2, [r3, #12]
 8005860:	e002      	b.n	8005868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2201      	movs	r2, #1
 800586c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2201      	movs	r2, #1
 8005874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2200      	movs	r2, #0
 800587c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005884:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005888:	4618      	mov	r0, r3
 800588a:	3748      	adds	r7, #72	; 0x48
 800588c:	46bd      	mov	sp, r7
 800588e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005892:	bf00      	nop
 8005894:	58024400 	.word	0x58024400
 8005898:	03d09000 	.word	0x03d09000
 800589c:	003d0900 	.word	0x003d0900
 80058a0:	080064a8 	.word	0x080064a8

080058a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a2:	d10a      	bne.n	80059ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f8:	f7fb fc3c 	bl	8001274 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d10e      	bne.n	8005a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f82f 	bl	8005a7e <UART_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e025      	b.n	8005a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d10e      	bne.n	8005a56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f819 	bl	8005a7e <UART_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b09c      	sub	sp, #112	; 0x70
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8e:	e0a9      	b.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	f000 80a5 	beq.w	8005be4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7fb fbeb 	bl	8001274 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d140      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	663b      	str	r3, [r7, #96]	; 0x60
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e069      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d051      	beq.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4e:	d149      	bne.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e6      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bac:	623a      	str	r2, [r7, #32]
 8005bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	69f9      	ldr	r1, [r7, #28]
 8005bb2:	6a3a      	ldr	r2, [r7, #32]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e010      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4013      	ands	r3, r2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f43f af46 	beq.w	8005a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3770      	adds	r7, #112	; 0x70
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e027      	b.n	8005c74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	; 0x24
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e02d      	b.n	8005cf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	; 0x24
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f84f 	bl	8005d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e02d      	b.n	8005d70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2224      	movs	r2, #36	; 0x24
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f811 	bl	8005d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d98:	e031      	b.n	8005dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d9a:	2310      	movs	r3, #16
 8005d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d9e:	2310      	movs	r3, #16
 8005da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	0e5b      	lsrs	r3, r3, #25
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	0f5b      	lsrs	r3, r3, #29
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	7b3a      	ldrb	r2, [r7, #12]
 8005dc6:	4911      	ldr	r1, [pc, #68]	; (8005e0c <UARTEx_SetNbDataToProcess+0x94>)
 8005dc8:	5c8a      	ldrb	r2, [r1, r2]
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dce:	7b3a      	ldrb	r2, [r7, #12]
 8005dd0:	490f      	ldr	r1, [pc, #60]	; (8005e10 <UARTEx_SetNbDataToProcess+0x98>)
 8005dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	7b7a      	ldrb	r2, [r7, #13]
 8005de4:	4909      	ldr	r1, [pc, #36]	; (8005e0c <UARTEx_SetNbDataToProcess+0x94>)
 8005de6:	5c8a      	ldrb	r2, [r1, r2]
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dec:	7b7a      	ldrb	r2, [r7, #13]
 8005dee:	4908      	ldr	r1, [pc, #32]	; (8005e10 <UARTEx_SetNbDataToProcess+0x98>)
 8005df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	080064c0 	.word	0x080064c0
 8005e10:	080064c8 	.word	0x080064c8

08005e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e14:	b084      	sub	sp, #16
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	f107 001c 	add.w	r0, r7, #28
 8005e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d120      	bne.n	8005e6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <USB_CoreInit+0xd4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d105      	bne.n	8005e62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 faac 	bl	80063c0 <USB_CoreReset>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e01a      	b.n	8005ea4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 faa0 	bl	80063c0 <USB_CoreReset>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38
 8005e96:	e005      	b.n	8005ea4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d116      	bne.n	8005ed8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <USB_CoreInit+0xd8>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f043 0206 	orr.w	r2, r3, #6
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f043 0220 	orr.w	r2, r3, #32
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee4:	b004      	add	sp, #16
 8005ee6:	4770      	bx	lr
 8005ee8:	ffbdffbf 	.word	0xffbdffbf
 8005eec:	03ee0000 	.word	0x03ee0000

08005ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f023 0201 	bic.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d115      	bne.n	8005f60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fb f9a3 	bl	800128c <HAL_Delay>
      ms++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa29 	bl	80063a4 <USB_GetMode>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d01e      	beq.n	8005f96 <USB_SetCurrentMode+0x84>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b31      	cmp	r3, #49	; 0x31
 8005f5c:	d9f0      	bls.n	8005f40 <USB_SetCurrentMode+0x2e>
 8005f5e:	e01a      	b.n	8005f96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d115      	bne.n	8005f92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f72:	2001      	movs	r0, #1
 8005f74:	f7fb f98a 	bl	800128c <HAL_Delay>
      ms++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa10 	bl	80063a4 <USB_GetMode>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <USB_SetCurrentMode+0x84>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b31      	cmp	r3, #49	; 0x31
 8005f8e:	d9f0      	bls.n	8005f72 <USB_SetCurrentMode+0x60>
 8005f90:	e001      	b.n	8005f96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e005      	b.n	8005fa2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b32      	cmp	r3, #50	; 0x32
 8005f9a:	d101      	bne.n	8005fa0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fac:	b084      	sub	sp, #16
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e009      	b.n	8005fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	3340      	adds	r3, #64	; 0x40
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b0e      	cmp	r3, #14
 8005fe4:	d9f2      	bls.n	8005fcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d11c      	bne.n	8006026 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ffa:	f043 0302 	orr.w	r3, r3, #2
 8005ffe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e005      	b.n	8006032 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	4619      	mov	r1, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	461a      	mov	r2, r3
 800604e:	680b      	ldr	r3, [r1, #0]
 8006050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	2b01      	cmp	r3, #1
 8006056:	d10c      	bne.n	8006072 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f965 	bl	8006330 <USB_SetDevSpeed>
 8006066:	e008      	b.n	800607a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f960 	bl	8006330 <USB_SetDevSpeed>
 8006070:	e003      	b.n	800607a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006072:	2103      	movs	r1, #3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f95b 	bl	8006330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800607a:	2110      	movs	r1, #16
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8f3 	bl	8006268 <USB_FlushTxFifo>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f91f 	bl	80062d0 <USB_FlushRxFifo>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	461a      	mov	r2, r3
 80060a4:	2300      	movs	r3, #0
 80060a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	461a      	mov	r2, r3
 80060b0:	2300      	movs	r3, #0
 80060b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	461a      	mov	r2, r3
 80060bc:	2300      	movs	r3, #0
 80060be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e043      	b.n	800614e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060dc:	d118      	bne.n	8006110 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	461a      	mov	r2, r3
 80060f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e013      	b.n	8006122 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006106:	461a      	mov	r2, r3
 8006108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e008      	b.n	8006122 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	461a      	mov	r2, r3
 8006142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	429a      	cmp	r2, r3
 8006154:	d3b7      	bcc.n	80060c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	e043      	b.n	80061e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800616e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006172:	d118      	bne.n	80061a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	461a      	mov	r2, r3
 8006188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e013      	b.n	80061b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	e008      	b.n	80061b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	461a      	mov	r2, r3
 80061b4:	2300      	movs	r3, #0
 80061b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	461a      	mov	r2, r3
 80061d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3301      	adds	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3b7      	bcc.n	800615c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800620c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	d105      	bne.n	8006220 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f043 0210 	orr.w	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <USB_DevInit+0x2b4>)
 8006226:	4313      	orrs	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d105      	bne.n	8006250 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <USB_DevInit+0x2b8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800625c:	b004      	add	sp, #16
 800625e:	4770      	bx	lr
 8006260:	803c3800 	.word	0x803c3800
 8006264:	40000004 	.word	0x40000004

08006268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a13      	ldr	r2, [pc, #76]	; (80062cc <USB_FlushTxFifo+0x64>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e01b      	b.n	80062c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	daf2      	bge.n	8006276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	019b      	lsls	r3, r3, #6
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <USB_FlushTxFifo+0x64>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e006      	b.n	80062c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d0f0      	beq.n	80062a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	00030d40 	.word	0x00030d40

080062d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <USB_FlushRxFifo+0x5c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e018      	b.n	8006320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	daf2      	bge.n	80062dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2210      	movs	r2, #16
 80062fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4a08      	ldr	r2, [pc, #32]	; (800632c <USB_FlushRxFifo+0x5c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e006      	b.n	8006320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b10      	cmp	r3, #16
 800631c:	d0f0      	beq.n	8006300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	00030d40 	.word	0x00030d40

08006330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800637c:	f023 0303 	bic.w	r3, r3, #3
 8006380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006390:	f043 0302 	orr.w	r3, r3, #2
 8006394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f003 0301 	and.w	r3, r3, #1
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <USB_CoreReset+0x64>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e01b      	b.n	8006416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	daf2      	bge.n	80063cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f043 0201 	orr.w	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a09      	ldr	r2, [pc, #36]	; (8006424 <USB_CoreReset+0x64>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d0f0      	beq.n	80063f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	00030d40 	.word	0x00030d40

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4d0d      	ldr	r5, [pc, #52]	; (8006460 <__libc_init_array+0x38>)
 800642c:	4c0d      	ldr	r4, [pc, #52]	; (8006464 <__libc_init_array+0x3c>)
 800642e:	1b64      	subs	r4, r4, r5
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	2600      	movs	r6, #0
 8006434:	42a6      	cmp	r6, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	4d0b      	ldr	r5, [pc, #44]	; (8006468 <__libc_init_array+0x40>)
 800643a:	4c0c      	ldr	r4, [pc, #48]	; (800646c <__libc_init_array+0x44>)
 800643c:	f000 f820 	bl	8006480 <_init>
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	2600      	movs	r6, #0
 8006446:	42a6      	cmp	r6, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006450:	4798      	blx	r3
 8006452:	3601      	adds	r6, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f855 3b04 	ldr.w	r3, [r5], #4
 800645a:	4798      	blx	r3
 800645c:	3601      	adds	r6, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	080064d8 	.word	0x080064d8
 8006464:	080064d8 	.word	0x080064d8
 8006468:	080064d8 	.word	0x080064d8
 800646c:	080064dc 	.word	0x080064dc

08006470 <memset>:
 8006470:	4402      	add	r2, r0
 8006472:	4603      	mov	r3, r0
 8006474:	4293      	cmp	r3, r2
 8006476:	d100      	bne.n	800647a <memset+0xa>
 8006478:	4770      	bx	lr
 800647a:	f803 1b01 	strb.w	r1, [r3], #1
 800647e:	e7f9      	b.n	8006474 <memset+0x4>

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
