
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009774  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a54  08009a54  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a54  08009a54  00019a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a58  08009a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009a6c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009acc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008a0  240000d0  08009b2c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000970  08009b2c  00020970  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d516  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f05  00000000  00000000  0003d614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00040520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011b8  00000000  00000000  000417e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b168  00000000  00000000  00042998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001973b  00000000  00000000  0007db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184a2a  00000000  00000000  0009723b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021bc65  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ffc  00000000  00000000  0021bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080099f4 	.word	0x080099f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080099f4 	.word	0x080099f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <main+0xd0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fb09 	bl	8000d48 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fe4d 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f853 	bl	80007e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 f8d5 	bl	80008ec <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <main+0xd0>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <main+0xd0>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <main+0xd0>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f004 f84b 	bl	80047fc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f004 f861 	bl	8004830 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0xd0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
{
Error_Handler();
 8000792:	f000 fad9 	bl	8000d48 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fa2f 	bl	8000bf8 <MX_GPIO_Init>
  MX_ETH_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079e:	f000 f97b 	bl	8000a98 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80007a2:	f000 f9f9 	bl	8000b98 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 f9c5 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80007aa:	f000 f91d 	bl	80009e8 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      if(HAL_GetTick() - timemsM7_LED > 1000)
 80007ae:	f000 fe97 	bl	80014e0 <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007be:	d9f6      	bls.n	80007ae <main+0xa6>
      {
    	  timemsM7_LED = HAL_GetTick();
 80007c0:	f000 fe8e 	bl	80014e0 <HAL_GetTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <main+0xd4>)
 80007c8:	6013      	str	r3, [r2, #0]
          HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <main+0xd8>)
 80007d0:	f003 fff9 	bl	80047c6 <HAL_GPIO_TogglePin>
      if(HAL_GetTick() - timemsM7_LED > 1000)
 80007d4:	e7eb      	b.n	80007ae <main+0xa6>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	24000960 	.word	0x24000960
 80007e0:	58020400 	.word	0x58020400

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f8f6 	bl	80099e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 f8f0 	bl	80099e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f004 f96f 	bl	8004ae8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <SystemClock_Config+0xfc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <SystemClock_Config+0xfc>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <SystemClock_Config+0xfc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0x100>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <SystemClock_Config+0x100>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0x100>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0x104>)
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f023 0303 	bic.w	r3, r3, #3
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <SystemClock_Config+0x104>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000872:	2378      	movs	r3, #120	; 0x78
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000882:	230c      	movs	r3, #12
 8000884:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000886:	2300      	movs	r3, #0
 8000888:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f992 	bl	8004bbc <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089e:	f000 fa53 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	233f      	movs	r3, #63	; 0x3f
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ae:	2308      	movs	r3, #8
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fda5 	bl	8005418 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008d4:	f000 fa38 	bl	8000d48 <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3770      	adds	r7, #112	; 0x70
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58000400 	.word	0x58000400
 80008e8:	58024400 	.word	0x58024400

080008ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0b0      	sub	sp, #192	; 0xc0
 80008f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	22bc      	movs	r2, #188	; 0xbc
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f009 f873 	bl	80099e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI2
 80008fe:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000908:	2318      	movs	r3, #24
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800092c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f005 f8fa 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000942:	f000 fa01 	bl	8000d48 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	37c0      	adds	r7, #192	; 0xc0
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_ETH_Init+0x80>)
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <MX_ETH_Init+0x84>)
 8000958:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ETH_Init+0x88>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ETH_Init+0x88>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ETH_Init+0x88>)
 8000968:	22e1      	movs	r2, #225	; 0xe1
 800096a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ETH_Init+0x88>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_ETH_Init+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_ETH_Init+0x80>)
 8000980:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_ETH_Init+0x88>)
 8000982:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_ETH_Init+0x80>)
 8000986:	2201      	movs	r2, #1
 8000988:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ETH_Init+0x80>)
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_ETH_Init+0x8c>)
 800098e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_ETH_Init+0x80>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_ETH_Init+0x90>)
 8000994:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_ETH_Init+0x80>)
 8000998:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800099c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ETH_Init+0x80>)
 80009a0:	f003 f924 	bl	8003bec <HAL_ETH_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f000 f9cd 	bl	8000d48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_ETH_Init+0x94>)
 80009b4:	f009 f816 	bl	80099e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_ETH_Init+0x94>)
 80009ba:	2221      	movs	r2, #33	; 0x21
 80009bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000124 	.word	0x24000124
 80009d4:	40028000 	.word	0x40028000
 80009d8:	24000964 	.word	0x24000964
 80009dc:	24000070 	.word	0x24000070
 80009e0:	24000010 	.word	0x24000010
 80009e4:	240000ec 	.word	0x240000ec

080009e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009ee:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <MX_SPI2_Init+0xac>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_SPI2_Init+0xa8>)
 80009fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a1e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000a22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_SPI2_Init+0xa8>)
 8000a7c:	f006 fbc0 	bl	8007200 <HAL_SPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000a86:	f000 f95f 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	240001d4 	.word	0x240001d4
 8000a94:	40003800 	.word	0x40003800

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART3_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <MX_USART3_UART_Init+0x98>)
 8000aa6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f006 ff5d 	bl	800799e <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 f92d 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000af2:	f008 fb7f 	bl	80091f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 f924 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 fbb4 	bl	8009270 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 f91b 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b14:	f008 fb35 	bl	8009182 <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 f913 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	240002d4 	.word	0x240002d4
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	0005dc00 	.word	0x0005dc00

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	f003 fe6c 	bl	8004858 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 f8df 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000454 	.word	0x24000454
 8000b94:	40080000 	.word	0x40080000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_DMA_Init+0x5c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f000 fdb8 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f000 fdcf 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	200d      	movs	r0, #13
 8000bd2:	f000 fdb0 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bd6:	200d      	movs	r0, #13
 8000bd8:	f000 fdc7 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	200f      	movs	r0, #15
 8000be2:	f000 fda8 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 fdbf 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a41      	ldr	r2, [pc, #260]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a39      	ldr	r2, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a32      	ldr	r2, [pc, #200]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x140>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_GPIO_Init+0x144>)
 8000cca:	f003 fd63 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	481a      	ldr	r0, [pc, #104]	; (8000d40 <MX_GPIO_Init+0x148>)
 8000cd6:	f003 fd5d 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000cda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4812      	ldr	r0, [pc, #72]	; (8000d3c <MX_GPIO_Init+0x144>)
 8000cf4:	f003 fb9e 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_GPIO_Init+0x148>)
 8000d12:	f003 fb8f 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_GPIO_Init+0x14c>)
 8000d2c:	f003 fb82 	bl	8004434 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	58020c00 	.word	0x58020c00
 8000d44:	58021800 	.word	0x58021800

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a59      	ldr	r2, [pc, #356]	; (8000f0c <HAL_ETH_MspInit+0x184>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	f040 80ab 	bne.w	8000f02 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dac:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db2:	4a57      	ldr	r2, [pc, #348]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dca:	4b51      	ldr	r3, [pc, #324]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000de8:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dee:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a39      	ldr	r2, [pc, #228]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e7e:	2332      	movs	r3, #50	; 0x32
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8e:	230b      	movs	r3, #11
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	481e      	ldr	r0, [pc, #120]	; (8000f14 <HAL_ETH_MspInit+0x18c>)
 8000e9a:	f003 facb 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e9e:	2386      	movs	r3, #134	; 0x86
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4817      	ldr	r0, [pc, #92]	; (8000f18 <HAL_ETH_MspInit+0x190>)
 8000eba:	f003 fabb 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_ETH_MspInit+0x194>)
 8000edc:	f003 faaa 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ee0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <HAL_ETH_MspInit+0x198>)
 8000efe:	f003 fa99 	bl	8004434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	; 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40028000 	.word	0x40028000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020800 	.word	0x58020800
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	58020400 	.word	0x58020400
 8000f20:	58021800 	.word	0x58021800

08000f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <HAL_SPI_MspInit+0x134>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 8084 	bne.w	8001050 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4e:	4a43      	ldr	r2, [pc, #268]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f58:	4b40      	ldr	r3, [pc, #256]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	4a3b      	ldr	r2, [pc, #236]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	4a34      	ldr	r2, [pc, #208]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f94:	4b31      	ldr	r3, [pc, #196]	; (800105c <HAL_SPI_MspInit+0x138>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <HAL_SPI_MspInit+0x13c>)
 8000fbe:	f003 fa39 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <HAL_SPI_MspInit+0x140>)
 8000fe0:	f003 fa28 	bl	8004434 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream2;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_SPI_MspInit+0x148>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8000fec:	2228      	movs	r2, #40	; 0x28
 8000fee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8000ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001002:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_SPI_MspInit+0x144>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_SPI_MspInit+0x144>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8001026:	f000 fbbb 	bl	80017a0 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001030:	f7ff fe8a 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_SPI_MspInit+0x144>)
 8001038:	679a      	str	r2, [r3, #120]	; 0x78
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_SPI_MspInit+0x144>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2024      	movs	r0, #36	; 0x24
 8001046:	f000 fb76 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800104a:	2024      	movs	r0, #36	; 0x24
 800104c:	f000 fb8d 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40003800 	.word	0x40003800
 800105c:	58024400 	.word	0x58024400
 8001060:	58020800 	.word	0x58020800
 8001064:	58020400 	.word	0x58020400
 8001068:	2400025c 	.word	0x2400025c
 800106c:	40020040 	.word	0x40020040

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0b8      	sub	sp, #224	; 0xe0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	22bc      	movs	r2, #188	; 0xbc
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f008 fca7 	bl	80099e4 <memset>
  if(huart->Instance==USART3)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_UART_MspInit+0x188>)
 800109c:	4293      	cmp	r3, r2
 800109e:	f040 80a6 	bne.w	80011ee <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a2:	2302      	movs	r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fd3d 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80010bc:	f7ff fe44 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c0:	4b4e      	ldr	r3, [pc, #312]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c6:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_UART_MspInit+0x18c>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001116:	2307      	movs	r3, #7
 8001118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001120:	4619      	mov	r1, r3
 8001122:	4837      	ldr	r0, [pc, #220]	; (8001200 <HAL_UART_MspInit+0x190>)
 8001124:	f003 f986 	bl	8004434 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_UART_MspInit+0x194>)
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_UART_MspInit+0x198>)
 800112c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001130:	222d      	movs	r2, #45	; 0x2d
 8001132:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_UART_MspInit+0x194>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_UART_MspInit+0x194>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_UART_MspInit+0x194>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001168:	4826      	ldr	r0, [pc, #152]	; (8001204 <HAL_UART_MspInit+0x194>)
 800116a:	f000 fb19 	bl	80017a0 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001174:	f7ff fde8 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_UART_MspInit+0x194>)
 800117c:	67da      	str	r2, [r3, #124]	; 0x7c
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_UART_MspInit+0x194>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_UART_MspInit+0x19c>)
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <HAL_UART_MspInit+0x1a0>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_UART_MspInit+0x19c>)
 800118c:	222e      	movs	r2, #46	; 0x2e
 800118e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_UART_MspInit+0x19c>)
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_UART_MspInit+0x19c>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x19c>)
 800119e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011c4:	f000 faec 	bl	80017a0 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80011ce:	f7ff fdbb 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011d6:	679a      	str	r2, [r3, #120]	; 0x78
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_UART_MspInit+0x19c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2027      	movs	r0, #39	; 0x27
 80011e4:	f000 faa7 	bl	8001736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e8:	2027      	movs	r0, #39	; 0x27
 80011ea:	f000 fabe 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	37e0      	adds	r7, #224	; 0xe0
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004800 	.word	0x40004800
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020c00 	.word	0x58020c00
 8001204:	24000364 	.word	0x24000364
 8001208:	40020028 	.word	0x40020028
 800120c:	240003dc 	.word	0x240003dc
 8001210:	40020070 	.word	0x40020070

08001214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_PCD_MspInit+0xa8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d13d      	bne.n	80012b2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001236:	f003 fcb1 	bl	8004b9c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001258:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800126a:	230a      	movs	r3, #10
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <HAL_PCD_MspInit+0xb0>)
 8001276:	f003 f8dd 	bl	8004434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800127a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <HAL_PCD_MspInit+0xb0>)
 8001290:	f003 f8d0 	bl	8004434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 8001296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 800129c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_PCD_MspInit+0xac>)
 80012a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40080000 	.word	0x40080000
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020000 	.word	0x58020000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8d0 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Stream1_IRQHandler+0x10>)
 8001322:	f001 fafd 	bl	8002920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24000364 	.word	0x24000364

08001330 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Stream2_IRQHandler+0x10>)
 8001336:	f001 faf3 	bl	8002920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2400025c 	.word	0x2400025c

08001344 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Stream4_IRQHandler+0x10>)
 800134a:	f001 fae9 	bl	8002920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	240003dc 	.word	0x240003dc

08001358 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <SPI2_IRQHandler+0x10>)
 800135e:	f006 f855 	bl	800740c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	240001d4 	.word	0x240001d4

0800136c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <USART3_IRQHandler+0x10>)
 8001372:	f006 fb65 	bl	8007a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240002d4 	.word	0x240002d4

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001384:	f7ff f92a 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f008 faf5 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f9a9 	bl	8000708 <main>
  bx  lr
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013c0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013c4:	08009a5c 	.word	0x08009a5c
  ldr r2, =_sbss
 80013c8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80013cc:	24000970 	.word	0x24000970

080013d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC3_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f9a0 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013e0:	f004 f9d0 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_Init+0x68>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_Init+0x6c>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_Init+0x6c>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_Init+0x70>)
 8001416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_Init+0x74>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f814 	bl	800144c <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e002      	b.n	8001434 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800142e:	f7ff fc91 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	58024400 	.word	0x58024400
 8001440:	08009a0c 	.word	0x08009a0c
 8001444:	24000004 	.word	0x24000004
 8001448:	24000000 	.word	0x24000000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_InitTick+0x60>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e021      	b.n	80014a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_InitTick+0x64>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_InitTick+0x60>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f985 	bl	8001786 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f94f 	bl	8001736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x68>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2400000c 	.word	0x2400000c
 80014b0:	24000000 	.word	0x24000000
 80014b4:	24000008 	.word	0x24000008

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2400000c 	.word	0x2400000c
 80014dc:	2400096c 	.word	0x2400096c

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2400096c 	.word	0x2400096c

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2400000c 	.word	0x2400000c

08001540 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetREVID+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0c1b      	lsrs	r3, r3, #16
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	5c001000 	.word	0x5c001000

08001558 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001568:	4904      	ldr	r1, [pc, #16]	; (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58000400 	.word	0x58000400

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff8e 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff29 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff40 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff33 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa4 	bl	80016dc <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff fe9a 	bl	80014e0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e316      	b.n	8001de6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a66      	ldr	r2, [pc, #408]	; (8001958 <HAL_DMA_Init+0x1b8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d04a      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_DMA_Init+0x1bc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d045      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a63      	ldr	r2, [pc, #396]	; (8001960 <HAL_DMA_Init+0x1c0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d040      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a62      	ldr	r2, [pc, #392]	; (8001964 <HAL_DMA_Init+0x1c4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d03b      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a60      	ldr	r2, [pc, #384]	; (8001968 <HAL_DMA_Init+0x1c8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d036      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a5f      	ldr	r2, [pc, #380]	; (800196c <HAL_DMA_Init+0x1cc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a5d      	ldr	r2, [pc, #372]	; (8001970 <HAL_DMA_Init+0x1d0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d02c      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_DMA_Init+0x1d4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d027      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a5a      	ldr	r2, [pc, #360]	; (8001978 <HAL_DMA_Init+0x1d8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d022      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a59      	ldr	r2, [pc, #356]	; (800197c <HAL_DMA_Init+0x1dc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d01d      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_DMA_Init+0x1e0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d018      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a56      	ldr	r2, [pc, #344]	; (8001984 <HAL_DMA_Init+0x1e4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_DMA_Init+0x1e8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00e      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a53      	ldr	r2, [pc, #332]	; (800198c <HAL_DMA_Init+0x1ec>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d009      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_DMA_Init+0x1f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d004      	beq.n	8001858 <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_DMA_Init+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_DMA_Init+0xbc>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_DMA_Init+0xbe>
 800185c:	2300      	movs	r3, #0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 813b 	beq.w	8001ada <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a37      	ldr	r2, [pc, #220]	; (8001958 <HAL_DMA_Init+0x1b8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d04a      	beq.n	8001914 <HAL_DMA_Init+0x174>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_DMA_Init+0x1bc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d045      	beq.n	8001914 <HAL_DMA_Init+0x174>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_DMA_Init+0x1c0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d040      	beq.n	8001914 <HAL_DMA_Init+0x174>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a33      	ldr	r2, [pc, #204]	; (8001964 <HAL_DMA_Init+0x1c4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d03b      	beq.n	8001914 <HAL_DMA_Init+0x174>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_DMA_Init+0x1c8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d036      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_DMA_Init+0x1cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d031      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2e      	ldr	r2, [pc, #184]	; (8001970 <HAL_DMA_Init+0x1d0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02c      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <HAL_DMA_Init+0x1d4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d027      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2b      	ldr	r2, [pc, #172]	; (8001978 <HAL_DMA_Init+0x1d8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d022      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_DMA_Init+0x1dc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d01d      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_DMA_Init+0x1e0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a27      	ldr	r2, [pc, #156]	; (8001984 <HAL_DMA_Init+0x1e4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_DMA_Init+0x1e8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_DMA_Init+0x1ec>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d009      	beq.n	8001914 <HAL_DMA_Init+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_DMA_Init+0x1f0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_DMA_Init+0x1f4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d108      	bne.n	8001926 <HAL_DMA_Init+0x186>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_DMA_Init+0x196>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001936:	e02f      	b.n	8001998 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001938:	f7ff fdd2 	bl	80014e0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b05      	cmp	r3, #5
 8001944:	d928      	bls.n	8001998 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e246      	b.n	8001de6 <HAL_DMA_Init+0x646>
 8001958:	40020010 	.word	0x40020010
 800195c:	40020028 	.word	0x40020028
 8001960:	40020040 	.word	0x40020040
 8001964:	40020058 	.word	0x40020058
 8001968:	40020070 	.word	0x40020070
 800196c:	40020088 	.word	0x40020088
 8001970:	400200a0 	.word	0x400200a0
 8001974:	400200b8 	.word	0x400200b8
 8001978:	40020410 	.word	0x40020410
 800197c:	40020428 	.word	0x40020428
 8001980:	40020440 	.word	0x40020440
 8001984:	40020458 	.word	0x40020458
 8001988:	40020470 	.word	0x40020470
 800198c:	40020488 	.word	0x40020488
 8001990:	400204a0 	.word	0x400204a0
 8001994:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1c8      	bne.n	8001938 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <HAL_DMA_Init+0x420>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4313      	orrs	r3, r2
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_DMA_Init+0x424>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <HAL_DMA_Init+0x428>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a08:	d328      	bcc.n	8001a5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b28      	cmp	r3, #40	; 0x28
 8001a10:	d903      	bls.n	8001a1a <HAL_DMA_Init+0x27a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b2e      	cmp	r3, #46	; 0x2e
 8001a18:	d917      	bls.n	8001a4a <HAL_DMA_Init+0x2aa>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a20:	d903      	bls.n	8001a2a <HAL_DMA_Init+0x28a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b42      	cmp	r3, #66	; 0x42
 8001a28:	d90f      	bls.n	8001a4a <HAL_DMA_Init+0x2aa>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b46      	cmp	r3, #70	; 0x46
 8001a30:	d903      	bls.n	8001a3a <HAL_DMA_Init+0x29a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b48      	cmp	r3, #72	; 0x48
 8001a38:	d907      	bls.n	8001a4a <HAL_DMA_Init+0x2aa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001a40:	d905      	bls.n	8001a4e <HAL_DMA_Init+0x2ae>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b52      	cmp	r3, #82	; 0x52
 8001a48:	d801      	bhi.n	8001a4e <HAL_DMA_Init+0x2ae>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_DMA_Init+0x2b0>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d117      	bne.n	8001ab6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 ff1d 	bl	80038d8 <DMA_CheckFifoParam>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e197      	b.n	8001de6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f001 fe58 	bl	8003774 <DMA_CalcBaseAndBitshift>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	223f      	movs	r2, #63	; 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e0cd      	b.n	8001c76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <HAL_DMA_Init+0x42c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <HAL_DMA_Init+0x430>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <HAL_DMA_Init+0x434>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d018      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <HAL_DMA_Init+0x438>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <HAL_DMA_Init+0x43c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_DMA_Init+0x440>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_DMA_Init+0x444>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Init+0x38a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_DMA_Init+0x448>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_DMA_Init+0x38e>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_DMA_Init+0x390>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8097 	beq.w	8001c64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_DMA_Init+0x42c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d021      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_DMA_Init+0x430>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01c      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_DMA_Init+0x434>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d017      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_DMA_Init+0x438>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d012      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_DMA_Init+0x43c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00d      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_DMA_Init+0x440>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d008      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_DMA_Init+0x444>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <HAL_DMA_Init+0x3e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_DMA_Init+0x448>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_DMA_Init+0x44c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d020      	beq.n	8001bf0 <HAL_DMA_Init+0x450>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b80      	cmp	r3, #128	; 0x80
 8001bb4:	d102      	bne.n	8001bbc <HAL_DMA_Init+0x41c>
 8001bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bba:	e01a      	b.n	8001bf2 <HAL_DMA_Init+0x452>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e018      	b.n	8001bf2 <HAL_DMA_Init+0x452>
 8001bc0:	fe10803f 	.word	0xfe10803f
 8001bc4:	5c001000 	.word	0x5c001000
 8001bc8:	ffff0000 	.word	0xffff0000
 8001bcc:	58025408 	.word	0x58025408
 8001bd0:	5802541c 	.word	0x5802541c
 8001bd4:	58025430 	.word	0x58025430
 8001bd8:	58025444 	.word	0x58025444
 8001bdc:	58025458 	.word	0x58025458
 8001be0:	5802546c 	.word	0x5802546c
 8001be4:	58025480 	.word	0x58025480
 8001be8:	58025494 	.word	0x58025494
 8001bec:	fffe000f 	.word	0xfffe000f
 8001bf0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <HAL_DMA_Init+0x650>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a6e      	ldr	r2, [pc, #440]	; (8001df4 <HAL_DMA_Init+0x654>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	009a      	lsls	r2, r3, #2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f001 fd93 	bl	8003774 <DMA_CalcBaseAndBitshift>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	e008      	b.n	8001c76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0b7      	b.n	8001de6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5f      	ldr	r2, [pc, #380]	; (8001df8 <HAL_DMA_Init+0x658>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d072      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5d      	ldr	r2, [pc, #372]	; (8001dfc <HAL_DMA_Init+0x65c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d06d      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5c      	ldr	r2, [pc, #368]	; (8001e00 <HAL_DMA_Init+0x660>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d068      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_DMA_Init+0x664>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d063      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <HAL_DMA_Init+0x668>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05e      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a57      	ldr	r2, [pc, #348]	; (8001e0c <HAL_DMA_Init+0x66c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d059      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_DMA_Init+0x670>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d054      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <HAL_DMA_Init+0x674>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d04f      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a53      	ldr	r2, [pc, #332]	; (8001e18 <HAL_DMA_Init+0x678>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04a      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_DMA_Init+0x67c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d045      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <HAL_DMA_Init+0x680>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d040      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_DMA_Init+0x684>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d03b      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_DMA_Init+0x688>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d036      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_DMA_Init+0x68c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <HAL_DMA_Init+0x690>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d02c      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a48      	ldr	r2, [pc, #288]	; (8001e34 <HAL_DMA_Init+0x694>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_DMA_Init+0x698>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_DMA_Init+0x69c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01d      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <HAL_DMA_Init+0x6a0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d018      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <HAL_DMA_Init+0x6a4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a41      	ldr	r2, [pc, #260]	; (8001e48 <HAL_DMA_Init+0x6a8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <HAL_DMA_Init+0x6ac>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <HAL_DMA_Init+0x6b0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3c      	ldr	r2, [pc, #240]	; (8001e54 <HAL_DMA_Init+0x6b4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_DMA_Init+0x5ca>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_DMA_Init+0x5cc>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d032      	beq.n	8001dd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f001 fe2d 	bl	80039d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b80      	cmp	r3, #128	; 0x80
 8001d7c:	d102      	bne.n	8001d84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_DMA_Init+0x624>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d80c      	bhi.n	8001dc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f001 feaa 	bl	8003b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	e008      	b.n	8001dd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	a7fdabf8 	.word	0xa7fdabf8
 8001df4:	cccccccd 	.word	0xcccccccd
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	40020028 	.word	0x40020028
 8001e00:	40020040 	.word	0x40020040
 8001e04:	40020058 	.word	0x40020058
 8001e08:	40020070 	.word	0x40020070
 8001e0c:	40020088 	.word	0x40020088
 8001e10:	400200a0 	.word	0x400200a0
 8001e14:	400200b8 	.word	0x400200b8
 8001e18:	40020410 	.word	0x40020410
 8001e1c:	40020428 	.word	0x40020428
 8001e20:	40020440 	.word	0x40020440
 8001e24:	40020458 	.word	0x40020458
 8001e28:	40020470 	.word	0x40020470
 8001e2c:	40020488 	.word	0x40020488
 8001e30:	400204a0 	.word	0x400204a0
 8001e34:	400204b8 	.word	0x400204b8
 8001e38:	58025408 	.word	0x58025408
 8001e3c:	5802541c 	.word	0x5802541c
 8001e40:	58025430 	.word	0x58025430
 8001e44:	58025444 	.word	0x58025444
 8001e48:	58025458 	.word	0x58025458
 8001e4c:	5802546c 	.word	0x5802546c
 8001e50:	58025480 	.word	0x58025480
 8001e54:	58025494 	.word	0x58025494

08001e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fb3e 	bl	80014e0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2dc      	b.n	800242a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e2cd      	b.n	800242a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a76      	ldr	r2, [pc, #472]	; (800206c <HAL_DMA_Abort+0x214>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a74      	ldr	r2, [pc, #464]	; (8002070 <HAL_DMA_Abort+0x218>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_DMA_Abort+0x21c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a71      	ldr	r2, [pc, #452]	; (8002078 <HAL_DMA_Abort+0x220>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a70      	ldr	r2, [pc, #448]	; (800207c <HAL_DMA_Abort+0x224>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_DMA_Abort+0x228>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6d      	ldr	r2, [pc, #436]	; (8002084 <HAL_DMA_Abort+0x22c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6b      	ldr	r2, [pc, #428]	; (8002088 <HAL_DMA_Abort+0x230>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_DMA_Abort+0x234>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_DMA_Abort+0x238>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a67      	ldr	r2, [pc, #412]	; (8002094 <HAL_DMA_Abort+0x23c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	; (8002098 <HAL_DMA_Abort+0x240>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a64      	ldr	r2, [pc, #400]	; (800209c <HAL_DMA_Abort+0x244>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a62      	ldr	r2, [pc, #392]	; (80020a0 <HAL_DMA_Abort+0x248>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <HAL_DMA_Abort+0x24c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort+0xd6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5f      	ldr	r2, [pc, #380]	; (80020a8 <HAL_DMA_Abort+0x250>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Abort+0xda>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Abort+0xdc>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 021e 	bic.w	r2, r2, #30
 8001f46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00a      	b.n	8001f76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 020e 	bic.w	r2, r2, #14
 8001f6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <HAL_DMA_Abort+0x214>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d072      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3a      	ldr	r2, [pc, #232]	; (8002070 <HAL_DMA_Abort+0x218>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d06d      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_DMA_Abort+0x21c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d068      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_DMA_Abort+0x220>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d063      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a36      	ldr	r2, [pc, #216]	; (800207c <HAL_DMA_Abort+0x224>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a34      	ldr	r2, [pc, #208]	; (8002080 <HAL_DMA_Abort+0x228>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d059      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a33      	ldr	r2, [pc, #204]	; (8002084 <HAL_DMA_Abort+0x22c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d054      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a31      	ldr	r2, [pc, #196]	; (8002088 <HAL_DMA_Abort+0x230>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04f      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <HAL_DMA_Abort+0x234>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04a      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_DMA_Abort+0x238>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d045      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <HAL_DMA_Abort+0x23c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_DMA_Abort+0x240>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03b      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2a      	ldr	r2, [pc, #168]	; (800209c <HAL_DMA_Abort+0x244>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_DMA_Abort+0x248>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d031      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_DMA_Abort+0x24c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02c      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_DMA_Abort+0x250>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d027      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_DMA_Abort+0x254>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_DMA_Abort+0x258>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <HAL_DMA_Abort+0x25c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_DMA_Abort+0x260>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_DMA_Abort+0x264>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_DMA_Abort+0x268>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_DMA_Abort+0x26c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_DMA_Abort+0x270>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d132      	bne.n	80020cc <HAL_DMA_Abort+0x274>
 8002066:	2301      	movs	r3, #1
 8002068:	e031      	b.n	80020ce <HAL_DMA_Abort+0x276>
 800206a:	bf00      	nop
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	58025408 	.word	0x58025408
 80020b0:	5802541c 	.word	0x5802541c
 80020b4:	58025430 	.word	0x58025430
 80020b8:	58025444 	.word	0x58025444
 80020bc:	58025458 	.word	0x58025458
 80020c0:	5802546c 	.word	0x5802546c
 80020c4:	58025480 	.word	0x58025480
 80020c8:	58025494 	.word	0x58025494
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a6d      	ldr	r2, [pc, #436]	; (800229c <HAL_DMA_Abort+0x444>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <HAL_DMA_Abort+0x448>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_DMA_Abort+0x44c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_DMA_Abort+0x450>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a67      	ldr	r2, [pc, #412]	; (80022ac <HAL_DMA_Abort+0x454>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_DMA_Abort+0x458>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a64      	ldr	r2, [pc, #400]	; (80022b4 <HAL_DMA_Abort+0x45c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a62      	ldr	r2, [pc, #392]	; (80022b8 <HAL_DMA_Abort+0x460>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <HAL_DMA_Abort+0x464>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5f      	ldr	r2, [pc, #380]	; (80022c0 <HAL_DMA_Abort+0x468>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <HAL_DMA_Abort+0x46c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_DMA_Abort+0x470>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_DMA_Abort+0x474>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a59      	ldr	r2, [pc, #356]	; (80022d0 <HAL_DMA_Abort+0x478>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_DMA_Abort+0x47c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <HAL_DMA_Abort+0x480>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <HAL_DMA_Abort+0x33c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_DMA_Abort+0x34c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021a4:	e013      	b.n	80021ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a6:	f7ff f99b 	bl	80014e0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d90c      	bls.n	80021ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12d      	b.n	800242a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e5      	bne.n	80021a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_DMA_Abort+0x444>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_DMA_Abort+0x448>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_DMA_Abort+0x44c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Abort+0x422>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_DMA_Abort+0x450>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_DMA_Abort+0x454>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a27      	ldr	r2, [pc, #156]	; (80022b0 <HAL_DMA_Abort+0x458>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_DMA_Abort+0x45c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_DMA_Abort+0x460>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_DMA_Abort+0x464>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_DMA_Abort+0x468>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_DMA_Abort+0x46c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_DMA_Abort+0x470>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_DMA_Abort+0x474>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Abort+0x422>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_DMA_Abort+0x478>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_DMA_Abort+0x47c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Abort+0x422>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_DMA_Abort+0x480>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_DMA_Abort+0x426>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_DMA_Abort+0x428>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02b      	beq.n	80022dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	223f      	movs	r2, #63	; 0x3f
 8002294:	409a      	lsls	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e02a      	b.n	80022f2 <HAL_DMA_Abort+0x49a>
 800229c:	40020010 	.word	0x40020010
 80022a0:	40020028 	.word	0x40020028
 80022a4:	40020040 	.word	0x40020040
 80022a8:	40020058 	.word	0x40020058
 80022ac:	40020070 	.word	0x40020070
 80022b0:	40020088 	.word	0x40020088
 80022b4:	400200a0 	.word	0x400200a0
 80022b8:	400200b8 	.word	0x400200b8
 80022bc:	40020410 	.word	0x40020410
 80022c0:	40020428 	.word	0x40020428
 80022c4:	40020440 	.word	0x40020440
 80022c8:	40020458 	.word	0x40020458
 80022cc:	40020470 	.word	0x40020470
 80022d0:	40020488 	.word	0x40020488
 80022d4:	400204a0 	.word	0x400204a0
 80022d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2201      	movs	r2, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_DMA_Abort+0x5dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d072      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_DMA_Abort+0x5e0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d06d      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_DMA_Abort+0x5e4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d068      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a4a      	ldr	r2, [pc, #296]	; (8002440 <HAL_DMA_Abort+0x5e8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d063      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a49      	ldr	r2, [pc, #292]	; (8002444 <HAL_DMA_Abort+0x5ec>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d05e      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <HAL_DMA_Abort+0x5f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d059      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a46      	ldr	r2, [pc, #280]	; (800244c <HAL_DMA_Abort+0x5f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d054      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_DMA_Abort+0x5f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04f      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a43      	ldr	r2, [pc, #268]	; (8002454 <HAL_DMA_Abort+0x5fc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04a      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a41      	ldr	r2, [pc, #260]	; (8002458 <HAL_DMA_Abort+0x600>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d045      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a40      	ldr	r2, [pc, #256]	; (800245c <HAL_DMA_Abort+0x604>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d040      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <HAL_DMA_Abort+0x608>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d03b      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <HAL_DMA_Abort+0x60c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d036      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <HAL_DMA_Abort+0x610>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_DMA_Abort+0x614>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d02c      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_DMA_Abort+0x618>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a37      	ldr	r2, [pc, #220]	; (8002474 <HAL_DMA_Abort+0x61c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d022      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_DMA_Abort+0x620>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01d      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_DMA_Abort+0x624>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d018      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_DMA_Abort+0x628>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_DMA_Abort+0x62c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <HAL_DMA_Abort+0x630>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_DMA_Abort+0x634>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <HAL_DMA_Abort+0x638>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Abort+0x58e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_Abort+0x590>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002416:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40020010 	.word	0x40020010
 8002438:	40020028 	.word	0x40020028
 800243c:	40020040 	.word	0x40020040
 8002440:	40020058 	.word	0x40020058
 8002444:	40020070 	.word	0x40020070
 8002448:	40020088 	.word	0x40020088
 800244c:	400200a0 	.word	0x400200a0
 8002450:	400200b8 	.word	0x400200b8
 8002454:	40020410 	.word	0x40020410
 8002458:	40020428 	.word	0x40020428
 800245c:	40020440 	.word	0x40020440
 8002460:	40020458 	.word	0x40020458
 8002464:	40020470 	.word	0x40020470
 8002468:	40020488 	.word	0x40020488
 800246c:	400204a0 	.word	0x400204a0
 8002470:	400204b8 	.word	0x400204b8
 8002474:	58025408 	.word	0x58025408
 8002478:	5802541c 	.word	0x5802541c
 800247c:	58025430 	.word	0x58025430
 8002480:	58025444 	.word	0x58025444
 8002484:	58025458 	.word	0x58025458
 8002488:	5802546c 	.word	0x5802546c
 800248c:	58025480 	.word	0x58025480
 8002490:	58025494 	.word	0x58025494

08002494 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e237      	b.n	8002916 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e22c      	b.n	8002916 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5c      	ldr	r2, [pc, #368]	; (8002634 <HAL_DMA_Abort_IT+0x1a0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5b      	ldr	r2, [pc, #364]	; (8002638 <HAL_DMA_Abort_IT+0x1a4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a59      	ldr	r2, [pc, #356]	; (800263c <HAL_DMA_Abort_IT+0x1a8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_DMA_Abort_IT+0x1ac>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a56      	ldr	r2, [pc, #344]	; (8002644 <HAL_DMA_Abort_IT+0x1b0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <HAL_DMA_Abort_IT+0x1b4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a53      	ldr	r2, [pc, #332]	; (800264c <HAL_DMA_Abort_IT+0x1b8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_DMA_Abort_IT+0x1bc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_DMA_Abort_IT+0x1c0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <HAL_DMA_Abort_IT+0x1c4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_DMA_Abort_IT+0x1c8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_DMA_Abort_IT+0x1cc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <HAL_DMA_Abort_IT+0x1d0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_DMA_Abort_IT+0x1d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_DMA_Abort_IT+0x1d8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a46      	ldr	r2, [pc, #280]	; (8002670 <HAL_DMA_Abort_IT+0x1dc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Abort_IT+0xcc>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Abort_IT+0xce>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8086 	beq.w	8002674 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_DMA_Abort_IT+0x1a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_DMA_Abort_IT+0x1a4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d045      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_DMA_Abort_IT+0x1a8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d040      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_DMA_Abort_IT+0x1ac>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d03b      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_DMA_Abort_IT+0x1b0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d036      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_DMA_Abort_IT+0x1b4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_DMA_Abort_IT+0x1b8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02c      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_DMA_Abort_IT+0x1bc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d027      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_DMA_Abort_IT+0x1c0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_DMA_Abort_IT+0x1c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01d      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a20      	ldr	r2, [pc, #128]	; (800265c <HAL_DMA_Abort_IT+0x1c8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <HAL_DMA_Abort_IT+0x1cc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_DMA_Abort_IT+0x1d0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_DMA_Abort_IT+0x1d4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_DMA_Abort_IT+0x1d8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Abort_IT+0x17c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_DMA_Abort_IT+0x1dc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <HAL_DMA_Abort_IT+0x18e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e178      	b.n	8002914 <HAL_DMA_Abort_IT+0x480>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e16f      	b.n	8002914 <HAL_DMA_Abort_IT+0x480>
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 020e 	bic.w	r2, r2, #14
 8002682:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6c      	ldr	r2, [pc, #432]	; (800283c <HAL_DMA_Abort_IT+0x3a8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d04a      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <HAL_DMA_Abort_IT+0x3ac>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d045      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_DMA_Abort_IT+0x3b0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d040      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_DMA_Abort_IT+0x3b4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d03b      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_DMA_Abort_IT+0x3b8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d036      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_DMA_Abort_IT+0x3bc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d031      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_DMA_Abort_IT+0x3c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02c      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a62      	ldr	r2, [pc, #392]	; (8002858 <HAL_DMA_Abort_IT+0x3c4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d027      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a60      	ldr	r2, [pc, #384]	; (800285c <HAL_DMA_Abort_IT+0x3c8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d022      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_DMA_Abort_IT+0x3cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01d      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_DMA_Abort_IT+0x3d0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d018      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5c      	ldr	r2, [pc, #368]	; (8002868 <HAL_DMA_Abort_IT+0x3d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5a      	ldr	r2, [pc, #360]	; (800286c <HAL_DMA_Abort_IT+0x3d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00e      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a59      	ldr	r2, [pc, #356]	; (8002870 <HAL_DMA_Abort_IT+0x3dc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_DMA_Abort_IT+0x3e0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_DMA_Abort_IT+0x290>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_DMA_Abort_IT+0x3e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <HAL_DMA_Abort_IT+0x2a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e007      	b.n	8002746 <HAL_DMA_Abort_IT+0x2b2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_DMA_Abort_IT+0x3a8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d072      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_DMA_Abort_IT+0x3ac>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d06d      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_DMA_Abort_IT+0x3b0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d068      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_DMA_Abort_IT+0x3b4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d063      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <HAL_DMA_Abort_IT+0x3b8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d05e      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_DMA_Abort_IT+0x3bc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d059      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_DMA_Abort_IT+0x3c0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d054      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_DMA_Abort_IT+0x3c4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d04f      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_DMA_Abort_IT+0x3c8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d04a      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <HAL_DMA_Abort_IT+0x3cc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d045      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <HAL_DMA_Abort_IT+0x3d0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d040      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_DMA_Abort_IT+0x3d4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d03b      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_DMA_Abort_IT+0x3d8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d036      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_DMA_Abort_IT+0x3dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d031      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_DMA_Abort_IT+0x3e0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d02c      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_DMA_Abort_IT+0x3e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d027      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a24      	ldr	r2, [pc, #144]	; (800287c <HAL_DMA_Abort_IT+0x3e8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d022      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_DMA_Abort_IT+0x3ec>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <HAL_DMA_Abort_IT+0x3f0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d018      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_DMA_Abort_IT+0x3f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_DMA_Abort_IT+0x3f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_DMA_Abort_IT+0x3fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_DMA_Abort_IT+0x400>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_DMA_Abort_IT+0x404>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d132      	bne.n	800289c <HAL_DMA_Abort_IT+0x408>
 8002836:	2301      	movs	r3, #1
 8002838:	e031      	b.n	800289e <HAL_DMA_Abort_IT+0x40a>
 800283a:	bf00      	nop
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	58025408 	.word	0x58025408
 8002880:	5802541c 	.word	0x5802541c
 8002884:	58025430 	.word	0x58025430
 8002888:	58025444 	.word	0x58025444
 800288c:	58025458 	.word	0x58025458
 8002890:	5802546c 	.word	0x5802546c
 8002894:	58025480 	.word	0x58025480
 8002898:	58025494 	.word	0x58025494
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d028      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2201      	movs	r2, #1
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop

08002920 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800292c:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_DMA_IRQHandler+0x1ac>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_DMA_IRQHandler+0x1b0>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a9b      	lsrs	r3, r3, #10
 8002938:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5f      	ldr	r2, [pc, #380]	; (8002ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d04a      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5c      	ldr	r2, [pc, #368]	; (8002adc <HAL_DMA_IRQHandler+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5a      	ldr	r2, [pc, #360]	; (8002ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a59      	ldr	r2, [pc, #356]	; (8002ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d036      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_DMA_IRQHandler+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_DMA_IRQHandler+0x1cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d02c      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_DMA_IRQHandler+0x1d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d027      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_DMA_IRQHandler+0x1d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_DMA_IRQHandler+0x1d8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a50      	ldr	r2, [pc, #320]	; (8002afc <HAL_DMA_IRQHandler+0x1dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4e      	ldr	r2, [pc, #312]	; (8002b00 <HAL_DMA_IRQHandler+0x1e0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <HAL_DMA_IRQHandler+0x1e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <HAL_DMA_IRQHandler+0x1e8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4a      	ldr	r2, [pc, #296]	; (8002b0c <HAL_DMA_IRQHandler+0x1ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xd2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_DMA_IRQHandler+0x1f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_DMA_IRQHandler+0xd6>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_IRQHandler+0xd8>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 842b 	beq.w	8003254 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2208      	movs	r2, #8
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80a2 	beq.w	8002b58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2e      	ldr	r2, [pc, #184]	; (8002ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d045      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_DMA_IRQHandler+0x1bc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d040      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d03b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d036      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_DMA_IRQHandler+0x1c8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <HAL_DMA_IRQHandler+0x1cc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <HAL_DMA_IRQHandler+0x1d0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d027      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <HAL_DMA_IRQHandler+0x1d4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d022      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_DMA_IRQHandler+0x1d8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01d      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_DMA_IRQHandler+0x1dc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_DMA_IRQHandler+0x1e0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_DMA_IRQHandler+0x1e4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_DMA_IRQHandler+0x1e8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_DMA_IRQHandler+0x1ec>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x194>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_DMA_IRQHandler+0x1f0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d12f      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x1f4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e02e      	b.n	8002b28 <HAL_DMA_IRQHandler+0x208>
 8002aca:	bf00      	nop
 8002acc:	24000000 	.word	0x24000000
 8002ad0:	1b4e81b5 	.word	0x1b4e81b5
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2208      	movs	r2, #8
 8002b46:	409a      	lsls	r2, r3
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d06e      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <HAL_DMA_IRQHandler+0x3f8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a67      	ldr	r2, [pc, #412]	; (8002d1c <HAL_DMA_IRQHandler+0x3fc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_DMA_IRQHandler+0x400>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a64      	ldr	r2, [pc, #400]	; (8002d24 <HAL_DMA_IRQHandler+0x404>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a63      	ldr	r2, [pc, #396]	; (8002d28 <HAL_DMA_IRQHandler+0x408>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a61      	ldr	r2, [pc, #388]	; (8002d2c <HAL_DMA_IRQHandler+0x40c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_DMA_IRQHandler+0x410>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5e      	ldr	r2, [pc, #376]	; (8002d34 <HAL_DMA_IRQHandler+0x414>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5d      	ldr	r2, [pc, #372]	; (8002d38 <HAL_DMA_IRQHandler+0x418>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a5b      	ldr	r2, [pc, #364]	; (8002d3c <HAL_DMA_IRQHandler+0x41c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <HAL_DMA_IRQHandler+0x420>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_DMA_IRQHandler+0x424>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_DMA_IRQHandler+0x428>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a55      	ldr	r2, [pc, #340]	; (8002d4c <HAL_DMA_IRQHandler+0x42c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_DMA_IRQHandler+0x430>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x2ee>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_DMA_IRQHandler+0x434>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10a      	bne.n	8002c24 <HAL_DMA_IRQHandler+0x304>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e003      	b.n	8002c2c <HAL_DMA_IRQHandler+0x30c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2201      	movs	r2, #1
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2204      	movs	r2, #4
 8002c56:	409a      	lsls	r2, r3
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 808f 	beq.w	8002d80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <HAL_DMA_IRQHandler+0x3f8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d04a      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <HAL_DMA_IRQHandler+0x3fc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d045      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <HAL_DMA_IRQHandler+0x400>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d040      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_DMA_IRQHandler+0x404>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03b      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <HAL_DMA_IRQHandler+0x408>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d036      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_DMA_IRQHandler+0x40c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d031      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_DMA_IRQHandler+0x410>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02c      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_DMA_IRQHandler+0x414>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <HAL_DMA_IRQHandler+0x418>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_DMA_IRQHandler+0x41c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_DMA_IRQHandler+0x420>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_DMA_IRQHandler+0x424>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_DMA_IRQHandler+0x428>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_DMA_IRQHandler+0x42c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_DMA_IRQHandler+0x430>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x3e2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <HAL_DMA_IRQHandler+0x434>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d12a      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x438>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e023      	b.n	8002d60 <HAL_DMA_IRQHandler+0x440>
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2210      	movs	r2, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a6 	beq.w	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a85      	ldr	r2, [pc, #532]	; (8002fb0 <HAL_DMA_IRQHandler+0x690>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a83      	ldr	r2, [pc, #524]	; (8002fb4 <HAL_DMA_IRQHandler+0x694>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a82      	ldr	r2, [pc, #520]	; (8002fb8 <HAL_DMA_IRQHandler+0x698>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <HAL_DMA_IRQHandler+0x69c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7f      	ldr	r2, [pc, #508]	; (8002fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7d      	ldr	r2, [pc, #500]	; (8002fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	; (8002fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7a      	ldr	r2, [pc, #488]	; (8002fcc <HAL_DMA_IRQHandler+0x6ac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a77      	ldr	r2, [pc, #476]	; (8002fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a76      	ldr	r2, [pc, #472]	; (8002fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a74      	ldr	r2, [pc, #464]	; (8002fdc <HAL_DMA_IRQHandler+0x6bc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	; (8002fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a71      	ldr	r2, [pc, #452]	; (8002fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a70      	ldr	r2, [pc, #448]	; (8002fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x516>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <HAL_DMA_IRQHandler+0x6cc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10a      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x52c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e009      	b.n	8002e60 <HAL_DMA_IRQHandler+0x540>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03e      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d024      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e01f      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01b      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e016      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2220      	movs	r2, #32
 8002eec:	409a      	lsls	r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8110 	beq.w	8003118 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2c      	ldr	r2, [pc, #176]	; (8002fb0 <HAL_DMA_IRQHandler+0x690>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d04a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <HAL_DMA_IRQHandler+0x694>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d045      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <HAL_DMA_IRQHandler+0x698>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d040      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <HAL_DMA_IRQHandler+0x69c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d03b      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d036      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02c      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <HAL_DMA_IRQHandler+0x6ac>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d027      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d01d      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <HAL_DMA_IRQHandler+0x6bc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x678>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_DMA_IRQHandler+0x6cc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d12b      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x6d0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	e02a      	b.n	8003004 <HAL_DMA_IRQHandler+0x6e4>
 8002fae:	bf00      	nop
 8002fb0:	40020010 	.word	0x40020010
 8002fb4:	40020028 	.word	0x40020028
 8002fb8:	40020040 	.word	0x40020040
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	40020070 	.word	0x40020070
 8002fc4:	40020088 	.word	0x40020088
 8002fc8:	400200a0 	.word	0x400200a0
 8002fcc:	400200b8 	.word	0x400200b8
 8002fd0:	40020410 	.word	0x40020410
 8002fd4:	40020428 	.word	0x40020428
 8002fd8:	40020440 	.word	0x40020440
 8002fdc:	40020458 	.word	0x40020458
 8002fe0:	40020470 	.word	0x40020470
 8002fe4:	40020488 	.word	0x40020488
 8002fe8:	400204a0 	.word	0x400204a0
 8002fec:	400204b8 	.word	0x400204b8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2220      	movs	r2, #32
 8003014:	409a      	lsls	r2, r3
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b04      	cmp	r3, #4
 8003024:	d139      	bne.n	800309a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0216 	bic.w	r2, r2, #22
 8003034:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003044:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_DMA_IRQHandler+0x736>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0208 	bic.w	r2, r2, #8
 8003064:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	223f      	movs	r2, #63	; 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 834a 	beq.w	8003724 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
          }
          return;
 8003098:	e344      	b.n	8003724 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e027      	b.n	8003118 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e01e      	b.n	8003118 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8306 	beq.w	800372e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8088 	beq.w	8003240 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2204      	movs	r2, #4
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a7a      	ldr	r2, [pc, #488]	; (8003328 <HAL_DMA_IRQHandler+0xa08>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d04a      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a79      	ldr	r2, [pc, #484]	; (800332c <HAL_DMA_IRQHandler+0xa0c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d045      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a77      	ldr	r2, [pc, #476]	; (8003330 <HAL_DMA_IRQHandler+0xa10>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d040      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a76      	ldr	r2, [pc, #472]	; (8003334 <HAL_DMA_IRQHandler+0xa14>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d03b      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a74      	ldr	r2, [pc, #464]	; (8003338 <HAL_DMA_IRQHandler+0xa18>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d036      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	; (800333c <HAL_DMA_IRQHandler+0xa1c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d031      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a71      	ldr	r2, [pc, #452]	; (8003340 <HAL_DMA_IRQHandler+0xa20>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a70      	ldr	r2, [pc, #448]	; (8003344 <HAL_DMA_IRQHandler+0xa24>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d027      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_DMA_IRQHandler+0xa28>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d022      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6d      	ldr	r2, [pc, #436]	; (800334c <HAL_DMA_IRQHandler+0xa2c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d01d      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <HAL_DMA_IRQHandler+0xa30>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d018      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_DMA_IRQHandler+0xa34>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a68      	ldr	r2, [pc, #416]	; (8003358 <HAL_DMA_IRQHandler+0xa38>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a67      	ldr	r2, [pc, #412]	; (800335c <HAL_DMA_IRQHandler+0xa3c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_DMA_IRQHandler+0xa40>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x8b8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a64      	ldr	r2, [pc, #400]	; (8003364 <HAL_DMA_IRQHandler+0xa44>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d108      	bne.n	80031ea <HAL_DMA_IRQHandler+0x8ca>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e007      	b.n	80031fa <HAL_DMA_IRQHandler+0x8da>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	429a      	cmp	r2, r3
 8003204:	d307      	bcc.n	8003216 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f2      	bne.n	80031fa <HAL_DMA_IRQHandler+0x8da>
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003216:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800322e:	e003      	b.n	8003238 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8272 	beq.w	800372e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e26c      	b.n	800372e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_DMA_IRQHandler+0xa48>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d022      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a42      	ldr	r2, [pc, #264]	; (800336c <HAL_DMA_IRQHandler+0xa4c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d01d      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a40      	ldr	r2, [pc, #256]	; (8003370 <HAL_DMA_IRQHandler+0xa50>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d018      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a3f      	ldr	r2, [pc, #252]	; (8003374 <HAL_DMA_IRQHandler+0xa54>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <HAL_DMA_IRQHandler+0xa58>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3c      	ldr	r2, [pc, #240]	; (800337c <HAL_DMA_IRQHandler+0xa5c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_DMA_IRQHandler+0xa60>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x984>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a39      	ldr	r2, [pc, #228]	; (8003384 <HAL_DMA_IRQHandler+0xa64>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x988>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_DMA_IRQHandler+0x98a>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 823f 	beq.w	800372e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2204      	movs	r2, #4
 80032c2:	409a      	lsls	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80cd 	beq.w	8003468 <HAL_DMA_IRQHandler+0xb48>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80c7 	beq.w	8003468 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d049      	beq.n	8003388 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8210 	beq.w	8003728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003310:	e20a      	b.n	8003728 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8206 	beq.w	8003728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003324:	e200      	b.n	8003728 <HAL_DMA_IRQHandler+0xe08>
 8003326:	bf00      	nop
 8003328:	40020010 	.word	0x40020010
 800332c:	40020028 	.word	0x40020028
 8003330:	40020040 	.word	0x40020040
 8003334:	40020058 	.word	0x40020058
 8003338:	40020070 	.word	0x40020070
 800333c:	40020088 	.word	0x40020088
 8003340:	400200a0 	.word	0x400200a0
 8003344:	400200b8 	.word	0x400200b8
 8003348:	40020410 	.word	0x40020410
 800334c:	40020428 	.word	0x40020428
 8003350:	40020440 	.word	0x40020440
 8003354:	40020458 	.word	0x40020458
 8003358:	40020470 	.word	0x40020470
 800335c:	40020488 	.word	0x40020488
 8003360:	400204a0 	.word	0x400204a0
 8003364:	400204b8 	.word	0x400204b8
 8003368:	58025408 	.word	0x58025408
 800336c:	5802541c 	.word	0x5802541c
 8003370:	58025430 	.word	0x58025430
 8003374:	58025444 	.word	0x58025444
 8003378:	58025458 	.word	0x58025458
 800337c:	5802546c 	.word	0x5802546c
 8003380:	58025480 	.word	0x58025480
 8003384:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d160      	bne.n	8003454 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7f      	ldr	r2, [pc, #508]	; (8003594 <HAL_DMA_IRQHandler+0xc74>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7d      	ldr	r2, [pc, #500]	; (8003598 <HAL_DMA_IRQHandler+0xc78>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_DMA_IRQHandler+0xc7c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <HAL_DMA_IRQHandler+0xc80>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a79      	ldr	r2, [pc, #484]	; (80035a4 <HAL_DMA_IRQHandler+0xc84>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_DMA_IRQHandler+0xc88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a76      	ldr	r2, [pc, #472]	; (80035ac <HAL_DMA_IRQHandler+0xc8c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a74      	ldr	r2, [pc, #464]	; (80035b0 <HAL_DMA_IRQHandler+0xc90>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a73      	ldr	r2, [pc, #460]	; (80035b4 <HAL_DMA_IRQHandler+0xc94>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_DMA_IRQHandler+0xc98>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a70      	ldr	r2, [pc, #448]	; (80035bc <HAL_DMA_IRQHandler+0xc9c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <HAL_DMA_IRQHandler+0xca0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6d      	ldr	r2, [pc, #436]	; (80035c4 <HAL_DMA_IRQHandler+0xca4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6b      	ldr	r2, [pc, #428]	; (80035c8 <HAL_DMA_IRQHandler+0xca8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_DMA_IRQHandler+0xcac>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_IRQHandler+0xb12>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a68      	ldr	r2, [pc, #416]	; (80035d0 <HAL_DMA_IRQHandler+0xcb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <HAL_DMA_IRQHandler+0xb24>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0208 	bic.w	r2, r2, #8
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <HAL_DMA_IRQHandler+0xb34>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8165 	beq.w	8003728 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003466:	e15f      	b.n	8003728 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2202      	movs	r2, #2
 8003472:	409a      	lsls	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80c5 	beq.w	8003608 <HAL_DMA_IRQHandler+0xce8>
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80bf 	beq.w	8003608 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2202      	movs	r2, #2
 8003494:	409a      	lsls	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 813a 	beq.w	800372c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c0:	e134      	b.n	800372c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8130 	beq.w	800372c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d4:	e12a      	b.n	800372c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8089 	bne.w	80035f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_DMA_IRQHandler+0xc74>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <HAL_DMA_IRQHandler+0xc78>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a28      	ldr	r2, [pc, #160]	; (800359c <HAL_DMA_IRQHandler+0xc7c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <HAL_DMA_IRQHandler+0xc80>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <HAL_DMA_IRQHandler+0xc84>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <HAL_DMA_IRQHandler+0xc88>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a22      	ldr	r2, [pc, #136]	; (80035ac <HAL_DMA_IRQHandler+0xc8c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <HAL_DMA_IRQHandler+0xc90>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_DMA_IRQHandler+0xc94>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_DMA_IRQHandler+0xc98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_DMA_IRQHandler+0xc9c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <HAL_DMA_IRQHandler+0xca0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_DMA_IRQHandler+0xca4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_DMA_IRQHandler+0xca8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_DMA_IRQHandler+0xcac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0xc62>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_DMA_IRQHandler+0xcb0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d128      	bne.n	80035d4 <HAL_DMA_IRQHandler+0xcb4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0214 	bic.w	r2, r2, #20
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e027      	b.n	80035e4 <HAL_DMA_IRQHandler+0xcc4>
 8003594:	40020010 	.word	0x40020010
 8003598:	40020028 	.word	0x40020028
 800359c:	40020040 	.word	0x40020040
 80035a0:	40020058 	.word	0x40020058
 80035a4:	40020070 	.word	0x40020070
 80035a8:	40020088 	.word	0x40020088
 80035ac:	400200a0 	.word	0x400200a0
 80035b0:	400200b8 	.word	0x400200b8
 80035b4:	40020410 	.word	0x40020410
 80035b8:	40020428 	.word	0x40020428
 80035bc:	40020440 	.word	0x40020440
 80035c0:	40020458 	.word	0x40020458
 80035c4:	40020470 	.word	0x40020470
 80035c8:	40020488 	.word	0x40020488
 80035cc:	400204a0 	.word	0x400204a0
 80035d0:	400204b8 	.word	0x400204b8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 020a 	bic.w	r2, r2, #10
 80035e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8097 	beq.w	800372c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003606:	e091      	b.n	800372c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2208      	movs	r2, #8
 8003612:	409a      	lsls	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8088 	beq.w	800372e <HAL_DMA_IRQHandler+0xe0e>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8082 	beq.w	800372e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a41      	ldr	r2, [pc, #260]	; (8003734 <HAL_DMA_IRQHandler+0xe14>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d04a      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <HAL_DMA_IRQHandler+0xe18>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d045      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3e      	ldr	r2, [pc, #248]	; (800373c <HAL_DMA_IRQHandler+0xe1c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d040      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	; (8003740 <HAL_DMA_IRQHandler+0xe20>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d03b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_DMA_IRQHandler+0xe24>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d036      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a39      	ldr	r2, [pc, #228]	; (8003748 <HAL_DMA_IRQHandler+0xe28>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d031      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_DMA_IRQHandler+0xe2c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d02c      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a36      	ldr	r2, [pc, #216]	; (8003750 <HAL_DMA_IRQHandler+0xe30>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d027      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a35      	ldr	r2, [pc, #212]	; (8003754 <HAL_DMA_IRQHandler+0xe34>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d022      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_DMA_IRQHandler+0xe38>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01d      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_DMA_IRQHandler+0xe3c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d018      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_DMA_IRQHandler+0xe40>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <HAL_DMA_IRQHandler+0xe44>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <HAL_DMA_IRQHandler+0xe48>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	; (800376c <HAL_DMA_IRQHandler+0xe4c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_DMA_IRQHandler+0xdaa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_DMA_IRQHandler+0xe50>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <HAL_DMA_IRQHandler+0xdbc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 021c 	bic.w	r2, r2, #28
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e007      	b.n	80036ec <HAL_DMA_IRQHandler+0xdcc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 020e 	bic.w	r2, r2, #14
 80036ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2201      	movs	r2, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e004      	b.n	800372e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800372c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800372e:	3728      	adds	r7, #40	; 0x28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40020010 	.word	0x40020010
 8003738:	40020028 	.word	0x40020028
 800373c:	40020040 	.word	0x40020040
 8003740:	40020058 	.word	0x40020058
 8003744:	40020070 	.word	0x40020070
 8003748:	40020088 	.word	0x40020088
 800374c:	400200a0 	.word	0x400200a0
 8003750:	400200b8 	.word	0x400200b8
 8003754:	40020410 	.word	0x40020410
 8003758:	40020428 	.word	0x40020428
 800375c:	40020440 	.word	0x40020440
 8003760:	40020458 	.word	0x40020458
 8003764:	40020470 	.word	0x40020470
 8003768:	40020488 	.word	0x40020488
 800376c:	400204a0 	.word	0x400204a0
 8003770:	400204b8 	.word	0x400204b8

08003774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <DMA_CalcBaseAndBitshift+0x118>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a41      	ldr	r2, [pc, #260]	; (8003890 <DMA_CalcBaseAndBitshift+0x11c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3f      	ldr	r2, [pc, #252]	; (8003894 <DMA_CalcBaseAndBitshift+0x120>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3e      	ldr	r2, [pc, #248]	; (8003898 <DMA_CalcBaseAndBitshift+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3c      	ldr	r2, [pc, #240]	; (800389c <DMA_CalcBaseAndBitshift+0x128>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a39      	ldr	r2, [pc, #228]	; (80038a4 <DMA_CalcBaseAndBitshift+0x130>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <DMA_CalcBaseAndBitshift+0x134>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a36      	ldr	r2, [pc, #216]	; (80038ac <DMA_CalcBaseAndBitshift+0x138>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a35      	ldr	r2, [pc, #212]	; (80038b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <DMA_CalcBaseAndBitshift+0x140>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <DMA_CalcBaseAndBitshift+0x144>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a30      	ldr	r2, [pc, #192]	; (80038bc <DMA_CalcBaseAndBitshift+0x148>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <DMA_CalcBaseAndBitshift+0x150>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xa8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <DMA_CalcBaseAndBitshift+0x154>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <DMA_CalcBaseAndBitshift+0xac>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <DMA_CalcBaseAndBitshift+0xae>
 8003820:	2300      	movs	r3, #0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3b10      	subs	r3, #16
 800382e:	4a27      	ldr	r2, [pc, #156]	; (80038cc <DMA_CalcBaseAndBitshift+0x158>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d908      	bls.n	8003860 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <DMA_CalcBaseAndBitshift+0x160>)
 8003856:	4013      	ands	r3, r2
 8003858:	1d1a      	adds	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	659a      	str	r2, [r3, #88]	; 0x58
 800385e:	e00d      	b.n	800387c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <DMA_CalcBaseAndBitshift+0x160>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6593      	str	r3, [r2, #88]	; 0x58
 800386e:	e005      	b.n	800387c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	aaaaaaab 	.word	0xaaaaaaab
 80038d0:	08009a1c 	.word	0x08009a1c
 80038d4:	fffffc00 	.word	0xfffffc00

080038d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d120      	bne.n	800392e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d858      	bhi.n	80039a6 <DMA_CheckFifoParam+0xce>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <DMA_CheckFifoParam+0x24>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	0800390d 	.word	0x0800390d
 8003900:	0800391f 	.word	0x0800391f
 8003904:	0800390d 	.word	0x0800390d
 8003908:	080039a7 	.word	0x080039a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d048      	beq.n	80039aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800391c:	e045      	b.n	80039aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003926:	d142      	bne.n	80039ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800392c:	e03f      	b.n	80039ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d123      	bne.n	8003980 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2b03      	cmp	r3, #3
 800393e:	d838      	bhi.n	80039b2 <DMA_CheckFifoParam+0xda>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x70>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003959 	.word	0x08003959
 800394c:	0800395f 	.word	0x0800395f
 8003950:	08003959 	.word	0x08003959
 8003954:	08003971 	.word	0x08003971
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
        break;
 800395c:	e030      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d025      	beq.n	80039b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800396e:	e022      	b.n	80039b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003978:	d11f      	bne.n	80039ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800397e:	e01c      	b.n	80039ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	2b02      	cmp	r3, #2
 8003986:	d902      	bls.n	800398e <DMA_CheckFifoParam+0xb6>
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800398c:	e018      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
        break;
 8003992:	e015      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
    break;
 80039a4:	e00b      	b.n	80039be <DMA_CheckFifoParam+0xe6>
        break;
 80039a6:	bf00      	nop
 80039a8:	e00a      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        break;
 80039aa:	bf00      	nop
 80039ac:	e008      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        break;
 80039ae:	bf00      	nop
 80039b0:	e006      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        break;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
    break;
 80039be:	bf00      	nop
    }
  }

  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a36      	ldr	r2, [pc, #216]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a35      	ldr	r2, [pc, #212]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01a      	beq.n	8003a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3b08      	subs	r3, #8
 8003a40:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a24      	ldr	r2, [pc, #144]	; (8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2201      	movs	r2, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a6c:	e024      	b.n	8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3b10      	subs	r3, #16
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d806      	bhi.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d902      	bls.n	8003a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3308      	adds	r3, #8
 8003a94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4b18      	ldr	r3, [pc, #96]	; (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003aa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494
 8003ae4:	cccccccd 	.word	0xcccccccd
 8003ae8:	16009600 	.word	0x16009600
 8003aec:	58025880 	.word	0x58025880
 8003af0:	aaaaaaab 	.word	0xaaaaaaab
 8003af4:	400204b8 	.word	0x400204b8
 8003af8:	4002040f 	.word	0x4002040f
 8003afc:	10008200 	.word	0x10008200
 8003b00:	40020880 	.word	0x40020880

08003b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04a      	beq.n	8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d847      	bhi.n	8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a25      	ldr	r2, [pc, #148]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d022      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d01d      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d018      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d013      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b8c:	671a      	str	r2, [r3, #112]	; 0x70
 8003b8e:	e009      	b.n	8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ba2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	2201      	movs	r2, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	58025408 	.word	0x58025408
 8003bc0:	5802541c 	.word	0x5802541c
 8003bc4:	58025430 	.word	0x58025430
 8003bc8:	58025444 	.word	0x58025444
 8003bcc:	58025458 	.word	0x58025458
 8003bd0:	5802546c 	.word	0x5802546c
 8003bd4:	58025480 	.word	0x58025480
 8003bd8:	58025494 	.word	0x58025494
 8003bdc:	1600963f 	.word	0x1600963f
 8003be0:	58025940 	.word	0x58025940
 8003be4:	1000823f 	.word	0x1000823f
 8003be8:	40020940 	.word	0x40020940

08003bec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0cf      	b.n	8003d9e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2223      	movs	r2, #35	; 0x23
 8003c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fd f8b9 	bl	8000d88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c16:	4b64      	ldr	r3, [pc, #400]	; (8003da8 <HAL_ETH_Init+0x1bc>)
 8003c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1c:	4a62      	ldr	r2, [pc, #392]	; (8003da8 <HAL_ETH_Init+0x1bc>)
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c26:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <HAL_ETH_Init+0x1bc>)
 8003c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7a1b      	ldrb	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f7fd fc8b 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
 8003c42:	e003      	b.n	8003c4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c44:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003c48:	f7fd fc86 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <HAL_ETH_Init+0x1c0>)
 8003c4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c68:	f7fd fc3a 	bl	80014e0 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c6e:	e011      	b.n	8003c94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c70:	f7fd fc36 	bl	80014e0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c7e:	d909      	bls.n	8003c94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2204      	movs	r2, #4
 8003c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	22e0      	movs	r2, #224	; 0xe0
 8003c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e084      	b.n	8003d9e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e4      	bne.n	8003c70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f886 	bl	8003db8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003cac:	f001 fee4 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4a3f      	ldr	r2, [pc, #252]	; (8003db0 <HAL_ETH_Init+0x1c4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0c9a      	lsrs	r2, r3, #18
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3a01      	subs	r2, #1
 8003cc0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa71 	bl	80041ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003cd6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ce6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	22e0      	movs	r2, #224	; 0xe0
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e049      	b.n	8003d9e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003d16:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_ETH_Init+0x1c8>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6952      	ldr	r2, [r2, #20]
 8003d1e:	0051      	lsls	r1, r2, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d2a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fad9 	bl	80042e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb1f 	bl	8004378 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	3305      	adds	r3, #5
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	3303      	adds	r3, #3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	061a      	lsls	r2, r3, #24
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	3302      	adds	r3, #2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	3301      	adds	r3, #1
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2210      	movs	r2, #16
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
 8003dac:	58000400 	.word	0x58000400
 8003db0:	431bde83 	.word	0x431bde83
 8003db4:	ffff8001 	.word	0xffff8001

08003db8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003dd2:	f001 fe51 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8003dd6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d908      	bls.n	8003df2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d804      	bhi.n	8003df2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e027      	b.n	8003e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d908      	bls.n	8003e0c <HAL_ETH_SetMDIOClockRange+0x54>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d204      	bcs.n	8003e0c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e01a      	b.n	8003e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d303      	bcc.n	8003e1c <HAL_ETH_SetMDIOClockRange+0x64>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d911      	bls.n	8003e40 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d908      	bls.n	8003e36 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d804      	bhi.n	8003e36 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e005      	b.n	8003e42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e000      	b.n	8003e42 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003e40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	01312cff 	.word	0x01312cff
 8003e58:	02160ebf 	.word	0x02160ebf
 8003e5c:	03938700 	.word	0x03938700
 8003e60:	05f5e0ff 	.word	0x05f5e0ff
 8003e64:	08f0d17f 	.word	0x08f0d17f

08003e68 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	7b1b      	ldrb	r3, [r3, #12]
 8003e88:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7b5b      	ldrb	r3, [r3, #13]
 8003e90:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	7b9b      	ldrb	r3, [r3, #14]
 8003e98:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	7bdb      	ldrb	r3, [r3, #15]
 8003ea0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ea2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	7c12      	ldrb	r2, [r2, #16]
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	d102      	bne.n	8003eb2 <ETH_SetMACConfig+0x4a>
 8003eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003eb0:	e000      	b.n	8003eb4 <ETH_SetMACConfig+0x4c>
 8003eb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003eb4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	7c52      	ldrb	r2, [r2, #17]
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d102      	bne.n	8003ec4 <ETH_SetMACConfig+0x5c>
 8003ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ec2:	e000      	b.n	8003ec6 <ETH_SetMACConfig+0x5e>
 8003ec4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	7c9b      	ldrb	r3, [r3, #18]
 8003ecc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ece:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ed4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	7f1b      	ldrb	r3, [r3, #28]
 8003ee0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003ee2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	7f5b      	ldrb	r3, [r3, #29]
 8003ee8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003eea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	7f92      	ldrb	r2, [r2, #30]
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	d102      	bne.n	8003efa <ETH_SetMACConfig+0x92>
 8003ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef8:	e000      	b.n	8003efc <ETH_SetMACConfig+0x94>
 8003efa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003efc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	7fdb      	ldrb	r3, [r3, #31]
 8003f02:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003f04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d102      	bne.n	8003f16 <ETH_SetMACConfig+0xae>
 8003f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f14:	e000      	b.n	8003f18 <ETH_SetMACConfig+0xb0>
 8003f16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003f18:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f26:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003f28:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <ETH_SetMACConfig+0x22c>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f66:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f68:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d102      	bne.n	8003f7a <ETH_SetMACConfig+0x112>
 8003f74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f78:	e000      	b.n	8003f7c <ETH_SetMACConfig+0x114>
 8003f7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f7c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <ETH_SetMACConfig+0x230>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4b3a      	ldr	r3, [pc, #232]	; (800409c <ETH_SetMACConfig+0x234>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d101      	bne.n	8003fda <ETH_SetMACConfig+0x172>
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	e000      	b.n	8003fdc <ETH_SetMACConfig+0x174>
 8003fda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003fdc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	68f9      	ldr	r1, [r7, #12]
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004004:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800400c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f023 0103 	bic.w	r1, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	430a      	orrs	r2, r1
 8004026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004032:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800404e:	2a00      	cmp	r2, #0
 8004050:	d101      	bne.n	8004056 <ETH_SetMACConfig+0x1ee>
 8004052:	2240      	movs	r2, #64	; 0x40
 8004054:	e000      	b.n	8004058 <ETH_SetMACConfig+0x1f0>
 8004056:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004058:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004060:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004062:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800406a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004078:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	430a      	orrs	r2, r1
 8004084:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	00048083 	.word	0x00048083
 8004098:	c0f88000 	.word	0xc0f88000
 800409c:	fffffef0 	.word	0xfffffef0

080040a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b38      	ldr	r3, [pc, #224]	; (8004198 <ETH_SetDMAConfig+0xf8>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	6811      	ldr	r1, [r2, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	7b1b      	ldrb	r3, [r3, #12]
 80040d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4b2c      	ldr	r3, [pc, #176]	; (800419c <ETH_SetDMAConfig+0xfc>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	68f9      	ldr	r1, [r7, #12]
 80040f2:	430b      	orrs	r3, r1
 80040f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	7b5b      	ldrb	r3, [r3, #13]
 80040fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <ETH_SetDMAConfig+0x100>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	430b      	orrs	r3, r1
 8004120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004124:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	7d1b      	ldrb	r3, [r3, #20]
 8004130:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004132:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	7f5b      	ldrb	r3, [r3, #29]
 8004138:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004146:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800414a:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <ETH_SetDMAConfig+0x104>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	430b      	orrs	r3, r1
 8004156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	7f1b      	ldrb	r3, [r3, #28]
 8004162:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004174:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <ETH_SetDMAConfig+0x108>)
 800417a:	4013      	ands	r3, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	430b      	orrs	r3, r1
 8004184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004188:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	ffff87fd 	.word	0xffff87fd
 800419c:	ffff2ffe 	.word	0xffff2ffe
 80041a0:	fffec000 	.word	0xfffec000
 80041a4:	ffc0efef 	.word	0xffc0efef
 80041a8:	7fc0ffff 	.word	0x7fc0ffff

080041ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b0a4      	sub	sp, #144	; 0x90
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041ba:	2300      	movs	r3, #0
 80041bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004204:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004210:	2300      	movs	r3, #0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004226:	2300      	movs	r3, #0
 8004228:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800422a:	2300      	movs	r3, #0
 800422c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800422e:	2300      	movs	r3, #0
 8004230:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004244:	2320      	movs	r3, #32
 8004246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004250:	2300      	movs	r3, #0
 8004252:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004256:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800425c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004268:	2302      	movs	r3, #2
 800426a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004286:	2300      	movs	r3, #0
 8004288:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fde6 	bl	8003e68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800429c:	2301      	movs	r3, #1
 800429e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80042a0:	2301      	movs	r3, #1
 80042a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80042b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80042c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80042cc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fee1 	bl	80040a0 <ETH_SetDMAConfig>
}
 80042de:	bf00      	nop
 80042e0:	3790      	adds	r7, #144	; 0x90
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e01d      	b.n	8004330 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	3206      	adds	r2, #6
 8004326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d9de      	bls.n	80042f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004344:	461a      	mov	r2, r3
 8004346:	2303      	movs	r3, #3
 8004348:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004368:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e023      	b.n	80043ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	3212      	adds	r2, #18
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d9d8      	bls.n	8004386 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	461a      	mov	r2, r3
 80043fc:	2303      	movs	r3, #3
 80043fe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <HAL_GPIO_Init+0x234>)
 8004444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004446:	e194      	b.n	8004772 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2101      	movs	r1, #1
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8186 	beq.w	800476c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d005      	beq.n	8004478 <HAL_GPIO_Init+0x44>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d130      	bne.n	80044da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	2203      	movs	r2, #3
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ae:	2201      	movs	r2, #1
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0201 	and.w	r2, r3, #1
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d017      	beq.n	8004516 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d123      	bne.n	800456a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	08da      	lsrs	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3208      	adds	r2, #8
 800452a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	220f      	movs	r2, #15
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	08da      	lsrs	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	2203      	movs	r2, #3
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0203 	and.w	r2, r3, #3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80e0 	beq.w	800476c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ac:	4b2f      	ldr	r3, [pc, #188]	; (800466c <HAL_GPIO_Init+0x238>)
 80045ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b2:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_GPIO_Init+0x238>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <HAL_GPIO_Init+0x238>)
 80045be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ca:	4a29      	ldr	r2, [pc, #164]	; (8004670 <HAL_GPIO_Init+0x23c>)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3302      	adds	r3, #2
 80045d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a20      	ldr	r2, [pc, #128]	; (8004674 <HAL_GPIO_Init+0x240>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d052      	beq.n	800469c <HAL_GPIO_Init+0x268>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_GPIO_Init+0x244>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_Init+0x22e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_GPIO_Init+0x248>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_Init+0x22a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_GPIO_Init+0x24c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_Init+0x226>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <HAL_GPIO_Init+0x250>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x222>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_GPIO_Init+0x254>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x21e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_GPIO_Init+0x258>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x21a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_GPIO_Init+0x25c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x216>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_GPIO_Init+0x260>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x212>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_GPIO_Init+0x264>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x20e>
 800463e:	2309      	movs	r3, #9
 8004640:	e02d      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004642:	230a      	movs	r3, #10
 8004644:	e02b      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004646:	2308      	movs	r3, #8
 8004648:	e029      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800464a:	2307      	movs	r3, #7
 800464c:	e027      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800464e:	2306      	movs	r3, #6
 8004650:	e025      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004652:	2305      	movs	r3, #5
 8004654:	e023      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004656:	2304      	movs	r3, #4
 8004658:	e021      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800465a:	2303      	movs	r3, #3
 800465c:	e01f      	b.n	800469e <HAL_GPIO_Init+0x26a>
 800465e:	2302      	movs	r3, #2
 8004660:	e01d      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004662:	2301      	movs	r3, #1
 8004664:	e01b      	b.n	800469e <HAL_GPIO_Init+0x26a>
 8004666:	bf00      	nop
 8004668:	58000080 	.word	0x58000080
 800466c:	58024400 	.word	0x58024400
 8004670:	58000400 	.word	0x58000400
 8004674:	58020000 	.word	0x58020000
 8004678:	58020400 	.word	0x58020400
 800467c:	58020800 	.word	0x58020800
 8004680:	58020c00 	.word	0x58020c00
 8004684:	58021000 	.word	0x58021000
 8004688:	58021400 	.word	0x58021400
 800468c:	58021800 	.word	0x58021800
 8004690:	58021c00 	.word	0x58021c00
 8004694:	58022000 	.word	0x58022000
 8004698:	58022400 	.word	0x58022400
 800469c:	2300      	movs	r3, #0
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	f002 0203 	and.w	r2, r2, #3
 80046a4:	0092      	lsls	r2, r2, #2
 80046a6:	4093      	lsls	r3, r2
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ae:	4938      	ldr	r1, [pc, #224]	; (8004790 <HAL_GPIO_Init+0x35c>)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	3302      	adds	r3, #2
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f ae63 	bne.w	8004448 <HAL_GPIO_Init+0x14>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	3724      	adds	r7, #36	; 0x24
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	58000400 	.word	0x58000400

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047b0:	e003      	b.n	80047ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	041a      	lsls	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047d8:	887a      	ldrh	r2, [r7, #2]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4013      	ands	r3, r2
 80047de:	041a      	lsls	r2, r3, #16
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43d9      	mvns	r1, r3
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	400b      	ands	r3, r1
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	619a      	str	r2, [r3, #24]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004804:	4a08      	ldr	r2, [pc, #32]	; (8004828 <HAL_HSEM_FastTake+0x2c>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3320      	adds	r3, #32
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <HAL_HSEM_FastTake+0x30>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	58026400 	.word	0x58026400
 800482c:	80000300 	.word	0x80000300

08004830 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800483a:	4906      	ldr	r1, [pc, #24]	; (8004854 <HAL_HSEM_Release+0x24>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	58026400 	.word	0x58026400

08004858 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485a:	b08f      	sub	sp, #60	; 0x3c
 800485c:	af0a      	add	r7, sp, #40	; 0x28
 800485e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e116      	b.n	8004a98 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fcc5 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f004 fddb 	bl	8009464 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	687e      	ldr	r6, [r7, #4]
 80048b6:	466d      	mov	r5, sp
 80048b8:	f106 0410 	add.w	r4, r6, #16
 80048bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80048cc:	1d33      	adds	r3, r6, #4
 80048ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d0:	6838      	ldr	r0, [r7, #0]
 80048d2:	f004 fd59 	bl	8009388 <USB_CoreInit>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0d7      	b.n	8004a98 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 fdc9 	bl	8009486 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
 80048f8:	e04a      	b.n	8004990 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	333d      	adds	r3, #61	; 0x3d
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	333c      	adds	r3, #60	; 0x3c
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	b298      	uxth	r0, r3
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3344      	adds	r3, #68	; 0x44
 8004936:	4602      	mov	r2, r0
 8004938:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3340      	adds	r3, #64	; 0x40
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	3348      	adds	r3, #72	; 0x48
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334c      	adds	r3, #76	; 0x4c
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3354      	adds	r3, #84	; 0x54
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	3301      	adds	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3af      	bcc.n	80048fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e044      	b.n	8004a2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	3301      	adds	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3b5      	bcc.n	80049a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	687e      	ldr	r6, [r7, #4]
 8004a3c:	466d      	mov	r5, sp
 8004a3e:	f106 0410 	add.w	r4, r6, #16
 8004a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a52:	1d33      	adds	r3, r6, #4
 8004a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f004 fd62 	bl	8009520 <USB_DevInit>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e014      	b.n	8004a98 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f80a 	bl	8004aa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 ff20 	bl	80098d6 <USB_DevDisconnect>

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	10000003 	.word	0x10000003

08004ae8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004af0:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d00a      	beq.n	8004b12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004afc:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e040      	b.n	8004b90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e03e      	b.n	8004b90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004b1a:	491f      	ldr	r1, [pc, #124]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b22:	f7fc fcdd 	bl	80014e0 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b28:	e009      	b.n	8004b3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b2a:	f7fc fcd9 	bl	80014e0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b38:	d901      	bls.n	8004b3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e028      	b.n	8004b90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4a:	d1ee      	bne.n	8004b2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b1e      	cmp	r3, #30
 8004b50:	d008      	beq.n	8004b64 <HAL_PWREx_ConfigSupply+0x7c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b2e      	cmp	r3, #46	; 0x2e
 8004b56:	d005      	beq.n	8004b64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b1d      	cmp	r3, #29
 8004b5c:	d002      	beq.n	8004b64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b2d      	cmp	r3, #45	; 0x2d
 8004b62:	d114      	bne.n	8004b8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b64:	f7fc fcbc 	bl	80014e0 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b6a:	e009      	b.n	8004b80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b6c:	f7fc fcb8 	bl	80014e0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b7a:	d901      	bls.n	8004b80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d1ee      	bne.n	8004b6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	58024800 	.word	0x58024800

08004b9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	60d3      	str	r3, [r2, #12]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	58024800 	.word	0x58024800

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08c      	sub	sp, #48	; 0x30
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f000 bc1d 	b.w	800540a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8087 	beq.w	8004cec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bde:	4b99      	ldr	r3, [pc, #612]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be8:	4b96      	ldr	r3, [pc, #600]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d007      	beq.n	8004c04 <HAL_RCC_OscConfig+0x48>
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b18      	cmp	r3, #24
 8004bf8:	d110      	bne.n	8004c1c <HAL_RCC_OscConfig+0x60>
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d06c      	beq.n	8004cea <HAL_RCC_OscConfig+0x12e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d168      	bne.n	8004cea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e3f6      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_OscConfig+0x78>
 8004c26:	4b87      	ldr	r3, [pc, #540]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a86      	ldr	r2, [pc, #536]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e02e      	b.n	8004c92 <HAL_RCC_OscConfig+0xd6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10c      	bne.n	8004c56 <HAL_RCC_OscConfig+0x9a>
 8004c3c:	4b81      	ldr	r3, [pc, #516]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a80      	ldr	r2, [pc, #512]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7d      	ldr	r2, [pc, #500]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e01d      	b.n	8004c92 <HAL_RCC_OscConfig+0xd6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0xbe>
 8004c60:	4b78      	ldr	r3, [pc, #480]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a77      	ldr	r2, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b75      	ldr	r3, [pc, #468]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a74      	ldr	r2, [pc, #464]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	e00b      	b.n	8004c92 <HAL_RCC_OscConfig+0xd6>
 8004c7a:	4b72      	ldr	r3, [pc, #456]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a71      	ldr	r2, [pc, #452]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b6f      	ldr	r3, [pc, #444]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d013      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fc fc21 	bl	80014e0 <HAL_GetTick>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca2:	f7fc fc1d 	bl	80014e0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	; 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e3aa      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cb4:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0xe6>
 8004cc0:	e014      	b.n	8004cec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fc fc0d 	bl	80014e0 <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cca:	f7fc fc09 	bl	80014e0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b64      	cmp	r3, #100	; 0x64
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e396      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cdc:	4b59      	ldr	r3, [pc, #356]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x10e>
 8004ce8:	e000      	b.n	8004cec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80cb 	beq.w	8004e90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfa:	4b52      	ldr	r3, [pc, #328]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d04:	4b4f      	ldr	r3, [pc, #316]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_RCC_OscConfig+0x164>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b18      	cmp	r3, #24
 8004d14:	d156      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x208>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d151      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d20:	4b48      	ldr	r3, [pc, #288]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_OscConfig+0x17c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e368      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d38:	4b42      	ldr	r3, [pc, #264]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 0219 	bic.w	r2, r3, #25
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	493f      	ldr	r1, [pc, #252]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d4a:	f7fc fbc9 	bl	80014e0 <HAL_GetTick>
 8004d4e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d52:	f7fc fbc5 	bl	80014e0 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e352      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d64:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d70:	f7fc fbe6 	bl	8001540 <HAL_GetREVID>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d817      	bhi.n	8004dae <HAL_RCC_OscConfig+0x1f2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d108      	bne.n	8004d98 <HAL_RCC_OscConfig+0x1dc>
 8004d86:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d8e:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d96:	e07b      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4927      	ldr	r1, [pc, #156]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dac:	e070      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	4921      	ldr	r1, [pc, #132]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	e065      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d048      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0219 	bic.w	r2, r3, #25
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	491a      	ldr	r1, [pc, #104]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fb7f 	bl	80014e0 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de6:	f7fc fb7b 	bl	80014e0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e308      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	f7fc fb9c 	bl	8001540 <HAL_GetREVID>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d81a      	bhi.n	8004e48 <HAL_RCC_OscConfig+0x28c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d108      	bne.n	8004e2c <HAL_RCC_OscConfig+0x270>
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e22:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e28:	6053      	str	r3, [r2, #4]
 8004e2a:	e031      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	4902      	ldr	r1, [pc, #8]	; (8004e44 <HAL_RCC_OscConfig+0x288>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
 8004e40:	e026      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
 8004e48:	4b9a      	ldr	r3, [pc, #616]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	4997      	ldr	r1, [pc, #604]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]
 8004e5c:	e018      	b.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5e:	4b95      	ldr	r3, [pc, #596]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a94      	ldr	r2, [pc, #592]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fc fb39 	bl	80014e0 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e72:	f7fc fb35 	bl	80014e0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e2c2      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e84:	4b8b      	ldr	r3, [pc, #556]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a9 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ea8:	4b82      	ldr	r3, [pc, #520]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d007      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x308>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	d13a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x374>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d135      	bne.n	8004f30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec4:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x320>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e296      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004edc:	f7fc fb30 	bl	8001540 <HAL_GetREVID>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d817      	bhi.n	8004f1a <HAL_RCC_OscConfig+0x35e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCC_OscConfig+0x348>
 8004ef2:	4b70      	ldr	r3, [pc, #448]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004efa:	4a6e      	ldr	r2, [pc, #440]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f02:	e075      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f04:	4b6b      	ldr	r3, [pc, #428]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	069b      	lsls	r3, r3, #26
 8004f12:	4968      	ldr	r1, [pc, #416]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f18:	e06a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1a:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	4962      	ldr	r1, [pc, #392]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2e:	e05f      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d042      	beq.n	8004fbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f38:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5d      	ldr	r2, [pc, #372]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc facc 	bl	80014e0 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fac8 	bl	80014e0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e255      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5e:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f6a:	f7fc fae9 	bl	8001540 <HAL_GetREVID>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d817      	bhi.n	8004fa8 <HAL_RCC_OscConfig+0x3ec>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d108      	bne.n	8004f92 <HAL_RCC_OscConfig+0x3d6>
 8004f80:	4b4c      	ldr	r3, [pc, #304]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f88:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	6053      	str	r3, [r2, #4]
 8004f90:	e02e      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
 8004f92:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	069b      	lsls	r3, r3, #26
 8004fa0:	4944      	ldr	r1, [pc, #272]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
 8004fa6:	e023      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
 8004fa8:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	493f      	ldr	r1, [pc, #252]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fbe:	4b3d      	ldr	r3, [pc, #244]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3c      	ldr	r2, [pc, #240]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fa89 	bl	80014e0 <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fd2:	f7fc fa85 	bl	80014e0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e212      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe4:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d036      	beq.n	800506a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005004:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fa66 	bl	80014e0 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005018:	f7fc fa62 	bl	80014e0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1ef      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x45c>
 8005036:	e018      	b.n	800506a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fc fa4c 	bl	80014e0 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504c:	f7fc fa48 	bl	80014e0 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1d5      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d039      	beq.n	80050ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 8005084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005088:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800508a:	f7fc fa29 	bl	80014e0 <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005092:	f7fc fa25 	bl	80014e0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1b2      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_OscConfig+0x4f8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x4d6>
 80050b0:	e01b      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b8:	4b9b      	ldr	r3, [pc, #620]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a9a      	ldr	r2, [pc, #616]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80050be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050c4:	f7fc fa0c 	bl	80014e0 <HAL_GetTick>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050cc:	f7fc fa08 	bl	80014e0 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e195      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050de:	4b92      	ldr	r3, [pc, #584]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8081 	beq.w	80051fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050f8:	4b8c      	ldr	r3, [pc, #560]	; (800532c <HAL_RCC_OscConfig+0x770>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a8b      	ldr	r2, [pc, #556]	; (800532c <HAL_RCC_OscConfig+0x770>)
 80050fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005104:	f7fc f9ec 	bl	80014e0 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800510c:	f7fc f9e8 	bl	80014e0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e175      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511e:	4b83      	ldr	r3, [pc, #524]	; (800532c <HAL_RCC_OscConfig+0x770>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d106      	bne.n	8005140 <HAL_RCC_OscConfig+0x584>
 8005132:	4b7d      	ldr	r3, [pc, #500]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a7c      	ldr	r2, [pc, #496]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
 800513e:	e02d      	b.n	800519c <HAL_RCC_OscConfig+0x5e0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10c      	bne.n	8005162 <HAL_RCC_OscConfig+0x5a6>
 8005148:	4b77      	ldr	r3, [pc, #476]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	4a76      	ldr	r2, [pc, #472]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6713      	str	r3, [r2, #112]	; 0x70
 8005154:	4b74      	ldr	r3, [pc, #464]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a73      	ldr	r2, [pc, #460]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800515a:	f023 0304 	bic.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	e01c      	b.n	800519c <HAL_RCC_OscConfig+0x5e0>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b05      	cmp	r3, #5
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x5c8>
 800516a:	4b6f      	ldr	r3, [pc, #444]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a6e      	ldr	r2, [pc, #440]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	4b6c      	ldr	r3, [pc, #432]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a6b      	ldr	r2, [pc, #428]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0x5e0>
 8005184:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a67      	ldr	r2, [pc, #412]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a64      	ldr	r2, [pc, #400]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005196:	f023 0304 	bic.w	r3, r3, #4
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fc f99c 	bl	80014e0 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fc f998 	bl	80014e0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e123      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c2:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ee      	beq.n	80051ac <HAL_RCC_OscConfig+0x5f0>
 80051ce:	e014      	b.n	80051fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fc f986 	bl	80014e0 <HAL_GetTick>
 80051d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fc f982 	bl	80014e0 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e10d      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ee:	4b4e      	ldr	r3, [pc, #312]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ee      	bne.n	80051d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8102 	beq.w	8005408 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005204:	4b48      	ldr	r3, [pc, #288]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800520c:	2b18      	cmp	r3, #24
 800520e:	f000 80bd 	beq.w	800538c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b02      	cmp	r3, #2
 8005218:	f040 809e 	bne.w	8005358 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b42      	ldr	r3, [pc, #264]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a41      	ldr	r2, [pc, #260]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc f95a 	bl	80014e0 <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc f956 	bl	80014e0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e0e3      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005242:	4b39      	ldr	r3, [pc, #228]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005252:	4b37      	ldr	r3, [pc, #220]	; (8005330 <HAL_RCC_OscConfig+0x774>)
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800525e:	0112      	lsls	r2, r2, #4
 8005260:	430a      	orrs	r2, r1
 8005262:	4931      	ldr	r1, [pc, #196]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	628b      	str	r3, [r1, #40]	; 0x28
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	3b01      	subs	r3, #1
 800526e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	3b01      	subs	r3, #1
 8005278:	025b      	lsls	r3, r3, #9
 800527a:	b29b      	uxth	r3, r3
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	3b01      	subs	r3, #1
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005298:	4923      	ldr	r1, [pc, #140]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800529e:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052aa:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ae:	4b21      	ldr	r3, [pc, #132]	; (8005334 <HAL_RCC_OscConfig+0x778>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052b6:	00d2      	lsls	r2, r2, #3
 80052b8:	491b      	ldr	r1, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f023 020c 	bic.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	4917      	ldr	r1, [pc, #92]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052d0:	4b15      	ldr	r3, [pc, #84]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	f023 0202 	bic.w	r2, r3, #2
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	4912      	ldr	r1, [pc, #72]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4a10      	ldr	r2, [pc, #64]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	4a0d      	ldr	r2, [pc, #52]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005306:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a07      	ldr	r2, [pc, #28]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_RCC_OscConfig+0x76c>)
 8005318:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800531c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fc f8df 	bl	80014e0 <HAL_GetTick>
 8005322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005324:	e011      	b.n	800534a <HAL_RCC_OscConfig+0x78e>
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
 800532c:	58024800 	.word	0x58024800
 8005330:	fffffc0c 	.word	0xfffffc0c
 8005334:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fc f8d2 	bl	80014e0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e05f      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800534a:	4b32      	ldr	r3, [pc, #200]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x77c>
 8005356:	e057      	b.n	8005408 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005358:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2d      	ldr	r2, [pc, #180]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fc f8bc 	bl	80014e0 <HAL_GetTick>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7fc f8b8 	bl	80014e0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e045      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800537e:	4b25      	ldr	r3, [pc, #148]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x7b0>
 800538a:	e03d      	b.n	8005408 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800538c:	4b21      	ldr	r3, [pc, #132]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <HAL_RCC_OscConfig+0x858>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b01      	cmp	r3, #1
 800539e:	d031      	beq.n	8005404 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f003 0203 	and.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d12a      	bne.n	8005404 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d122      	bne.n	8005404 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0a5b      	lsrs	r3, r3, #9
 80053d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d111      	bne.n	8005404 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d108      	bne.n	8005404 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3730      	adds	r7, #48	; 0x30
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400

08005418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e19c      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d910      	bls.n	800545c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b87      	ldr	r3, [pc, #540]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 020f 	bic.w	r2, r3, #15
 8005442:	4985      	ldr	r1, [pc, #532]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b83      	ldr	r3, [pc, #524]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e184      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	4b7b      	ldr	r3, [pc, #492]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005474:	429a      	cmp	r2, r3
 8005476:	d908      	bls.n	800548a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005478:	4b78      	ldr	r3, [pc, #480]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4975      	ldr	r1, [pc, #468]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005486:	4313      	orrs	r3, r2
 8005488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d010      	beq.n	80054b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	4b70      	ldr	r3, [pc, #448]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d908      	bls.n	80054b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054a6:	4b6d      	ldr	r3, [pc, #436]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	496a      	ldr	r1, [pc, #424]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d010      	beq.n	80054e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	4b64      	ldr	r3, [pc, #400]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d908      	bls.n	80054e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d4:	4b61      	ldr	r3, [pc, #388]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	495e      	ldr	r1, [pc, #376]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d010      	beq.n	8005514 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054fe:	429a      	cmp	r2, r3
 8005500:	d908      	bls.n	8005514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	4953      	ldr	r1, [pc, #332]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005510:	4313      	orrs	r3, r2
 8005512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	4b4d      	ldr	r3, [pc, #308]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	429a      	cmp	r2, r3
 800552e:	d908      	bls.n	8005542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b4a      	ldr	r3, [pc, #296]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f023 020f 	bic.w	r2, r3, #15
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4947      	ldr	r1, [pc, #284]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800553e:	4313      	orrs	r3, r2
 8005540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d055      	beq.n	80055fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800554e:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4940      	ldr	r1, [pc, #256]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d107      	bne.n	8005578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005568:	4b3c      	ldr	r3, [pc, #240]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d121      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0f6      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d115      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0ea      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005598:	4b30      	ldr	r3, [pc, #192]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0de      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055a8:	4b2c      	ldr	r3, [pc, #176]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0d6      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b8:	4b28      	ldr	r3, [pc, #160]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f023 0207 	bic.w	r2, r3, #7
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4925      	ldr	r1, [pc, #148]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ca:	f7fb ff89 	bl	80014e0 <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d2:	f7fb ff85 	bl	80014e0 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0be      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e8:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d1eb      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	429a      	cmp	r2, r3
 8005614:	d208      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f023 020f 	bic.w	r2, r3, #15
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	490e      	ldr	r1, [pc, #56]	; (800565c <HAL_RCC_ClockConfig+0x244>)
 8005624:	4313      	orrs	r3, r2
 8005626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d214      	bcs.n	8005660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	4906      	ldr	r1, [pc, #24]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCC_ClockConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e086      	b.n	8005766 <HAL_RCC_ClockConfig+0x34e>
 8005658:	52002000 	.word	0x52002000
 800565c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0304 	and.w	r3, r3, #4
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005678:	429a      	cmp	r2, r3
 800567a:	d208      	bcs.n	800568e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800567c:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	4939      	ldr	r1, [pc, #228]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 800568a:	4313      	orrs	r3, r2
 800568c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d208      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	492e      	ldr	r1, [pc, #184]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d208      	bcs.n	80056ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056d8:	4b25      	ldr	r3, [pc, #148]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	4922      	ldr	r1, [pc, #136]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69da      	ldr	r2, [r3, #28]
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005702:	429a      	cmp	r2, r3
 8005704:	d208      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005706:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005714:	4313      	orrs	r3, r2
 8005716:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005718:	f000 f834 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	4912      	ldr	r1, [pc, #72]	; (8005774 <HAL_RCC_ClockConfig+0x35c>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_RCC_ClockConfig+0x358>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <HAL_RCC_ClockConfig+0x35c>)
 8005740:	5cd3      	ldrb	r3, [r2, r3]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <HAL_RCC_ClockConfig+0x360>)
 800574e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x364>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_RCC_ClockConfig+0x368>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb fe76 	bl	800144c <HAL_InitTick>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
 8005774:	08009a0c 	.word	0x08009a0c
 8005778:	24000004 	.word	0x24000004
 800577c:	24000000 	.word	0x24000000
 8005780:	24000008 	.word	0x24000008

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578a:	4bb3      	ldr	r3, [pc, #716]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005792:	2b18      	cmp	r3, #24
 8005794:	f200 8155 	bhi.w	8005a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	08005805 	.word	0x08005805
 80057a4:	08005a43 	.word	0x08005a43
 80057a8:	08005a43 	.word	0x08005a43
 80057ac:	08005a43 	.word	0x08005a43
 80057b0:	08005a43 	.word	0x08005a43
 80057b4:	08005a43 	.word	0x08005a43
 80057b8:	08005a43 	.word	0x08005a43
 80057bc:	08005a43 	.word	0x08005a43
 80057c0:	0800582b 	.word	0x0800582b
 80057c4:	08005a43 	.word	0x08005a43
 80057c8:	08005a43 	.word	0x08005a43
 80057cc:	08005a43 	.word	0x08005a43
 80057d0:	08005a43 	.word	0x08005a43
 80057d4:	08005a43 	.word	0x08005a43
 80057d8:	08005a43 	.word	0x08005a43
 80057dc:	08005a43 	.word	0x08005a43
 80057e0:	08005831 	.word	0x08005831
 80057e4:	08005a43 	.word	0x08005a43
 80057e8:	08005a43 	.word	0x08005a43
 80057ec:	08005a43 	.word	0x08005a43
 80057f0:	08005a43 	.word	0x08005a43
 80057f4:	08005a43 	.word	0x08005a43
 80057f8:	08005a43 	.word	0x08005a43
 80057fc:	08005a43 	.word	0x08005a43
 8005800:	08005837 	.word	0x08005837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005804:	4b94      	ldr	r3, [pc, #592]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005810:	4b91      	ldr	r3, [pc, #580]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	4a90      	ldr	r2, [pc, #576]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005822:	e111      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005824:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005826:	61bb      	str	r3, [r7, #24]
    break;
 8005828:	e10e      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800582a:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800582c:	61bb      	str	r3, [r7, #24]
    break;
 800582e:	e10b      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005830:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005832:	61bb      	str	r3, [r7, #24]
    break;
 8005834:	e108      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005836:	4b88      	ldr	r3, [pc, #544]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005840:	4b85      	ldr	r3, [pc, #532]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800584c:	4b82      	ldr	r3, [pc, #520]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005856:	4b80      	ldr	r3, [pc, #512]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	08db      	lsrs	r3, r3, #3
 800585c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80e1 	beq.w	8005a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b02      	cmp	r3, #2
 800587e:	f000 8083 	beq.w	8005988 <HAL_RCC_GetSysClockFreq+0x204>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b02      	cmp	r3, #2
 8005886:	f200 80a1 	bhi.w	80059cc <HAL_RCC_GetSysClockFreq+0x248>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x114>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d056      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005896:	e099      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a4:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	4a6b      	ldr	r2, [pc, #428]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
 80058b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058fe:	e087      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b51      	ldr	r3, [pc, #324]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005942:	e065      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005986:	e043      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ca:	e021      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	0a5b      	lsrs	r3, r3, #9
 8005a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	ee17 3a90 	vmov	r3, s15
 8005a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a3a:	e005      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
    break;
 8005a40:	e002      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a42:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a44:	61bb      	str	r3, [r7, #24]
    break;
 8005a46:	bf00      	nop
  }

  return sysclockfreq;
 8005a48:	69bb      	ldr	r3, [r7, #24]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3724      	adds	r7, #36	; 0x24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	03d09000 	.word	0x03d09000
 8005a60:	003d0900 	.word	0x003d0900
 8005a64:	007a1200 	.word	0x007a1200
 8005a68:	46000000 	.word	0x46000000
 8005a6c:	4c742400 	.word	0x4c742400
 8005a70:	4a742400 	.word	0x4a742400
 8005a74:	4af42400 	.word	0x4af42400

08005a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a7e:	f7ff fe81 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	490f      	ldr	r1, [pc, #60]	; (8005acc <HAL_RCC_GetHCLKFreq+0x54>)
 8005a90:	5ccb      	ldrb	r3, [r1, r3]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <HAL_RCC_GetHCLKFreq+0x54>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	4a07      	ldr	r2, [pc, #28]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab6:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	08009a0c 	.word	0x08009a0c
 8005ad0:	24000004 	.word	0x24000004
 8005ad4:	24000000 	.word	0x24000000

08005ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005adc:	f7ff ffcc 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4904      	ldr	r1, [pc, #16]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	58024400 	.word	0x58024400
 8005b00:	08009a0c 	.word	0x08009a0c

08005b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b08:	f7ff ffb6 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	0a1b      	lsrs	r3, r3, #8
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	4904      	ldr	r1, [pc, #16]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	58024400 	.word	0x58024400
 8005b2c:	08009a0c 	.word	0x08009a0c

08005b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b38:	2300      	movs	r3, #0
 8005b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d03f      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b54:	d02a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b5a:	d824      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b60:	d018      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b66:	d81e      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b70:	d007      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4ba3      	ldr	r3, [pc, #652]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4aa2      	ldr	r2, [pc, #648]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b80:	e015      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2102      	movs	r1, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 f9d5 	bl	8006f38 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b92:	e00c      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fa7e 	bl	800709c <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bb4:	4b93      	ldr	r3, [pc, #588]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bc0:	4990      	ldr	r1, [pc, #576]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8005bc6:	e001      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03d      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d826      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005bfd 	.word	0x08005bfd
 8005bec:	08005c0b 	.word	0x08005c0b
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfc:	4b81      	ldr	r3, [pc, #516]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a80      	ldr	r2, [pc, #512]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c08:	e015      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 f991 	bl	8006f38 <RCCEx_PLL2_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c1a:	e00c      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3324      	adds	r3, #36	; 0x24
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fa3a 	bl	800709c <RCCEx_PLL3_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c2c:	e003      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
      break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c3c:	4b71      	ldr	r3, [pc, #452]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c40:	f023 0207 	bic.w	r2, r3, #7
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c48:	496e      	ldr	r1, [pc, #440]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c4e:	e001      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d042      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c68:	d02b      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6e:	d825      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c70:	2bc0      	cmp	r3, #192	; 0xc0
 8005c72:	d028      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c74:	2bc0      	cmp	r3, #192	; 0xc0
 8005c76:	d821      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d016      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d81d      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d007      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005c88:	e018      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8a:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	4a5d      	ldr	r2, [pc, #372]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c96:	e017      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f94a 	bl	8006f38 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ca8:	e00e      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3324      	adds	r3, #36	; 0x24
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f9f3 	bl	800709c <RCCEx_PLL3_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cba:	e005      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005cce:	4b4d      	ldr	r3, [pc, #308]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cda:	494a      	ldr	r1, [pc, #296]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	650b      	str	r3, [r1, #80]	; 0x50
 8005ce0:	e001      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d049      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cfc:	d030      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d02:	d82a      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d08:	d02c      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d0e:	d824      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d14:	d018      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1a:	d81e      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d24:	d007      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d26:	e018      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d28:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a35      	ldr	r2, [pc, #212]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d34:	e017      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 f8fb 	bl	8006f38 <RCCEx_PLL2_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d46:	e00e      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f9a4 	bl	800709c <RCCEx_PLL3_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d58:	e005      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d6c:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d7a:	4922      	ldr	r1, [pc, #136]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8005d80:	e001      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
 8005d84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d04b      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d9c:	d030      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da2:	d82a      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005da4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005da8:	d02e      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005daa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dae:	d824      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db4:	d018      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005db6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dba:	d81e      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc4:	d007      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005dc6:	e018      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dd4:	e019      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f8ab 	bl	8006f38 <RCCEx_PLL2_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005de6:	e010      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3324      	adds	r3, #36	; 0x24
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 f954 	bl	800709c <RCCEx_PLL3_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005df8:	e007      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfe:	e004      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005e00:	bf00      	nop
 8005e02:	e002      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e04:	58024400 	.word	0x58024400
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e10:	4b99      	ldr	r3, [pc, #612]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e1e:	4996      	ldr	r1, [pc, #600]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	658b      	str	r3, [r1, #88]	; 0x58
 8005e24:	e001      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d032      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	2b30      	cmp	r3, #48	; 0x30
 8005e3c:	d01c      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d817      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d00c      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d813      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d10f      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e52:	4b89      	ldr	r3, [pc, #548]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a88      	ldr	r2, [pc, #544]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e5e:	e00e      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f866 	bl	8006f38 <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
      break;
 8005e76:	e002      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e84:	4b7c      	ldr	r3, [pc, #496]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e90:	4979      	ldr	r1, [pc, #484]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e96:	e001      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d047      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb0:	d030      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb6:	d82a      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005eb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ebc:	d02c      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005ebe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ec2:	d824      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec8:	d018      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ece:	d81e      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d007      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005eda:	e018      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005edc:	4b66      	ldr	r3, [pc, #408]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ee8:	e017      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 f821 	bl	8006f38 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005efa:	e00e      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3324      	adds	r3, #36	; 0x24
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f8ca 	bl	800709c <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f0c:	e005      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f20:	4b55      	ldr	r3, [pc, #340]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	4952      	ldr	r1, [pc, #328]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	650b      	str	r3, [r1, #80]	; 0x50
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
 8005f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d049      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f4c:	d02e      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f52:	d828      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f58:	d02a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005f5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f5e:	d822      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f64:	d026      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f6a:	d81c      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f70:	d010      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f76:	d816      	bhi.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f80:	d111      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 ffd5 	bl	8006f38 <RCCEx_PLL2_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f92:	e012      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f87e 	bl	800709c <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fa4:	e009      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	e006      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fac:	bf00      	nop
 8005fae:	e004      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fb0:	bf00      	nop
 8005fb2:	e002      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fcc:	492a      	ldr	r1, [pc, #168]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	650b      	str	r3, [r1, #80]	; 0x50
 8005fd2:	e001      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d04d      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fee:	d02e      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff4:	d828      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d02a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d822      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006002:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006006:	d026      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006008:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800600c:	d81c      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800600e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006012:	d010      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006018:	d816      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01d      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800601e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006022:	d111      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f000 ff84 	bl	8006f38 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006034:	e012      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f82d 	bl	800709c <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006046:	e009      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e006      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800604e:	bf00      	nop
 8006050:	e004      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006052:	bf00      	nop
 8006054:	e002      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006056:	bf00      	nop
 8006058:	e000      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800605a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10c      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006066:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006070:	4901      	ldr	r1, [pc, #4]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006072:	4313      	orrs	r3, r2
 8006074:	658b      	str	r3, [r1, #88]	; 0x58
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02f      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006094:	d00e      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609a:	d814      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80060a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a4:	d10f      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a6:	4baf      	ldr	r3, [pc, #700]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	4aae      	ldr	r2, [pc, #696]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060b2:	e00c      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	2101      	movs	r1, #1
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff3c 	bl	8006f38 <RCCEx_PLL2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060c4:	e003      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
      break;
 80060ca:	e000      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80060cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060d4:	4ba3      	ldr	r3, [pc, #652]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e0:	49a0      	ldr	r1, [pc, #640]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	650b      	str	r3, [r1, #80]	; 0x50
 80060e6:	e001      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d032      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d81b      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800613f 	.word	0x0800613f
 800610c:	08006119 	.word	0x08006119
 8006110:	08006127 	.word	0x08006127
 8006114:	0800613f 	.word	0x0800613f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b92      	ldr	r3, [pc, #584]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	4a91      	ldr	r2, [pc, #580]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006124:	e00c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	2102      	movs	r1, #2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 ff03 	bl	8006f38 <RCCEx_PLL2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
      break;
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006146:	4b87      	ldr	r3, [pc, #540]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	4984      	ldr	r1, [pc, #528]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006154:	4313      	orrs	r3, r2
 8006156:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006158:	e001      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8086 	beq.w	8006278 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800616c:	4b7e      	ldr	r3, [pc, #504]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a7d      	ldr	r2, [pc, #500]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006178:	f7fb f9b2 	bl	80014e0 <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800617e:	e009      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006180:	f7fb f9ae 	bl	80014e0 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b64      	cmp	r3, #100	; 0x64
 800618c:	d902      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	75fb      	strb	r3, [r7, #23]
        break;
 8006192:	e005      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006194:	4b74      	ldr	r3, [pc, #464]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d166      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061a6:	4b6f      	ldr	r3, [pc, #444]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061b0:	4053      	eors	r3, r2
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d013      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ba:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061c4:	4b67      	ldr	r3, [pc, #412]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	4a66      	ldr	r2, [pc, #408]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061d0:	4b64      	ldr	r3, [pc, #400]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d4:	4a63      	ldr	r2, [pc, #396]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061dc:	4a61      	ldr	r2, [pc, #388]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d115      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ee:	f7fb f977 	bl	80014e0 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f4:	e00b      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fb f973 	bl	80014e0 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d902      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	75fb      	strb	r3, [r7, #23]
            break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800620e:	4b55      	ldr	r3, [pc, #340]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ed      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d126      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d10d      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006230:	4b4c      	ldr	r3, [pc, #304]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800623e:	0919      	lsrs	r1, r3, #4
 8006240:	4b4a      	ldr	r3, [pc, #296]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006242:	400b      	ands	r3, r1
 8006244:	4947      	ldr	r1, [pc, #284]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006246:	4313      	orrs	r3, r2
 8006248:	610b      	str	r3, [r1, #16]
 800624a:	e005      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800624c:	4b45      	ldr	r3, [pc, #276]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	4a44      	ldr	r2, [pc, #272]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006252:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006256:	6113      	str	r3, [r2, #16]
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800625a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006266:	493f      	ldr	r1, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006268:	4313      	orrs	r3, r2
 800626a:	670b      	str	r3, [r1, #112]	; 0x70
 800626c:	e004      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	75bb      	strb	r3, [r7, #22]
 8006272:	e001      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8085 	beq.w	8006390 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628a:	2b28      	cmp	r3, #40	; 0x28
 800628c:	d866      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	08006371 	.word	0x08006371
 8006298:	0800635d 	.word	0x0800635d
 800629c:	0800635d 	.word	0x0800635d
 80062a0:	0800635d 	.word	0x0800635d
 80062a4:	0800635d 	.word	0x0800635d
 80062a8:	0800635d 	.word	0x0800635d
 80062ac:	0800635d 	.word	0x0800635d
 80062b0:	0800635d 	.word	0x0800635d
 80062b4:	08006339 	.word	0x08006339
 80062b8:	0800635d 	.word	0x0800635d
 80062bc:	0800635d 	.word	0x0800635d
 80062c0:	0800635d 	.word	0x0800635d
 80062c4:	0800635d 	.word	0x0800635d
 80062c8:	0800635d 	.word	0x0800635d
 80062cc:	0800635d 	.word	0x0800635d
 80062d0:	0800635d 	.word	0x0800635d
 80062d4:	0800634b 	.word	0x0800634b
 80062d8:	0800635d 	.word	0x0800635d
 80062dc:	0800635d 	.word	0x0800635d
 80062e0:	0800635d 	.word	0x0800635d
 80062e4:	0800635d 	.word	0x0800635d
 80062e8:	0800635d 	.word	0x0800635d
 80062ec:	0800635d 	.word	0x0800635d
 80062f0:	0800635d 	.word	0x0800635d
 80062f4:	08006371 	.word	0x08006371
 80062f8:	0800635d 	.word	0x0800635d
 80062fc:	0800635d 	.word	0x0800635d
 8006300:	0800635d 	.word	0x0800635d
 8006304:	0800635d 	.word	0x0800635d
 8006308:	0800635d 	.word	0x0800635d
 800630c:	0800635d 	.word	0x0800635d
 8006310:	0800635d 	.word	0x0800635d
 8006314:	08006371 	.word	0x08006371
 8006318:	0800635d 	.word	0x0800635d
 800631c:	0800635d 	.word	0x0800635d
 8006320:	0800635d 	.word	0x0800635d
 8006324:	0800635d 	.word	0x0800635d
 8006328:	0800635d 	.word	0x0800635d
 800632c:	0800635d 	.word	0x0800635d
 8006330:	0800635d 	.word	0x0800635d
 8006334:	08006371 	.word	0x08006371
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fdfa 	bl	8006f38 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006348:	e013      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3324      	adds	r3, #36	; 0x24
 800634e:	2101      	movs	r1, #1
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fea3 	bl	800709c <RCCEx_PLL3_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800635a:	e00a      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
      break;
 8006360:	e007      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
 8006368:	58024800 	.word	0x58024800
 800636c:	00ffffcf 	.word	0x00ffffcf
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006378:	4b96      	ldr	r3, [pc, #600]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006384:	4993      	ldr	r1, [pc, #588]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006386:	4313      	orrs	r3, r2
 8006388:	654b      	str	r3, [r1, #84]	; 0x54
 800638a:	e001      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d038      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	d821      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063ef 	.word	0x080063ef
 80063b0:	080063c5 	.word	0x080063c5
 80063b4:	080063d7 	.word	0x080063d7
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	080063ef 	.word	0x080063ef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fdb4 	bl	8006f38 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063d4:	e00c      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	; 0x24
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fe5d 	bl	800709c <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063f6:	4b77      	ldr	r3, [pc, #476]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	f023 0207 	bic.w	r2, r3, #7
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	4974      	ldr	r1, [pc, #464]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	654b      	str	r3, [r1, #84]	; 0x54
 8006408:	e001      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d03a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	2b05      	cmp	r3, #5
 8006422:	d821      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800646f 	.word	0x0800646f
 8006430:	08006445 	.word	0x08006445
 8006434:	08006457 	.word	0x08006457
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fd74 	bl	8006f38 <RCCEx_PLL2_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006454:	e00c      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2101      	movs	r1, #1
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fe1d 	bl	800709c <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	75fb      	strb	r3, [r7, #23]
      break;
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006476:	4b57      	ldr	r3, [pc, #348]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	f023 0207 	bic.w	r2, r3, #7
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	4953      	ldr	r1, [pc, #332]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	658b      	str	r3, [r1, #88]	; 0x58
 800648a:	e001      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d04b      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064a6:	d02e      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80064a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ac:	d828      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d02a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d822      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064be:	d026      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80064c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064c4:	d81c      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ca:	d010      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80064cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d0:	d816      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01d      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80064d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064da:	d111      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd28 	bl	8006f38 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064ec:	e012      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3324      	adds	r3, #36	; 0x24
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fdd1 	bl	800709c <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064fe:	e009      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	e006      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006506:	bf00      	nop
 8006508:	e004      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006528:	492a      	ldr	r1, [pc, #168]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800652a:	4313      	orrs	r3, r2
 800652c:	654b      	str	r3, [r1, #84]	; 0x54
 800652e:	e001      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d04d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006546:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800654a:	d02e      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800654c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006550:	d828      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006556:	d02a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d822      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800655e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006562:	d026      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006568:	d81c      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656e:	d010      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006574:	d816      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01d      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800657a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657e:	d111      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fcd6 	bl	8006f38 <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006590:	e012      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	2102      	movs	r1, #2
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fd7f 	bl	800709c <RCCEx_PLL3_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065a2:	e009      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	75fb      	strb	r3, [r7, #23]
      break;
 80065a8:	e006      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065aa:	bf00      	nop
 80065ac:	e004      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065ae:	bf00      	nop
 80065b0:	e002      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065b2:	bf00      	nop
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80065b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10c      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065cc:	4901      	ldr	r1, [pc, #4]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	658b      	str	r3, [r1, #88]	; 0x58
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80065d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d04b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065f2:	d02e      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80065f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065f8:	d828      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80065fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fe:	d02a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006604:	d822      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006606:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800660a:	d026      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800660c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006610:	d81c      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006616:	d010      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661c:	d816      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01d      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	d111      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fc82 	bl	8006f38 <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006638:	e012      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3324      	adds	r3, #36	; 0x24
 800663e:	2102      	movs	r1, #2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fd2b 	bl	800709c <RCCEx_PLL3_Config>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800664a:	e009      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006652:	bf00      	nop
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006656:	bf00      	nop
 8006658:	e002      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800665a:	bf00      	nop
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800665e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006666:	4b9d      	ldr	r3, [pc, #628]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006674:	4999      	ldr	r1, [pc, #612]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006676:	4313      	orrs	r3, r2
 8006678:	658b      	str	r3, [r1, #88]	; 0x58
 800667a:	e001      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	d10a      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fcfc 	bl	800709c <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066ae:	4b8b      	ldr	r3, [pc, #556]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066bc:	4987      	ldr	r1, [pc, #540]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d8:	d10a      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	2102      	movs	r1, #2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fcdb 	bl	800709c <RCCEx_PLL3_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066f0:	4b7a      	ldr	r3, [pc, #488]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fe:	4977      	ldr	r1, [pc, #476]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006700:	4313      	orrs	r3, r2
 8006702:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d034      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671a:	d01d      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006720:	d817      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672a:	d009      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800672c:	e011      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fbff 	bl	8006f38 <RCCEx_PLL2_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800673e:	e00c      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fca8 	bl	800709c <RCCEx_PLL3_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006750:	e003      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	e000      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006760:	4b5e      	ldr	r3, [pc, #376]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800676e:	495b      	ldr	r1, [pc, #364]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006770:	4313      	orrs	r3, r2
 8006772:	658b      	str	r3, [r1, #88]	; 0x58
 8006774:	e001      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d033      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006790:	d01c      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006792:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006796:	d816      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679c:	d003      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800679e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067a2:	d007      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80067a4:	e00f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a6:	4b4d      	ldr	r3, [pc, #308]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	4a4c      	ldr	r2, [pc, #304]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80067b2:	e00c      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3324      	adds	r3, #36	; 0x24
 80067b8:	2101      	movs	r1, #1
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fc6e 	bl	800709c <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80067cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067d4:	4b41      	ldr	r3, [pc, #260]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e2:	493e      	ldr	r1, [pc, #248]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	654b      	str	r3, [r1, #84]	; 0x54
 80067e8:	e001      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d029      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006806:	d007      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006808:	e00f      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	4a33      	ldr	r2, [pc, #204]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006816:	e00b      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb8a 	bl	8006f38 <RCCEx_PLL2_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006828:	e002      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006836:	4b29      	ldr	r3, [pc, #164]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	4926      	ldr	r1, [pc, #152]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006844:	4313      	orrs	r3, r2
 8006846:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006848:	e001      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fc1b 	bl	800709c <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d033      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006884:	d017      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	d811      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d013      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d80b      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d010      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d106      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a2:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80068ae:	e007      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e004      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80068be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d2:	4902      	ldr	r1, [pc, #8]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	654b      	str	r3, [r1, #84]	; 0x54
 80068d8:	e004      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80068da:	bf00      	nop
 80068dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068f0:	4b31      	ldr	r3, [pc, #196]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fc:	492e      	ldr	r1, [pc, #184]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d009      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800690e:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800691c:	4926      	ldr	r1, [pc, #152]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800691e:	4313      	orrs	r3, r2
 8006920:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800692e:	4b22      	ldr	r3, [pc, #136]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006932:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693a:	491f      	ldr	r1, [pc, #124]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800693c:	4313      	orrs	r3, r2
 800693e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006956:	6113      	str	r3, [r2, #16]
 8006958:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006962:	4915      	ldr	r1, [pc, #84]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006964:	4313      	orrs	r3, r2
 8006966:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	da08      	bge.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006970:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006974:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697c:	490e      	ldr	r1, [pc, #56]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800697e:	4313      	orrs	r3, r2
 8006980:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699c:	4906      	ldr	r1, [pc, #24]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80069a2:	7dbb      	ldrb	r3, [r7, #22]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400

080069bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069c0:	f7ff f85a 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	4904      	ldr	r1, [pc, #16]	; (80069e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	58024400 	.word	0x58024400
 80069e4:	08009a0c 	.word	0x08009a0c

080069e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f0:	4ba1      	ldr	r3, [pc, #644]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80069fa:	4b9f      	ldr	r3, [pc, #636]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	0b1b      	lsrs	r3, r3, #12
 8006a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a06:	4b9c      	ldr	r3, [pc, #624]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	091b      	lsrs	r3, r3, #4
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a12:	4b99      	ldr	r3, [pc, #612]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	08db      	lsrs	r3, r3, #3
 8006a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8111 	beq.w	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f000 8083 	beq.w	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f200 80a1 	bhi.w	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d056      	beq.n	8006b00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a52:	e099      	b.n	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a54:	4b88      	ldr	r3, [pc, #544]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02d      	beq.n	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a60:	4b85      	ldr	r3, [pc, #532]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	4a84      	ldr	r2, [pc, #528]	; (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b7b      	ldr	r3, [pc, #492]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aba:	e087      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006afe:	e065      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b59      	ldr	r3, [pc, #356]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b42:	e043      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b48      	ldr	r3, [pc, #288]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b86:	e021      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b37      	ldr	r3, [pc, #220]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	0a5b      	lsrs	r3, r3, #9
 8006bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf2:	ee17 2a90 	vmov	r2, s15
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c04:	ee07 3a90 	vmov	s15, r3
 8006c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c20:	ee17 2a90 	vmov	r2, s15
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c28:	4b13      	ldr	r3, [pc, #76]	; (8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	0e1b      	lsrs	r3, r3, #24
 8006c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4e:	ee17 2a90 	vmov	r2, s15
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c56:	e008      	b.n	8006c6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	609a      	str	r2, [r3, #8]
}
 8006c6a:	bf00      	nop
 8006c6c:	3724      	adds	r7, #36	; 0x24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
 8006c7c:	03d09000 	.word	0x03d09000
 8006c80:	46000000 	.word	0x46000000
 8006c84:	4c742400 	.word	0x4c742400
 8006c88:	4a742400 	.word	0x4a742400
 8006c8c:	4af42400 	.word	0x4af42400

08006c90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c98:	4ba1      	ldr	r3, [pc, #644]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ca2:	4b9f      	ldr	r3, [pc, #636]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	0d1b      	lsrs	r3, r3, #20
 8006ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cae:	4b9c      	ldr	r3, [pc, #624]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006cba:	4b99      	ldr	r3, [pc, #612]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8111 	beq.w	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	f000 8083 	beq.w	8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	f200 80a1 	bhi.w	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d056      	beq.n	8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cfa:	e099      	b.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cfc:	4b88      	ldr	r3, [pc, #544]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02d      	beq.n	8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d08:	4b85      	ldr	r3, [pc, #532]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	4a84      	ldr	r2, [pc, #528]	; (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b7b      	ldr	r3, [pc, #492]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d62:	e087      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006da6:	e065      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b59      	ldr	r3, [pc, #356]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dea:	e043      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e2e:	e021      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e74:	4b2a      	ldr	r3, [pc, #168]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	0a5b      	lsrs	r3, r3, #9
 8006e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eac:	ee07 3a90 	vmov	s15, r3
 8006eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec8:	ee17 2a90 	vmov	r2, s15
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	0e1b      	lsrs	r3, r3, #24
 8006ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef6:	ee17 2a90 	vmov	r2, s15
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006efe:	e008      	b.n	8006f12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	bf00      	nop
 8006f14:	3724      	adds	r7, #36	; 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
 8006f24:	03d09000 	.word	0x03d09000
 8006f28:	46000000 	.word	0x46000000
 8006f2c:	4c742400 	.word	0x4c742400
 8006f30:	4a742400 	.word	0x4a742400
 8006f34:	4af42400 	.word	0x4af42400

08006f38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f46:	4b53      	ldr	r3, [pc, #332]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d101      	bne.n	8006f56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e099      	b.n	800708a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f56:	4b4f      	ldr	r3, [pc, #316]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a4e      	ldr	r2, [pc, #312]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f62:	f7fa fabd 	bl	80014e0 <HAL_GetTick>
 8006f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f6a:	f7fa fab9 	bl	80014e0 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e086      	b.n	800708a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f7c:	4b45      	ldr	r3, [pc, #276]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f88:	4b42      	ldr	r3, [pc, #264]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	493f      	ldr	r1, [pc, #252]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	025b      	lsls	r3, r3, #9
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	061b      	lsls	r3, r3, #24
 8006fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fcc:	4931      	ldr	r1, [pc, #196]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fd2:	4b30      	ldr	r3, [pc, #192]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	492d      	ldr	r1, [pc, #180]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fe4:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f023 0220 	bic.w	r2, r3, #32
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	4928      	ldr	r1, [pc, #160]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ff6:	4b27      	ldr	r3, [pc, #156]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	4a26      	ldr	r2, [pc, #152]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	f023 0310 	bic.w	r3, r3, #16
 8007000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007002:	4b24      	ldr	r3, [pc, #144]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007006:	4b24      	ldr	r3, [pc, #144]	; (8007098 <RCCEx_PLL2_Config+0x160>)
 8007008:	4013      	ands	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	69d2      	ldr	r2, [r2, #28]
 800700e:	00d2      	lsls	r2, r2, #3
 8007010:	4920      	ldr	r1, [pc, #128]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007016:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800701c:	f043 0310 	orr.w	r3, r3, #16
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007028:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a19      	ldr	r2, [pc, #100]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800702e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007034:	e00f      	b.n	8007056 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800703c:	4b15      	ldr	r3, [pc, #84]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	4a14      	ldr	r2, [pc, #80]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007048:	e005      	b.n	8007056 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	4a11      	ldr	r2, [pc, #68]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800705c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007062:	f7fa fa3d 	bl	80014e0 <HAL_GetTick>
 8007066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007068:	e008      	b.n	800707c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800706a:	f7fa fa39 	bl	80014e0 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <RCCEx_PLL2_Config+0x15c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	58024400 	.word	0x58024400
 8007098:	ffff0007 	.word	0xffff0007

0800709c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070aa:	4b53      	ldr	r3, [pc, #332]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d101      	bne.n	80070ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e099      	b.n	80071ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ba:	4b4f      	ldr	r3, [pc, #316]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a4e      	ldr	r2, [pc, #312]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c6:	f7fa fa0b 	bl	80014e0 <HAL_GetTick>
 80070ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070cc:	e008      	b.n	80070e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070ce:	f7fa fa07 	bl	80014e0 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e086      	b.n	80071ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070e0:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f0      	bne.n	80070ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070ec:	4b42      	ldr	r3, [pc, #264]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	051b      	lsls	r3, r3, #20
 80070fa:	493f      	ldr	r1, [pc, #252]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	628b      	str	r3, [r1, #40]	; 0x28
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	3b01      	subs	r3, #1
 8007106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	3b01      	subs	r3, #1
 8007110:	025b      	lsls	r3, r3, #9
 8007112:	b29b      	uxth	r3, r3
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	3b01      	subs	r3, #1
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	3b01      	subs	r3, #1
 800712a:	061b      	lsls	r3, r3, #24
 800712c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007130:	4931      	ldr	r1, [pc, #196]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	492d      	ldr	r1, [pc, #180]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007144:	4313      	orrs	r3, r2
 8007146:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	4928      	ldr	r1, [pc, #160]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800715a:	4b27      	ldr	r3, [pc, #156]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	4a26      	ldr	r2, [pc, #152]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007166:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <RCCEx_PLL3_Config+0x160>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	69d2      	ldr	r2, [r2, #28]
 8007172:	00d2      	lsls	r2, r2, #3
 8007174:	4920      	ldr	r1, [pc, #128]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007176:	4313      	orrs	r3, r2
 8007178:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800717a:	4b1f      	ldr	r3, [pc, #124]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800718c:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 8007192:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007196:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007198:	e00f      	b.n	80071ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d106      	bne.n	80071ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071a0:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071ac:	e005      	b.n	80071ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c6:	f7fa f98b 	bl	80014e0 <HAL_GetTick>
 80071ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071cc:	e008      	b.n	80071e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071ce:	f7fa f987 	bl	80014e0 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e006      	b.n	80071ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <RCCEx_PLL3_Config+0x15c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0f0      	beq.n	80071ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
 80071fc:	ffff0007 	.word	0xffff0007

08007200 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0f1      	b.n	80073f6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a78      	ldr	r2, [pc, #480]	; (8007400 <HAL_SPI_Init+0x200>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <HAL_SPI_Init+0x42>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a77      	ldr	r2, [pc, #476]	; (8007404 <HAL_SPI_Init+0x204>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00a      	beq.n	8007242 <HAL_SPI_Init+0x42>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a75      	ldr	r2, [pc, #468]	; (8007408 <HAL_SPI_Init+0x208>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d005      	beq.n	8007242 <HAL_SPI_Init+0x42>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b0f      	cmp	r3, #15
 800723c:	d901      	bls.n	8007242 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e0d9      	b.n	80073f6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb90 	bl	8007968 <SPI_GetPacketSize>
 8007248:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a6c      	ldr	r2, [pc, #432]	; (8007400 <HAL_SPI_Init+0x200>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00c      	beq.n	800726e <HAL_SPI_Init+0x6e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a6a      	ldr	r2, [pc, #424]	; (8007404 <HAL_SPI_Init+0x204>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d007      	beq.n	800726e <HAL_SPI_Init+0x6e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a69      	ldr	r2, [pc, #420]	; (8007408 <HAL_SPI_Init+0x208>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d002      	beq.n	800726e <HAL_SPI_Init+0x6e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b08      	cmp	r3, #8
 800726c:	d811      	bhi.n	8007292 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007272:	4a63      	ldr	r2, [pc, #396]	; (8007400 <HAL_SPI_Init+0x200>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a61      	ldr	r2, [pc, #388]	; (8007404 <HAL_SPI_Init+0x204>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <HAL_SPI_Init+0x8c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a60      	ldr	r2, [pc, #384]	; (8007408 <HAL_SPI_Init+0x208>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d104      	bne.n	8007296 <HAL_SPI_Init+0x96>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b10      	cmp	r3, #16
 8007290:	d901      	bls.n	8007296 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e0af      	b.n	80073f6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7f9 fe3a 	bl	8000f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80072d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072dc:	d119      	bne.n	8007312 <HAL_SPI_Init+0x112>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e6:	d103      	bne.n	80072f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d008      	beq.n	8007302 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007300:	d107      	bne.n	8007312 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007310:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	431a      	orrs	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	ea42 0103 	orr.w	r1, r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007372:	ea42 0103 	orr.w	r1, r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d113      	bne.n	80073b2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800739c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40013000 	.word	0x40013000
 8007404:	40003800 	.word	0x40003800
 8007408:	40003c00 	.word	0x40003c00

0800740c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4013      	ands	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007434:	2300      	movs	r3, #0
 8007436:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800743e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3330      	adds	r3, #48	; 0x30
 8007446:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d113      	bne.n	800747a <HAL_SPI_IRQHandler+0x6e>
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10e      	bne.n	800747a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
    handled = 1UL;
 8007476:	2301      	movs	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10f      	bne.n	80074a4 <HAL_SPI_IRQHandler+0x98>
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007494:	2b00      	cmp	r3, #0
 8007496:	d105      	bne.n	80074a4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
    handled = 1UL;
 80074a0:	2301      	movs	r3, #1
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10f      	bne.n	80074ce <HAL_SPI_IRQHandler+0xc2>
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
    handled = 1UL;
 80074ca:	2301      	movs	r3, #1
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f040 815a 	bne.w	800778a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 808b 	beq.w	80075f8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0208 	orr.w	r2, r2, #8
 80074f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0210 	orr.w	r2, r2, #16
 8007500:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007510:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0208 	bic.w	r2, r2, #8
 8007520:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d13d      	bne.n	80075ac <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007530:	e036      	b.n	80075a0 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d90b      	bls.n	8007552 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007544:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	665a      	str	r2, [r3, #100]	; 0x64
 8007550:	e01d      	b.n	800758e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b07      	cmp	r3, #7
 8007558:	d90b      	bls.n	8007572 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	8812      	ldrh	r2, [r2, #0]
 8007562:	b292      	uxth	r2, r2
 8007564:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756a:	1c9a      	adds	r2, r3, #2
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	665a      	str	r2, [r3, #100]	; 0x64
 8007570:	e00d      	b.n	800758e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1c2      	bne.n	8007532 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f93b 	bl	8007828 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f90b 	bl	80077e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80075ca:	e0e3      	b.n	8007794 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d103      	bne.n	80075da <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8fa 	bl	80077cc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80075d8:	e0d9      	b.n	800778e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80075da:	7cfb      	ldrb	r3, [r7, #19]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d103      	bne.n	80075e8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8e9 	bl	80077b8 <HAL_SPI_RxCpltCallback>
    return;
 80075e6:	e0d2      	b.n	800778e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80075e8:	7cfb      	ldrb	r3, [r7, #19]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	f040 80cf 	bne.w	800778e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8d7 	bl	80077a4 <HAL_SPI_TxCpltCallback>
    return;
 80075f6:	e0ca      	b.n	800778e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00d      	beq.n	800761e <HAL_SPI_IRQHandler+0x212>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800761a:	619a      	str	r2, [r3, #24]

    return;
 800761c:	e0ba      	b.n	8007794 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 80b5 	beq.w	8007794 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007652:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00f      	beq.n	800767e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800767c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00f      	beq.n	80076a8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768e:	f043 0208 	orr.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00f      	beq.n	80076d2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0220 	orr.w	r2, r2, #32
 80076d0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d05a      	beq.n	8007792 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6919      	ldr	r1, [r3, #16]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b29      	ldr	r3, [pc, #164]	; (800779c <HAL_SPI_IRQHandler+0x390>)
 80076f8:	400b      	ands	r3, r1
 80076fa:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007702:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007706:	d138      	bne.n	800777a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007716:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d013      	beq.n	8007748 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007724:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <HAL_SPI_IRQHandler+0x394>)
 8007726:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772c:	4618      	mov	r0, r3
 800772e:	f7fa feb1 	bl	8002494 <HAL_DMA_Abort_IT>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800774c:	2b00      	cmp	r3, #0
 800774e:	d020      	beq.n	8007792 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007754:	4a12      	ldr	r2, [pc, #72]	; (80077a0 <HAL_SPI_IRQHandler+0x394>)
 8007756:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775c:	4618      	mov	r0, r3
 800775e:	f7fa fe99 	bl	8002494 <HAL_DMA_Abort_IT>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d014      	beq.n	8007792 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007778:	e00b      	b.n	8007792 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f82c 	bl	80077e0 <HAL_SPI_ErrorCallback>
    return;
 8007788:	e003      	b.n	8007792 <HAL_SPI_IRQHandler+0x386>
    return;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <HAL_SPI_IRQHandler+0x388>
    return;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <HAL_SPI_IRQHandler+0x388>
    return;
 8007792:	bf00      	nop
  }
}
 8007794:	3728      	adds	r7, #40	; 0x28
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	fffffc94 	.word	0xfffffc94
 80077a0:	080077f5 	.word	0x080077f5

080077a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff ffe0 	bl	80077e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007820:	bf00      	nop
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0208 	orr.w	r2, r2, #8
 8007846:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0210 	orr.w	r2, r2, #16
 8007856:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6919      	ldr	r1, [r3, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <SPI_CloseTransfer+0x13c>)
 8007874:	400b      	ands	r3, r1
 8007876:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007886:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b04      	cmp	r3, #4
 8007892:	d014      	beq.n	80078be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0220 	orr.w	r2, r2, #32
 80078bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d014      	beq.n	80078f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00f      	beq.n	80078f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078da:	f043 0204 	orr.w	r2, r3, #4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00f      	beq.n	800791e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007904:	f043 0201 	orr.w	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00f      	beq.n	8007948 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792e:	f043 0208 	orr.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007946:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007958:	bf00      	nop
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	fffffc90 	.word	0xfffffc90

08007968 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	3307      	adds	r3, #7
 8007986:	08db      	lsrs	r3, r3, #3
 8007988:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e042      	b.n	8007a36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7f9 fb54 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2224      	movs	r2, #36	; 0x24
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fbeb 	bl	80081bc <UART_SetConfig>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e022      	b.n	8007a36 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f947 	bl	8008c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f9ce 	bl	8008dd0 <UART_CheckIdleState>
 8007a34:	4603      	mov	r3, r0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b0ba      	sub	sp, #232	; 0xe8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a6e:	4013      	ands	r3, r2
 8007a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d015      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 835a 	beq.w	800815e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
      }
      return;
 8007ab2:	e354      	b.n	800815e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 811f 	beq.w	8007cfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007abe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ac2:	4b8b      	ldr	r3, [pc, #556]	; (8007cf0 <HAL_UART_IRQHandler+0x2b0>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ace:	4b89      	ldr	r3, [pc, #548]	; (8007cf4 <HAL_UART_IRQHandler+0x2b4>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8112 	beq.w	8007cfc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_UART_IRQHandler+0xc8>
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2201      	movs	r2, #1
 8007af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afe:	f043 0201 	orr.w	r2, r3, #1
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d011      	beq.n	8007b38 <HAL_UART_IRQHandler+0xf8>
 8007b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2202      	movs	r2, #2
 8007b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f043 0204 	orr.w	r2, r3, #4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d011      	beq.n	8007b68 <HAL_UART_IRQHandler+0x128>
 8007b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2204      	movs	r2, #4
 8007b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b84:	4b5a      	ldr	r3, [pc, #360]	; (8007cf0 <HAL_UART_IRQHandler+0x2b0>)
 8007b86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2208      	movs	r2, #8
 8007b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9a:	f043 0208 	orr.w	r2, r3, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x196>
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00c      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 82c0 	beq.w	8008162 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d013      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d04f      	beq.n	8007cda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 f9dc 	bl	8008ff8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d141      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1d9      	bne.n	8007c4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca6:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <HAL_UART_IRQHandler+0x2b8>)
 8007ca8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fa fbf0 	bl	8002494 <HAL_DMA_Abort_IT>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d017      	beq.n	8007cea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00f      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa60 	bl	8008190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e00b      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa5c 	bl	8008190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	e007      	b.n	8007cea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa58 	bl	8008190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007ce8:	e23b      	b.n	8008162 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cea:	bf00      	nop
    return;
 8007cec:	e239      	b.n	8008162 <HAL_UART_IRQHandler+0x722>
 8007cee:	bf00      	nop
 8007cf0:	10000001 	.word	0x10000001
 8007cf4:	04000120 	.word	0x04000120
 8007cf8:	080090c5 	.word	0x080090c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	f040 81ce 	bne.w	80080a2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 81c7 	beq.w	80080a2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 81c0 	beq.w	80080a2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2210      	movs	r2, #16
 8007d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	f040 813b 	bne.w	8007fb0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a8b      	ldr	r2, [pc, #556]	; (8007f70 <HAL_UART_IRQHandler+0x530>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d059      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a89      	ldr	r2, [pc, #548]	; (8007f74 <HAL_UART_IRQHandler+0x534>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d053      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a87      	ldr	r2, [pc, #540]	; (8007f78 <HAL_UART_IRQHandler+0x538>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d04d      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a85      	ldr	r2, [pc, #532]	; (8007f7c <HAL_UART_IRQHandler+0x53c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d047      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a83      	ldr	r2, [pc, #524]	; (8007f80 <HAL_UART_IRQHandler+0x540>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d041      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a81      	ldr	r2, [pc, #516]	; (8007f84 <HAL_UART_IRQHandler+0x544>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d03b      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a7f      	ldr	r2, [pc, #508]	; (8007f88 <HAL_UART_IRQHandler+0x548>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d035      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7d      	ldr	r2, [pc, #500]	; (8007f8c <HAL_UART_IRQHandler+0x54c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d02f      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a7b      	ldr	r2, [pc, #492]	; (8007f90 <HAL_UART_IRQHandler+0x550>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d029      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a79      	ldr	r2, [pc, #484]	; (8007f94 <HAL_UART_IRQHandler+0x554>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d023      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a77      	ldr	r2, [pc, #476]	; (8007f98 <HAL_UART_IRQHandler+0x558>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01d      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a75      	ldr	r2, [pc, #468]	; (8007f9c <HAL_UART_IRQHandler+0x55c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d017      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a73      	ldr	r2, [pc, #460]	; (8007fa0 <HAL_UART_IRQHandler+0x560>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d011      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a71      	ldr	r2, [pc, #452]	; (8007fa4 <HAL_UART_IRQHandler+0x564>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00b      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6f      	ldr	r2, [pc, #444]	; (8007fa8 <HAL_UART_IRQHandler+0x568>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d005      	beq.n	8007dfa <HAL_UART_IRQHandler+0x3ba>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a6d      	ldr	r2, [pc, #436]	; (8007fac <HAL_UART_IRQHandler+0x56c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d105      	bne.n	8007e06 <HAL_UART_IRQHandler+0x3c6>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	e004      	b.n	8007e10 <HAL_UART_IRQHandler+0x3d0>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 81a4 	beq.w	8008166 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	f080 819c 	bcs.w	8008166 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	f000 8086 	beq.w	8007f52 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1da      	bne.n	8007e46 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eb4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ebc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e1      	bne.n	8007e90 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ef0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e3      	bne.n	8007ecc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f22:	f023 0310 	bic.w	r3, r3, #16
 8007f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e4      	bne.n	8007f12 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f9 ff83 	bl	8001e58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f91c 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f6c:	e0fb      	b.n	8008166 <HAL_UART_IRQHandler+0x726>
 8007f6e:	bf00      	nop
 8007f70:	40020010 	.word	0x40020010
 8007f74:	40020028 	.word	0x40020028
 8007f78:	40020040 	.word	0x40020040
 8007f7c:	40020058 	.word	0x40020058
 8007f80:	40020070 	.word	0x40020070
 8007f84:	40020088 	.word	0x40020088
 8007f88:	400200a0 	.word	0x400200a0
 8007f8c:	400200b8 	.word	0x400200b8
 8007f90:	40020410 	.word	0x40020410
 8007f94:	40020428 	.word	0x40020428
 8007f98:	40020440 	.word	0x40020440
 8007f9c:	40020458 	.word	0x40020458
 8007fa0:	40020470 	.word	0x40020470
 8007fa4:	40020488 	.word	0x40020488
 8007fa8:	400204a0 	.word	0x400204a0
 8007fac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80cc 	beq.w	800816a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 80c7 	beq.w	800816a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8008000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e4      	bne.n	8007fdc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	623b      	str	r3, [r7, #32]
   return(result);
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	4b54      	ldr	r3, [pc, #336]	; (8008178 <HAL_UART_IRQHandler+0x738>)
 8008026:	4013      	ands	r3, r2
 8008028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008036:	633a      	str	r2, [r7, #48]	; 0x30
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800803c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e3      	bne.n	8008012 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	60fb      	str	r3, [r7, #12]
   return(result);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0310 	bic.w	r3, r3, #16
 8008072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	69b9      	ldr	r1, [r7, #24]
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	617b      	str	r3, [r7, #20]
   return(result);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e4      	bne.n	800805e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f882 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080a0:	e063      	b.n	800816a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00e      	beq.n	80080cc <HAL_UART_IRQHandler+0x68c>
 80080ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f83e 	bl	8009146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ca:	e051      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d014      	beq.n	8008102 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d03a      	beq.n	800816e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
    }
    return;
 8008100:	e035      	b.n	800816e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_UART_IRQHandler+0x6e2>
 800810e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 ffe8 	bl	80090f0 <UART_EndTransmit_IT>
    return;
 8008120:	e026      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <HAL_UART_IRQHandler+0x702>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 f817 	bl	800916e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008140:	e016      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d010      	beq.n	8008170 <HAL_UART_IRQHandler+0x730>
 800814e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008152:	2b00      	cmp	r3, #0
 8008154:	da0c      	bge.n	8008170 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 ffff 	bl	800915a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800815c:	e008      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
      return;
 800815e:	bf00      	nop
 8008160:	e006      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
    return;
 8008162:	bf00      	nop
 8008164:	e004      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
      return;
 8008166:	bf00      	nop
 8008168:	e002      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
      return;
 800816a:	bf00      	nop
 800816c:	e000      	b.n	8008170 <HAL_UART_IRQHandler+0x730>
    return;
 800816e:	bf00      	nop
  }
}
 8008170:	37e8      	adds	r7, #232	; 0xe8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	effffffe 	.word	0xeffffffe

0800817c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c0:	b092      	sub	sp, #72	; 0x48
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	431a      	orrs	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	4bbe      	ldr	r3, [pc, #760]	; (80084e4 <UART_SetConfig+0x328>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4ab3      	ldr	r2, [pc, #716]	; (80084e8 <UART_SetConfig+0x32c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008224:	4313      	orrs	r3, r2
 8008226:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	4baf      	ldr	r3, [pc, #700]	; (80084ec <UART_SetConfig+0x330>)
 8008230:	4013      	ands	r3, r2
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008238:	430b      	orrs	r3, r1
 800823a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	f023 010f 	bic.w	r1, r3, #15
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4aa6      	ldr	r2, [pc, #664]	; (80084f0 <UART_SetConfig+0x334>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d177      	bne.n	800834c <UART_SetConfig+0x190>
 800825c:	4ba5      	ldr	r3, [pc, #660]	; (80084f4 <UART_SetConfig+0x338>)
 800825e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008264:	2b28      	cmp	r3, #40	; 0x28
 8008266:	d86d      	bhi.n	8008344 <UART_SetConfig+0x188>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0xb4>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008315 	.word	0x08008315
 8008274:	08008345 	.word	0x08008345
 8008278:	08008345 	.word	0x08008345
 800827c:	08008345 	.word	0x08008345
 8008280:	08008345 	.word	0x08008345
 8008284:	08008345 	.word	0x08008345
 8008288:	08008345 	.word	0x08008345
 800828c:	08008345 	.word	0x08008345
 8008290:	0800831d 	.word	0x0800831d
 8008294:	08008345 	.word	0x08008345
 8008298:	08008345 	.word	0x08008345
 800829c:	08008345 	.word	0x08008345
 80082a0:	08008345 	.word	0x08008345
 80082a4:	08008345 	.word	0x08008345
 80082a8:	08008345 	.word	0x08008345
 80082ac:	08008345 	.word	0x08008345
 80082b0:	08008325 	.word	0x08008325
 80082b4:	08008345 	.word	0x08008345
 80082b8:	08008345 	.word	0x08008345
 80082bc:	08008345 	.word	0x08008345
 80082c0:	08008345 	.word	0x08008345
 80082c4:	08008345 	.word	0x08008345
 80082c8:	08008345 	.word	0x08008345
 80082cc:	08008345 	.word	0x08008345
 80082d0:	0800832d 	.word	0x0800832d
 80082d4:	08008345 	.word	0x08008345
 80082d8:	08008345 	.word	0x08008345
 80082dc:	08008345 	.word	0x08008345
 80082e0:	08008345 	.word	0x08008345
 80082e4:	08008345 	.word	0x08008345
 80082e8:	08008345 	.word	0x08008345
 80082ec:	08008345 	.word	0x08008345
 80082f0:	08008335 	.word	0x08008335
 80082f4:	08008345 	.word	0x08008345
 80082f8:	08008345 	.word	0x08008345
 80082fc:	08008345 	.word	0x08008345
 8008300:	08008345 	.word	0x08008345
 8008304:	08008345 	.word	0x08008345
 8008308:	08008345 	.word	0x08008345
 800830c:	08008345 	.word	0x08008345
 8008310:	0800833d 	.word	0x0800833d
 8008314:	2301      	movs	r3, #1
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e222      	b.n	8008762 <UART_SetConfig+0x5a6>
 800831c:	2304      	movs	r3, #4
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e21e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008324:	2308      	movs	r3, #8
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e21a      	b.n	8008762 <UART_SetConfig+0x5a6>
 800832c:	2310      	movs	r3, #16
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e216      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008334:	2320      	movs	r3, #32
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e212      	b.n	8008762 <UART_SetConfig+0x5a6>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e20e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008344:	2380      	movs	r3, #128	; 0x80
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e20a      	b.n	8008762 <UART_SetConfig+0x5a6>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a69      	ldr	r2, [pc, #420]	; (80084f8 <UART_SetConfig+0x33c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d130      	bne.n	80083b8 <UART_SetConfig+0x1fc>
 8008356:	4b67      	ldr	r3, [pc, #412]	; (80084f4 <UART_SetConfig+0x338>)
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b05      	cmp	r3, #5
 8008360:	d826      	bhi.n	80083b0 <UART_SetConfig+0x1f4>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0x1ac>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008381 	.word	0x08008381
 800836c:	08008389 	.word	0x08008389
 8008370:	08008391 	.word	0x08008391
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	2300      	movs	r3, #0
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e1ec      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e1e8      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e1e4      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e1e0      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083a0:	2320      	movs	r3, #32
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e1dc      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083a8:	2340      	movs	r3, #64	; 0x40
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e1d8      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083b0:	2380      	movs	r3, #128	; 0x80
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e1d4      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a4f      	ldr	r2, [pc, #316]	; (80084fc <UART_SetConfig+0x340>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d130      	bne.n	8008424 <UART_SetConfig+0x268>
 80083c2:	4b4c      	ldr	r3, [pc, #304]	; (80084f4 <UART_SetConfig+0x338>)
 80083c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	d826      	bhi.n	800841c <UART_SetConfig+0x260>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0x218>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	080083ed 	.word	0x080083ed
 80083d8:	080083f5 	.word	0x080083f5
 80083dc:	080083fd 	.word	0x080083fd
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008415 	.word	0x08008415
 80083ec:	2300      	movs	r3, #0
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e1b6      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083f4:	2304      	movs	r3, #4
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e1b2      	b.n	8008762 <UART_SetConfig+0x5a6>
 80083fc:	2308      	movs	r3, #8
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e1ae      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008404:	2310      	movs	r3, #16
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e1aa      	b.n	8008762 <UART_SetConfig+0x5a6>
 800840c:	2320      	movs	r3, #32
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e1a6      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841a:	e1a2      	b.n	8008762 <UART_SetConfig+0x5a6>
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e19e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a35      	ldr	r2, [pc, #212]	; (8008500 <UART_SetConfig+0x344>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d130      	bne.n	8008490 <UART_SetConfig+0x2d4>
 800842e:	4b31      	ldr	r3, [pc, #196]	; (80084f4 <UART_SetConfig+0x338>)
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	2b05      	cmp	r3, #5
 8008438:	d826      	bhi.n	8008488 <UART_SetConfig+0x2cc>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <UART_SetConfig+0x284>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008459 	.word	0x08008459
 8008444:	08008461 	.word	0x08008461
 8008448:	08008469 	.word	0x08008469
 800844c:	08008471 	.word	0x08008471
 8008450:	08008479 	.word	0x08008479
 8008454:	08008481 	.word	0x08008481
 8008458:	2300      	movs	r3, #0
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e180      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008460:	2304      	movs	r3, #4
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e17c      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008468:	2308      	movs	r3, #8
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e178      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008470:	2310      	movs	r3, #16
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e174      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008478:	2320      	movs	r3, #32
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e170      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008480:	2340      	movs	r3, #64	; 0x40
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008486:	e16c      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008488:	2380      	movs	r3, #128	; 0x80
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e168      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <UART_SetConfig+0x348>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d142      	bne.n	8008520 <UART_SetConfig+0x364>
 800849a:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <UART_SetConfig+0x338>)
 800849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d838      	bhi.n	8008518 <UART_SetConfig+0x35c>
 80084a6:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <UART_SetConfig+0x2f0>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084c5 	.word	0x080084c5
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084d5 	.word	0x080084d5
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	08008509 	.word	0x08008509
 80084c0:	08008511 	.word	0x08008511
 80084c4:	2300      	movs	r3, #0
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e14a      	b.n	8008762 <UART_SetConfig+0x5a6>
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e146      	b.n	8008762 <UART_SetConfig+0x5a6>
 80084d4:	2308      	movs	r3, #8
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e142      	b.n	8008762 <UART_SetConfig+0x5a6>
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e13e      	b.n	8008762 <UART_SetConfig+0x5a6>
 80084e4:	cfff69f3 	.word	0xcfff69f3
 80084e8:	58000c00 	.word	0x58000c00
 80084ec:	11fff4ff 	.word	0x11fff4ff
 80084f0:	40011000 	.word	0x40011000
 80084f4:	58024400 	.word	0x58024400
 80084f8:	40004400 	.word	0x40004400
 80084fc:	40004800 	.word	0x40004800
 8008500:	40004c00 	.word	0x40004c00
 8008504:	40005000 	.word	0x40005000
 8008508:	2320      	movs	r3, #32
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e128      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008510:	2340      	movs	r3, #64	; 0x40
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e124      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008518:	2380      	movs	r3, #128	; 0x80
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e120      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4acb      	ldr	r2, [pc, #812]	; (8008854 <UART_SetConfig+0x698>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d176      	bne.n	8008618 <UART_SetConfig+0x45c>
 800852a:	4bcb      	ldr	r3, [pc, #812]	; (8008858 <UART_SetConfig+0x69c>)
 800852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008532:	2b28      	cmp	r3, #40	; 0x28
 8008534:	d86c      	bhi.n	8008610 <UART_SetConfig+0x454>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <UART_SetConfig+0x380>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	080085e1 	.word	0x080085e1
 8008540:	08008611 	.word	0x08008611
 8008544:	08008611 	.word	0x08008611
 8008548:	08008611 	.word	0x08008611
 800854c:	08008611 	.word	0x08008611
 8008550:	08008611 	.word	0x08008611
 8008554:	08008611 	.word	0x08008611
 8008558:	08008611 	.word	0x08008611
 800855c:	080085e9 	.word	0x080085e9
 8008560:	08008611 	.word	0x08008611
 8008564:	08008611 	.word	0x08008611
 8008568:	08008611 	.word	0x08008611
 800856c:	08008611 	.word	0x08008611
 8008570:	08008611 	.word	0x08008611
 8008574:	08008611 	.word	0x08008611
 8008578:	08008611 	.word	0x08008611
 800857c:	080085f1 	.word	0x080085f1
 8008580:	08008611 	.word	0x08008611
 8008584:	08008611 	.word	0x08008611
 8008588:	08008611 	.word	0x08008611
 800858c:	08008611 	.word	0x08008611
 8008590:	08008611 	.word	0x08008611
 8008594:	08008611 	.word	0x08008611
 8008598:	08008611 	.word	0x08008611
 800859c:	080085f9 	.word	0x080085f9
 80085a0:	08008611 	.word	0x08008611
 80085a4:	08008611 	.word	0x08008611
 80085a8:	08008611 	.word	0x08008611
 80085ac:	08008611 	.word	0x08008611
 80085b0:	08008611 	.word	0x08008611
 80085b4:	08008611 	.word	0x08008611
 80085b8:	08008611 	.word	0x08008611
 80085bc:	08008601 	.word	0x08008601
 80085c0:	08008611 	.word	0x08008611
 80085c4:	08008611 	.word	0x08008611
 80085c8:	08008611 	.word	0x08008611
 80085cc:	08008611 	.word	0x08008611
 80085d0:	08008611 	.word	0x08008611
 80085d4:	08008611 	.word	0x08008611
 80085d8:	08008611 	.word	0x08008611
 80085dc:	08008609 	.word	0x08008609
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e6:	e0bc      	b.n	8008762 <UART_SetConfig+0x5a6>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ee:	e0b8      	b.n	8008762 <UART_SetConfig+0x5a6>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f6:	e0b4      	b.n	8008762 <UART_SetConfig+0x5a6>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fe:	e0b0      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008600:	2320      	movs	r3, #32
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008606:	e0ac      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008608:	2340      	movs	r3, #64	; 0x40
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860e:	e0a8      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008616:	e0a4      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a8f      	ldr	r2, [pc, #572]	; (800885c <UART_SetConfig+0x6a0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d130      	bne.n	8008684 <UART_SetConfig+0x4c8>
 8008622:	4b8d      	ldr	r3, [pc, #564]	; (8008858 <UART_SetConfig+0x69c>)
 8008624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b05      	cmp	r3, #5
 800862c:	d826      	bhi.n	800867c <UART_SetConfig+0x4c0>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <UART_SetConfig+0x478>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	0800864d 	.word	0x0800864d
 8008638:	08008655 	.word	0x08008655
 800863c:	0800865d 	.word	0x0800865d
 8008640:	08008665 	.word	0x08008665
 8008644:	0800866d 	.word	0x0800866d
 8008648:	08008675 	.word	0x08008675
 800864c:	2300      	movs	r3, #0
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008652:	e086      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008654:	2304      	movs	r3, #4
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865a:	e082      	b.n	8008762 <UART_SetConfig+0x5a6>
 800865c:	2308      	movs	r3, #8
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008662:	e07e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008664:	2310      	movs	r3, #16
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866a:	e07a      	b.n	8008762 <UART_SetConfig+0x5a6>
 800866c:	2320      	movs	r3, #32
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008672:	e076      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867a:	e072      	b.n	8008762 <UART_SetConfig+0x5a6>
 800867c:	2380      	movs	r3, #128	; 0x80
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008682:	e06e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a75      	ldr	r2, [pc, #468]	; (8008860 <UART_SetConfig+0x6a4>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d130      	bne.n	80086f0 <UART_SetConfig+0x534>
 800868e:	4b72      	ldr	r3, [pc, #456]	; (8008858 <UART_SetConfig+0x69c>)
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	2b05      	cmp	r3, #5
 8008698:	d826      	bhi.n	80086e8 <UART_SetConfig+0x52c>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0x4e4>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086b9 	.word	0x080086b9
 80086a4:	080086c1 	.word	0x080086c1
 80086a8:	080086c9 	.word	0x080086c9
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e050      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086c0:	2304      	movs	r3, #4
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c6:	e04c      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086c8:	2308      	movs	r3, #8
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ce:	e048      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086d0:	2310      	movs	r3, #16
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d6:	e044      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086d8:	2320      	movs	r3, #32
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086de:	e040      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e6:	e03c      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086e8:	2380      	movs	r3, #128	; 0x80
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ee:	e038      	b.n	8008762 <UART_SetConfig+0x5a6>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a5b      	ldr	r2, [pc, #364]	; (8008864 <UART_SetConfig+0x6a8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d130      	bne.n	800875c <UART_SetConfig+0x5a0>
 80086fa:	4b57      	ldr	r3, [pc, #348]	; (8008858 <UART_SetConfig+0x69c>)
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	2b05      	cmp	r3, #5
 8008704:	d826      	bhi.n	8008754 <UART_SetConfig+0x598>
 8008706:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0x550>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	08008725 	.word	0x08008725
 8008710:	0800872d 	.word	0x0800872d
 8008714:	08008735 	.word	0x08008735
 8008718:	0800873d 	.word	0x0800873d
 800871c:	08008745 	.word	0x08008745
 8008720:	0800874d 	.word	0x0800874d
 8008724:	2302      	movs	r3, #2
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e01a      	b.n	8008762 <UART_SetConfig+0x5a6>
 800872c:	2304      	movs	r3, #4
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e016      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008734:	2308      	movs	r3, #8
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e012      	b.n	8008762 <UART_SetConfig+0x5a6>
 800873c:	2310      	movs	r3, #16
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e00e      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008744:	2320      	movs	r3, #32
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e00a      	b.n	8008762 <UART_SetConfig+0x5a6>
 800874c:	2340      	movs	r3, #64	; 0x40
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008752:	e006      	b.n	8008762 <UART_SetConfig+0x5a6>
 8008754:	2380      	movs	r3, #128	; 0x80
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875a:	e002      	b.n	8008762 <UART_SetConfig+0x5a6>
 800875c:	2380      	movs	r3, #128	; 0x80
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a3f      	ldr	r2, [pc, #252]	; (8008864 <UART_SetConfig+0x6a8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	f040 80f8 	bne.w	800895e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800876e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008772:	2b20      	cmp	r3, #32
 8008774:	dc46      	bgt.n	8008804 <UART_SetConfig+0x648>
 8008776:	2b02      	cmp	r3, #2
 8008778:	f2c0 8082 	blt.w	8008880 <UART_SetConfig+0x6c4>
 800877c:	3b02      	subs	r3, #2
 800877e:	2b1e      	cmp	r3, #30
 8008780:	d87e      	bhi.n	8008880 <UART_SetConfig+0x6c4>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <UART_SetConfig+0x5cc>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	0800880b 	.word	0x0800880b
 800878c:	08008881 	.word	0x08008881
 8008790:	08008813 	.word	0x08008813
 8008794:	08008881 	.word	0x08008881
 8008798:	08008881 	.word	0x08008881
 800879c:	08008881 	.word	0x08008881
 80087a0:	08008823 	.word	0x08008823
 80087a4:	08008881 	.word	0x08008881
 80087a8:	08008881 	.word	0x08008881
 80087ac:	08008881 	.word	0x08008881
 80087b0:	08008881 	.word	0x08008881
 80087b4:	08008881 	.word	0x08008881
 80087b8:	08008881 	.word	0x08008881
 80087bc:	08008881 	.word	0x08008881
 80087c0:	08008833 	.word	0x08008833
 80087c4:	08008881 	.word	0x08008881
 80087c8:	08008881 	.word	0x08008881
 80087cc:	08008881 	.word	0x08008881
 80087d0:	08008881 	.word	0x08008881
 80087d4:	08008881 	.word	0x08008881
 80087d8:	08008881 	.word	0x08008881
 80087dc:	08008881 	.word	0x08008881
 80087e0:	08008881 	.word	0x08008881
 80087e4:	08008881 	.word	0x08008881
 80087e8:	08008881 	.word	0x08008881
 80087ec:	08008881 	.word	0x08008881
 80087f0:	08008881 	.word	0x08008881
 80087f4:	08008881 	.word	0x08008881
 80087f8:	08008881 	.word	0x08008881
 80087fc:	08008881 	.word	0x08008881
 8008800:	08008873 	.word	0x08008873
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d037      	beq.n	8008878 <UART_SetConfig+0x6bc>
 8008808:	e03a      	b.n	8008880 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800880a:	f7fe f8d7 	bl	80069bc <HAL_RCCEx_GetD3PCLK1Freq>
 800880e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008810:	e03c      	b.n	800888c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe f8e6 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008820:	e034      	b.n	800888c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008822:	f107 0318 	add.w	r3, r7, #24
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fa32 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008830:	e02c      	b.n	800888c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008832:	4b09      	ldr	r3, [pc, #36]	; (8008858 <UART_SetConfig+0x69c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d016      	beq.n	800886c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <UART_SetConfig+0x69c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a07      	ldr	r2, [pc, #28]	; (8008868 <UART_SetConfig+0x6ac>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008850:	e01c      	b.n	800888c <UART_SetConfig+0x6d0>
 8008852:	bf00      	nop
 8008854:	40011400 	.word	0x40011400
 8008858:	58024400 	.word	0x58024400
 800885c:	40007800 	.word	0x40007800
 8008860:	40007c00 	.word	0x40007c00
 8008864:	58000c00 	.word	0x58000c00
 8008868:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800886c:	4b9d      	ldr	r3, [pc, #628]	; (8008ae4 <UART_SetConfig+0x928>)
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008870:	e00c      	b.n	800888c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008872:	4b9d      	ldr	r3, [pc, #628]	; (8008ae8 <UART_SetConfig+0x92c>)
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008876:	e009      	b.n	800888c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887e:	e005      	b.n	800888c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800888a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800888c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 81de 	beq.w	8008c50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	4a94      	ldr	r2, [pc, #592]	; (8008aec <UART_SetConfig+0x930>)
 800889a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889e:	461a      	mov	r2, r3
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d305      	bcc.n	80088c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d903      	bls.n	80088cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088ca:	e1c1      	b.n	8008c50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	2200      	movs	r2, #0
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	60fa      	str	r2, [r7, #12]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	4a84      	ldr	r2, [pc, #528]	; (8008aec <UART_SetConfig+0x930>)
 80088da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2200      	movs	r2, #0
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088ee:	f7f7 fcf3 	bl	80002d8 <__aeabi_uldivmod>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4610      	mov	r0, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	020b      	lsls	r3, r1, #8
 8008904:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008908:	0202      	lsls	r2, r0, #8
 800890a:	6979      	ldr	r1, [r7, #20]
 800890c:	6849      	ldr	r1, [r1, #4]
 800890e:	0849      	lsrs	r1, r1, #1
 8008910:	2000      	movs	r0, #0
 8008912:	460c      	mov	r4, r1
 8008914:	4605      	mov	r5, r0
 8008916:	eb12 0804 	adds.w	r8, r2, r4
 800891a:	eb43 0905 	adc.w	r9, r3, r5
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	469a      	mov	sl, r3
 8008926:	4693      	mov	fp, r2
 8008928:	4652      	mov	r2, sl
 800892a:	465b      	mov	r3, fp
 800892c:	4640      	mov	r0, r8
 800892e:	4649      	mov	r1, r9
 8008930:	f7f7 fcd2 	bl	80002d8 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4613      	mov	r3, r2
 800893a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008942:	d308      	bcc.n	8008956 <UART_SetConfig+0x79a>
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800894a:	d204      	bcs.n	8008956 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	e17c      	b.n	8008c50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800895c:	e178      	b.n	8008c50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008966:	f040 80c5 	bne.w	8008af4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800896a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800896e:	2b20      	cmp	r3, #32
 8008970:	dc48      	bgt.n	8008a04 <UART_SetConfig+0x848>
 8008972:	2b00      	cmp	r3, #0
 8008974:	db7b      	blt.n	8008a6e <UART_SetConfig+0x8b2>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d879      	bhi.n	8008a6e <UART_SetConfig+0x8b2>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <UART_SetConfig+0x7c4>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a13 	.word	0x08008a13
 8008988:	08008a6f 	.word	0x08008a6f
 800898c:	08008a6f 	.word	0x08008a6f
 8008990:	08008a1b 	.word	0x08008a1b
 8008994:	08008a6f 	.word	0x08008a6f
 8008998:	08008a6f 	.word	0x08008a6f
 800899c:	08008a6f 	.word	0x08008a6f
 80089a0:	08008a2b 	.word	0x08008a2b
 80089a4:	08008a6f 	.word	0x08008a6f
 80089a8:	08008a6f 	.word	0x08008a6f
 80089ac:	08008a6f 	.word	0x08008a6f
 80089b0:	08008a6f 	.word	0x08008a6f
 80089b4:	08008a6f 	.word	0x08008a6f
 80089b8:	08008a6f 	.word	0x08008a6f
 80089bc:	08008a6f 	.word	0x08008a6f
 80089c0:	08008a3b 	.word	0x08008a3b
 80089c4:	08008a6f 	.word	0x08008a6f
 80089c8:	08008a6f 	.word	0x08008a6f
 80089cc:	08008a6f 	.word	0x08008a6f
 80089d0:	08008a6f 	.word	0x08008a6f
 80089d4:	08008a6f 	.word	0x08008a6f
 80089d8:	08008a6f 	.word	0x08008a6f
 80089dc:	08008a6f 	.word	0x08008a6f
 80089e0:	08008a6f 	.word	0x08008a6f
 80089e4:	08008a6f 	.word	0x08008a6f
 80089e8:	08008a6f 	.word	0x08008a6f
 80089ec:	08008a6f 	.word	0x08008a6f
 80089f0:	08008a6f 	.word	0x08008a6f
 80089f4:	08008a6f 	.word	0x08008a6f
 80089f8:	08008a6f 	.word	0x08008a6f
 80089fc:	08008a6f 	.word	0x08008a6f
 8008a00:	08008a61 	.word	0x08008a61
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d02e      	beq.n	8008a66 <UART_SetConfig+0x8aa>
 8008a08:	e031      	b.n	8008a6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a0a:	f7fd f865 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8008a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a10:	e033      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a12:	f7fd f877 	bl	8005b04 <HAL_RCC_GetPCLK2Freq>
 8008a16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a18:	e02f      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fd ffe2 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a28:	e027      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2a:	f107 0318 	add.w	r3, r7, #24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe f92e 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a38:	e01f      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3a:	4b2d      	ldr	r3, [pc, #180]	; (8008af0 <UART_SetConfig+0x934>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a46:	4b2a      	ldr	r3, [pc, #168]	; (8008af0 <UART_SetConfig+0x934>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	08db      	lsrs	r3, r3, #3
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	4a24      	ldr	r2, [pc, #144]	; (8008ae4 <UART_SetConfig+0x928>)
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a58:	e00f      	b.n	8008a7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a5a:	4b22      	ldr	r3, [pc, #136]	; (8008ae4 <UART_SetConfig+0x928>)
 8008a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5e:	e00c      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a60:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <UART_SetConfig+0x92c>)
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80e7 	beq.w	8008c50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	4a19      	ldr	r2, [pc, #100]	; (8008aec <UART_SetConfig+0x930>)
 8008a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a94:	005a      	lsls	r2, r3, #1
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	441a      	add	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	2b0f      	cmp	r3, #15
 8008aac:	d916      	bls.n	8008adc <UART_SetConfig+0x920>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab4:	d212      	bcs.n	8008adc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f023 030f 	bic.w	r3, r3, #15
 8008abe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ad8:	60da      	str	r2, [r3, #12]
 8008ada:	e0b9      	b.n	8008c50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ae2:	e0b5      	b.n	8008c50 <UART_SetConfig+0xa94>
 8008ae4:	03d09000 	.word	0x03d09000
 8008ae8:	003d0900 	.word	0x003d0900
 8008aec:	08009a24 	.word	0x08009a24
 8008af0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	dc49      	bgt.n	8008b90 <UART_SetConfig+0x9d4>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	db7c      	blt.n	8008bfa <UART_SetConfig+0xa3e>
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d87a      	bhi.n	8008bfa <UART_SetConfig+0xa3e>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <UART_SetConfig+0x950>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b97 	.word	0x08008b97
 8008b10:	08008b9f 	.word	0x08008b9f
 8008b14:	08008bfb 	.word	0x08008bfb
 8008b18:	08008bfb 	.word	0x08008bfb
 8008b1c:	08008ba7 	.word	0x08008ba7
 8008b20:	08008bfb 	.word	0x08008bfb
 8008b24:	08008bfb 	.word	0x08008bfb
 8008b28:	08008bfb 	.word	0x08008bfb
 8008b2c:	08008bb7 	.word	0x08008bb7
 8008b30:	08008bfb 	.word	0x08008bfb
 8008b34:	08008bfb 	.word	0x08008bfb
 8008b38:	08008bfb 	.word	0x08008bfb
 8008b3c:	08008bfb 	.word	0x08008bfb
 8008b40:	08008bfb 	.word	0x08008bfb
 8008b44:	08008bfb 	.word	0x08008bfb
 8008b48:	08008bfb 	.word	0x08008bfb
 8008b4c:	08008bc7 	.word	0x08008bc7
 8008b50:	08008bfb 	.word	0x08008bfb
 8008b54:	08008bfb 	.word	0x08008bfb
 8008b58:	08008bfb 	.word	0x08008bfb
 8008b5c:	08008bfb 	.word	0x08008bfb
 8008b60:	08008bfb 	.word	0x08008bfb
 8008b64:	08008bfb 	.word	0x08008bfb
 8008b68:	08008bfb 	.word	0x08008bfb
 8008b6c:	08008bfb 	.word	0x08008bfb
 8008b70:	08008bfb 	.word	0x08008bfb
 8008b74:	08008bfb 	.word	0x08008bfb
 8008b78:	08008bfb 	.word	0x08008bfb
 8008b7c:	08008bfb 	.word	0x08008bfb
 8008b80:	08008bfb 	.word	0x08008bfb
 8008b84:	08008bfb 	.word	0x08008bfb
 8008b88:	08008bfb 	.word	0x08008bfb
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	2b40      	cmp	r3, #64	; 0x40
 8008b92:	d02e      	beq.n	8008bf2 <UART_SetConfig+0xa36>
 8008b94:	e031      	b.n	8008bfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b96:	f7fc ff9f 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8008b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b9c:	e033      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b9e:	f7fc ffb1 	bl	8005b04 <HAL_RCC_GetPCLK2Freq>
 8008ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ba4:	e02f      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fd ff1c 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb4:	e027      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb6:	f107 0318 	add.w	r3, r7, #24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe f868 	bl	8006c90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc4:	e01f      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc6:	4b2d      	ldr	r3, [pc, #180]	; (8008c7c <UART_SetConfig+0xac0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bd2:	4b2a      	ldr	r3, [pc, #168]	; (8008c7c <UART_SetConfig+0xac0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	08db      	lsrs	r3, r3, #3
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	4a28      	ldr	r2, [pc, #160]	; (8008c80 <UART_SetConfig+0xac4>)
 8008bde:	fa22 f303 	lsr.w	r3, r2, r3
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008be4:	e00f      	b.n	8008c06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008be6:	4b26      	ldr	r3, [pc, #152]	; (8008c80 <UART_SetConfig+0xac4>)
 8008be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bea:	e00c      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bec:	4b25      	ldr	r3, [pc, #148]	; (8008c84 <UART_SetConfig+0xac8>)
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf0:	e009      	b.n	8008c06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf8:	e005      	b.n	8008c06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c04:	bf00      	nop
    }

    if (pclk != 0U)
 8008c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d021      	beq.n	8008c50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <UART_SetConfig+0xacc>)
 8008c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	441a      	add	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d909      	bls.n	8008c4a <UART_SetConfig+0xa8e>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d205      	bcs.n	8008c4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	e002      	b.n	8008c50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c6c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3748      	adds	r7, #72	; 0x48
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7a:	bf00      	nop
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	03d09000 	.word	0x03d09000
 8008c84:	003d0900 	.word	0x003d0900
 8008c88:	08009a24 	.word	0x08009a24

08008c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01a      	beq.n	8008da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d8a:	d10a      	bne.n	8008da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008de0:	f7f8 fb7e 	bl	80014e0 <HAL_GetTick>
 8008de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d10e      	bne.n	8008e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f82f 	bl	8008e66 <UART_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e025      	b.n	8008e5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d10e      	bne.n	8008e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f819 	bl	8008e66 <UART_WaitOnFlagUntilTimeout>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e00f      	b.n	8008e5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b09c      	sub	sp, #112	; 0x70
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	4613      	mov	r3, r2
 8008e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e76:	e0a9      	b.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	f000 80a5 	beq.w	8008fcc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e82:	f7f8 fb2d 	bl	80014e0 <HAL_GetTick>
 8008e86:	4602      	mov	r2, r0
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d302      	bcc.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d140      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eac:	667b      	str	r3, [r7, #100]	; 0x64
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e6      	bne.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008eea:	64ba      	str	r2, [r7, #72]	; 0x48
 8008eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e5      	bne.n	8008eca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e069      	b.n	8008fee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d051      	beq.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f36:	d149      	bne.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34
 8008f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	613b      	str	r3, [r7, #16]
   return(result);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f023 0301 	bic.w	r3, r3, #1
 8008f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f94:	623a      	str	r2, [r7, #32]
 8008f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e010      	b.n	8008fee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69da      	ldr	r2, [r3, #28]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	f43f af46 	beq.w	8008e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3770      	adds	r7, #112	; 0x70
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b095      	sub	sp, #84	; 0x54
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	643b      	str	r3, [r7, #64]	; 0x40
 8009020:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e6      	bne.n	8009000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	61fb      	str	r3, [r7, #28]
   return(result);
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <UART_EndRxTransfer+0xc8>)
 8009046:	4013      	ands	r3, r2
 8009048:	64bb      	str	r3, [r7, #72]	; 0x48
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e5      	bne.n	8009032 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d118      	bne.n	80090a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	60bb      	str	r3, [r7, #8]
   return(result);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f023 0310 	bic.w	r3, r3, #16
 8009082:	647b      	str	r3, [r7, #68]	; 0x44
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6979      	ldr	r1, [r7, #20]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	613b      	str	r3, [r7, #16]
   return(result);
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e6      	bne.n	800906e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80090b4:	bf00      	nop
 80090b6:	3754      	adds	r7, #84	; 0x54
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	effffffe 	.word	0xeffffffe

080090c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff f854 	bl	8008190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e8:	bf00      	nop
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	60bb      	str	r3, [r7, #8]
   return(result);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800910c:	61fb      	str	r3, [r7, #28]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6979      	ldr	r1, [r7, #20]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	613b      	str	r3, [r7, #16]
   return(result);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e6      	bne.n	80090f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff f81f 	bl	800817c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800913e:	bf00      	nop
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009182:	b480      	push	{r7}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <HAL_UARTEx_DisableFifoMode+0x16>
 8009194:	2302      	movs	r3, #2
 8009196:	e027      	b.n	80091e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2224      	movs	r2, #36	; 0x24
 80091a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0201 	bic.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009208:	2302      	movs	r3, #2
 800920a:	e02d      	b.n	8009268 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2224      	movs	r2, #36	; 0x24
 8009218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0201 	bic.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f84f 	bl	80092ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009284:	2302      	movs	r3, #2
 8009286:	e02d      	b.n	80092e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f811 	bl	80092ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d108      	bne.n	800930e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800930c:	e031      	b.n	8009372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800930e:	2310      	movs	r3, #16
 8009310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009312:	2310      	movs	r3, #16
 8009314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	0e5b      	lsrs	r3, r3, #25
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	0f5b      	lsrs	r3, r3, #29
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	7b3a      	ldrb	r2, [r7, #12]
 800933a:	4911      	ldr	r1, [pc, #68]	; (8009380 <UARTEx_SetNbDataToProcess+0x94>)
 800933c:	5c8a      	ldrb	r2, [r1, r2]
 800933e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009342:	7b3a      	ldrb	r2, [r7, #12]
 8009344:	490f      	ldr	r1, [pc, #60]	; (8009384 <UARTEx_SetNbDataToProcess+0x98>)
 8009346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009348:	fb93 f3f2 	sdiv	r3, r3, r2
 800934c:	b29a      	uxth	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	7b7a      	ldrb	r2, [r7, #13]
 8009358:	4909      	ldr	r1, [pc, #36]	; (8009380 <UARTEx_SetNbDataToProcess+0x94>)
 800935a:	5c8a      	ldrb	r2, [r1, r2]
 800935c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009360:	7b7a      	ldrb	r2, [r7, #13]
 8009362:	4908      	ldr	r1, [pc, #32]	; (8009384 <UARTEx_SetNbDataToProcess+0x98>)
 8009364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009366:	fb93 f3f2 	sdiv	r3, r3, r2
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	08009a3c 	.word	0x08009a3c
 8009384:	08009a44 	.word	0x08009a44

08009388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009388:	b084      	sub	sp, #16
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	f107 001c 	add.w	r0, r7, #28
 8009396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d120      	bne.n	80093e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	4b2a      	ldr	r3, [pc, #168]	; (800945c <USB_CoreInit+0xd4>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 faac 	bl	8009934 <USB_CoreReset>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	e01a      	b.n	8009418 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 faa0 	bl	8009934 <USB_CoreReset>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	639a      	str	r2, [r3, #56]	; 0x38
 800940a:	e005      	b.n	8009418 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	2b01      	cmp	r3, #1
 800941c:	d116      	bne.n	800944c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800942c:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <USB_CoreInit+0xd8>)
 800942e:	4313      	orrs	r3, r2
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f043 0206 	orr.w	r2, r3, #6
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f043 0220 	orr.w	r2, r3, #32
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009458:	b004      	add	sp, #16
 800945a:	4770      	bx	lr
 800945c:	ffbdffbf 	.word	0xffbdffbf
 8009460:	03ee0000 	.word	0x03ee0000

08009464 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f023 0201 	bic.w	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d115      	bne.n	80094d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7f8 f81f 	bl	80014f8 <HAL_Delay>
      ms++;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa29 	bl	8009918 <USB_GetMode>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d01e      	beq.n	800950a <USB_SetCurrentMode+0x84>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b31      	cmp	r3, #49	; 0x31
 80094d0:	d9f0      	bls.n	80094b4 <USB_SetCurrentMode+0x2e>
 80094d2:	e01a      	b.n	800950a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094d4:	78fb      	ldrb	r3, [r7, #3]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d115      	bne.n	8009506 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094e6:	2001      	movs	r0, #1
 80094e8:	f7f8 f806 	bl	80014f8 <HAL_Delay>
      ms++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa10 	bl	8009918 <USB_GetMode>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <USB_SetCurrentMode+0x84>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b31      	cmp	r3, #49	; 0x31
 8009502:	d9f0      	bls.n	80094e6 <USB_SetCurrentMode+0x60>
 8009504:	e001      	b.n	800950a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e005      	b.n	8009516 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b32      	cmp	r3, #50	; 0x32
 800950e:	d101      	bne.n	8009514 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009520:	b084      	sub	sp, #16
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800952e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	e009      	b.n	8009554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	3340      	adds	r3, #64	; 0x40
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2b0e      	cmp	r3, #14
 8009558:	d9f2      	bls.n	8009540 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d11c      	bne.n	800959a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800956e:	f043 0302 	orr.w	r3, r3, #2
 8009572:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	e005      	b.n	80095a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b8:	4619      	mov	r1, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c0:	461a      	mov	r2, r3
 80095c2:	680b      	ldr	r3, [r1, #0]
 80095c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d10c      	bne.n	80095e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d104      	bne.n	80095dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f965 	bl	80098a4 <USB_SetDevSpeed>
 80095da:	e008      	b.n	80095ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095dc:	2101      	movs	r1, #1
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f960 	bl	80098a4 <USB_SetDevSpeed>
 80095e4:	e003      	b.n	80095ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095e6:	2103      	movs	r1, #3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f95b 	bl	80098a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ee:	2110      	movs	r1, #16
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f8f3 	bl	80097dc <USB_FlushTxFifo>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f91f 	bl	8009844 <USB_FlushRxFifo>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009616:	461a      	mov	r2, r3
 8009618:	2300      	movs	r3, #0
 800961a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	461a      	mov	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	461a      	mov	r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	e043      	b.n	80096c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800964c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009650:	d118      	bne.n	8009684 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	461a      	mov	r2, r3
 8009666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	e013      	b.n	8009696 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	461a      	mov	r2, r3
 800967c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	e008      	b.n	8009696 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009690:	461a      	mov	r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	461a      	mov	r2, r3
 80096a4:	2300      	movs	r3, #0
 80096a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b4:	461a      	mov	r2, r3
 80096b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	3301      	adds	r3, #1
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d3b7      	bcc.n	800963a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	e043      	b.n	8009758 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e6:	d118      	bne.n	800971a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	461a      	mov	r2, r3
 80096fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	e013      	b.n	800972c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	461a      	mov	r2, r3
 8009712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	e008      	b.n	800972c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	461a      	mov	r2, r3
 8009728:	2300      	movs	r3, #0
 800972a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	461a      	mov	r2, r3
 800974c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	429a      	cmp	r2, r3
 800975e:	d3b7      	bcc.n	80096d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800976e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f043 0210 	orr.w	r2, r3, #16
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <USB_DevInit+0x2b4>)
 800979a:	4313      	orrs	r3, r2
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f043 0208 	orr.w	r2, r3, #8
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d105      	bne.n	80097c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699a      	ldr	r2, [r3, #24]
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <USB_DevInit+0x2b8>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097d0:	b004      	add	sp, #16
 80097d2:	4770      	bx	lr
 80097d4:	803c3800 	.word	0x803c3800
 80097d8:	40000004 	.word	0x40000004

080097dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4a13      	ldr	r2, [pc, #76]	; (8009840 <USB_FlushTxFifo+0x64>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d901      	bls.n	80097fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e01b      	b.n	8009834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	daf2      	bge.n	80097ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	019b      	lsls	r3, r3, #6
 800980c:	f043 0220 	orr.w	r2, r3, #32
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4a08      	ldr	r2, [pc, #32]	; (8009840 <USB_FlushTxFifo+0x64>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d901      	bls.n	8009826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e006      	b.n	8009834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b20      	cmp	r3, #32
 8009830:	d0f0      	beq.n	8009814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	00030d40 	.word	0x00030d40

08009844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3301      	adds	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <USB_FlushRxFifo+0x5c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d901      	bls.n	8009862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e018      	b.n	8009894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	daf2      	bge.n	8009850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2210      	movs	r2, #16
 8009872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a08      	ldr	r2, [pc, #32]	; (80098a0 <USB_FlushRxFifo+0x5c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d901      	bls.n	8009886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e006      	b.n	8009894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b10      	cmp	r3, #16
 8009890:	d0f0      	beq.n	8009874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	00030d40 	.word	0x00030d40

080098a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c4:	4313      	orrs	r3, r2
 80098c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009904:	f043 0302 	orr.w	r3, r3, #2
 8009908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	f003 0301 	and.w	r3, r3, #1
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a13      	ldr	r2, [pc, #76]	; (8009998 <USB_CoreReset+0x64>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d901      	bls.n	8009952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e01b      	b.n	800998a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	daf2      	bge.n	8009940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	f043 0201 	orr.w	r2, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3301      	adds	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a09      	ldr	r2, [pc, #36]	; (8009998 <USB_CoreReset+0x64>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d901      	bls.n	800997c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e006      	b.n	800998a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	d0f0      	beq.n	800996a <USB_CoreReset+0x36>

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	00030d40 	.word	0x00030d40

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	; (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1b64      	subs	r4, r4, r5
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2600      	movs	r6, #0
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	; (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	; (80099e0 <__libc_init_array+0x44>)
 80099b0:	f000 f820 	bl	80099f4 <_init>
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2600      	movs	r6, #0
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	08009a54 	.word	0x08009a54
 80099d8:	08009a54 	.word	0x08009a54
 80099dc:	08009a54 	.word	0x08009a54
 80099e0:	08009a58 	.word	0x08009a58

080099e4 <memset>:
 80099e4:	4402      	add	r2, r0
 80099e6:	4603      	mov	r3, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <_init>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr

08009a00 <_fini>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	bf00      	nop
 8009a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a06:	bc08      	pop	{r3}
 8009a08:	469e      	mov	lr, r3
 8009a0a:	4770      	bx	lr
